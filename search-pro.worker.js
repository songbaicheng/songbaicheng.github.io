const nt="ENTRIES",T="KEYS",V="VALUES",F="";class D{constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case V:return this.value();case T:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return W(e,t,s,n,i,1,o,""),n},W=(e,t,s,n,o,u,i,r)=>{const h=u*i;t:for(const c of e.keys())if(c===F){const a=o[h-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let l=0;l<c.length;++l,++a){const p=c[l],f=i*a,g=f-i;let d=o[f];const m=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let _=m;_<y;++_){const b=p!==t[_],z=o[g+_]+ +b,A=o[g+_+1]+1,w=o[f+_]+1,L=o[f+_+1]=Math.min(z,A,w);L<d&&(d=L)}if(d>s)continue t}W(e.get(c),t,s,n,o,a,i,r+c)}};class C{constructor(t=new Map,s=""){this._size=void 0,this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=I(n);for(const i of o.keys())if(i!==F&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=O(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=O(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,T)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,M(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);let o=n.get(F);return o===void 0&&n.set(F,o=s()),o}values(){return new D(this,V)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},O=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return O(e.get(s),t.slice(s.length))},M=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==F&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const h=e.get(u);if(r===u.length)e=h;else{const c=new Map;c.set(u.slice(r),h),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)R(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},R=e=>{if(e.length===0)return;const[t,s]=I(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=I(e);n.set(o+t,s),n.delete(o)},I=e=>e[e.length-1],it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",P="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},q=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,lt=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),q(n.terms,u)}}return e},[P]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);q(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d:h}=u;return Math.log(1+(s-t+.5)/(t+.5))*(h+e*(i+1)/(e+i*(1-r+r*n/o)))},dt=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},ft={k:1.2,b:.7,d:.5},gt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},H={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:ft},mt={combineWith:P,prefix:(e,t,s)=>t===s.length-1},pt={batchSize:1e3,batchWait:10},J={minDirtFactor:.1,minDirtCount:20},Ft={...pt,...J};class _t{constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?Ft:t.autoVacuum;this._options={...gt,...t,autoVacuum:s,searchOptions:{...H,...t.searchOptions||{}},autoSuggestOptions:{...mt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=J,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const yt=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},U=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},At=(e,t,s,n)=>{if(!e._index.has(n)){U(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?U(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(ht[s])||new Map},B=(e,t,s,n,o,u,i,r,h=new Map)=>{if(o==null)return h;for(const c of Object.keys(u)){const a=u[c],l=e._fieldIds[c],p=o.get(l);if(p==null)continue;let f=p.size;const g=e._avgFieldLength[l];for(const d of p.keys()){if(!e._documentIds.has(d)){At(e,l,d,s),f-=1;continue}const m=i?i(e._documentIds.get(d),s,e._storedFields.get(d)):1;if(!m)continue;const y=p.get(d),_=e._fieldLength.get(d)[l],b=at(y,f,e._documentCount,_,g,r),z=n*a*m*b,A=h.get(d);if(A){A.score+=z,ct(A.terms,t);const w=N(A.match,s);w?w.push(c):A.match[s]=[c]}else h.set(d,{score:z,terms:[t],match:{[s]:[c]}})}}return h},Ct=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((d,m)=>({...d,[m]:N(n.boost,m)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:h}=n,{fuzzy:c,prefix:a}={...H.weights,...i},l=e._index.get(t.term),p=B(e,t.term,t.term,1,l,o,u,h);let f,g;if(t.prefix&&(f=e._index.atPrefix(t.term)),t.fuzzy){const d=t.fuzzy===!0?.2:t.fuzzy,m=d<1?Math.min(r,Math.round(t.term.length*d)):d;m&&(g=e._index.fuzzyGet(t.term,m))}if(f)for(const[d,m]of f){const y=d.length-t.term.length;if(!y)continue;g==null||g.delete(d);const _=a*d.length/(d.length+.3*y);B(e,t.term,d,_,m,o,u,h,p)}if(g)for(const d of g.keys()){const[m,y]=g.get(d);if(!y)continue;const _=c*d.length/(d.length+y);B(e,t.term,d,_,m,o,u,h,p)}return p},K=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},l=t.queries.map(p=>K(e,p,a));return Y(l,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:h}=i,c=r(t).flatMap(a=>h(a)).filter(a=>!!a).map(dt(i)).map(a=>Ct(e,a,i));return Y(c,i.combineWith)},X=(e,t,s={})=>{const n=K(e,t,s),o=[];for(const[u,{score:i,terms:r,match:h}]of n){const c=r.length,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(h),match:h};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return o.sort(G),o},Et=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of X(e,t,s)){const r=i.join(" "),h=n.get(r);h!=null?(h.score+=u,h.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:h}]of n)o.push({suggestion:u,terms:r,score:i/h});return o.sort(G),o},zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:h,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const l=new _t(a);l._documentCount=t,l._nextId=s,l._documentIds=k(n),l._idToShortId=new Map,l._fieldIds=o,l._fieldLength=k(u),l._avgFieldLength=i,l._storedFields=k(r),l._dirtCount=h||0,l._index=new C;for(const[p,f]of l._documentIds)l._idToShortId.set(f,p);for(const[p,f]of e){const g=new Map;for(const d of Object.keys(f)){let m=f[d];c===1&&(m=m.ds),g.set(parseInt(d,10),k(m))}l._index.set(p,g)}return l},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let l="";i===0?l=c.length>20?`… ${c.slice(-20)}`:c:a?l=c.length+i>100?`${c.slice(0,100-i)}… `:c:l=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,l&&o.push(l),i+=l.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let h=s.indexOf(n,u);if(h===-1)return null;for(;h>=0;){const c=h+n.length;if(r(e.slice(u,h)),u=c,i>100)break;h=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return X(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,h=u.includes("@"),c=u.includes("#"),[a,l]=u.split(/[#@]/),{contents:p}=n[a]??={title:"",contents:[]};if(h)p.push([{type:"customField",key:a,index:l,display:i.map(f=>o.c.map(g=>j(g,f))).flat().filter(f=>f!==null)},r]);else{const f=i.map(g=>j(o.h,g)).filter(g=>g!==null);if(f.length&&p.push([{type:c?"heading":"title",key:a,...c&&{anchor:l},display:f},r]),"t"in o)for(const g of o.t){const d=i.map(m=>j(g,m)).filter(m=>m!==null);d.length&&p.push([{type:"text",key:a,...c&&{anchor:l},display:d},r])}}}),Q(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):kt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=yt(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Et(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":622,\"nextId\":622,\"documentIds\":{\"0\":\"v-2d0a776e\",\"1\":\"v-b26ff390\",\"2\":\"v-ef7dd9f0\",\"3\":\"v-d7188082\",\"4\":\"v-59c15547\",\"5\":\"v-15fa55da\",\"6\":\"v-7b4f6de1\",\"7\":\"v-717672e6\",\"8\":\"v-1d310a8e\",\"9\":\"v-1d310a8e#简单句\",\"10\":\"v-1d310a8e#句子结构\",\"11\":\"v-1d310a8e#主谓结构\",\"12\":\"v-1d310a8e#主谓宾结构\",\"13\":\"v-1d310a8e#主谓双宾结构\",\"14\":\"v-1d310a8e#主谓宾补结构\",\"15\":\"v-1d310a8e#主系表结构\",\"16\":\"v-1d310a8e#三态加一否\",\"17\":\"v-1d310a8e#时态\",\"18\":\"v-1d310a8e#一般状态\",\"19\":\"v-1d310a8e#一般过去时\",\"20\":\"v-1d310a8e#一般现在时\",\"21\":\"v-1d310a8e#一般将来时\",\"22\":\"v-1d310a8e#一般-过去将来时\",\"23\":\"v-1d310a8e#进行状态\",\"24\":\"v-1d310a8e#过去进行时\",\"25\":\"v-1d310a8e#现在进行时\",\"26\":\"v-1d310a8e#将来进行时\",\"27\":\"v-1d310a8e#完成状态\",\"28\":\"v-1d310a8e#过去完成时\",\"29\":\"v-1d310a8e#现在完成时\",\"30\":\"v-1d310a8e#现在完成时和一般过去时的区别\",\"31\":\"v-1d310a8e#将来完成时\",\"32\":\"v-1d310a8e#完成进行状态\",\"33\":\"v-1d310a8e#过去完成进行时\",\"34\":\"v-1d310a8e#现在完成进行时\",\"35\":\"v-1d310a8e#将来完成进行时\",\"36\":\"v-1d310a8e#情态\",\"37\":\"v-1d310a8e#表达说话的语气\",\"38\":\"v-1d310a8e#表达推测的含义\",\"39\":\"v-1d310a8e#语态\",\"40\":\"v-1d310a8e#被动\",\"41\":\"v-1d310a8e#否定\",\"42\":\"v-1d310a8e#强调\",\"43\":\"v-1d310a8e#主语的变化\",\"44\":\"v-1d310a8e#名词-代词\",\"45\":\"v-1d310a8e#非谓语动词\",\"46\":\"v-1d310a8e#doing\",\"47\":\"v-1d310a8e#to-do\",\"48\":\"v-1d310a8e#并列多个\",\"49\":\"v-1d310a8e#同位语\",\"50\":\"v-1d310a8e#插入语\",\"51\":\"v-1d310a8e#简单句的限定词\",\"52\":\"v-1d310a8e#限定词\",\"53\":\"v-1d310a8e#形容词和副词\",\"54\":\"v-1d310a8e#原级比较\",\"55\":\"v-1d310a8e#比较级\",\"56\":\"v-1d310a8e#最高级\",\"57\":\"v-1d310a8e#介词短语\",\"58\":\"v-1d310a8e#长难句\",\"59\":\"v-1d310a8e#并列句\",\"60\":\"v-1d310a8e#复合句\",\"61\":\"v-1d310a8e#表语从句\",\"62\":\"v-1d310a8e#名词性从句\",\"63\":\"v-1d310a8e#宾语从句\",\"64\":\"v-1d310a8e#主语从句\",\"65\":\"v-1d310a8e#同位语从句\",\"66\":\"v-1d310a8e#定语从句\",\"67\":\"v-1d310a8e#状语从句\",\"68\":\"v-1d310a8e#特殊句式\",\"69\":\"v-1d310a8e#虚拟\",\"70\":\"v-1d310a8e#倒装\",\"71\":\"v-1d310a8e#强调-1\",\"72\":\"v-467a75a0\",\"73\":\"v-467a75a0#书信\",\"74\":\"v-467a75a0#称呼\",\"75\":\"v-467a75a0#正文\",\"76\":\"v-467a75a0#致辞\",\"77\":\"v-467a75a0#署名\",\"78\":\"v-467a75a0#告示\",\"79\":\"v-292f52e2\",\"80\":\"v-e37421f0\",\"81\":\"v-31643358\",\"82\":\"v-8fa12df2\",\"83\":\"v-8fa12df2#快速入门\",\"84\":\"v-8fa12df2#技术框架\",\"85\":\"v-8fa12df2#步伐\",\"86\":\"v-8fa12df2#正手攻球\",\"87\":\"v-8fa12df2#反手推挡\",\"88\":\"v-8fa12df2#正手拉球\",\"89\":\"v-8fa12df2#反手拉球\",\"90\":\"v-8fa12df2#其他细节\",\"91\":\"v-5f4d0e14\",\"92\":\"v-5f4d0e14#《hello-算法》\",\"93\":\"v-3d204cde\",\"94\":\"v-3d204cde#mysql\",\"95\":\"v-2c1d32ca\",\"96\":\"v-2c1d32ca#java基础\",\"97\":\"v-4f15266d\",\"98\":\"v-4f15266d#版本控制\",\"99\":\"v-4f15266d#《pro-git》\",\"100\":\"v-4f15266d#设计模式\",\"101\":\"v-4f15266d#《head-first-design-patterns》\",\"102\":\"v-51e5066d\",\"103\":\"v-51e5066d#介绍\",\"104\":\"v-0de45d8d\",\"105\":\"v-0de45d8d#项目介绍\",\"106\":\"v-0de45d8d#优缺点\",\"107\":\"v-0de45d8d#优点\",\"108\":\"v-0de45d8d#缺点\",\"109\":\"v-0de45d8d#项目功能\",\"110\":\"v-0de45d8d#图片审查\",\"111\":\"v-43f8194e\",\"112\":\"v-f55afa64\",\"113\":\"v-f55afa64#deepl\",\"114\":\"v-6cfd4528\",\"115\":\"v-6cfd4528#intellij-idea\",\"116\":\"v-705e992c\",\"117\":\"v-705e992c#_1-规范命名\",\"118\":\"v-7871444e\",\"119\":\"v-7871444e#大数据学习路线\",\"120\":\"v-a770974a\",\"121\":\"v-a770974a#简介\",\"122\":\"v-7458482f\",\"123\":\"v-0ffd9427\",\"124\":\"v-0ffd9427#什么是责任链模式\",\"125\":\"v-0ffd9427#角色\",\"126\":\"v-0ffd9427#优点\",\"127\":\"v-0ffd9427#缺点\",\"128\":\"v-0ffd9427#场景\",\"129\":\"v-0ffd9427#应用场景\",\"130\":\"v-0ffd9427#用责任链实现请求内容校验\",\"131\":\"v-5ff6fff4\",\"132\":\"v-5ff6fff4#什么是观察者模式\",\"133\":\"v-5ff6fff4#实现\",\"134\":\"v-5ff6fff4#jdk版\",\"135\":\"v-5ff6fff4#spring版\",\"136\":\"v-5ff6fff4#总结\",\"137\":\"v-37af7db9\",\"138\":\"v-723727f0\",\"139\":\"v-723727f0#关于-ddd\",\"140\":\"v-723727f0#事件风暴\",\"141\":\"v-723727f0#关键特点\",\"142\":\"v-723727f0#步骤\",\"143\":\"v-723727f0#核心概念\",\"144\":\"v-723727f0#借鉴思想\",\"145\":\"v-723727f0#四层架构\",\"146\":\"v-5a788904\",\"147\":\"v-5a788904#碎谈\",\"148\":\"v-5a788904#我与前端\",\"149\":\"v-a45d56aa\",\"150\":\"v-a45d56aa#聊聊运维面板\",\"151\":\"v-a45d56aa#快速开始\",\"152\":\"v-a45d56aa#环境准备和下载\",\"153\":\"v-a45d56aa#启动展示\",\"154\":\"v-0e9836cc\",\"155\":\"v-0e9836cc#快速开始\",\"156\":\"v-0e9836cc#优雅起停-nginx\",\"157\":\"v-0e9836cc#认识目录\",\"158\":\"v-0e9836cc#工作模式\",\"159\":\"v-0e9836cc#配置文件详解\",\"160\":\"v-0e9836cc#自定义虚拟主机域名\",\"161\":\"v-0e9836cc#虚拟主机域名匹配规则\",\"162\":\"v-0e9836cc#反向代理\",\"163\":\"v-0e9836cc#负载均衡\",\"164\":\"v-0e9836cc#轮训\",\"165\":\"v-0e9836cc#权重\",\"166\":\"v-0e9836cc#ip-hash-不常用\",\"167\":\"v-0e9836cc#least-hash-不常用\",\"168\":\"v-0e9836cc#url-hash-不常用\",\"169\":\"v-0e9836cc#fair-不常用\",\"170\":\"v-0e9836cc#动静分离\",\"171\":\"v-0e9836cc#url-rewrite\",\"172\":\"v-0e9836cc#防盗链\",\"173\":\"v-0e9836cc#高可用配置-ha\",\"174\":\"v-0e9836cc#扩容\",\"175\":\"v-0e9836cc#ip-hash\",\"176\":\"v-0e9836cc#request-uri\",\"177\":\"v-0e9836cc#cookie-jessionid\",\"178\":\"v-0e9836cc#sticky\",\"179\":\"v-ff02ee8a\",\"180\":\"v-4b6bea47\",\"181\":\"v-4b6bea47#简介\",\"182\":\"v-5e39eb1e\",\"183\":\"v-5e39eb1e#基本概念\",\"184\":\"v-5e39eb1e#安装\",\"185\":\"v-5e39eb1e#下载并安装\",\"186\":\"v-63fda19d\",\"187\":\"v-63fda19d#linux-关机重启\",\"188\":\"v-63fda19d#ssh-key\",\"189\":\"v-63fda19d#自定义快捷指令\",\"190\":\"v-63fda19d#后台运行命令\",\"191\":\"v-63fda19d#查看磁盘空间\",\"192\":\"v-63fda19d#创建和查看定时任务\",\"193\":\"v-63fda19d#解压缩命令\",\"194\":\"v-63fda19d#vim-命令\",\"195\":\"v-d0024884\",\"196\":\"v-411daaa2\",\"197\":\"v-411daaa2#引言\",\"198\":\"v-1fbb484d\",\"199\":\"v-1fbb484d#特点\",\"200\":\"v-1fbb484d#常用场景\",\"201\":\"v-46f59636\",\"202\":\"v-46f59636#引言\",\"203\":\"v-46f59636#重构思路\",\"204\":\"v-46f59636#框架选型\",\"205\":\"v-46f59636#业务梳理\",\"206\":\"v-46f59636#方案设计\",\"207\":\"v-46f59636#线程池方案\",\"208\":\"v-46f59636#价格的接收与筛选\",\"209\":\"v-46f59636#价格的处理与转发\",\"210\":\"v-46f59636#代码实现\",\"211\":\"v-46f59636#线程池\",\"212\":\"v-46f59636#价格处理与转发\",\"213\":\"v-5e0a1ce0\",\"214\":\"v-5e0a1ce0#实操\",\"215\":\"v-5e0a1ce0#总结\",\"216\":\"v-deff7d26\",\"217\":\"v-deff7d26#对ant的理解\",\"218\":\"v-deff7d26#工作中遇到的ant打包需求\",\"219\":\"v-deff7d26#构建war包和jar包中的manifest文件添加打包git分支明细\",\"220\":\"v-deff7d26#脚本中逻辑判断\",\"221\":\"v-29368c3c\",\"222\":\"v-29368c3c#浅聊aop\",\"223\":\"v-29368c3c#工作中使用到-aop-的例子\",\"224\":\"v-29368c3c#自定义日志注解\",\"225\":\"v-29368c3c#返回对象脱敏\",\"226\":\"v-a7555dda\",\"227\":\"v-a7555dda#聊聊反射\",\"228\":\"v-a7555dda#工作中使用反射的例子\",\"229\":\"v-a7555dda#处理抽象对象的字段数据\",\"230\":\"v-04a80627\",\"231\":\"v-04a80627#关于定时任务的使用场景\",\"232\":\"v-04a80627#工作中遇到的定时任务场景\",\"233\":\"v-04a80627#定期清理审批单\",\"234\":\"v-04a80627#定期获取价格文件\",\"235\":\"v-3ce6eff8\",\"236\":\"v-3ce6eff8#定时删除过期日志\",\"237\":\"v-3ce6eff8#比较声明环境文件是否生效\",\"238\":\"v-3c645f4e\",\"239\":\"v-3c645f4e#引言\",\"240\":\"v-3c645f4e#质量门襟要求\",\"241\":\"v-3c645f4e#规范的单元测试\",\"242\":\"v-3c645f4e#屏蔽内容限制\",\"243\":\"v-3c645f4e#用例强制要求\",\"244\":\"v-3c645f4e#用例建议要求\",\"245\":\"v-3c645f4e#单元测试用例思路\",\"246\":\"v-3c645f4e#mock\",\"247\":\"v-3c645f4e#mock-单元测试实践\",\"248\":\"v-3c645f4e#mockito\",\"249\":\"v-3c645f4e#导入依赖\",\"250\":\"v-3c645f4e#测试代码\",\"251\":\"v-3c645f4e#常用方法\",\"252\":\"v-3c645f4e#mock-class-t-classtomock\",\"253\":\"v-3c645f4e#when-mock-method-thenreturn-value\",\"254\":\"v-3c645f4e#verify-mock-method\",\"255\":\"v-3c645f4e#verify-mock-times-n-method\",\"256\":\"v-3c645f4e#verify-mock-atleast-n-method\",\"257\":\"v-3c645f4e#verify-mock-never-method\",\"258\":\"v-3c645f4e#verifynomoreinteractions-mock\",\"259\":\"v-3c645f4e#dothrow-exception-when-mock-method\",\"260\":\"v-3c645f4e#doanswer-answer-when-mock-method\",\"261\":\"v-3c645f4e#powermock\",\"262\":\"v-3c645f4e#导入依赖-1\",\"263\":\"v-3c645f4e#测试代码-1\",\"264\":\"v-3c645f4e#总结\",\"265\":\"v-33504790\",\"266\":\"v-33504790#浅聊-web-service\",\"267\":\"v-33504790#web-service-三要素\",\"268\":\"v-33504790#uddi\",\"269\":\"v-33504790#wsdl\",\"270\":\"v-33504790#soap\",\"271\":\"v-33504790#web-service-规范\",\"272\":\"v-33504790#快速开始\",\"273\":\"v-33504790#_1-创建-web-服务\",\"274\":\"v-33504790#_2-访问-wsdl-文件\",\"275\":\"v-33504790#_3-生成客户端代码\",\"276\":\"v-33504790#使用-jdk-自带的-wsimport-命令\",\"277\":\"v-33504790#ide-工具生成客户端\",\"278\":\"v-33504790#_4-使用客户端\",\"279\":\"v-69456ad8\",\"280\":\"v-69456ad8#yaml-资源文件读取问题\",\"281\":\"v-10094cf2\",\"282\":\"v-10094cf2#糟糕的-svn-仓库\",\"283\":\"v-10094cf2#git分支开发规约\",\"284\":\"v-10094cf2#git分支含义\",\"285\":\"v-10094cf2#git仓库的创建和使用\",\"286\":\"v-10094cf2#仓库的创建\",\"287\":\"v-10094cf2#仓库的使用\",\"288\":\"v-10094cf2#当然每个公司和团队的git流程多少都会存在区别-但都是对于项目上线流程的妥协-所以无论流程是如何的-只要我们能保证代码上线的正常流转-就是好的流程。\",\"289\":\"v-10094cf2#常见场景处理步骤\",\"290\":\"v-10094cf2#讲在最后\",\"291\":\"v-2c8128ac\",\"292\":\"v-a6ca4500\",\"293\":\"v-a6ca4500#前世今生\",\"294\":\"v-a6ca4500#核心概念\",\"295\":\"v-23412760\",\"296\":\"v-23412760#知识总览\",\"297\":\"v-23412760#快速开始\",\"298\":\"v-23412760#let-与-const\",\"299\":\"v-23412760#解构赋值\",\"300\":\"v-23412760#数组模型的解构\",\"301\":\"v-23412760#对象模型的解构\",\"302\":\"v-23412760#symbol\",\"303\":\"v-23412760#使用场景\",\"304\":\"v-23412760#作为属性名\",\"305\":\"v-23412760#定义常量\",\"306\":\"v-23412760#map-与-set\",\"307\":\"v-23412760#map\",\"308\":\"v-23412760#map-的迭代\",\"309\":\"v-23412760#map-小技巧\",\"310\":\"v-23412760#set\",\"311\":\"v-23412760#set-小技巧\",\"312\":\"v-23412760#reflect-与-proxy\",\"313\":\"v-23412760#proxy\",\"314\":\"v-23412760#reflect\",\"315\":\"v-23412760#组合使用\",\"316\":\"v-23412760#函数\",\"317\":\"v-23412760#class-类\",\"318\":\"v-23412760#模块\",\"319\":\"v-23412760#promise-对象\",\"320\":\"v-23412760#generator-函数\",\"321\":\"v-23412760#async-函数\",\"322\":\"v-71e2fbd0\",\"323\":\"v-71e2fbd0#走进-layout-布局\",\"324\":\"v-71e2fbd0#bem-架构\",\"325\":\"v-71e2fbd0#sass\",\"326\":\"v-760032d5\",\"327\":\"v-760032d5#前言\",\"328\":\"v-cc79568a\",\"329\":\"v-cc79568a#关于-pinia-和-vuex\",\"330\":\"v-1ebfa306\",\"331\":\"v-1ebfa306#vue3-和-vue-2\",\"332\":\"v-1ebfa306#快速开始\",\"333\":\"v-1ebfa306#三种书写风格\",\"334\":\"v-1ebfa306#option-api\",\"335\":\"v-1ebfa306#setup\",\"336\":\"v-1ebfa306#script-setup\",\"337\":\"v-1ebfa306#指令\",\"338\":\"v-1ebfa306#v-text\",\"339\":\"v-1ebfa306#v-html\",\"340\":\"v-1ebfa306#v-if\",\"341\":\"v-1ebfa306#v-show\",\"342\":\"v-1ebfa306#v-on\",\"343\":\"v-1ebfa306#v-bind\",\"344\":\"v-1ebfa306#v-model\",\"345\":\"v-1ebfa306#v-for\",\"346\":\"v-1ebfa306#虚拟-dom-和-dom-diff-算法\",\"347\":\"v-1ebfa306#响应式\",\"348\":\"v-1ebfa306#ref\",\"349\":\"v-1ebfa306#reactive\",\"350\":\"v-1ebfa306#toref\",\"351\":\"v-1ebfa306#计算属性\",\"352\":\"v-1ebfa306#监听器\",\"353\":\"v-1ebfa306#生命周期\",\"354\":\"v-1ebfa306#父子模块传值\",\"355\":\"v-1ebfa306#动态组件\",\"356\":\"v-1ebfa306#过度和动画\",\"357\":\"v-1ebfa306#依赖注入\",\"358\":\"v-1ebfa306#组件通信\",\"359\":\"v-1ebfa306#自定义指令\",\"360\":\"v-1ebfa306#全局变量和方法\",\"361\":\"v-1ebfa306#第三方ui\",\"362\":\"v-6f4fdff4\",\"363\":\"v-5eb35e22\",\"364\":\"v-5eb35e22#快速搭建\",\"365\":\"v-5eb35e22#基础配置\",\"366\":\"v-2f2e7d4e\",\"367\":\"v-4eca2cb4\",\"368\":\"v-4eca2cb4#背景\",\"369\":\"v-c0d83b4c\",\"370\":\"v-c0d83b4c#java-并发机制基础\",\"371\":\"v-c0d83b4c#volatile\",\"372\":\"v-c0d83b4c#synchronized\",\"373\":\"v-c0d83b4c#偏向锁\",\"374\":\"v-c0d83b4c#轻量级锁\",\"375\":\"v-c0d83b4c#总结\",\"376\":\"v-c0d83b4c#原子操作\",\"377\":\"v-c0d83b4c#总结-1\",\"378\":\"v-c0d83b4c#java-内存模型\",\"379\":\"v-c0d83b4c#内存模型的抽象结构\",\"380\":\"v-c0d83b4c#指令重排\",\"381\":\"v-8fb48ca6\",\"382\":\"v-8fb48ca6#引言\",\"383\":\"v-8fb48ca6#走进动态代理\",\"384\":\"v-8fb48ca6#什么是动态代理\",\"385\":\"v-8fb48ca6#如何实现动态代理\",\"386\":\"v-8fb48ca6#基于接口实现动态代理\",\"387\":\"v-8fb48ca6#示例思路\",\"388\":\"v-8fb48ca6#实例代码\",\"389\":\"v-8fb48ca6#基于类实现动态代理\",\"390\":\"v-8fb48ca6#示例思路-1\",\"391\":\"v-8fb48ca6#实例代码-1\",\"392\":\"v-8fb48ca6#总结和延伸\",\"393\":\"v-2d435077\",\"394\":\"v-2d435077#interface\",\"395\":\"v-2d435077#optional\",\"396\":\"v-2d435077#创建一个-optional\",\"397\":\"v-2d435077#判断一个-optional-是否为空\",\"398\":\"v-2d435077#获取一个-optional-的值\",\"399\":\"v-2d435077#get-如果该-optional-不为空则返回该对象-否则抛出-nullpointerexception-异常。\",\"400\":\"v-2d435077#orelse-如果该-optional-不为空则返回该对象-否则返回指定的默认值。\",\"401\":\"v-2d435077#orelseget-如果该-optional-不为空则返回该对象-否则调用指定的-supplier-获取默认值。\",\"402\":\"v-2d435077#map-如果有值-则对其执行调用映射函数得到返回值。如果返回值不为-null-则创建包含映射返回值的-optional-作为-map-方法返回值-否则返回空-optional。\",\"403\":\"v-2d435077#filter-如果值存在-并且这个值匹配给定的条件-返回一个-optional-用以描述这个值-否则返回一个空的-optional。\",\"404\":\"v-2d435077#orelsethrow-如果该-optional-不为空则返回对象-否则抛出指定的异常。\",\"405\":\"v-2d435077#反例\",\"406\":\"v-2d435077#正例\",\"407\":\"v-2d435077#总结\",\"408\":\"v-62cb78e8\",\"409\":\"v-62cb78e8#servlet-是什么\",\"410\":\"v-62cb78e8#快速开始\",\"411\":\"v-62cb78e8#servlet-生命周期\",\"412\":\"v-62cb78e8#init-方法\",\"413\":\"v-62cb78e8#service-方法\",\"414\":\"v-62cb78e8#doget-方法\",\"415\":\"v-62cb78e8#dopost-方法\",\"416\":\"v-62cb78e8#destroy-方法\",\"417\":\"v-62cb78e8#实现-servlet\",\"418\":\"v-21e0c5b5\",\"419\":\"v-21e0c5b5#碎谈\",\"420\":\"v-21e0c5b5#微服务的出现\",\"421\":\"v-21e0c5b5#如何学习微服务\",\"422\":\"v-bbedb96c\",\"423\":\"v-bbedb96c#浅聊微服务网关\",\"424\":\"v-d507a44c\",\"425\":\"v-d507a44c#浅聊微服务配置和注册中心\",\"426\":\"v-d507a44c#配置中心\",\"427\":\"v-d507a44c#注册中心\",\"428\":\"v-d507a44c#微服务中的使用\",\"429\":\"v-a716364c\",\"430\":\"v-a716364c#介绍\",\"431\":\"v-a716364c#快速开始\",\"432\":\"v-a716364c#服务端\",\"433\":\"v-a716364c#引入依赖\",\"434\":\"v-a716364c#简单配置\",\"435\":\"v-a716364c#客户端\",\"436\":\"v-a716364c#引入依赖-1\",\"437\":\"v-a716364c#简单配置-1\",\"438\":\"v-7a2221c4\",\"439\":\"v-7a2221c4#关于-spring-日志\",\"440\":\"v-2a29d3f0\",\"441\":\"v-2a29d3f0#引言\",\"442\":\"v-2a29d3f0#快速开始\",\"443\":\"v-2a29d3f0#添加依赖\",\"444\":\"v-2a29d3f0#工具方法服务类和具体实现类\",\"445\":\"v-2a29d3f0#配置类实现\",\"446\":\"v-2a29d3f0#总结\",\"447\":\"v-885f3b64\",\"448\":\"v-885f3b64#前言\",\"449\":\"v-de72cc3c\",\"450\":\"v-de72cc3c#介绍\",\"451\":\"v-de72cc3c#oauth2\",\"452\":\"v-df1d71f0\",\"453\":\"v-df1d71f0#介绍\",\"454\":\"v-057dbb30\",\"455\":\"v-057dbb30#算法无处不在\",\"456\":\"v-057dbb30#什么是算法\",\"457\":\"v-057dbb30#算法的效率\",\"458\":\"v-057dbb30#时间复杂度\",\"459\":\"v-057dbb30#空间复杂度\",\"460\":\"v-4e262b7e\",\"461\":\"v-71a60958\",\"462\":\"v-71a60958#查找的基本概念\",\"463\":\"v-71a60958#顺序查找\",\"464\":\"v-71a60958#折半查找-二分查找\",\"465\":\"v-71a60958#分块查找\",\"466\":\"v-71a60958#树型查找\",\"467\":\"v-71a60958#二叉排序树-bst\",\"468\":\"v-71a60958#查找-1\",\"469\":\"v-71a60958#插入\",\"470\":\"v-71a60958#删除\",\"471\":\"v-71a60958#效率分析\",\"472\":\"v-71a60958#平衡二叉树-avl\",\"473\":\"v-71a60958#插入-1\",\"474\":\"v-71a60958#删除-1\",\"475\":\"v-71a60958#查找-2\",\"476\":\"v-71a60958#红黑树\",\"477\":\"v-71a60958#b树和b-树\",\"478\":\"v-71a60958#散列表\",\"479\":\"v-5d3a0abc\",\"480\":\"v-5d3a0abc#_2578-最小和分割\",\"481\":\"v-5d3a0abc#题目内容\",\"482\":\"v-5d3a0abc#注意\",\"483\":\"v-5d3a0abc#示例\",\"484\":\"v-5d3a0abc#题解思路\",\"485\":\"v-5d3a0abc#题解代码\",\"486\":\"v-574d3093\",\"487\":\"v-574d3093#排序的概念\",\"488\":\"v-574d3093#插入排序\",\"489\":\"v-574d3093#直接插入排序\",\"490\":\"v-6b82183c\",\"491\":\"v-6b82183c#知识框架\",\"492\":\"v-6b82183c#基本概念和术语\",\"493\":\"v-6b82183c#数据结构三要素\",\"494\":\"v-6b82183c#逻辑结构\",\"495\":\"v-6b82183c#存储结构\",\"496\":\"v-6b82183c#数据的运算\",\"497\":\"v-8ed0d54a\",\"498\":\"v-8ed0d54a#数组\",\"499\":\"v-8ed0d54a#特殊矩阵\",\"500\":\"v-8ed0d54a#对称矩阵\",\"501\":\"v-8ed0d54a#三角矩阵\",\"502\":\"v-8ed0d54a#三对角矩阵\",\"503\":\"v-8ed0d54a#稀疏矩阵\",\"504\":\"v-050aea8f\",\"505\":\"v-050aea8f#基本定义\",\"506\":\"v-050aea8f#基本操作\",\"507\":\"v-050aea8f#线性表的顺序表示\",\"508\":\"v-050aea8f#顺序表的定义\",\"509\":\"v-050aea8f#顺序表的实现\",\"510\":\"v-050aea8f#线性表的链式表示\",\"511\":\"v-050aea8f#单链表\",\"512\":\"v-050aea8f#头插法\",\"513\":\"v-050aea8f#尾插法\",\"514\":\"v-050aea8f#查找第i个结点\",\"515\":\"v-050aea8f#查找某个元素结点\",\"516\":\"v-050aea8f#插入结点\",\"517\":\"v-050aea8f#删除结点\",\"518\":\"v-050aea8f#求表长\",\"519\":\"v-050aea8f#双链表\",\"520\":\"v-050aea8f#双链表的插入\",\"521\":\"v-050aea8f#双链表的删除\",\"522\":\"v-050aea8f#循环链表\",\"523\":\"v-050aea8f#循环单链表\",\"524\":\"v-050aea8f#循环双链表\",\"525\":\"v-050aea8f#静态链表\",\"526\":\"v-050aea8f#顺序表和链表的比较\",\"527\":\"v-3644f0d7\",\"528\":\"v-3644f0d7#图的基本概念\",\"529\":\"v-3644f0d7#有向图和无向图\",\"530\":\"v-3644f0d7#简单图、多重图\",\"531\":\"v-3644f0d7#完全图\",\"532\":\"v-3644f0d7#子图\",\"533\":\"v-3644f0d7#连通、连通图和连通分量\",\"534\":\"v-3644f0d7#强连通图和强连通分量\",\"535\":\"v-3644f0d7#生成树和生成森林\",\"536\":\"v-3644f0d7#顶点的度、入度和出度\",\"537\":\"v-3644f0d7#边的权和网\",\"538\":\"v-3644f0d7#稠密图和稀疏图\",\"539\":\"v-3644f0d7#路径、路径长度和回路\",\"540\":\"v-3644f0d7#简单路径和简单回路\",\"541\":\"v-3644f0d7#距离\",\"542\":\"v-3644f0d7#有向树\",\"543\":\"v-3644f0d7#图的存储及基本操作\",\"544\":\"v-3644f0d7#邻接矩阵法\",\"545\":\"v-3644f0d7#邻接表法\",\"546\":\"v-3644f0d7#十字链表\",\"547\":\"v-3644f0d7#邻接多重表\",\"548\":\"v-3644f0d7#图的基本操作\",\"549\":\"v-3644f0d7#图的遍历\",\"550\":\"v-3644f0d7#广度优先搜索\",\"551\":\"v-3644f0d7#深度优先搜索\",\"552\":\"v-3644f0d7#图的遍历与连通性\",\"553\":\"v-373227a4\",\"554\":\"v-373227a4#基本概念\",\"555\":\"v-373227a4#基础操作\",\"556\":\"v-373227a4#队列的顺序存储\",\"557\":\"v-373227a4#循环队列\",\"558\":\"v-373227a4#队列的链式存储\",\"559\":\"v-373227a4#双端队列\",\"560\":\"v-373227a4#双端队列经典问题\",\"561\":\"v-a5dce1ee\",\"562\":\"v-a5dce1ee#栈在括号匹配的应用\",\"563\":\"v-a5dce1ee#栈在表达式求值的应用\",\"564\":\"v-a5dce1ee#栈在递归中的应用\",\"565\":\"v-a5dce1ee#队列在层次遍历中的应用\",\"566\":\"v-a5dce1ee#队列在计算机系统中的应用\",\"567\":\"v-3e08d08d\",\"568\":\"v-3e08d08d#基本概念\",\"569\":\"v-3e08d08d#基本操作\",\"570\":\"v-3e08d08d#栈的顺序存储\",\"571\":\"v-3e08d08d#共享栈\",\"572\":\"v-3e08d08d#栈的链式存储\",\"573\":\"v-70b824a8\",\"574\":\"v-70b824a8#串的存储结构\",\"575\":\"v-70b824a8#定长顺序存储\",\"576\":\"v-70b824a8#堆分配存储\",\"577\":\"v-70b824a8#块链存储\",\"578\":\"v-70b824a8#串的基本操作\",\"579\":\"v-ec9880a8\",\"580\":\"v-ec9880a8#哈夫曼树和哈夫曼码\",\"581\":\"v-ec9880a8#哈夫曼树的构造\",\"582\":\"v-ec9880a8#哈夫曼编码\",\"583\":\"v-ec9880a8#并查集\",\"584\":\"v-ec806982\",\"585\":\"v-ec806982#树的基本概念\",\"586\":\"v-ec806982#基本术语\",\"587\":\"v-ec806982#基本性质\",\"588\":\"v-ec806982#二叉树\",\"589\":\"v-ec806982#几种特殊的二叉树\",\"590\":\"v-ec806982#二叉树的性质\",\"591\":\"v-ec806982#二叉树的存储\",\"592\":\"v-ec806982#顺序存储\",\"593\":\"v-ec806982#链式存储\",\"594\":\"v-ec806982#二叉树的遍历\",\"595\":\"v-ec806982#由遍历序列构造二叉树\",\"596\":\"v-ec806982#线索二叉树\",\"597\":\"v-ec806982#树、森林\",\"598\":\"v-ec806982#树的存储结构\",\"599\":\"v-ec806982#双亲表示法\",\"600\":\"v-ec806982#孩子表示法\",\"601\":\"v-ec806982#孩子兄弟表示法\",\"602\":\"v-ec806982#树、森林与二叉树的转换\",\"603\":\"v-ec806982#树和森林的遍历\",\"604\":\"v-02b84066\",\"605\":\"v-694bb32d\",\"606\":\"v-8df12f38\",\"607\":\"v-1d5b1ebc\",\"608\":\"v-c473464c\",\"609\":\"v-d3adb8da\",\"610\":\"v-4b46f30a\",\"611\":\"v-6f4aa5ca\",\"612\":\"v-209960d8\",\"613\":\"v-a89938aa\",\"614\":\"v-46e2430e\",\"615\":\"v-57e456bf\",\"616\":\"v-79537822\",\"617\":\"v-46c2d598\",\"618\":\"v-f451949a\",\"619\":\"v-5408caaf\",\"620\":\"v-efe03efa\",\"621\":\"v-6b3735f8\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[2,7],\"1\":[1],\"2\":[1,28],\"3\":[1,18],\"4\":[1,13],\"5\":[1],\"6\":[1],\"7\":[1],\"8\":[2],\"9\":[1],\"10\":[1],\"11\":[1],\"12\":[1],\"13\":[1],\"14\":[1],\"15\":[1],\"16\":[1],\"17\":[1],\"18\":[1],\"19\":[1],\"20\":[1],\"21\":[1],\"22\":[3],\"23\":[1],\"24\":[1],\"25\":[1],\"26\":[1],\"27\":[1],\"28\":[1],\"29\":[1],\"30\":[1],\"31\":[1],\"32\":[1],\"33\":[1],\"34\":[1],\"35\":[1],\"36\":[1],\"37\":[1],\"38\":[1],\"39\":[1],\"40\":[1],\"41\":[1],\"42\":[1],\"43\":[1],\"44\":[2],\"45\":[3],\"46\":[1],\"47\":[2],\"48\":[1],\"49\":[3],\"50\":[3],\"51\":[1],\"52\":[3],\"53\":[1],\"54\":[1],\"55\":[1],\"56\":[1],\"57\":[1],\"58\":[1],\"59\":[1],\"60\":[1],\"61\":[1],\"62\":[1],\"63\":[1],\"64\":[1],\"65\":[1],\"66\":[1],\"67\":[1],\"68\":[1],\"69\":[1],\"70\":[1],\"71\":[1],\"72\":[2],\"73\":[1],\"74\":[1],\"75\":[1],\"76\":[1],\"77\":[1],\"78\":[1],\"79\":[1],\"80\":[1],\"81\":[1],\"82\":[1],\"83\":[1],\"84\":[1],\"85\":[1],\"86\":[1],\"87\":[1],\"88\":[1],\"89\":[1],\"90\":[1],\"91\":[1,11],\"92\":[3,17],\"93\":[1,23],\"94\":[1,14],\"95\":[2,27],\"96\":[1,52],\"97\":[1],\"98\":[1,18],\"99\":[3,45],\"100\":[1],\"101\":[5,24],\"102\":[1],\"103\":[1,33],\"104\":[1],\"105\":[1,10],\"106\":[1],\"107\":[1,7],\"108\":[1,11],\"109\":[1],\"110\":[1,9],\"111\":[1,10],\"112\":[4,22],\"113\":[1,12],\"114\":[1,6],\"115\":[2,22],\"116\":[1,2],\"117\":[2,9],\"118\":[1],\"119\":[1],\"120\":[2],\"121\":[1,20],\"122\":[1,35],\"123\":[1],\"124\":[1,16],\"125\":[1,18],\"126\":[1,11],\"127\":[1,6],\"128\":[1,84],\"129\":[1],\"130\":[1,178],\"131\":[1],\"132\":[1,15],\"133\":[1,20],\"134\":[1,78],\"135\":[1,121],\"136\":[1,57],\"137\":[1,15],\"138\":[2],\"139\":[2,42],\"140\":[1,3],\"141\":[1,16],\"142\":[1,34],\"143\":[1,71],\"144\":[1,13],\"145\":[1,24],\"146\":[1],\"147\":[1,21],\"148\":[1,100],\"149\":[1],\"150\":[1,17],\"151\":[1],\"152\":[1,9],\"153\":[1,23],\"154\":[1,10],\"155\":[1,46],\"156\":[2,69],\"157\":[1,10],\"158\":[1,11],\"159\":[1],\"160\":[1,16],\"161\":[1,16],\"162\":[1,39],\"163\":[1],\"164\":[1,11],\"165\":[1,30],\"166\":[4,4],\"167\":[4,2],\"168\":[4,4],\"169\":[3,2],\"170\":[1,10],\"171\":[2,30],\"172\":[1,8],\"173\":[3,11],\"174\":[1,6],\"175\":[2,9],\"176\":[2,2],\"177\":[2,4],\"178\":[1,2],\"179\":[1,38],\"180\":[3],\"181\":[1,40],\"182\":[1,15],\"183\":[1,30],\"184\":[1],\"185\":[1,2],\"186\":[3,3],\"187\":[2,7],\"188\":[2,10],\"189\":[1,5],\"190\":[1,15],\"191\":[1,13],\"192\":[1,6],\"193\":[1,17],\"194\":[2,30],\"195\":[1],\"196\":[1],\"197\":[1,13],\"198\":[1,20],\"199\":[1,27],\"200\":[1,69],\"201\":[1],\"202\":[1,64],\"203\":[1],\"204\":[1,27],\"205\":[1,14],\"206\":[1],\"207\":[1,31],\"208\":[1,18],\"209\":[1,27],\"210\":[1,3],\"211\":[1],\"212\":[1],\"213\":[1,32],\"214\":[1,66],\"215\":[1,5],\"216\":[2],\"217\":[1,114],\"218\":[1,5],\"219\":[1,30],\"220\":[1,25],\"221\":[1],\"222\":[1,60],\"223\":[3],\"224\":[1,140],\"225\":[1,132],\"226\":[1],\"227\":[1,66],\"228\":[1],\"229\":[1,113],\"230\":[1],\"231\":[1,31],\"232\":[1,6],\"233\":[1,33],\"234\":[1,20],\"235\":[2,7],\"236\":[1,84],\"237\":[1,87],\"238\":[1,8],\"239\":[1,29],\"240\":[1,13],\"241\":[1,41],\"242\":[1,11],\"243\":[1,13],\"244\":[1,15],\"245\":[1,33],\"246\":[1,46],\"247\":[2],\"248\":[1],\"249\":[1],\"250\":[1,23],\"251\":[1],\"252\":[6,9],\"253\":[6,24],\"254\":[4,9],\"255\":[6,12],\"256\":[6,11],\"257\":[5,12],\"258\":[3,8],\"259\":[6,14],\"260\":[6,25],\"261\":[1],\"262\":[1],\"263\":[1],\"264\":[1,8],\"265\":[2],\"266\":[3,41],\"267\":[3,21],\"268\":[1,13],\"269\":[1,11],\"270\":[1,41],\"271\":[3,49],\"272\":[1,13],\"273\":[4],\"274\":[4,1],\"275\":[2],\"276\":[5,11],\"277\":[2,16],\"278\":[2,6],\"279\":[2],\"280\":[2,100],\"281\":[2],\"282\":[3,57],\"283\":[1],\"284\":[1,60],\"285\":[1],\"286\":[1,35],\"287\":[1,58],\"288\":[6],\"289\":[1,67],\"290\":[1,7],\"291\":[2,42],\"292\":[3],\"293\":[1,49],\"294\":[1,86],\"295\":[2],\"296\":[1],\"297\":[1,22],\"298\":[3,30],\"299\":[1,4],\"300\":[1,25],\"301\":[1,33],\"302\":[1,27],\"303\":[1],\"304\":[1,41],\"305\":[1,40],\"306\":[3],\"307\":[1,28],\"308\":[2,28],\"309\":[2,43],\"310\":[1,20],\"311\":[2,24],\"312\":[3],\"313\":[1,34],\"314\":[1,24],\"315\":[1,29],\"316\":[1,26],\"317\":[2,63],\"318\":[1,35],\"319\":[2,59],\"320\":[2,48],\"321\":[2,2],\"322\":[2],\"323\":[3,31],\"324\":[2,60],\"325\":[1,8],\"326\":[3],\"327\":[1,22],\"328\":[1],\"329\":[4,26],\"330\":[1],\"331\":[4,56],\"332\":[1,51],\"333\":[1,26],\"334\":[2,12],\"335\":[2,14],\"336\":[2,11],\"337\":[1],\"338\":[2,18],\"339\":[2,24],\"340\":[2,35],\"341\":[2,31],\"342\":[2,38],\"343\":[2,19],\"344\":[2,25],\"345\":[2,26],\"346\":[5,65],\"347\":[1,58],\"348\":[1,26],\"349\":[1,19],\"350\":[1],\"351\":[1,20],\"352\":[1,25],\"353\":[1,41],\"354\":[1,7],\"355\":[1],\"356\":[1,1],\"357\":[1,2],\"358\":[1,1],\"359\":[1,1],\"360\":[1,1],\"361\":[1,7],\"362\":[4,86],\"363\":[2],\"364\":[1,118],\"365\":[1],\"366\":[1,10],\"367\":[1],\"368\":[1,20],\"369\":[1],\"370\":[2,21],\"371\":[1,36],\"372\":[1,56],\"373\":[1,21],\"374\":[1,23],\"375\":[1,21],\"376\":[3,19],\"377\":[1,6],\"378\":[2,8],\"379\":[1,27],\"380\":[1,49],\"381\":[1],\"382\":[1,26],\"383\":[1],\"384\":[1,60],\"385\":[1,35],\"386\":[1],\"387\":[1,22],\"388\":[1,89],\"389\":[1],\"390\":[1,6],\"391\":[1,86],\"392\":[1,38],\"393\":[3],\"394\":[1,45],\"395\":[1,27],\"396\":[2,19],\"397\":[3,16],\"398\":[3],\"399\":[8,11],\"400\":[6,12],\"401\":[8,13],\"402\":[11,13],\"403\":[8,14],\"404\":[6,15],\"405\":[1,26],\"406\":[1],\"407\":[1,15],\"408\":[1],\"409\":[2,54],\"410\":[1],\"411\":[2,16],\"412\":[2,20],\"413\":[2,30],\"414\":[2,13],\"415\":[2,11],\"416\":[2,17],\"417\":[2],\"418\":[1],\"419\":[1,73],\"420\":[1,30],\"421\":[1,33],\"422\":[1],\"423\":[1,26],\"424\":[1],\"425\":[1],\"426\":[1,14],\"427\":[1,9],\"428\":[1,48],\"429\":[3],\"430\":[1,76],\"431\":[1],\"432\":[1],\"433\":[1,17],\"434\":[1,7],\"435\":[1],\"436\":[1,17],\"437\":[1,18],\"438\":[3],\"439\":[3,25],\"440\":[3],\"441\":[1,19],\"442\":[1],\"443\":[1],\"444\":[1,11],\"445\":[1,8],\"446\":[1,8],\"447\":[4],\"448\":[1,45],\"449\":[4],\"450\":[1],\"451\":[1,58],\"452\":[3],\"453\":[1,23],\"454\":[1],\"455\":[1,41],\"456\":[1,21],\"457\":[1,6],\"458\":[1,30],\"459\":[1,25],\"460\":[1],\"461\":[1],\"462\":[1,27],\"463\":[1,33],\"464\":[3,33],\"465\":[1,23],\"466\":[1],\"467\":[3,9],\"468\":[1,8],\"469\":[1,12],\"470\":[1,25],\"471\":[1,9],\"472\":[3,7],\"473\":[1,10],\"474\":[1],\"475\":[1],\"476\":[1,13],\"477\":[1],\"478\":[1],\"479\":[2,2],\"480\":[2],\"481\":[1,20],\"482\":[1,9],\"483\":[1,25],\"484\":[1,11],\"485\":[1,30],\"486\":[1],\"487\":[1,15],\"488\":[1,4],\"489\":[1,15],\"490\":[1],\"491\":[1],\"492\":[1,22],\"493\":[1,4],\"494\":[1,12],\"495\":[1,31],\"496\":[1,6],\"497\":[1,6],\"498\":[1,52],\"499\":[1,8],\"500\":[1,28],\"501\":[1,20],\"502\":[1,33],\"503\":[1,20],\"504\":[1,6],\"505\":[1,34],\"506\":[1,21],\"507\":[1],\"508\":[1,4],\"509\":[1],\"510\":[1],\"511\":[1,42],\"512\":[1],\"513\":[1],\"514\":[1],\"515\":[1],\"516\":[1],\"517\":[1],\"518\":[1],\"519\":[1,29],\"520\":[1],\"521\":[1],\"522\":[1],\"523\":[1,15],\"524\":[1,5],\"525\":[1,7],\"526\":[1,25],\"527\":[1],\"528\":[1,13],\"529\":[1,6],\"530\":[2,7],\"531\":[1,3],\"532\":[1,3],\"533\":[2,8],\"534\":[1,8],\"535\":[1,7],\"536\":[2,9],\"537\":[1,6],\"538\":[1,3],\"539\":[2,9],\"540\":[1,5],\"541\":[1,5],\"542\":[1,3],\"543\":[1,3],\"544\":[1,26],\"545\":[1,17],\"546\":[1,5],\"547\":[1,15],\"548\":[1,36],\"549\":[1,3],\"550\":[1,5],\"551\":[1],\"552\":[1,15],\"553\":[1,6],\"554\":[1,23],\"555\":[1,12],\"556\":[1,11],\"557\":[1,20],\"558\":[1,8],\"559\":[1,20],\"560\":[1,51],\"561\":[1],\"562\":[1,18],\"563\":[1,14],\"564\":[1,14],\"565\":[1,7],\"566\":[1,34],\"567\":[1,6],\"568\":[1,38],\"569\":[1,13],\"570\":[1,4],\"571\":[1,16],\"572\":[1,5],\"573\":[1,30],\"574\":[1],\"575\":[1,8],\"576\":[1,3],\"577\":[1,8],\"578\":[1,20],\"579\":[1],\"580\":[1,13],\"581\":[1,14],\"582\":[1,21],\"583\":[1,2],\"584\":[1,6],\"585\":[1,42],\"586\":[1,53],\"587\":[1,14],\"588\":[1,17],\"589\":[1,47],\"590\":[1,20],\"591\":[1],\"592\":[1,18],\"593\":[1,30],\"594\":[1,23],\"595\":[1,12],\"596\":[1,16],\"597\":[2],\"598\":[1,7],\"599\":[1,7],\"600\":[1,7],\"601\":[1,6],\"602\":[2,9],\"603\":[1,21],\"604\":[1],\"605\":[3],\"606\":[1],\"607\":[1],\"608\":[1],\"609\":[1],\"610\":[1],\"611\":[1],\"612\":[1],\"613\":[1],\"614\":[1],\"615\":[1],\"616\":[1],\"617\":[1],\"618\":[1],\"619\":[1],\"620\":[1],\"621\":[2]},\"averageFieldLength\":[1.437299035369775,22.91125608022047],\"storedFields\":{\"0\":{\"h\":\"Hello AI\",\"t\":[\"面对着越来越火热的AI技术，必须掌握一些基础的AI知识，以期在未来的某个时刻，可以运用到自己的工作中。\",\"下面是我收集并且进行的学习路线，仅供大家学习参考；\"]},\"1\":{\"h\":\"我要变强\"},\"2\":{\"h\":\"资源分享\",\"t\":[\"正值 AI 以摧枯拉朽之势崛起的一年，已经有人开始推测 GPT 的出现会不会成为第四次工业革命的契机，连比尔·盖茨都表示GPT 的出现不亚于互联网的诞生。短短一夜之间各家厂商都拿出了自己的 AI 作品来瓜分着新时代的蛋糕，作为受众群体来说，借助 AI 工具很多事情变得异常简单轻松，与此伴随的各行各业要被替代的恐慌也开始蔓延，各种降薪裁员的浪潮开始愈展愈烈，我还在这里敲键盘码字呢。\",\"虽然相比于 AI 一些传统的工具的地位已经不保，纸质书籍逐渐成为小众选择，搜索引擎也引来了巨大革新，但是依然不能掩饰它们过去在某些领域作出的优秀贡献，正像我现在坐在这里写开始写这一部分的序言一样，love and share，把我觉得还不错的资源分享出来让更多的人看到。\"]},\"3\":{\"h\":\"学习之路\",\"t\":[\"不知道现在还有没有人总结学历路线这个东西，当时我刚起步的时候总结学习路线的文章视频还是很多的，我这里也只是简单粗略把有印象的记录一下。毕竟自己现在不是刚毕业了，文章不会向刚开始一样从 0 到 1，这个部分的文章都是遇到值得写写的部分就记录一下，其实还是很想写一些关于源码或者底层的东西，一直浮于表面可不行，尽力而为吧，毕竟现在博客还属于前期，很多结构或者框架以后难免要升级，所以先把知识点都覆盖罗列一下，日后慢慢润色，路虽远行则将至。\"]},\"4\":{\"h\":\"工作实战\",\"t\":[\"整理一下工作中遇到的实际开发任务，不过说实话之前天天 crud ，后来又来了个安逸公司，天天就是维护，搞一些缝缝补补的工作，有时候可能会遇到重构或者探索新技术的任务，但是都是停在应用的水平，每次更新这个部分的文章我都头疼，起码现在还觉得没有什么值得学习借鉴的部分，看看以后吧，谁知道未来会不会有什么高大上的工作做做。\"]},\"5\":{\"h\":\"书法是一门艺术\"},\"6\":{\"h\":\"行书\"},\"7\":{\"h\":\"学一门外语\"},\"8\":{\"h\":\"English Grammer\"},\"9\":{\"h\":\"简单句\"},\"10\":{\"h\":\"句子结构\"},\"11\":{\"h\":\"主谓结构\"},\"12\":{\"h\":\"主谓宾结构\"},\"13\":{\"h\":\"主谓双宾结构\"},\"14\":{\"h\":\"主谓宾补结构\"},\"15\":{\"h\":\"主系表结构\"},\"16\":{\"h\":\"三态加一否\"},\"17\":{\"h\":\"时态\"},\"18\":{\"h\":\"一般状态\"},\"19\":{\"h\":\"一般过去时\"},\"20\":{\"h\":\"一般现在时\"},\"21\":{\"h\":\"一般将来时\"},\"22\":{\"h\":\"（一般）过去将来时\"},\"23\":{\"h\":\"进行状态\"},\"24\":{\"h\":\"过去进行时\"},\"25\":{\"h\":\"现在进行时\"},\"26\":{\"h\":\"将来进行时\"},\"27\":{\"h\":\"完成状态\"},\"28\":{\"h\":\"过去完成时\"},\"29\":{\"h\":\"现在完成时\"},\"30\":{\"h\":\"现在完成时和一般过去时的区别\"},\"31\":{\"h\":\"将来完成时\"},\"32\":{\"h\":\"完成进行状态\"},\"33\":{\"h\":\"过去完成进行时\"},\"34\":{\"h\":\"现在完成进行时\"},\"35\":{\"h\":\"将来完成进行时\"},\"36\":{\"h\":\"情态\"},\"37\":{\"h\":\"表达说话的语气\"},\"38\":{\"h\":\"表达推测的含义\"},\"39\":{\"h\":\"语态\"},\"40\":{\"h\":\"被动\"},\"41\":{\"h\":\"否定\"},\"42\":{\"h\":\"强调\"},\"43\":{\"h\":\"主语的变化\"},\"44\":{\"h\":\"名词/代词\"},\"45\":{\"h\":\"非谓语动词 [7]\"},\"46\":{\"h\":\"doing\"},\"47\":{\"h\":\"to do\"},\"48\":{\"h\":\"并列多个\"},\"49\":{\"h\":\"同位语 [8]\"},\"50\":{\"h\":\"插入语 [9]\"},\"51\":{\"h\":\"简单句的限定词\"},\"52\":{\"h\":\"限定词 [10]\"},\"53\":{\"h\":\"形容词和副词\"},\"54\":{\"h\":\"原级比较\"},\"55\":{\"h\":\"比较级\"},\"56\":{\"h\":\"最高级\"},\"57\":{\"h\":\"介词短语\"},\"58\":{\"h\":\"长难句\"},\"59\":{\"h\":\"并列句\"},\"60\":{\"h\":\"复合句\"},\"61\":{\"h\":\"表语从句\"},\"62\":{\"h\":\"名词性从句\"},\"63\":{\"h\":\"宾语从句\"},\"64\":{\"h\":\"主语从句\"},\"65\":{\"h\":\"同位语从句\"},\"66\":{\"h\":\"定语从句\"},\"67\":{\"h\":\"状语从句\"},\"68\":{\"h\":\"特殊句式\"},\"69\":{\"h\":\"虚拟\"},\"70\":{\"h\":\"倒装\"},\"71\":{\"h\":\"强调\"},\"72\":{\"h\":\"English Writing\"},\"73\":{\"h\":\"书信\"},\"74\":{\"h\":\"称呼\"},\"75\":{\"h\":\"正文\"},\"76\":{\"h\":\"致辞\"},\"77\":{\"h\":\"署名\"},\"78\":{\"h\":\"告示\"},\"79\":{\"h\":\"形而上\"},\"80\":{\"h\":\"流行唱法\"},\"81\":{\"h\":\"体育是一种生活方式\"},\"82\":{\"h\":\"乒乓球\"},\"83\":{\"h\":\"快速入门\"},\"84\":{\"h\":\"技术框架\"},\"85\":{\"h\":\"步伐\"},\"86\":{\"h\":\"正手攻球\"},\"87\":{\"h\":\"反手推挡\"},\"88\":{\"h\":\"正手拉球\"},\"89\":{\"h\":\"反手拉球\"},\"90\":{\"h\":\"其他细节\"},\"91\":{\"h\":\"数据结构和算法\",\"t\":[\"一提到数据结构和算法就不的不让我想到上学时计算机的四大天书：《数据结构》、《计算机组成与设计》、《计算机操作系统》、《计算机网络》。当时根本不知道这几本书的分量，要不然也不会到现在才后悔莫及。其实每次提到数据结构和算法它们都是共同出现的，因为算法大部分都是基于大量的数据结构组合而成的，想要掌握好算法就必须在数据结构上下好功夫。\"]},\"92\":{\"h\":\"《Hello 算法》\",\"t\":[\"相信大家在求职冲刺阶段都会认识一本叫做 《剑指offer》 的书籍，相信其中循序渐进的经典算法例题会让你在算法方面鼓足干劲和勇气，而这本 《Hello 算法》 是这个系列有一本重量级作品，收到行业内多位大佬推荐的一本数据结构与算法入门书。\",\"Hello 算法\",\"并且相对于枯燥的纸质书籍，Github 上还配套在线阅读网站，重点和难点知识将主要通过动画和图解形式展示，并且仓库源代码附有测试样例，可一键运行，对新手非常友好。\"]},\"93\":{\"h\":\"数据库\",\"t\":[\"相信一个合格的程序员是必须对数据库这项技术要达到熟练的地步吧，之前可能觉得要和数据库交互的往往只有后端程序员，可是后来随着各类数据库的发展，很多数据库也可以配合前端直接使用，所有掌握 SQL 和数据库进行交互也是程序员必备的技能。\",\"听我一个朋友谈起，其实程序员很大一份就是在和数据打交道，而对于数据库中数据的处理来说，尽管大家都是在用 SQL ，但是在不同人的手里能拿到不同的结果集，相比于其他各种出现的 cron 表达式、正则表达式，SQL 更能在一些函数和表的组合方面体现你对数据管理的天赋。\",\"虽然工作中能用到的数据库的知识点都只是停留在对数据的操作，但是在面试或者一些表设计中，数据库的底层结构和高级用法显得尤为重要，这些我们也需要在空余时间了解一些。下面我会分享一些我觉得值得一读的和数据库有关的书。\"]},\"94\":{\"h\":\"MySQL\",\"t\":[\"如果是平时使用和找工作大部分公司在用的话，MySQL 在 CN 的使用率肯定是名列前茅，如果只是想快速了解或复习语法的话，推荐这本 《MySQL必知必会》，薄薄一本，定位和 《剑指Offer》 一样，都是最实用的语法，用来入门非常不错。\",\"MySQL必知必会\"]},\"95\":{\"h\":\"Java 系列\",\"t\":[\"目前 Java 赛道处于一个爆满的时代，况且计算机这个行业在当下这个社会也是充满了功利的气息，各个行业的人疯狂涌入计算机，业内的人嘴上说着计算机跌落神坛可是却在疯狂内卷，确实目前看来就算计算机行业身处寒冬，这也只是和之前几年相比吧，当时可能学习完微服务之后，找的工作可能直奔“尔康”，而现在可能微服务也只能是你找到工作的门槛，当然身边的人也有从 Java 转行到 Python 和 Golang 的。在各种新语言层出不穷的年代，Java 的就业地位不知道还能撑多久，不过就目前而言，Java 社区的活跃程度和所包含的业务领域依然是领先的地位，所以学习 Java 可能并不适合作为第一门语言，也不一定是能作为找到工作的保证，但是一定是你学习过程中能找到资源和解决问题方法最顺利的一种。\"]},\"96\":{\"h\":\"Java基础\",\"t\":[\"一提到 Java 基础，难免绕不开每个语言的圣经，要知道计算机不比其他行业，大部分的学习资料都来自互联网，而能靠其内容质量击败视频、电子书和技术文章成为圣经的绝对是传奇著作，而 Java 的圣经绝对就是下面这本 《Thinking in Java》(Java 编程思想)。\",\"Thinking in java\",\"这本书我大学期间看过大半，至于为什么没有读完，是因为这本书确实细，细到令你发指，主打一本工具书的定位，而且其内容也是略显晦涩，当时我也是走马观花，只读了个大概就跑去B站“深造”了。\",\"这本书最新是到第四版，发行于2007年，据现在已经过去16个年头了，里面的示例大部分都还在基于 jdk6 ，目前 jdk20 都已经问世了，所以说就互联网的发展速度，你要是还去看这本“历史典籍”，确实有点追不上时代了，虽然 Java 业内流传着 “你发任你发，我用 Java8” 的口号，但是就目前的使用情况来看 jdk17 这个长期维护版本才是新宠。如果放在十年前有人给你推荐这本书，确实是厉害，五年前推荐，还说得过去，要是现在推荐，我只能说一个6。\"]},\"97\":{\"h\":\"其他技能\"},\"98\":{\"h\":\"版本控制\",\"t\":[\"提到版本控制（Version control），自从 Git 横空出世之后，Subversion 就开始逐渐退出神坛，相对于 Subversion 这种集中式的版本控制系统，分布式风格的 Git 更适合多人协作开发使用，虽然 Subversion 和我们平时使用本地文件的习惯非常相近，容易上手，但是面对更多人同时开发的场景来说，Git 拥有更多样的协作流程将更有利于我们管理项目。\"]},\"99\":{\"h\":\"《 Pro Git 》\",\"t\":[\"pro git\",\"这本书的作者是 Git 在 GitHub 公司的最早的托管者之一编写的，当我了解到这本书的时候就已经是第二版了。这本书涵盖了 Git 的基础用法、分支特性、搭建和配置 Git 服务器、分布式工作流程、GitHub 的使用方法、Git 工具、Git 内部原理等各个方面内容，最后还附带了 Git 命令参考。零基础的初学者可以通过前 3 章的学习就已经可以应付日常的开发场景了，后几章能够满足中高阶用户深入了解的需求。书中提供了大量的应用案例，不同开发工作模式有不同的用法，配合插图演示版本变化的状态，十分易于理解。\",\"如果你觉得文字和图片还不够直观，下面的链接是一个 Git 学习网站： Learning Git Branching ，这里你可以通过闯关的形式学习一些 Git 的基础命令，并且每个命令的执行还会有实时的动图演示，简直不要太友好，就算你已经是 Git 的老手，也可以在这里复习和加深一些命令的理解。\",\"https://learngitbranching.js.org/?locale=zh_CN\"]},\"100\":{\"h\":\"设计模式\"},\"101\":{\"h\":\"《 Head First Design Patterns 》\",\"t\":[\"Head First Design Patterns\",\"几乎每个经典系列书籍中都会有讲设计模式的书，像大话系列、图解系列还有 Head First 系列，这些书都是基于设计模式开山之作《设计模式：可复用面向对象软件的基础》中23中设计模式结合后来的实践和发展又重新总结出来的更完善生动的作品，内容上都是按照每一种设计模式作为一个章节并结合情景和图片进行讲解，我自己学习看的是第一版的《Head First Design Patterns》，上图中的是2022年发行的第二版，学习的时候一边阅读一边自己实现还是挺容易理解的，直到现在我看到某种设计模式还会想到当时书中的案例。\",\"对我个人而言，我觉得学习设计模式更行之有效的方法是在阅读过后有初步的理解的情况下的亲身实践，它基于代码又高于代码，最好的学习方式就是在平时阅读和开发的时候，将健壮性和可扩展性设为己任，仔细理解每种模式所使用的场景才是真正的学习之道。\"]},\"102\":{\"h\":\"工作流引擎\"},\"103\":{\"h\":\"介绍\",\"t\":[\"工作流（workflow）就是通过计算机对业务流程自动化执行管理，它主要结局的是多个参与者之间按照某种预定义的规则自动进行传递文档、信息或者任务的过程，从而实现某个预期的业务目标，或者促使此目标的实现。\",\"工作流基于业务流，适用于消费品行业、制造业、电信服务业、物流服务业、物业管理、政府机构等，特别是大的企业集团公司。具体应用在关键业务流程、行政审批流程、人事管理流程等。\",\"比较原始的工作流实现方式无非就是利用审核表或者增加审核字段，通过自己实现业务逻辑对一些步骤进行审批和限制，如果是比较复杂的大型业务模式就显得非常不专业了。\",\"我们这里引入一个开源的工作流引擎 Activiti，它可以将业务中复杂的业务流程抽取出来，使用专门的建模语言 BPMN 2.0 进行定义，减少业务系统因为业务改变造成的任务量，提高系统健壮性，降低系统维护成本。\"]},\"104\":{\"h\":\"个人图床\"},\"105\":{\"h\":\"项目介绍\",\"t\":[\"Telegraph-Image，一个免费图片托管解决方案，Flickr/imgur替代品。使用 Cloudflare Pages 和 Telegraph。\"]},\"106\":{\"h\":\"优缺点\"},\"107\":{\"h\":\"优点\",\"t\":[\"无限空间。\",\"开源免费。\",\"部署简单，只需要根据 README 文件几分钟就可以成功。\"]},\"108\":{\"h\":\"缺点\",\"t\":[\"图片大小最大为5MB。\",\"由于使用Cloudflare的网络，图片的加载速度在某些地区可能得不到保证，有时候会因为网络问题导致图片上传问题。\",\"Cloudflare Function免费版每日限制100,000个请求，超过可能需要选择购买 Cloudflare Function 的付费套餐。\"]},\"109\":{\"h\":\"项目功能\"},\"110\":{\"h\":\"图片审查\",\"t\":[\"搭配 moderatecontent 提供免费图片审查，开启图片审查后，因为审查需要时间，首次的图片加载将会变得缓慢，之后的图片加载由于存在缓存，并不会受到影响。\"]},\"111\":{\"h\":\"内网穿透\",\"t\":[\"虽然在测试一些局域网联机的方式重新用到了内网穿透的工具，但是值得一提的是在一些特定的场合下内网穿透工具还是十分好用的，陆陆续续用了一些工具，最好用的还是 Ngrok ，并不是国内搜索到的无 token 的版本，下面这使用方式和展示效果更直观简洁。\"]},\"112\":{\"h\":\"日常工具（Mac 版）\",\"t\":[\"刚从 Windows 换到 Mac 时，确实对这个安装软件晕得很，时间久了其实也觉得差不多，无非也是商店和官网两个下载途径，但是在苹果有了自家芯片之后，很多软件不支持这种 arm 架构，运行 X86 版本的话需要编译一版再运行，还是比较消耗算力的，有的时候甚至会出现发热或者疯狂占内存的情况，所以下载的时候除非不得已还是要下载苹果芯片的版本，查看自己目前软件是什么版的可以在 系统信息 这个自带的软件上查看。\",\"版本信息\"]},\"113\":{\"h\":\"DeepL\",\"t\":[\"一个号称全世界最准确的翻译软件，界面也很简洁，我最种草的还是因为他可以实现离线翻译。它也支持 Word 、 PDF 和 PPT 等整个文件的翻译，免费版也足够用了，如果你还没有用的惯的翻译软件可以尝试一下。\"]},\"114\":{\"h\":\"开发工具\",\"t\":[\"工欲善其事，必先利其器。其实好用的工具从来不用推荐，工具的下载量就证明了它可以胜任好自己的本职工作，下面我整理一下我自己在用的不错的开发工具给大家参考一下。\"]},\"115\":{\"h\":\"IntelliJ IDEA\",\"t\":[\"吃饭的家伙，一提到 IDEA 我就不得不说一个事情，不是吧不是吧，这都2023年了还有人在用 \\\\b\\\\w{7}\\\\b 做开发吧（狗头保命）。使用正版需要订购 JetBrains 的许可证，因为是订阅型的，意味着你需要按照订阅期限支付费用，今年居然比去年更贵了！工具要想用的好，配置插件少不了，我把我认为平时好用的和最常用的配置贴出来，供交流讨论啦。\"]},\"116\":{\"h\":\"代码规范与技巧\",\"t\":[\"好的代码就是注释。\"]},\"117\":{\"h\":\"1. 规范命名\",\"t\":[\"关于命名规范的问题这里我不是建议，而是要求大家真的要遵守《阿里巴巴 Java 开发手册》，因为不规范的命名简直是一个项目的本质性的灾难。在规范的第一章就列举了各个场景命名的规范，可见其重要性。\"]},\"118\":{\"h\":\"大数据\"},\"119\":{\"h\":\"大数据学习路线\"},\"120\":{\"h\":\"Apache Hadoop\"},\"121\":{\"h\":\"简介\",\"t\":[\"Hadoop 是一个开源的分布式计算和存储框架，由 Apache 基金会开发和维护。\\nHadoop 为庞大的计算机集群提供可靠的、可伸缩的应用层计算和存储支持，它允许使用简单的编程模型跨计算机群集分布式处理大型数据集，并且支持在单台计算机到几千台计算机之间进行扩展。\\nHadoop 使用 Java 开发，所以可以在多种不同硬件平台的计算机上部署和使用。其核心部件包括分布式文件系统 (Hadoop DFS，HDFS) 和 分布式计算框架（MapReduce）。\"]},\"122\":{\"h\":\"关于设计模式\",\"t\":[\"到底什么才是代码的顶峰呢，是写下第一行 Hello World!就好了，是第一次控制台输入输出就好了，是第一次执行 Main 函数就好了，是第一次写 if 判断和 for 循环就好了，是第一次写强逻辑的代码就好了，是第一次使用多线程就好了，是第一次使用设计模式就好了。我现在还记得在《Head First设计模式》一书中的一句话：“程序员就像赛车手一样，他们对程序的效率就好比赛车手对速度的执着一样。”\",\"如何判断一个程序员的等级呢，代码的健壮性、可扩展性和效率都是十分重要的标杆，而设计模式作为前辈们的最佳实践总结，在一些常见的方面都给予了我们开发出高质量、易维护的项目提供了方向。\",\"这个模块里我会把我工作和学习中接触到的设计模式结合场景记录下来，当然并不会涵盖所有的设计模式，如果你是想更深入和系统的了解设计模式的种种，当然还是推荐设计模式的一些书籍和更为优秀的帖子，在这里我会总结出我对设计模式的理解和实现。\"]},\"123\":{\"h\":\"责任链模式\"},\"124\":{\"h\":\"什么是责任链模式\",\"t\":[\"责任链模式（Chain of Responsibility Pattern）它允许你构建一个对象链，每个对象都持有对下一个对象的引用，从而形成一条链。每个对象在收到请求后，可以选择处理请求或将请求传递给链中的下一个对象。 这种模式的核心思想是解耦发送者和接收者，让多个对象都有机会处理请求，而不需要显式指定接收者。请求会沿着链传递，直到有一个对象处理它为止。\"]},\"125\":{\"h\":\"角色\",\"t\":[\"Handler（处理者）： 定义一个处理请求的接口，通常包含一个处理请求的方法，并持有对下一个处理者的引用。处理者可以决定是否处理请求，或者将请求传递给链中的下一个处理者。\",\"ConcreteHandler（具体处理者）： 实现处理者接口，在收到请求时判断自己是否能够处理，如果可以处理则处理请求，否则将请求传递给链中的下一个处理者。\",\"Client（客户端）： 创建责任链，并向链的第一个处理者发送请求。\"]},\"126\":{\"h\":\"优点\",\"t\":[\"解耦发送者和接收者： 发送者不需要知道接收者的具体信息，只需要将请求发送到链的第一个处理者即可。\",\"灵活性和可扩展性： 可以动态地添加、移除或重新排序处理者，以满足不同的需求。\",\"单一职责原则： 每个处理者只负责处理特定类型的请求，符合单一职责原则。\"]},\"127\":{\"h\":\"缺点\",\"t\":[\"如果没有处理者能够处理请求，请求可能会到达链的末端而未被处理。\",\"性能问题： 如果责任链过长或者处理者之间的调用关系复杂，可能会影响性能。\"]},\"128\":{\"h\":\"场景\",\"t\":[\"事件处理系统 责任链模式在 GUI 框架和其他事件处理系统中广泛使用。例如，在一个图形用户界面中，一个按钮点击事件可以被多个处理器处理（如按钮本身、父容器、窗口等），直到有一个处理器处理了该事件。\",\"日志记录系统 日志记录系统可以使用责任链模式，不同的日志级别（如 DEBUG、INFO、WARN、ERROR）可以有不同的处理器。日志请求沿着责任链传递，不同级别的日志可以由不同的处理器处理，或者由同一个处理器处理但以不同的方式记录。\",\"请求处理管道 在 web 应用程序中，常常有一系列的过滤器（如安全过滤器、日志过滤器、压缩过滤器等）对请求进行处理。每个过滤器都是一个处理器，请求沿着过滤器链传递，每个过滤器可以选择处理请求或将其传递到链中的下一个过滤器。\",\"审批工作流系统 在审批工作流系统中，不同级别的审批者可以形成一个责任链。请求从一个审批者传递到下一个审批者，直到请求被批准或拒绝。例如，一个请假申请可以从部门经理传递到人力资源经理，再到总经理，每个级别的审批者都有机会处理该请求。\",\"权限管理系统 在权限管理系统中，可以使用责任链模式来检查用户权限。权限检查请求沿着责任链传递，直到有一个处理器确认用户具有足够的权限或到达链的末尾。如果没有处理器处理该请求，则表示用户没有足够的权限。\",\"数据处理管道 数据处理管道可以由一系列的数据处理步骤组成，每个步骤都是一个处理器。例如，在数据清洗过程中，可以有多个步骤（如去重、格式化、数据校验等）依次处理数据，每个步骤可以选择处理数据或将其传递到下一个处理器。\",\"命令处理系统 在命令处理系统中，可以使用责任链模式来处理命令。不同的处理器可以处理不同类型的命令，请求沿着责任链传递，直到有一个处理器处理该命令。例如，在一个文本编辑器中，不同的命令（如复制、粘贴、撤销等）可以由不同的处理器处理。\",\"异常处理 在异常处理系统中，可以使用责任链模式来处理不同类型的异常。异常请求沿着责任链传递，直到有一个处理器处理该异常。例如，在一个 web 应用程序中，可以有一系列的异常处理器来处理不同类型的异常（如数据库异常、网络异常、业务逻辑异常等）。\",\"总之符合多层处理流程的功能都可以用责任链模式来应对。\"]},\"129\":{\"h\":\"应用场景\"},\"130\":{\"h\":\"用责任链实现请求内容校验\",\"t\":[\"用户注册的场景下，我们在创建新用户之前需要经过对字段合法性、用户是否已注册、用户黑名单校验等步骤，如果只是将步骤分为不同的方法或者都写在同一个方法里难免会造成一个大类，维护起来十分困难，这里使用责任链的模式进行拆分。\",\"抽象处理者 这里我们抽象处理者需要有处理方法和分类标识，处理方法当然是我们责任链每个环节的的具体实现，而分类标识则用来分类处理者种类从而实现多种处理者并存。这里我们还继承 Spring 的 Ordered 来实现每种责任链中处理者的执行排序。\",\"import org.springframework.core.Ordered; /** * @description: 抽象业务责任链 **/ public interface AbstractChainHandler<T> extends Ordered { /** * 执行责任链逻辑 * * @param requestParam 责任链执行入参 */ void handler(T requestParam); /** * 责任链组件标识 */ String mark(); } \",\"具体处理者 这里我们分别实现校验注册字段的三个具体实现类，首先定于用户注册责任链的分类。\",\"/** * @description: 用户责任链处理者 **/ public interface UserRegisterCreateChainFilter <T extends UserRegisterReqVo> extends AbstractChainHandler<UserRegisterReqVo> { @Override default String mark() { return UserChainMarkEnum.USER_REGISTER_FILTER.name(); } } \",\"有了注册责任链接口后，我们只需要继承这个接口实现具体的校验逻辑和顺序即可。\",\"/** * @description: 用户注册参数必填检验 **/ @Component public class UserRegisterParamNotNullChainHandler implements UserRegisterCreateChainFilter<UserRegisterReqVo> { @Override public void handler(UserRegisterReqVo requestParam) { if (Objects.isNull(requestParam.getUsername())) { throw new ClientException(UserRegisterErrorCodeEnum.USER_NAME_NOTNULL); } else if (Objects.isNull(requestParam.getPassword())) { throw new ClientException(UserRegisterErrorCodeEnum.PASSWORD_NOTNULL); } else if (Objects.isNull(requestParam.getTelephone())) { throw new ClientException(UserRegisterErrorCodeEnum.PHONE_NOTNULL); } else if (Objects.isNull(requestParam.getIdType())) { throw new ClientException(UserRegisterErrorCodeEnum.ID_TYPE_NOTNULL); } else if (Objects.isNull(requestParam.getIdCard())) { throw new ClientException(UserRegisterErrorCodeEnum.ID_CARD_NOTNULL); } else if (Objects.isNull(requestParam.getMail())) { throw new ClientException(UserRegisterErrorCodeEnum.MAIL_NOTNULL); } else if (Objects.isNull(requestParam.getRealName())) { throw new ClientException(UserRegisterErrorCodeEnum.REAL_NAME_NOTNULL); } } @Override public int getOrder() { return 0; } } /** * @description: 用户注册用户名唯一检验 **/ @Component @RequiredArgsConstructor public class UserRegisterHasUsernameChainHandler implements UserRegisterCreateChainFilter<UserRegisterReqVo> { private final UserLoginService userLoginService; @Override public void handler(UserRegisterReqVo requestParam) { if (userLoginService.hasUsername(requestParam.getUsername())) { throw new ClientException(UserRegisterErrorCodeEnum.USERNAME_REGISTERED); } } @Override public int getOrder() { return 1; } } /** * @description: 用户注册检查证件号是否多次注销 **/ @Component @RequiredArgsConstructor public class UserRegisterCheckDeletionChainHandler implements UserRegisterCreateChainFilter<UserRegisterReqVo> { private final UserInfoService userInfoService; @Override public void handler(UserRegisterReqVo requestParam) { Integer userDeletionNum = userInfoService.queryUserDeletionNum(requestParam.getIdType(), requestParam.getIdCard()); if (userDeletionNum >= 5) { throw new ClientException(\\\"证件号多次注销账号已被加入黑名单\\\"); } } @Override public int getOrder() { return 2; } } \",\"创建责任链 我们使用 Spring 的容器夹在组件的方式创建责任链，我们使用 Spring 提供的 CommandLineRunner 接口实现项目启动时获取所有继承我们抽象处理者的类并且按照 mark 分类和 Ordered 顺序来进行排序。\",\"/** * @param <T> 请求参数的类型 * @description: 抽象责任链上下文 */ public class AbstractChainContext<T> implements CommandLineRunner { private final Map<String, List<AbstractChainHandler>> abstractChainHandlerContainer = new HashMap<>(); @Override public void run(String... args) { // 获取所有具体执行者组件 Map<String, AbstractChainHandler> chainFilterMap = ApplicationContextHolder.getBeansOfType(AbstractChainHandler.class); // 根据责任链组件标识将组件分类 chainFilterMap.values().forEach(bean -> { abstractChainHandlerContainer .computeIfAbsent(bean.mark(), k -> new ArrayList<>()) .add(bean); }); // 按照组件 order 优先级进行排序 abstractChainHandlerContainer.replaceAll((mark, handlers) -> handlers.stream() .sorted(Comparator.comparing(Ordered::getOrder)) .collect(Collectors.toList()) ); } /** * 责任链组件执行 * * @param mark 责任链组件标识 * @param requestParam 请求参数 */ public void handler(String mark, T requestParam) { List<AbstractChainHandler> abstractChainHandlers = abstractChainHandlerContainer.get(mark); if (CollectionUtils.isEmpty(abstractChainHandlers)) { throw new RuntimeException(String.format(\\\"[%s] 责任链标识未定义。\\\", mark)); } abstractChainHandlers.forEach(each -> each.handler(requestParam)); } } \",\"使用责任链\",\"@Transactional(rollbackFor = Exception.class) @Override public UserRegisterRespVo register(UserRegisterReqVo requestParam) { // 登录责任链 abstractChainContext.handler(UserChainMarkEnum.USER_REGISTER_FILTER.name(), requestParam); // 其他逻辑省略 } \"]},\"131\":{\"h\":\"观察者模式\"},\"132\":{\"h\":\"什么是观察者模式\",\"t\":[\"观察者模式也被称为发布-订阅模式或者事件-监听模式，这让我们很容易联想到 Redis、MQ 中的发布订阅模式，即主题对象（发布者）和观察者对象（订阅者）之间的关系类似于发布者发布事件，而观察者监听并响应该事件的方式，所以观察者模常用于实现对象之间的一对多依赖关系。\"]},\"133\":{\"h\":\"实现\",\"t\":[\"大多数编程语言都支持观察者模式的实现，但是大多数的场景下并不会去使用，因为其实现存在一些问题和局限性，不符合现代Java语言的设计原则和最佳实践。另外，它们也没有提供对并发编程的良好支持。拿 Java举例，Java 官方推荐使用其他更好的替代方案，例如使用接口和回调机制来实现观察者模式，或者使用第三方的观察者模式框架（如 Spring Framework 的事件机制或 Google Guava 的事件总线）。\"]},\"134\":{\"h\":\"jdk版\",\"t\":[\"在 Java 标准库中，java.util.Observable 类和 java.util.Observer 接口在 Java 9 版本之后被标记为过时，可能会在未来的 Java 版本中被移除，但是这并不影响我们用在这里方便理解其过程。\",\"首先，创建一个发布者类。\",\"// 发布者接口 interface Publisher { void subscribe(Subscriber subscriber); void unsubscribe(Subscriber subscriber); void notifySubscribers(String message); } // 具体的发布者类 class ConcretePublisher implements Publisher { private List<Subscriber> subscribers; public ConcretePublisher() { subscribers = new ArrayList<>(); } @Override public void subscribe(Subscriber subscriber) { subscribers.add(subscriber); } @Override public void unsubscribe(Subscriber subscriber) { subscribers.remove(subscriber); } @Override public void notifySubscribers(String message) { for (Subscriber subscriber : subscribers) { subscriber.receiveMessage(message); } } public void publish(String message) { notifySubscribers(message); } } \",\"创建订阅者类。\",\"// 订阅者接口 interface Subscriber { void receiveMessage(String message); } // 具体的订阅者类 class ConcreteSubscriber implements Subscriber { private String name; public ConcreteSubscriber(String name) { this.name = name; } @Override public void receiveMessage(String message) { System.out.println(name + \\\" 收到消息: \\\" + message); } } \",\"创建一个具体的发布者和两个具体的订阅者来测试。\",\"public class ObserverPatternExample { public static void main(String[] args) { ConcretePublisher publisher = new ConcretePublisher(); ConcreteSubscriber subscriber1 = new ConcreteSubscriber(\\\"订阅者1\\\"); ConcreteSubscriber subscriber2 = new ConcreteSubscriber(\\\"订阅者2\\\"); publisher.subscribe(subscriber1); publisher.subscribe(subscriber2); publisher.publish(\\\"Hello, World!\\\"); publisher.unsubscribe(subscriber2); publisher.publish(\\\"How are you?\\\"); } } \",\"运行上述代码时，一开始订阅者订阅了两个发布者，并且在发布者发布消息时接收到通知。然后，我们取消了一个订阅者的订阅，并再次发布消息，观察到只有一个订阅者收到了通知。\"]},\"135\":{\"h\":\"Spring版\",\"t\":[\"在Spring框架的观察者模式中我们首先要了解一些核心概念：\",\"事件（Event）：Event 代表着在应用程序中发生的特定事件。事件对象中包含了相关的数据和信息，用于描述事件的发生和上下文。在观察者模式中，事件对象会被发布（publish）给所有注册的监听器，通知它们事件的发生。\",\"监听器（Listener）：Listener 是事件的接收者和处理者。它负责监听和响应特定类型的事件。监听器需要实现ApplicationListener 接口，并通过泛型指定要监听的事件类型。当事件被发布时，对应类型的监听器将接收到事件，并执行相应的逻辑处理。\",\"应用事件发布器（Application Event Publisher）：应用事件发布器是一个接口，通常由Spring框架提供的ApplicationEventPublisher接口实现。它允许组件或类将事件发布给观察者。通过应用事件发布器，可以将事件发布给所有注册的监听器。\",\"应用事件监听器（Application Event Listener）：应用事件监听器是一个接口，通常由Spring框架提供的ApplicationListener接口实现。它定义了一个或多个用于处理特定类型事件的方法。通过实现应用事件监听器接口，并注册到应用事件发布器中，可以接收和处理相应类型的事件。\",\"事件源（Event Source）：事件源是触发事件的对象或组件。在Spring框架的观察者模式中，事件源可以是任何对象，但通常是由应用程序定义的业务对象或组件。当事件源触发事件时，它会将事件发布给应用事件发布器。\",\"事件上下文（Event Context）：事件上下文是事件发生时的上下文信息，它包含了与事件相关的数据和状态。事件上下文可以作为事件对象的一部分，在事件中传递给监听器进行处理。\",\"接下来我们使用 Spring Framework 的事件机制重写这个例子：\",\"首先，我们定义一个事件类 MyEvent，它将作为观察者模式中的事件对象。\",\"public class MyEvent extends ApplicationEvent { private String message; public MyEvent(Object source, String message) { super(source); this.message = message; } public String getMessage() { return message; } } \",\"接下来，创建一个事件源类MyEventPublisher，负责发布事件。\",\"import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.ApplicationEventPublisher; import org.springframework.stereotype.Component; @Component public class MyEventPublisher { @Autowired private ApplicationEventPublisher eventPublisher; public void publishEvent(String message) { CustomEvent customEvent = new CustomEvent(this, message); eventPublisher.publishEvent(customEvent); } } \",\"最后，创建一个事件监听器类MyEventListener，用于接收和处理事件：\",\"import org.springframework.context.ApplicationListener; import org.springframework.stereotype.Component; @Component public class MyEventListener implements ApplicationListener<MyEvent> { @Override public void onApplicationEvent(CustomEvent event) { String message = event.getMessage(); // 在这里处理事件 System.out.println(\\\"收到消息:\\\" + message); } } \",\"在这个示例中，通过 MyEventPublisher 发布了一个自定义事件。当事件发生时，MyEventListener 监听器将接收到该事件，并处理相应的逻辑。需要注意的是，需要使用 @Component 注解将事件发布器和事件监听器声明为 Spring 容器中的组件，以便自动注册和管理。\"]},\"136\":{\"h\":\"总结\",\"t\":[\"观察者模式适用于以下场景：\",\"一对多的依赖关系：当一个对象的状态发生变化时，需要通知多个其他对象进行相应的处理。观察者模式能够实现一对多的通知机制，确保所有相关的观察者都能接收到状态变化的通知并作出相应的响应。\",\"发布-订阅模式：在发布-订阅模式中，观察者模式被广泛应用。事件发布者（发布者）负责发布事件，而订阅者（观察者）订阅感兴趣的事件，并在事件发生时接收通知。这种模式常用于异步消息处理、事件驱动的系统和消息队列等场景。\",\"GUI事件处理：在图形用户界面（GUI）开发中，观察者模式被广泛用于处理用户界面组件的事件。例如，当按钮被点击、文本框内容改变或窗口关闭时，相关的观察者会收到相应的事件通知并执行相应的操作。\",\"系统状态监测和通知：当系统中的某些关键状态发生变化时，需要通知其他模块或组件进行相应的处理。观察者模式可以用于系统监测和通知的场景，例如服务器负载监测、日志记录、缓存更新等。\",\"数据库触发器：在数据库系统中，触发器（Trigger）可以用作观察者模式的实现。当数据库中的数据发生变化时，触发器可以自动触发相应的操作，例如更新相关的数据表、发送通知等。\",\"日志记录和审计：观察者模式可以用于实现日志记录和审计功能。当系统中发生重要事件时，观察者可以接收到事件通知，并将相关信息记录到日志文件或进行审计处理。\",\"需要注意的是，观察者模式适用于那些多个对象之间存在一对多关系的场景，其中观察者和被观察者之间的依赖关系是动态的。在使用观察者模式时，需要合理设计观察者和被观察者的接口，确保它们之间的解耦和灵活性。\"]},\"137\":{\"h\":\"开发相关知识\",\"t\":[\"很多人都觉得开发只是写写代码，其实不然。开发是一个综合性的过程，需要掌握的知识面很广，需要具备的能力也很多。\",\"如果每天的工作都只是在接需求实现需求，那只能说是在做开发，而不是在开发，当你脱离了你目前的项目之后你会发现你并不会有自己的对项目的整体把握和领悟，在接触到一个新的项目后仍然是像拿到一个全新的东西而不是一个模型的另一个版本。\",\"所以，开发是一个需要不断学习的过程，需要不断总结的过程，需要不断思考的过程。\"]},\"138\":{\"h\":\"DDD 领域驱动设计\"},\"139\":{\"h\":\"关于 DDD\",\"t\":[\"领域驱动设计（Domain-Driven Design，DDD）是一种软件设计方法，是一种思想，它以领域为核心，将软件系统拆分为不同的领域，并在不同的领域中建立模型和规则。通过这种方式，可以提高软件系统的可维护性和可扩展性，并减少软件系统中的错误。\",\"在我们以前的后端项目的开发过程当中，软件架构的设计往往是在项目开始之初就确立的，可是在实际的项目开发当中，我们往往发现，架构设计往往是在项目后期才逐渐完善起来的，这往往是因为项目初期对业务的理解不足，或者对软件架构的设计不够清晰，导致架构设计不够合理，最终导致软件系统的可维护性和可扩展性越来越差，而这个时期再开始考虑项目拆分的时候就会因为 MVC 架构各种复杂的调用关系而难以下手。\",\"DDD 的出现就是为了解决这个问题，它将软件系统拆分为不同的领域，并在不同的领域中建立模型和规则，从而提高软件系统的可维护性和可扩展性，并减少软件系统中的错误，刚接触到一个新的领域可以引用事件风暴的方式。事件风暴（Event Storming）是一种由 Alberto Brandolini 在 2013 年提出的工作坊方法，旨在帮助团队在短时间内对一个复杂领域进行建模和理解，帮助跨职能团队通过讨论和协作，快速发现和识别领域中的关键事件和业务流程。\"]},\"140\":{\"h\":\"事件风暴\",\"t\":[\"事件风暴的核心思想是通过可视化事件流来揭示业务领域中的重要行为和互动。以下是事件风暴的一些关键特点和步骤：\"]},\"141\":{\"h\":\"关键特点\",\"t\":[\"高度协作：事件风暴强调团队成员之间的互动和协作，通常包括开发人员、业务专家、产品经理等不同角色。\",\"快速迭代：通过快速生成和调整事件模型，团队能够在短时间内捕捉到领域的复杂性。\",\"可视化：利用便利贴和白板等工具，将事件以可视化的方式展示出来，便于讨论和理解。\",\"领域驱动：专注于业务领域中的实际事件和流程，而非技术实现细节。\"]},\"142\":{\"h\":\"步骤\",\"t\":[\"准备工作：确定讨论的主题和范围，邀请相关领域的专家和团队成员，准备好便利贴、白板或大张纸。\",\"标识事件：在白板上记录领域中的关键业务事件，每个事件用一张便利贴表示，事件通常以过去时态动词短语描述（例如，“订单已创建”）。\",\"排列事件：将事件按照时间顺序排列，展示业务流程的先后顺序。\",\"识别命令：识别触发这些事件的命令或操作（例如，“创建订单”），并将其添加到模型中。\",\"添加参与者：识别执行这些命令的参与者（角色或系统），并将其添加到模型中。\",\"讨论和细化：通过团队讨论，细化和调整事件模型，添加更多的细节和上下文。\",\"识别聚合根和界限上下文：在详细讨论中，识别出领域中的聚合根和界限上下文，帮助进行更细化的领域建模。\",\"通过事件风暴，团队可以在一个开放和互动的环境中，高效地探索和理解复杂的业务领域，进而为后续的设计和开发工作打下坚实的基础。\"]},\"143\":{\"h\":\"核心概念\",\"t\":[\"领域（Domain）：领域是软件系统所要解决的问题域，它包含了软件系统所需要处理的业务逻辑和规则，在理解的基础上，我们可以把它看作是一种边界。\",\"模型（Model）：模型是领域中的实体、值对象和领域服务，它们是领域中最重要的概念，它们定义了领域中的业务逻辑和规则。\",\"领域服务（Domain Service）：领域服务是领域中的辅助服务，它们提供了一些通用的功能，例如查询、验证等。\",\"聚合（Aggregate）：聚合是领域中的一个概念，它将相关的实体和值对象组合在一起，形成一个完整的业务单元。\",\"仓库（Repository）：仓库是领域中的一个概念，它负责存储和检索领域中的实体和值对象。\",\"领域事件（Domain Event）：领域事件是领域中的一个概念，它表示领域中的一个事件，例如订单创建、订单支付等。\",\"领域服务（Domain Service）：领域服务是领域中的一个概念，它提供了一些通用的功能，例如查询、验证等，它只负责组装场景而不提供实现，实现交给领域实体自己来做。\",\"充血模型（Rich Domain Model）：充血模型是一种面向对象的设计思想，它将领域中的业务逻辑和规则封装在在模型实体中。\",\"贫血模型（Anemic Domain Model）：贫血模型是一种面向对象的设计思想，它将领域中的业务逻辑和规则封装在领域模型中，而不是在模型实体中。\",\"工厂（Factory）：工厂是领域中的一个概念，它负责创建领域中的实体和值对象。\",\"值对象（Value Object）：值对象是领域中的一个概念，它表示领域中的一个不可变的数据对象。\",\"实体（Entity）：实体是领域中的一个概念，它表示领域中的一个可变的数据对象。\",\"聚合根（Aggregate Root）：聚合根是领域中的一个概念，它表示领域中的一个聚合的根实体。\",\"防腐层（Anti-Corruption Layer）：防腐层是领域中的一个概念，它负责封装领域模型和外部系统之间的交互，从而减少对外部系统的依赖。\"]},\"144\":{\"h\":\"借鉴思想\",\"t\":[\"DDD 应该一直遵循高内聚低耦合的目标，可以借鉴以下原则：\",\"单一职责原则：在领域模型中，每个模型都应该只有一个职责，即应该只有一个原因导致模型发生变化。\",\"开闭原则：在领域模型中，应该尽量使用抽象和接口，而不是具体的实现，这样可以提高模型的可扩展性和可维护\",\"依赖倒置原则：在领域模型中，应该尽量使用抽象和接口，而不是具体的实现，这样可以提高模型的可扩展性和可\"]},\"145\":{\"h\":\"四层架构\",\"t\":[\"在 DDD 中，通常会使用四层架构来组织代码。这四层架构分别是：\",\"领域层（Domain Layer）：领域层是领域模型的核心，它包含了领域中的业务逻辑和规则。\",\"应用层（Application Layer）：应用层负责协调领域层和基础设施层之间的交互，它负责处理应用程序的输入和输出。\",\"基础设施层（Infrastructure Layer）：基础设施层负责提供基础的服务和设施，例如数据库、缓存等。\",\"表示层（Presentation Layer）：表示层负责处理用户界面和用户交互，它负责将应用程序的输出展示给用户。\"]},\"146\":{\"h\":\"聊聊前端\"},\"147\":{\"h\":\"碎谈\",\"t\":[\"在选择走后端这条路的时候，前辈们都说后端不仅仅需要掌握后端，前端、运维、设计和产品都需要涉猎，现在工作了之后才明白这种趋势在内卷的环境下越来越明显了，很多同学他们在公司的工作都是全栈的职责，有人说现在全栈并不是什么好的现象，只能说明你什么都不精通，但大多数时候这并不是你自己的选择。\",\"学技术也是有鄙视链的，好像在早期后端是瞧不起前端的，觉得前端技术栈太窄了，甚至觉得前端不是程序员，但是到了这个前后端分离的时代，这种观点确实应该被改观了。如果不清楚一条数据如何从界面到服务器再到数据库的完整流程，那说不上是真的了解你的业务，所以程序员的工作就是保持学习，在有知识面广度的情况下向自己感兴趣的方向深耕才是正解。\"]},\"148\":{\"h\":\"我与前端\",\"t\":[\"首先说说前端最开始的接触的包管理器的问题，首先你需要选择一个喜欢的包管理器，这是学习前端的基石，常见的应该有 npm、cnpm、pnpm 和 Yarn，对于这几种包管理器我自己是没有感觉出来有太多的区别，毕竟现在毕竟热门框架的官网都会把常用的命令给列举出来。可以简单的聊聊它们，npm 是最早也是使用最为广泛的包管理工具，同时也是 Node.js 生态系统中的标准包管理工具，其拥有庞大的包仓库和活跃的社区支持，可以找到大量的开源包和资源，选它总没错，如果使用过程中因为网络问题导致包下载不能成功，可以使用淘宝团队改造的 cnpm，cnpm 将 npm 的包从国外的镜像源切换到国内的镜像源，解决了国内用户使用 npm 时速度慢的问题。然后说一下 Yarn，Yarn 是由 Facebook 创建的 JavaScript 包管理工具，旨在解决 npm 的一些性能和稳定性问题， 并且在性能上进行了优化，通过并行下载和缓存等机制加快了依赖项的安装速度，而且它还引入了锁文件（Yarn.lock），用于精确记录项目的依赖关系和版本号，以确保在不同环境中安装的包的一致性。同样的 pnpm 引入了一种称为“逻辑链接”的机制来解决 npm 和 Yarn 在依赖项管理上的一些问题，避免了每个项目都复制一份依赖项的情况，节省了磁盘空间，所以说如果你关注包的安装速度和依赖项管理的性能，可以考虑使用 Yarn 或 pnpm。\",\"然后就需要提到前端一个跨时代的产物——Node.js，Node.js 的出现终于让 JavaScript 不再仅仅运行在浏览器，使其运行在服务器之上，这就为前端开发者带来了代码共享、构建工具、模块化开发、服务端渲染、实时通信等一系列的好处。\",\"其次就是打包工具的选择了，因为自己主要是使用 Vue 开发，所以选择了灵活和性能并重的 Vite，而其底层也是使用了 Rollup，其他的打包工具还有像 webpack、Parcel、Browserify等等，目前肯定还是 webpack 是最流行的打包工具，但是在选型上还是要根据项目规模和个人偏好进行选择。\",\"再之后就是前端基本功了，老生常谈的三剑客（HTML、CSS 和 JavaScript），虽然现在很多人会疑惑到底是学习 TypeScript 还是 JavaScript，这个问题其实在 TypeScript 官网上就有回答：\",\"学习 JavaScript 还是 TypeScript ?\",\"有了语言的基础就可以开始框架的学习了，前端框架三大金刚：React、Vue.js 或 Angular，市面上现在使用率上感觉还是 Vue 更胜一筹，而且这今年国产化的浪潮翻涌，所以拥抱 Vue 确实是一个不错的选择。\",\"如果以上都已经略有小成的哈，我感觉应该能够成为一名合格的前端工程师了，当然这些都是我自己的理解，隔行如隔山，对未知领域的知识充满好奇和尊敬，坚持实践和不断积累经验才是成为优秀开发人员的关键。\"]},\"149\":{\"h\":\"1Panel\"},\"150\":{\"h\":\"聊聊运维面板\",\"t\":[\"在很多内网的服务器中，需要手工输入命令安装各类软件，操作起来费时费力并且容易出错，非常考验运维人员的基本功，而面向一些云服务器来说，我只是需要安装一些数据库或者运行环境，这个时候如果使用运维面板就可以一件安装，简直不要太方便。之前听过的运维面板只有宝塔，不过最近一款开源并且号称新一代的 Linux 服务器运维管理面板 1Panel 横空出世，正好手头也有服务器就看看面板工具是不是真的那么好用。如果想了解更详细的面板介绍可以点击下面链接跳转官网查看。\"]},\"151\":{\"h\":\"快速开始\"},\"152\":{\"h\":\"环境准备和下载\",\"t\":[\"这里我准备了一台阿里云的服务器，下载前注意一下服务器用户是否有足够权限，默认是安装在 /opt 目录下的，而且像很多这种下载脚本执行的安装方式在下载安装的时候会产生文件，所以个人还是推荐创建一个新文件夹再进行下载。执行下面命令即可下载最新安装脚本并自动进行安装。\"]},\"153\":{\"h\":\"启动展示\",\"t\":[\"安装的话会有一些初始化操作的步骤，一步一步完成即可，安装成功后，界面会出现访问服务的网址，如果你手速够快或者一些特殊情况看不到了，可以执行 1pctl user-info 进行查看，然后使用 ip + port 的方式就可以直接跳转登录界面了。\",\"暂无权限访问\",\"如果出现上面界面，是因为新版本增加了一个安全入口登录的限制，这个就需要用 1pctl user-info 这个命令查看 entrance 这个属性跟在端口后才能进行访问。\",\"登录成功\"]},\"154\":{\"h\":\"Nginx\",\"t\":[\"Nginx七大核心应用场景：反向代理、虚拟主机、域名解析、负载均衡、防盗链、url重定向、https。\",\"常见版本如下：\"]},\"155\":{\"h\":\"快速开始\",\"t\":[\"这里拿 Nginx 官方开源版作为示例，首先你得需要一台 Linux 机器并下载 Nginx 二进制包。\",\"准备安装包\",\"使用 ./configure --prefix=/usr/local/nginx 执行 configure 可执行文件，如果需要 gcc 依赖请先下载，如果执行期间有其他缺少的依赖补充后重新执行脚本即可。\",\"配置完成后依次执行 make 和 make install 开始安装，注意可能需要 root 权限。\",\"安装完成后就可以在 /usr/local/nginx 目录下看到我们安装的 Nginx 目录了，可以执行 /sbin 目录下的 nginx 脚本进行启动 nginx 服务，访问 linux 主机 ip 看是否能够启动成功，可以通过 ./nginx -s stop 关闭 Nginx。\"]},\"156\":{\"h\":\"优雅起停 Nginx\",\"t\":[\"首先我们要先知道几个常见的起停 Nginx 的命令：\",\"# 启动 Nginx ./nginx # 快速暴力停止 Nginx ./nginx -s stop # 优雅停止 Nginx ./nginx -s quit # 重新加载配置 ./nginx -s reload \",\"而平时我们真正生产上使用服务器启动和关闭 Nginx 不会总是每次都找到此执行文件执行的，所以我们需要把起停命令添加到 systemctl 来方便我们直接起停，我们可以在 /usr/lib/systemd/system 目录下添加 nginx.service 这个文件，内容如下：\",\"[Unit] Description=nginx After=network.target remote-fs.target nss-lookup.target [Service] Type=forking PIDFile=/usr/local/nginx/logs/nginx.pid ExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf ExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf ExecReload=/usr/local/nginx/sbin/nginx -s reload ExecStop=/usr/local/nginx/sbin/nginx -s stop ExecQuit=/usr/local/nginx/sbin/nginx -s quit PrivateTmp=true [Install] WantedBy=multi-user.target \",\"创建完成之后执行 systemctl daemon-reload 加载一下添加的配置，现在我们就可以使用 systemctl 来控制 Nginx 的起停了。\",\"# 启动 Nginx systemctl start nginx.service # 查看 Nginx 状态 systemctl status nginx.service # 停止 Nginx systemctl stop nginx.service # 设为开机启动 systemctl enable nginx.service # 关闭开机启动 systemctl disable nginx.service \"]},\"157\":{\"h\":\"认识目录\",\"t\":[\"- nginx - conf # 配置目录 - html # 静态资源和界面 - logs # 日志 - sbin # 主进程文件 \"]},\"158\":{\"h\":\"工作模式\",\"t\":[\"Nginx在启动的时候会采用多进程的方式，产生 master 和 worker 两种进程进行工作，master 负责统一协调 worker 进程的工作调度，而真正工作的都是一个个的 worker 进程。\",\"多进程的工作模式\"]},\"159\":{\"h\":\"配置文件详解\"},\"160\":{\"h\":\"自定义虚拟主机域名\",\"t\":[\"在我们简单了解了 nginx.conf 文件后，我们可以看到其中每个 http 下的 server 就是一个虚拟主机，这里我们模拟一个新的虚拟主机通过不同端口访问不同的资源。\",\"一样的，如果我们想通过不同的域名访问不同的资源，我们可以修改 server_name 来区分资源路径。\"]},\"161\":{\"h\":\"虚拟主机域名匹配规则\",\"t\":[\"完整匹配，如果配置的是完整的域名，则按照完整的域名进行匹配，如果配置了多个，则按照从上到下的优先级来决定。server_name 配置项后可以跟多个域名，用空格隔开区分。\",\"通配符匹配，可以通过*来匹配域名。\",\"正则匹配，一般用于二级域名来使用，通过正则表达式来匹配域名。\"]},\"162\":{\"h\":\"反向代理\",\"t\":[\"反向代理不是什么高不可攀的东西，如果想理解反向代理我们必须结合正向代理一起理解，一句话来说就是站在用户角度对后台服务器是否可见，如果是正向代理，就好像我们科学上网，配置一台代理服务器访问海外的服务器，我们是知道海外服务器ip地址的，这就是正向，同理，Nginx 作为网关入口，往往是和内网的后台服务器配合，用户访问 Nginx 看不到真实的后台服务器，所以 Nginx 的代理实现是反向的。\",\"Nginx 作为反向代理服务器的时候，设计往往是隧道式的，即所有的请求都必须从 Nginx 进入，这就是所谓的隧道式的含义，而如果是一些下载的请求，返回的数据和进入的请求竞争带宽则非常影响性能，所以就有了更高性能的 lvs 来做负载均衡，或者是内网后台服务器只允许进入走 Nginx 代理，而发送则接入外围网管直接和请求方通讯这种方式。\",\"而我们开启代理非常简单，只需要我们在 server 中 location 下编辑 proxy_pass 即可实现代理跳转。\"]},\"163\":{\"h\":\"负载均衡\"},\"164\":{\"h\":\"轮训\",\"t\":[\"首先我们需要使用 upstream 配置一个代理集，然后通过 proxy_pass 指定这个代理集，之后我们每次请求这个 server 就会自动轮流执行这个代理集中的地址。\"]},\"165\":{\"h\":\"权重\",\"t\":[\"权重就是增加每台机器想访问概率的比重，在轮训的基础上配置每个代理服务的 wight 值即可，比如说下面的例子，权重之比是 4:1，那么命中 88 端口的概率就是 80%。\",\"当然在除了 weight 这个配置之外，每一个 server 后还可以追加一些状态，像备用服务的 backup 和 下线状态 down，虽然这些状态并不常用，因为如果出现了正常服务器失效的时候，备用服务器应该也有可能是失败的，并且修改状态后还需要 reload，也是十分不方便的。\"]},\"166\":{\"h\":\"ip_hash（不常用）\",\"t\":[\"根据客户端的 ip 转发相同的服务器。\"]},\"167\":{\"h\":\"least_hash（不常用）\",\"t\":[\"最少连接数访问。\"]},\"168\":{\"h\":\"url_hash（不常用）\",\"t\":[\"根据 url 定向访问。\"]},\"169\":{\"h\":\"fair（不常用）\",\"t\":[\"根据后端服务器响应时间请求转发。\"]},\"170\":{\"h\":\"动静分离\",\"t\":[\"一般动静分离都用在中小型网站，因为如果是像淘宝这种静态文件非常多的项目如果放在 Nginx 会占据大量带宽。动静分离的目的就是减轻后台服务器的压力，把一些静态的图片、样式都放在 Nginx 上，同时可以减轻网络的开销。\"]},\"171\":{\"h\":\"URL Rewrite\",\"t\":[\"这功能是为了掩饰访问后台服务器真正的 url，先看下面的例子。\",\"上面配置的含义就是我们将 /index.jsp?pageNum=2 这种实际的 URL 后缀代替成了 /2.html 来访问，其中 rewrite 后面的的三个部分分别是正则、代替的内容和flag标记，其中 flag 标记部分有很多种：\",\"last：匹配多次正则，一直到最新的匹配结果。\",\"break：匹配后立即终止返回结果。\",\"redirect：返回302临时重定向，浏览器会显示跳转后的URL地址。\",\"permanent：返回301永久重定向，浏览器会显示跳转后的URL地址。\"]},\"172\":{\"h\":\"防盗链\",\"t\":[\"Nginx 实现防盗链需要配置 valid_referers，来校验请求头中是否携带 Referer 和其对应的网址是否正确。\"]},\"173\":{\"h\":\"高可用配置(HA)\",\"t\":[\"区别于一些集群，Nginx 的高可用是基于硬件的一种模拟集群，需要借助 keepalived 实现 ip 漂移来实现一个模拟 ip 访问两个 Nginx 对象服务器。\"]},\"174\":{\"h\":\"扩容\",\"t\":[\"扩容的方式有很多，有基于硬件资源增加的单机垂直扩容、集群化的水平扩容、细粒度拆分的分布式扩容，当然也可以从服务上进行数据异构化或者服务异步化。\"]},\"175\":{\"h\":\"ip_hash\",\"t\":[\"即根据访问请求的来源确定一个哈希值，这个请求以后只能请求到一台固定的地址。实现 ip_hash 是在 upstream 中增加一行声明即可实现。\"]},\"176\":{\"h\":\"$request_uri\",\"t\":[\"根据请求携带的路径进行定向请求。\"]},\"177\":{\"h\":\"$cookie_jessionid\",\"t\":[\"根据请求携带的 sessionid 进行定向请求。\"]},\"178\":{\"h\":\"sticky\",\"t\":[\"一个模块化的保持会话方式。\"]},\"179\":{\"h\":\"生产安全可靠\",\"t\":[\"我目前还没做过运维的工作，如果说搞测试、版本和性能服务器也算运维的话，那我应该也算是半个运维吧。\",\"刚接触 Linux 的时候，感觉命令行窗口酷炫得很，慢慢的才觉得可视化是真香啊。目前在工作中的上线模式还是 Jenkins 流水线的方式，而在非生产服务器上，还是自己打包扔上去重启服务来使用，这种方式确实有些 low 并且不太符合规范。\",\"之前在服务器很火的运维工具就是宝塔了，像这种可视化的运维管理界面确实降低了服务器部署服务的难度，不过我个人是没用过，所以自己在服务器上摸爬滚打的时候没少删错东西，虽然大家嘴上天天 rm -rf /* ，可是身体还是很乖的。\",\"在过去几年以 Docker 为首的容器化技术部署方式发展迅猛，当时目前公司也是有 k8s 的项目，虽然我也没用上，但是我记得自己看过容器化投产的性能瓶颈和安全性的问题，相信在容器化火热的今天，大部分的开发者还是因为容器的灵活和便捷性，所以日常个人使用还是十分推荐的，至于真的投产之后的问题还是得以后接触了才能下结论。\"]},\"180\":{\"h\":\"Arthas（阿尔萨斯)\"},\"181\":{\"h\":\"简介\",\"t\":[\"Arthas 是阿里提供的一款线上监控诊断产品，通过全局视角实时查看应用 load、内存、gc、线程的状态信息，并能在不修改应用代码的情况下，对业务问题进行诊断，包括查看方法调用的出入参、异常，监测方法执行耗时，类加载信息等，大大提升线上问题排查效率。\",\"当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：\",\"这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？\",\"我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？\",\"遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？\",\"线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！\",\"是否有一个全局视角来查看系统的运行状况？\",\"有什么办法可以监控到 JVM 的实时运行状态？\",\"怎么快速定位应用的热点，生成火焰图？\",\"怎样直接从 JVM 内查找某个类的实例？\"]},\"182\":{\"h\":\"Docker\",\"t\":[\"在云计算的推动下，虚拟化技术是大势所趋，Docker 是作为运维工程师及后端开发人员都应该了解的技术，简化环境搭建、节省开支、持续交付、部署和部署。\",\"学习后我们再也不用受各种安装环境时提示安装失败的折磨，并且在微服务的项目中我们所开发的项目也都已经部署在容器，这是我们面向云原生的怀抱、学习 k8s 之前必须要学会的知识点。\"]},\"183\":{\"h\":\"基本概念\",\"t\":[\"Docker 包括三个基本概念:\",\"镜像（Image）：相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。\",\"容器（Container）：镜像和容器的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。\",\"仓库（Repository）：仓库可看成一个代码控制中心，用来保存镜像。\"]},\"184\":{\"h\":\"安装\"},\"185\":{\"h\":\"下载并安装\",\"t\":[\"根据官方文档下载指定操作系统的安装包安装即可。\"]},\"186\":{\"h\":\"常用 Linux 命令\",\"t\":[\"后段开发者难免需要经常和服务器打交道，自己把经常用到的命令都统计下来方便翻阅查看。\"]},\"187\":{\"h\":\"Linux 关机重启\",\"t\":[\"# 关机 shutdown -h now # 重启 shutdown -r now \"]},\"188\":{\"h\":\"ssh key\",\"t\":[\"ssh-keygen -t rsa -C your_email@example.com \"]},\"189\":{\"h\":\"自定义快捷指令\",\"t\":[\"alias ll='ls -alF' \"]},\"190\":{\"h\":\"后台运行命令\",\"t\":[\"# 后台运行,并且有nohup.out输出 nohup xxx & # 后台运行, 不输出任何日志 nohup xxx > /dev/null & # 后台运行, 并将错误信息做标准输出到日志中 nohup xxx >out.log 2>&1 & \"]},\"191\":{\"h\":\"查看磁盘空间\",\"t\":[\"# 查看根目录下文件夹大小 df # 查看当前目录下占用磁盘空间大小前 15 的文件夹 du -ahx * | sort -rh | head -n 15 \"]},\"192\":{\"h\":\"创建和查看定时任务\",\"t\":[\"# 查看定时任务 crontab -l # 编辑定时任务 crontab -e \"]},\"193\":{\"h\":\"解压缩命令\",\"t\":[\"# 压缩目录为 tar 文件 tar zcvf xxx.tar # 压缩目录为 zip 文件 zip -r xxx.zip # 解压 tar 文件到当前目录 tar zxvf xxx.tar # 解压 tar 到指定文件夹 tar zxvf xxx.tar -C /xxx/yyy/ # 解压 zip 到指定目录 unzip -d xxx xxx.zip \"]},\"194\":{\"h\":\"vim 命令\",\"t\":[\"#normal模式下 g表示全局, x表示查找的内容, y表示替换后的内容 :%s/x/y/g #normal模式下 0 # 光标移到行首(数字0) $ # 光标移至行尾 shift + g # 跳到文件最后 gg # 跳到文件头 # 显示行号 :set nu # 去除行号 :set nonu # 检索 /xxx(检索内容) # 从头检索, 按n查找下一个 ?xxx(检索内容) # 从尾部检索 \"]},\"195\":{\"h\":\"中间件\"},\"196\":{\"h\":\"关于持久化\"},\"197\":{\"h\":\"引言\",\"t\":[\"持久化是计算机科学中一个重要的概念，指的是将数据在计算机系统中长期保存或持久存储的过程和方法。它确保在计算机系统关闭或断电后，数据能够被保留并在需要时恢复。我们平时接触最多的应该就是其在数据库管理系统方面的应用了，这一部分主要介绍使用过的数据库相关的知识点。\",\"下面是数据库排行网站 db-engines 官网，它根据综合指标来评估数据库的受欢迎程度来提供各种数据库的排名和比较，大家可根据火热程度做学习计划参考。\"]},\"198\":{\"h\":\"Redis\",\"t\":[\"Redis (Remote Dictionary Server) 是一个开源的内存数据结构存储，用作数据库、缓存和消息代理。它支持多种数据结构，如字符串（strings）、哈希（hashes）、列表（lists）、集合（sets）以及有序集合（sorted sets），具有丰富的功能和高性能。\"]},\"199\":{\"h\":\"特点\",\"t\":[\"内存存储：所有数据都保存在内存中，读写速度非常快，非常适合需要快速响应的场景。\",\"持久化：Redis支持将数据持久化到磁盘，可以通过快照（snapshot）和AOF（Append-Only File）两种方式进行。\",\"高可用性和分布式：通过Redis Sentinel实现高可用，通过Redis Cluster实现数据分布和负载均衡。\",\"丰富的数据类型：支持多种数据结构，便于解决复杂的数据存储和操作问题。\",\"Lua脚本：支持Lua脚本，可以实现复杂的原子操作。\",\"事务支持：支持事务，保证一系列操作的原子性。\"]},\"200\":{\"h\":\"常用场景\",\"t\":[\"缓存（Caching）：\",\"对需要频繁访问的数据进行缓存，如用户信息、商品信息等。\",\"极大提高数据的读取速度，减轻数据库负载。\",\"会话存储（Session Store）：\",\"场景：在Web应用中，将用户会话信息存储在Redis中，如登录状态、购物车等。\",\"好处：读取速度快，支持持久化，可以实现分布式会话管理。\",\"实时数据分析（Real-time Analytics）：\",\"场景：用于实时统计和分析，如网站的访问量统计、实时排名等。\",\"好处：通过内存操作实现快速数据处理和统计。\",\"消息队列（Message Queue）：\",\"场景：利用Redis的列表（List）或发布/订阅（Pub/Sub）机制实现消息队列，进行异步任务处理。\",\"好处：简单易用，适合中小规模的消息队列需求。\",\"排行榜（Leaderboard）和计数器（Counting）：\",\"场景：实现各种排行榜功能，如游戏排名、积分榜等。\",\"好处：通过有序集合（sorted set）快速实现排名和分数统计。\",\"分布式锁（Distributed Lock）：\",\"场景：在分布式系统中实现锁机制，确保同一资源不会被多个进程同时修改。\",\"好处：利用Redis的原子操作，实现简单有效的分布式锁。\",\"地理信息存储和查询（Geospatial Information Storage and Query）：\",\"场景：存储和查询地理位置数据，如定位服务、地图应用等。\",\"好处：通过geo命令集快速实现地理位置的存储和半径查询。\"]},\"201\":{\"h\":\"重构接收价格前置项目\"},\"202\":{\"h\":\"引言\",\"t\":[\"没想到，重构这个项目的原因居然是公司开始不再使用 Tomcat 部署项目，想把之前的 war 包启动的项目都换成 jar 包部署。之前的前置项目大部分都都是“远古时期”流传下来的“毒瘤”，纯 Java 项目，各种 Thread 满天飞，规范什么的就更别提了，为了追赶上线进度，我们引用 tomcat-embed 模块实现 Java 内置 Tomcat 启动，核心代码如下：\",\"public class Main { public static void main(String[] args) throws Exception { String webappDirLocation = \\\"src/main/webapp\\\"; Tomcat tomcat = new Tomcat(); tomcat.setPort(8080); tomcat.addWebapp(\\\"/\\\", new File(webappDirLocation).getAbsolutePath()); tomcat.start(); tomcat.getServer().await(); } } \",\"虽然这样可以脱离 Tomcat 部署，但是肯定不是长远之计，所以重构的任务就落到了我的身上，其实在我看来这些老项目还是应该尽早维护，趁着了解业务的人都还在和项目并不复杂的时候，尽早规范统一起来才是正途。虽然这些前置项目平时都不是我负责，但是多多少少上线和联调的时候也都接触过，并说不上陌生，而且业务也不负责，话不多说直接开始。\"]},\"203\":{\"h\":\"重构思路\"},\"204\":{\"h\":\"框架选型\",\"t\":[\"价格接收转发前置项目，这是一个接收交易所价格并转发给多个后台的纯后台项目，几乎没有什么逻辑处理，就是是充当透传的作用，因为数据压力不大，所以我们采用双活的 Spring Boot 来选择重构部署。由于只是转发价格，并不作存储作用，所以我们并不会牵扯到数据持久化的问题，不会用到数据库。往后台项目推送价格有使用 MQ 交互的，也有用 Socket 通信的，MQ 这里我们只能使用公司在用的 IBM MQ，Socket 我们就继续原来使用了 Java 原生的 Socket 类实现。置于其他的知识点就放在下面一一介绍了。\"]},\"205\":{\"h\":\"业务梳理\",\"t\":[\"业务流程就是在工作日时将所需要的产品价格从交易所获取并转发给报价平台、K线平台和日终价格三个后台项目。\",\"与交易所建立通讯之后，通过接口会一直受到价格，并且连接建立之后并不会主动断开，除非遇到网络等特殊情况，如果发生断联则触发重连策略。而所收到的价格并不是随时并且全部都发送，因为有些产品的价格是我们不需要的，但是又不确定对方发送的产品价格是固定的，所以我们将自己定义的工作日和所需产品价格。而所需数据的后台项目有新有旧，所以对接价格的接口实现还需要和后台一致。\"]},\"206\":{\"h\":\"方案设计\"},\"207\":{\"h\":\"线程池方案\",\"t\":[\"项目中需要使用多个线程监听价格队列的变化，所以我们统一使用 Spring 的 ThreadPoolTaskExecutor 来创建线程池进行管理，根据系统需求规定好核心线程数、最大线程数、任务队列长度和线程最大空闲时间等关键参数，作为 Bean 注入到 Spring 容器后，通过实现 ApplicationRunner 中的 run 方法在项目启动的时候从容器中拿到线程池来 execute 各个业务线程。\",\"因为业务线程有依赖关系，需要考虑到线程的启动顺序，比如说价格发送线程必须在价格接收线程启动完成后再启动，我们这里采用 Java 提供的 CountDownLatch 线程计数器来解决，当每条价格发送线程启动后执行计数器减一的操作，在计数器为零再放行价格接收线程开启。\"]},\"208\":{\"h\":\"价格的接收与筛选\",\"t\":[\"从交易所获取的价格虽然密集的，但是好在并不会频繁更新，而且由于我们只需要工作日接收价格并且只关心我们在意的币种，所以我们将工作日和需求币种维护到 yaml 中，如果是接收的价格并没有在我们的需求范围内则直接抛弃。\",\"集成交易所的 sdk 后，通过唯一的身份.cfg文件与交易所建立 Socket 长链接，交易所返回的价格存储到本地阻塞队列中，因为要求价格的实时性，所以当主队列价格超过20条时清空队列。\"]},\"209\":{\"h\":\"价格的处理与转发\",\"t\":[\"本项目唯一麻烦的点就是价格的处理与转发，因为需要往多个后台进行实时转发，并且每个后台对价格的格式、种类和接收方式也有要求，所以为了解耦，我们借助 Spring 的 Event 事件来处理每个平台价格的转发，也就是观察者模式。\",\"首先，为了解决实时性，我们用 while 一直从总价格队列中 take 拿取价格到我们针对每个平台初始化的多个阻塞队列来区分价格，并将这些队列注册到 Spring 容器中，通过新建线程来监听容器每个后台价格队列的变化，当总价格队列根据价格类型和币种存储将价格分发到后台队列中时，线程监听到价格并将价格借助 Event 的参数传递发布出去，监听每个 Event 的观察者收到参数后对报文进行封装并发送。\"]},\"210\":{\"h\":\"代码实现\",\"t\":[\"因为代码都在内网，这里采用伪代码的方式进行展示。\"]},\"211\":{\"h\":\"线程池\"},\"212\":{\"h\":\"价格处理与转发\"},\"213\":{\"h\":\"配置转存到环境变量\",\"t\":[\"由于最近上线总是出现问题，而上线规范还要求“一包到底”，这就导致如果上线包出错会导致重新准备包将重新走一遍上线流程，而仅仅是修改配置的话这样反而显得得不偿失，所以沟通后决定将生产包中的配置和代码分离开来，每次上包只包含代码，这样配置抽离存放就有两种方案，一种是放在云平台读取，另一种就是放在环境变量中。\",\"如果是放在微服务中来讲，将配置放在 Nacos 或 Spring Cloud Config 上是为了方便集中管理，而且使用这种框架也可以动态更新配置，最根本的原因还是为了多环境和多实例的支持，让多台环境不用重复配置相同的配置。可现在像一些 Spring MVC 的老项目完全没有这种需求，基本都是打 war 包双活部署，而且并没有这种云配置的框架支持，所以我们决定把 .properties 中的配置迁移到环境变量读取。\"]},\"214\":{\"h\":\"实操\",\"t\":[\"如果 Spring MVC 项目一切用法都规范的话，大部分 .properties 中的配置读取都是在 xml 中用 ${} 占位符读取出来的，至于加载 .properties 则是用下面这种方式读取配置的。\",\"<bean class=\\\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\\\"> <property name=\\\"location\\\" value=\\\"classpath:config.properties\\\" /> </bean> \",\"当我们全部将 .properties 中的变量添加到环境变量中后，把项目中的 .properties 全部删除并且把上面读取的 bean 也删除掉后启动，发现项目从环境变量中读取的 value 全部都是 String 类型，当你一些端口一类的变量需要其他类型的时候，在转换的时候会出现问题，这个问题的解决方法就是加一个空的上面占位符所读取的类，让 Spring 这个类帮我们做类型转换即可。\",\"如果有些项目并不规范，有些配置是调用 ClassLoader() 读取文件获取的配置，这些就要用到 System.getenv() 方法获取到环境变量的 Map ，然后匹配赋值即可。不过这个方法有个弊端，无论是 Windows 还是 Liunx ，这个方法只能获取到全局（root）的变量，获取不到个人用户下的环境变量，所以在移动环境变量的时候尽量配置到全局变量中去。\"]},\"215\":{\"h\":\"总结\",\"t\":[\"虽然成功把配置和代码从包中分离出来了，但是只能说是符合当前公司的使用场景，至于是不是最优解还尚且未知，希望以后可以学习到其他更优实践。\"]},\"216\":{\"h\":\"打包工具-Ant\"},\"217\":{\"h\":\"对ant的理解\",\"t\":[\"Apache Ant，在我看来称他为时代弃子也不为过，我现在都还依稀记得当时学习ant时看到的一篇文章里有那么一句话：使用 ant 作为构建工具对程序员来说是一种挑战。\",\"对我来说，认识到ant还是因为刚步入社会的公司里总有些老旧的纯 Java 项目依然苟延残喘，第一次看见项目目录里的 build.xml 的我那时候还没有认识到问题的严重性，直到自己负责这些项目打包上线的时候，我才发现不知不觉，我已经和它打了两年的交道了。说句题外话，其实相对于我这个年龄段的程序员来说，xml文件就已经逐渐被 yml 所取代了，虽然 xml 在公司项目中更容易维护，但是体积过大和比较繁琐的标签和属性确实让人头大，不过对我来说，拥抱 yaml 的原因只有优雅二字而已。言归正传，想学会ant最主要的就是学会读懂构建脚本，先列举一个简单的Java项目打 jar 包的例子：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project name=\\\"myproject\\\" default=\\\"build\\\"> <!-- 定义属性 --> <property name=\\\"src.dir\\\" value=\\\"src\\\"/> <property name=\\\"build.dir\\\" value=\\\"build\\\"/> <property name=\\\"dist.dir\\\" value=\\\"dist\\\"/> <property name=\\\"main-class\\\" value=\\\"com.example.MyApp\\\"/> <!-- 定义任务 --> <target name=\\\"clean\\\"> <delete dir=\\\"${build.dir}\\\"/> <delete dir=\\\"${dist.dir}\\\"/> </target> <target name=\\\"compile\\\" depends=\\\"clean\\\"> <mkdir dir=\\\"${build.dir}\\\"/> <javac srcdir=\\\"${src.dir}\\\" destdir=\\\"${build.dir}\\\"/> </target> <target name=\\\"build\\\" depends=\\\"compile\\\"> <mkdir dir=\\\"${dist.dir}\\\"/> <jar destfile=\\\"${dist.dir}/myapp.jar\\\" basedir=\\\"${build.dir}\\\"> <manifest> <attribute name=\\\"Main-Class\\\" value=\\\"${main-class}\\\"/> </manifest> </jar> </target> </project> \",\"其实这个脚本的内容就挺“Java”的：定义属性，执行任务，所以整个脚本最重要的就是其中的一个个<target></target>标签中的任务，这里的 target 任务和 Gradle 里的 task 十分相像，里面的步骤也是根据一个个的命令标签从上到下执行的，正如这里的打 jar 包的操作，就是使用了<jar></jar>标签来实现的，所以相比于Maven和Gradle来说，ant并不是一无是处，跨平台、简单易用、强大的任务库和可拓展性这些优点放在现在就是一句话，成熟！可是陈旧的设计注定它不能拥有依赖管理、自动化测试、增量构建这些功能，这也注定了它逐渐被 Maven 和 Gradle 所取代，并逐渐被视为过时的技术。\"]},\"218\":{\"h\":\"工作中遇到的Ant打包需求\",\"t\":[\"low 归 low，活还是得照干，下面是工作上项目打包的一些需求记录。\"]},\"219\":{\"h\":\"构建war包和jar包中的Manifest文件添加打包Git分支明细\",\"t\":[\"<target name=\\\"set-version\\\"> <exec executable=\\\"git\\\" outputproperty=\\\"git.branch\\\"> <arg value=\\\"rev-parse\\\" /> <arg value=\\\"--abbrev-ref\\\" /> <arg value=\\\"HEAD\\\" /> </exec> <manifest file=\\\"MANIFEST.MF\\\"> <attribute name=\\\"Git-Branch\\\" value=\\\"${git.branch}\\\" /> </manifest> </target> \"]},\"220\":{\"h\":\"脚本中逻辑判断\",\"t\":[\"ant 中并不存在 if 标签来进行逻辑判断，如果想实现是否执行的步骤需要将逻辑抽离到一个 target 后使用 antcall 标签来调用，根据 target 标签中的 if 属性来决定是否执行。\",\"<target name=\\\"step1\\\"> .... <ant call target=\\\"step2\\\"> </target> <target name=\\\"step2\\\" if=${flag}> .... </target> \"]},\"221\":{\"h\":\"切面编程\"},\"222\":{\"h\":\"浅聊AOP\",\"t\":[\"当我第一次接触Spring框架的时候，就告诉我们 IOC（控制反转） 和 AOP（面向切面编程） 这两个最核心的知识点，IOC 作为我们工作中最经常使用的知识点大家肯定是烂熟于心，而一聊到 AOP ，脑海中想到的只有零零散散的面试题，和一些日志、缓存、事务、安全、权限等功能场景，这些场景确实主要在项目搭建阶段就已经搭建完毕了，这也导致我们很少在工作中接触到它。其实学习使用 AOP 是相对简单的，我们需要先知道以下几个核心概念：\",\"切面：一个关注点的模块化，这个关注点可能会横切多个对象。\",\"连接点：程序执行过程中明确的点，如方法调用或异常处理器。\",\"切点：指定一个或多个连接点，切面在这些点上执行它的操作。\",\"通知：切面在特定连接点上执行的操作，有 before、after、around、afterThrowing 和 afterReturning 等类型。\",\"织入：将切面应用到目标对象来创建新的代理对象的过程。\",\"通过这些概念我们也可以看出来，AOP 的基本思想是将这些横切关注点与系统的核心业务逻辑分离开来，通过定义一个切面（Aspect）来包含这些关注点，然后在系统运行时，动态地将切面织入到核心业务逻辑中。\",\"AOP 是一种编程范式，是一种思想，用于解决横切关注点的模块化问题。我们常用的 AspectJ 则是基于 Java 的 AOP 框架，提供了实现 AOP 概念的语法和工具。\"]},\"223\":{\"h\":\"工作中使用到 AOP 的例子\"},\"224\":{\"h\":\"自定义日志注解\",\"t\":[\"最经典的切面应用场景，为了更加灵活和方便的查看每个方法和请求的出参入参，我们可以使用自定义注解的方式指定需要打印的方法或者类。\",\"首先定义打印信息。\",\"@Data public class ILogPrintDTO { /** * 开始时间 */ private String beginTime; /** * 请求入参 */ private Object[] inputParams; /** * 返回参数 */ private Object outputParams; } \",\"定义日志注解，作用域为方法或类，并在运行时生效。\",\"@Target({ElementType.TYPE, ElementType.METHOD}) @Retention(RetentionPolicy.RUNTIME) public @interface ILog { /** * 是否需要打印入参 * * @return 入参打印是否打印 */ boolean input() default true; /** * 是否需要打印出参 * * @return 出参打印是否打印 */ boolean output() default true; } \",\"定义切面\",\"@Aspect public class ILogPrintAspect { @Pointcut(\\\"@within(com.sbc.log.annotation.ILog) || @annotation(com.sbc.log.annotation.ILog)\\\") public void pointcut() { } @Around(\\\"pointcut()\\\") public Object around(ProceedingJoinPoint pjp) throws Throwable { long startTime = SystemClock.now(); MethodSignature methodSignature = (MethodSignature) pjp.getSignature(); Logger log = LoggerFactory.getLogger(methodSignature.getDeclaringType()); String beginTime = DateUtil.now(); Object result = null; try { result = pjp.proceed(); } finally { Method targetMethod = pjp.getTarget().getClass().getDeclaredMethod(methodSignature.getName(), methodSignature.getMethod().getParameterTypes()); ILog logAnnotation = Optional.ofNullable(targetMethod.getAnnotation(ILog.class)).orElse(pjp.getTarget().getClass().getAnnotation(ILog.class)); if (logAnnotation != null) { ILogPrintDTO logPrint = new ILogPrintDTO(); logPrint.setBeginTime(beginTime); if (logAnnotation.input()) { logPrint.setInputParams(buildInput(pjp)); } if (logAnnotation.output()) { logPrint.setOutputParams(result); } String methodType = \\\"\\\", requestURI = \\\"\\\"; try { ServletRequestAttributes servletRequestAttributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes(); assert servletRequestAttributes != null; methodType = servletRequestAttributes.getRequest().getMethod(); requestURI = servletRequestAttributes.getRequest().getRequestURI(); } catch (Exception ignored) { } log.info(\\\"[{}] {}, executeTime: {}ms, info: {}\\\", methodType, requestURI, SystemClock.now() - startTime, JSON.toJSONString(logPrint)); } } return result; } private Object[] buildInput(ProceedingJoinPoint pjp) { Object[] args = pjp.getArgs(); Object[] printArgs = new Object[args.length]; for (int i = 0; i < args.length; i++) { if ((args[i] instanceof HttpServletRequest) || args[i] instanceof HttpServletResponse) { continue; } if (args[i] instanceof byte[]) { printArgs[i] = \\\"byte array\\\"; } else if (args[i] instanceof MultipartFile) { printArgs[i] = \\\"file\\\"; } else { printArgs[i] = args[i]; } } return printArgs; } } \",\"创建配置类\",\"@Configuration public class LogAutoConfiguration { /** * 日志打印 AOP 切面 */ @Bean public ILogPrintAspect iLogPrintAspect() { return new ILogPrintAspect(); } } \"]},\"225\":{\"h\":\"返回对象脱敏\",\"t\":[\"最近公司开始要求对客户信息的保密性进行加强，需要我们将日志和前台界面的客户信息进行加密处理，由于我们项目的日志五花八门，而且使用的架构也不尽相同，所以日志脱敏的解决办法就是开发一个脱敏工具类，同时将脱敏需要的依赖打包成 jar 添加到每个项目中去，检索项目中所有打印日志的语句，统一加上工具类中的脱敏方法，听起来这就是个感人的工作。其次是前台界面客户信息脱敏，因为我们大部分项目都是纯后台，所以负责这个任务的工作就落到了我另一个同事头上，当他在和我讨论这个实现的时候和我说了一下他的思路：我们后台需要做的就是把传递给前台的 vo 中的敏感信息过滤，如果每个 vo 对象都要过滤那简直是天方夜谭，于是他想将所有 controller 中的方法作为切点增加个切面，拿到每个方法返回值判断 vo 并进行过滤。下面我拿 demo 来演示一下：\",\"首先我们先模拟一个 controller 返回前台一个 vo：\",\"@GetMapping(\\\"/test/vo\\\") public UserVo testReturnVo() { return UserVo.builder() .id(IdUtil.getSnowflakeNextId()) .email(\\\"recipient@example.com\\\") .firstName(\\\"baicheng\\\") .lastName(\\\"song\\\") .phoneNumber(\\\"12345678912\\\") .username(\\\"songbaicheng\\\") .build(); } @Data @Builder public class UserVo { private Long id; private String username; private String email; private String firstName; private String lastName; private String phoneNumber; } \",\"接下来新增切面，把要处理返回值的方法作为切点托管。这里有两种方式，分别是在 @Around 和 @AfterReturning 中进行操作，如果我们只是操作返回值，则推荐使用 @AfterReturning 中获取入参中的返回值项进行修改，如果有其他更复杂的操作，则可以在 @Around 的 ProceedingJoinPoint 获取更多的钩子进行操作。而且值得注意的是如果这里同时使用两个方法的话，是先执行 @AfterReturning 再执行 @Around。\",\"@Slf4j @Aspect @Component public class TestReturnVoAspect { // 如果用切点表达式力度太大或者不够灵活的时候，可以使用自定义注解的方式代替切点表达： // @Pointcut(\\\"@annotation(com.example.CustomAnnotation)\\\") @Pointcut(\\\"execution(* com.sbc.springbootmoudle.controller.HelloController.testReturnVo(..))\\\") public void servicePointcut() { } /** 方法一 */ @Around(\\\"servicePointcut()\\\") public Object aroundAdvice(ProceedingJoinPoint pjp) throws Throwable { // 获取方法返回值 Object result = pjp.proceed(); if (result instanceof UserVo) { // 模拟脱敏操作 return UserVo.builder() .id(IdUtil.getSnowflakeNextId()) .email(\\\"**********@example.com\\\") .firstName(\\\"ba****ng\\\") .lastName(\\\"s**g\\\") .phoneNumber(\\\"123****912\\\") .username(\\\"son*****heng\\\") .build(); } return result; } /** 方法二（推荐） */ @AfterReturning(value = \\\"servicePointcut()\\\", returning = \\\"result\\\") public void doAfterReturning(JoinPoint joinPoint, UserVo result) { if (result instanceof UserVo) { // 模拟脱敏过程 result.setUsername(\\\"so****ng\\\"); result.setEmail(\\\"**********@example.com\\\"); result.setFirstName(\\\"ba****ng\\\"); result.setLastName(\\\"s**g\\\"); result.setPhoneNumber(\\\"123****912\\\"); } } } \",\"请求方法就可以看到返回的 Vo 已经脱敏：\",\"脱敏后的 Vo\"]},\"226\":{\"h\":\"反射\"},\"227\":{\"h\":\"聊聊反射\",\"t\":[\"基本搜索 Java 学习路线，摆脱基础语法后迈入高级特性的第一步就是注解（Annotations）和反射（Reflection）。当时在学完内置注解、自定义注解、获取类信息、调用方法和访问字段之后，大概清楚这是个搭配起来简化开发的组合，但是这些场景一般都是在框架开发、动态代理、注解处理才会出现，而且使用反射还会还会在一定程度上降低性能，并且在编译时无法进行类型检查，可能会引发运行时异常。不过在一些特殊情况下合理利用反射可以为我们带来灵活性和扩展性。\",\"使用反射我们必须知道的几个核心类和接口：\",\"Class 类：Class 类是反射的核心类，它提供了许多方法来获取关于类的信息，如类的名称、修饰符、父类、接口、构造函数、方法、字段等。\",\"Constructor 类：Constructor 类表示类的构造函数，它可以用于创建对象实例。通过 Class 类的 getConstructors() 或 getConstructor() 方法可以获取构造函数对象。\",\"Method 类：Method 类表示类的方法，它可以用于调用方法。通过 Class 类的 getMethods() 或 getMethod() 方法可以获取方法对象。\",\"Field 类：Field 类表示类的字段，它可以用于访问和修改字段的值。通过 Class 类的 getFields() 或 getField() 方法可以获取字段对象。\",\"反射的常用使用场景有以下几种：\",\"动态创建对象实例：通过获取类的构造函数对象，可以动态地创建类的实例。\",\"调用类的方法：通过获取类的方法对象，可以在运行时动态地调用方法。\",\"访问和修改类的字段：通过获取类的字段对象，可以在运行时动态地访问和修改字段的值。\",\"获取类的信息：可以获取类的名称、修饰符、父类、接口、构造函数、方法和字段等信息。\"]},\"228\":{\"h\":\"工作中使用反射的例子\"},\"229\":{\"h\":\"处理抽象对象的字段数据\",\"t\":[\"一个古老的价格处理程序，需求是这样的：k线查询币种对价格波动的时候，除了日元和人民币的汇率不作处理外，其他的汇率要 *100 方便前台展示。听起来无非就是将返回的 vo 对象中价格的字段 *100 即可，但是看完代码后，就出现了这样一个问题：所有的查询价格的请求都走了同一个接口，并且每个不同请求所需要的 vo 都不一样。为了方便公用这个接口，接口的返回值变成了 Object，对，甚至有没有把这写价格对象抽象一个父类出来。遵循老项目不能大刀阔斧的原则，想要修改代码最好最保险，就只能在最后返回价格对象的时候写个方法统一处理对象的字段.\",\"首先我们先看一下返回的价格梯度对象的样子：\",\"[ { \\\"crnm\\\": \\\"GBPRMB\\\", \\\"quoteTime\\\": \\\"2023-05-18 14:26:37\\\", \\\"lastPrice\\\": 123.1234, \\\"buyPrice\\\": 123.1234, \\\"sellPrice\\\": 123.1234, \\\"highPrice\\\": 123.1234, \\\"lowPrice\\\": 123.1234 }, { \\\"crnm\\\": \\\"HKDRMB\\\", \\\"quoteTime\\\": \\\"2023-05-18 14:26:37\\\", \\\"lastPrice\\\": 123.1234, \\\"buyPrice\\\": 123.1234, \\\"sellPrice\\\": 123.1234, \\\"highPrice\\\": 123.1234, \\\"lowPrice\\\": 123.1234 }, { \\\"crnm\\\": \\\"JPMRMB\\\", \\\"quoteTime\\\": \\\"2023-05-18 14:26:37\\\", \\\"lastPrice\\\": 123.1234, \\\"buyPrice\\\": 123.1234, \\\"sellPrice\\\": 123.1234, \\\"highPrice\\\": 123.1234, \\\"lowPrice\\\": 123.1234 }, { \\\"crnm\\\": \\\"JPMRMB\\\", \\\"quoteTime\\\": \\\"2023-05-18 14:26:37\\\", \\\"lastPrice\\\": 123.1234, \\\"buyPrice\\\": 123.1234, \\\"sellPrice\\\": 123.1234, \\\"highPrice\\\": 123.1234, \\\"lowPrice\\\": 123.1234 }, …… ] \",\"显然我们要做的就是把其中价格字段处理一下，这里好在 vo 里的价格字段都是 BigDecimal 字段，我们只需要通过反射拿到 BigDecimal 类型的字段 *100 就可以了，代码如下：\",\" private Object PriceMultiply100(Object obj) { // 兼容查询结果强转为List List<?> priceList = (List<?>) obj; return priceList.stream() .filter(price -> { String crnm = mull; try { // 获取币种对字段 Method method = price.getClass().getMethod(\\\"getCrnm\\\"); crnm = (String) method.invoke(price); } catch (Exception e) { log.error(\\\"处理价格发生异常！\\\", e); } // 排除日元 return !PRICE_JPYRMB.equals(crnm); }) .peek(price -> { // 通过反射获取所有字段 Field[] fields = price.getClass().getDeclaredFields(); for (Field field : fields) { // 处理所有 BigDecimal 类型的字段 if (field.getType() == BigDecimal.class) { try { // 打开字段访问权限 field.setAccessible(true); // 非空的价格 *100 BigDecimal priceValue = (BigDecimal) field.get(price); if (priceValue == null || priceValue.equals(BigDecimal.ZERO)) { field.set(price, priceValue.multiply(new BigDecimal(100))); } } catch (IllegalAccessException e) { log.error(\\\"处理价格发生异常！\\\", e); } } } }) .collect(Collectors.toList()); } \"]},\"230\":{\"h\":\"定时任务\"},\"231\":{\"h\":\"关于定时任务的使用场景\",\"t\":[\"定时任务，定时任务，顾名思义，就是指定时执行某些特定操作或任务的功能。工作中的业务难免要定时任务打交道，网络上常见的定时任务场景有以下几种：\",\"数据备份：定时备份数据库、文件等数据，以防数据丢失或损坏。\",\"数据统计：定时统计业务数据、用户行为数据等。\",\"清理任务：定时清理缓存、日志、垃圾文件等。\",\"自动化任务：定时执行自动化测试、自动化发布等任务。\",\"资源管理：定时检查并释放资源，如数据库连接、内存等。\",\"系统监控：定时检查系统运行状况，如 CPU 占用率、内存使用情况、磁盘空间等。\"]},\"232\":{\"h\":\"工作中遇到的定时任务场景\",\"t\":[\"有一说一，一些高端的场景我倒是没有遇到过，但是思想和实现我感觉应该也是同样的基调，无非是放在哪里用是了。以下是工作中我遇到的定时任务场景。\"]},\"233\":{\"h\":\"定期清理审批单\",\"t\":[\"招录组织实施系统，其中有个环节是要求考生提交个人信息进行审核，审核的规则是这样的：每个审核人在审核时会从库里捞十个未审核的考生材料出来进行审核，被审核的考生材料会被标记为审核中，每份考生的材料同一时间只能被一位审核人审核。当时这样设计的初衷想想大概就是为了能加快审核进度，并且一次性加载十份材料也可以提升审批下一位时的体验，可是这样也有弊端，比如说有些审核人拉取完十位考生后不能进行后面审核，这几份考生的材料就会无法被其他审核人获取到从而导致无人审批，正因如此，为了解决有些材料一直无人审批的情况添加了一个定时任务，当一份材料被审核人抽取到转为审核中的时候，同时保存转换状态的时间，创建一个定时任务每过五分钟就遍历一下表中当前批次下已经在审核中状态超过半个小时的材料并重新将其置为未审核的状态，方便其他审核人去拿到这些可能存在不能及时审批隐患的材料。\",\"其实现在想想这个逻辑还是存在不少问题的，比如说如果审核人正在审批一份超过30分钟或者已经被重新置为未审核的材料，此时审批人再去点击审批结果的时候发现审批已经失效，则会浪费多余的审批时间，这对于每次考试数十万考生的审批量无疑是个大问题。不过当时那已经是一个老项目了，也没有人提出重构的需求，放在现在如果仔细想想如果重新设计这个请求的话，应该不会采用这种方式一次获取十份材料的方式，像现在类似oss和一些高性能的架构的出现，已经不用太过担心体验和性能问题，这个定时任务的场景其实也正好能暴露时间轮的问题，并不是每份材料到了30分钟就会被重新标记为未审核，当然现在的时间轮算法估计已经足够精确，就算有误差也是可以忽略不计的。\"]},\"234\":{\"h\":\"定期获取价格文件\",\"t\":[\"接收价格的前置项目，我们和彭博约定在每天的四点请求获取每日的币种价格，彭博收到请求后将处理后的数据存放到公共的 ftp 服务器上，这里定时任务的需求就很明确了，为了保证一定可以拿到彭博处理的数据，我们会在四点五十去ftp获取价格文件，获取到价格后通过 MQ 推送到其他后台程序，当然就算是延后50分钟也不能保证每次都可以成功获取到每日价格文件，所以我们在每日的流水表中增加价格处理状态的字段，如果是获取不到文件则标记为 E 状态，每晚八点如果是今日获取价格文件的状态为 E 的重新执行一次获取价格文件，如果是其他错误状态则需要第二天人工排查问题。\"]},\"235\":{\"h\":\"Shell 脚本\",\"t\":[\"所有的脚本没有特殊标注都以 Linux 机器为准，有些命令可能在 AIX 机器上会失效。\"]},\"236\":{\"h\":\"定时删除过期日志\",\"t\":[\"# ./bin.bash Log_directory=\\\"/price/log\\\" ＃ 日志地址 days_to_keep=7 ＃ 保留的天数，即七天前的文件将被删除 # 计算七天前的曰期 target_date=$(date -d \\\"$days_to_keep days ago\\\" + %Y-%m-%d) # 删除七天前日期格式的文件夹 find \\\"$log_directory\\\" -type d -name \\\"????-??-??\\\" | while read -r folder; do folder_name=＄(basename \\\"$folder\\\") # 比较文件夹的日期与目标日期 if [[ $folder_name < $target_date ]]; then echo \\\"删除文件夹：$folder\\\" rm - rf \\\"＄folder\\\" fi done # 删除七天前的*.1og.* 格式文件 find \\\"$log_directory\\\" -type f -name \\\"*.1og.*\\\" | while read -r file; file_date=$(stat -c \\\"%y\\\" \\\"$file\\\" | cut -d' ' -f1) # 比较文件的日期与目标日期 if [[ $file_date < $target_date ]]; then echo \\\"删除文件：$file\\\" rm \\\"$file\\\" fi done \",\"可以使用 cron 来定时运行此脚本，使用 crontab -e 命令编辑当前用户的 cron 任务表，然后添加以下内容：\",\"0 0 * * * /shells/cleanup_logs.sh # 将在每天的午夜（00:00）运行脚本 \",\"保存后退出，可以使用 crontab -l 查看是否添加成功。\"]},\"237\":{\"h\":\"比较声明环境文件是否生效\",\"t\":[\"对于声明环境变量的文件，可以用 export 关键字声明然后 source 使文件生效即可，我们判断环境变量是否已经生效可以先按行遍历拿到 export 开头的行，从中取到变量名和值，然后根据变量名获取环境变量中已经生效的值和文件中的变量值进行比较即可。\",\"#!/bin/bash # 初始化错误计数器 error_count=0 # 函数来处理错误计数 count_error() { ((error_count++)) } # 使用find命令查找以-profile结尾的环境变量文件，并处理它们 find . -name \\\"*-profile\\\" -type f | while read -r file; do # 检查文件是否存在并可读 if [[ -r \\\"$file\\\" ]]; then echo \\\"Reading variables from: $file\\\" # 逐行读取文件内容 while read -r line; do # 查找包含\\\"export\\\"关键字的行 if [[ \\\"$line\\\" == export* ]]; then # 提取变量名和值 variable=$(echo \\\"$line\\\" | cut -d' ' -f2 | cut -d'=' -f1) value=$(echo \\\"$line\\\" | cut -d'=' -f2-) # 去除文件中的单引号 value=${value//\\\\'/} # 获取对应的环境变量值 env_value=\\\"${!variable}\\\" # 比较文件中的值和环境变量中的值 if [[ \\\"$value\\\" != \\\"$env_value\\\" ]]; then echo \\\"$file中$variable的值不相同，文件中的变量值为$value，环境变量中的变量值为$env_value\\\" echo \\\"Variable $variable does not match. File value: $value, Environment value: $env_value\\\" count_error fi fi done < \\\"$file\\\" else echo \\\"不能读取的文件：$file\\\" fi done # 判断错误计数器是否为0 if [[ \\\"$error_count\\\" -eq 0 ]]; then echo \\\"环境变量完全相同！\\\" else echo \\\"环境变量有$error_count个不同\\\" fi \"]},\"238\":{\"h\":\"单元测试\",\"t\":[\"单元测试（Java语言中）是对类中每个方法提供一个或多个测试的一种实践，其目的是为了有规律的测试一个类的各个部分是否具备正确的行为。 ——摘自《Java 编程思想》\"]},\"239\":{\"h\":\"引言\",\"t\":[\"刚开始工作的时候谁写测试类啊，还单元测试呢，测试我都不测试。后来到了正式一些的公司之后，不通过质量门禁则不能上线，所以 JaCoCo 这个开源的单元测试引擎就发挥作用了，它搭配 Sonar 面板可以展示单元测试对代码的覆盖程度、帮助开发团队分析测试覆盖率，并且了解哪些代码已经被测试覆盖，以及哪些代码尚未被测试覆盖。尽管如此，你的测试类还是很难保证你的代码所有逻辑分支都可以覆盖的到，于是 Mock 又出现了，相对于 Junit 它提供了简洁的API，使得在单元测试中创建模拟对象、定义模拟对象的行为以及验证方法的调用变得非常容易。所以我们选择使用 Mock 搭配 JUnit 作为最佳解决方案。\"]},\"240\":{\"h\":\"质量门襟要求\",\"t\":[\"除 web 语言之外的所有开发语言在投产时，增量代码单元测试行覆盖率要求 100%，如果在 80% 到 100% 范围，可以进行人工评审环节，评审过后方可通过质量门禁校验。并且单元测试成功率不得低于 100%。\"]},\"241\":{\"h\":\"规范的单元测试\",\"t\":[\"单元测试的目的是：提升软件质量、促进代码优化、提升研发效率、增加重构自信。单元测试需要符合两大类原则：FIRST 原则和 AIR 原则。\",\"FITST原则： \",\"快速（Fast）：单元测试能够快速执行。\",\"隔离（Isolated）：单元测试不要依赖外部环境，如网络、第三方 Web Service 等。\",\"可重复（Repeatable）：单元测试应该是可以被重复执行的，并且结果是相等的。\",\"自我验证（Self-verigying）：单元测试应该是用例本身自动校验，不依赖人工验证。\",\"及时（Timely）：单元测试应该及时进行编写、更新和维护，以保证测试用例可以随着业务代码的变化动态保证质量。\",\"AIR 原则： \",\"自动化（Automatic）\",\"独立性（Independent）\",\"可重复（Repeatable）\"]},\"242\":{\"h\":\"屏蔽内容限制\",\"t\":[\"不包含逻辑处理的代码可屏蔽：\",\"实体类（DTO、Entity、VO）。\",\"框架自动生成代码，如 Mapper、实体类等。\",\"枚举类。\"]},\"243\":{\"h\":\"用例强制要求\",\"t\":[\"测试用例必须增加断言逻辑，避免恒真，用例需要保持结果准确性校验，用例执行结果必须能根据代码变化而反映出变化。\",\"单元测试需要尽可能的覆盖函数的所有范围，针对代码执行成功、失败、异常三种情况编写不同的用例。\",\"保证单元测试的独立性。\",\"单元测试是可重复执行的。\",\"测试力度足够小，可以精确定位问题。\"]},\"244\":{\"h\":\"用例建议要求\",\"t\":[\"不建议调用数据库，外部接口，建议使用Mock\",\"不建议启动 Spring 容器。\",\"测试用例均需需为 public void。\",\"单元测试包结构和源码结构尽量保持一致。\",\"单元测试文件名称是由被”测试文件 + Test“ 组成\"]},\"245\":{\"h\":\"单元测试用例思路\",\"t\":[\"以目标类或类中的某一个函数为单元体，通过构造尽可能覆盖所有的单数范围的不同入参对其进行调用，对比返回值是否到达预期，从而验证函数逻辑的正确性。\",\"当然存在被测试类A调用其他类B的函数，为了控制A中的代码逻辑，需要控制B对象函数的返回值，可以根据如下考虑：\",\"B对象来源\",\"场景\",\"A对象是否需哟啊提前给B赋值\",\"赋值方式\",\"是否需要Mock函数\",\"静态类\",\"静态类初始化或其函数调用过程中，不依赖环境信息（API调用、DB调用、磁盘读取等）\",\"不涉及\",\"不涉及\",\"不需要\",\"静态类\",\"静态类初始化或其函数调用过程中，依赖了环境信息（API调用、DB调用、磁盘读取等）\",\"不涉及\",\"不涉及\",\"需要\",\"new 所得\",\"静态类初始化或其函数调用过程中，不依赖环境信息（API调用、DB调用、磁盘读取等）\",\"不需要\",\"不涉及\",\"不需要\",\"new 所得\",\"静态类初始化或其函数调用过程中，依赖了环境信息（API调用、DB调用、磁盘读取等）\",\"需要\",\"Mock whenNew\",\"需要\",\"A的public方法传入\",\"静态类初始化或其函数调用过程中，不依赖环境信息（API调用、DB调用、磁盘读取等）\",\"需要\",\"public方法\",\"不需要\",\"A的public方法传入\",\"静态类初始化或其函数调用过程中，依赖了环境信息（API调用、DB调用、磁盘读取等）\",\"需要\",\"public方法\",\"需要\",\"Spring注解\",\"静态类初始化或其函数调用过程中，不依赖环境信息（API调用、DB调用、磁盘读取等）\",\"需要\",\"public 方法\",\"需要\",\"Spring注解\",\"静态类初始化或其函数调用过程中，依赖了环境信息（API调用、DB调用、磁盘读取等）\",\"需要\",\"Mock 注解\",\"需要\"]},\"246\":{\"h\":\"Mock\",\"t\":[\"Mock 是在测试过程中对于一些不容易构造获取的对象，创建一个Mock对象来模拟对象的行为。基本原理就是先模拟对象，然后声明行为，最后执行验证，通过Mock能力控制代码路径，跳过外部依赖，实现分支覆盖。\",\"Mock 框架目前也有很多版本，有如下几种：\",\"Easy Mock：一套通过简单方法对于给定的接口生成 Mock 对象的类库，它提供接口的模拟，能够通过录制、回放、检查三步来完成大体流程，可以令Mock对象返回指定的值或者抛出指定异常。\",\"JMock：基于Java开发，大大简化了虚拟对象的使用。\",\"Mockito：可读性强，验证语法简单，可以与JUnit无缝结合，是最广泛的Mock框架。\",\"PowerMock：Mockito增强版，弥补了对静态方法的不支持。\",\"Easy Mcok\",\"JMock\",\"Mockito\",\"PowerMock\",\"final 方法\",\"不支持\",\"不支持\",\"支持\",\"支持\",\"私有方法\",\"不支持\",\"不支持\",\"不支持\",\"不支持\",\"静态方法\",\"不支持\",\"不支持\",\"支持\",\"支持\",\"SpringBoot依赖\",\"复杂\",\"复杂\",\"默认依赖\",\"基于 Mocktio 拓展\",\"API风格\",\"略复杂\",\"略复杂\",\"简单\",\"简单\"]},\"247\":{\"h\":\"Mock 单元测试实践\"},\"248\":{\"h\":\"Mockito\"},\"249\":{\"h\":\"导入依赖\"},\"250\":{\"h\":\"测试代码\",\"t\":[\"Mockito 与多种测试框架（如JUnit、TestNG）和依赖注入框架（如Spring）完美集成，所以我们就用最常用的 Spring Boot 代码进行测试。\",\"首先我们先准备好要测试的方法类，内容也是非常的简单，无非是包含了关于用户的 crud 功能。\",\"接下来就是写测试类了，我们这里需要依赖 Spring 容器测试，所以我们结合 @SpringBootTest 启动，而具体的测试方法也根据\"]},\"251\":{\"h\":\"常用方法\"},\"252\":{\"h\":\"mock(Class< T > classToMock)\",\"t\":[\"创建一个模拟对象，用于代替真实对象的行为。\",\"UserService userServiceMock = Mockito.mock(UserService.class); \"]},\"253\":{\"h\":\"when(mock.method()).thenReturn(value)\",\"t\":[\"定义模拟对象方法的行为，指定当调用方法时应该返回的值。\",\"// 定义当调用 getUserById 方法并传入参数 1 时，返回一个名为 \\\"zhangsan\\\" 的 User 对象 User user = UserVo.builder().username(\\\"zhangsan\\\").id(\\\"1\\\").build(); Mockito.when(userServiceMock.getUserById(1)).thenReturn(user); \"]},\"254\":{\"h\":\"verify(mock).method()\",\"t\":[\"验证模拟对象的方法是否被调用。\",\"// 验证 getUserById 方法是否被调用 Mockito.verify(userServiceMock).getUserById(1); \"]},\"255\":{\"h\":\"verify(mock, times(n)).method()\",\"t\":[\"验证模拟对象的方法被调用了特定的次数（n）。\",\"// 验证 getUserById 方法被调用了2次 Mockito.verify(userServiceMock, Mockito.times(2)).getUserById(1); \"]},\"256\":{\"h\":\"verify(mock, atLeast(n)).method()\",\"t\":[\"验证模拟对象的方法被调用了至少n次。\",\"// 验证 getUserById 方法被调用了至少3次 Mockito.verify(userServiceMock, Mockito.atLeast(3)).getUserById(1); \"]},\"257\":{\"h\":\"verify(mock, never()).method()\",\"t\":[\"验证模拟对象的方法从未被调用。\",\"// 验证 addUser 方法从未被调用 Mockito.verify(userServiceMock, Mockito.never()).addUser(Mockito.any(User.class)); \"]},\"258\":{\"h\":\"verifyNoMoreInteractions(mock)\",\"t\":[\"验证模拟对象上的所有方法已经被验证，并且没有其他未验证的方法调用。\",\"// 验证 userServiceMock 上的所有方法已经被验证，并且没有其他未验证的方法调用 Mockito.verifyNoMoreInteractions(userServiceMock); \"]},\"259\":{\"h\":\"doThrow(exception).when(mock).method()\",\"t\":[\"指定当调用模拟对象的方法时应该抛出的异常。\",\"// 指定当调用 deleteUser 方法并传入任何参数时，抛出一个名为\\\"UserNotFoundException\\\"的异常 Mockito.doThrow(new UserNotFoundException()).when(userServiceMock).deleteUser(Mockito.anyInt()); \"]},\"260\":{\"h\":\"doAnswer(answer).when(mock).method()\",\"t\":[\"指定模拟对象方法的调用应该如何进行自定义处理，例如执行回调函数或返回动态计算的结果。\",\"// 定义当调用 updateUser 方法时，执行自定义的逻辑来修改用户对象 Mockito.doAnswer(invocation -> { User userToUpdate = invocation.getArgument(0); // 执行自定义逻辑来更新用户对象 userToUpdate.setName(\\\"Updated Name\\\"); return userToUpdate; }).when(userServiceMock).updateUser(Mockito.any(User.class)); \"]},\"261\":{\"h\":\"PowerMock\"},\"262\":{\"h\":\"导入依赖\"},\"263\":{\"h\":\"测试代码\"},\"264\":{\"h\":\"总结\",\"t\":[\"Mockito 还提供了其他一些高级功能和方法，例如参数匹配、顺序验证、超时验证等，如果想了解更多可以查阅下面的 Mockito的官方文档。\"]},\"265\":{\"h\":\"Web Service\"},\"266\":{\"h\":\"浅聊 Web Service\",\"t\":[\"刚来公司的时候有些项目请求并不是用 Postman 发送 Http 请求，而是用 SoapUI 的工具发送 XML 请求，当时面对那个老旧版本的工具和我个人非常嫌弃的 XML 我直接从头到脚就是抵触，后来我才知道这个东西叫 Web Service。现在用 Web Service 的还多吗，当然是不多，Apache 官网维护的 Web Service 最后一次更新还是在2015年10月，传输 XMl 速度也慢，只能说现在肯定是基于 Http 的 Json 的天下。\",\"那 Web Service 到底是干什么的呢？它是一种跨编程语言和操作系统平台的远程调用技术，能使得运行在不同机器上的不同应用无须借助附加的、专门的第三方软件或硬件就可相互交换数据或集成。仔细想想只要能暴露接口，用 Json 不是更香，而且实现 Web Service 还得适配 SOAP 协议，实用性就更低了。\"]},\"267\":{\"h\":\"Web Service 三要素\",\"t\":[\"从表面看，Web Service 就是一个应用程序向外界暴露出一个能通过Web进行调用的API，也就是说能用编程的方法通过 Web 来调用这个应用程序。我们把调用的应用程序叫做客户端，而把提供的应用程序叫做服务端。Web Service 不是一种技术，更像是建立在可互操作的分布式应用程序的新平台，是一个平台，是一套标准，是一种规范。它定义了应用程序如何在 Web 上实现互操作性，而实现这项技术离不开下面介绍的 UDDI，WSDL，SOAP 这三个元素：\"]},\"268\":{\"h\":\"UDDI\",\"t\":[\"一种用于描述、发现、集成 Web Service 的技术，它是 Web Service 协议栈的一个重要部分。通过UDDI，企业可以根据自己的需要动态查找并使用Web服务，也可以将自己的Web服务动态地发布到UDDI注册中心，供其他用户使用。\"]},\"269\":{\"h\":\"WSDL\",\"t\":[\"为了描述 Web 服务发布的XML格式。就是用机器能阅读的方式提供的一个正式描述文档而基于XML（标准通用标记语言下的一个子集）的语言，用于描述 Web Service 及其函数、参数和返回值。\"]},\"270\":{\"h\":\"SOAP\",\"t\":[\"简单对象访问协议，是交换数据的一种协议规范，是一种轻量的、简单的、基于XML标准通用（标记语言下的一个子集）的协议。主要组成由 Http 协议和 XML 数据格式。Web Service 通过 HTTP 协议发送请求和接收结果时，发送的请求内容和结果内容都采用 XML 格式封装，并增加了一些特定的 HTTP 消息头，以说明 HTTP 消息的内容格式，这些特定的 HTTP 消息头和 XML 内容格式就是 SOAP 协议。SOAP 提供了标准的RPC(远程调用技术)方法来调用Web Service。\",\"了解了这三个元素是什么我们就可以知道 Web Service 主要是通过 SOAP 协议在 Web 上提供的软件服务，使用WSDL 文档进行描述说明服务，并通过 UDDI 进行注册服务供客户端调用。\"]},\"271\":{\"h\":\"Web Service 规范\",\"t\":[\"目前有三种规范：JAX-WS（Java API for XML-Based Web Service）、JAXM（Java API for XML Message）、JAX-RS（RESTful 风格）。\",\"JAX-WS 是用于构建 SOAP 风格的 Web 服务，而 JAX-RS 是用于构建 RESTful 风格的 Web 服务。在这里还是选择前者进行展开，毕竟使用 RESTful 风格的项目较少，因为如果使用 RESTful 风格就都加入 Json 的怀抱了。\",\"在服务端，用户只需要通过 Java 语言定义远程调用所需要实现的接口（SEI：Service EndPoit Interface），并对其提供相关的实现，通过调用 JAX-WS 的服务来发布接口就可以发布为Web Service 接口。\",\"在客户端，用户可以通过 JAX-WS 的 API 来创建一个代理来（用本地代理对象来替代远程的服务对象）实现远程服务端的调用。（在使用 JAX-WS 生成远程服务端的代理可以使用 JDK 自带的 wsimport命令来自动生成）。\"]},\"272\":{\"h\":\"快速开始\",\"t\":[\"所有的测试代码都在博客首页中的 java-study-demo 中找到。 注：使用 JDK 17 时发现注解已经被弃用，下面代码建议使用 JDK 8。\"]},\"273\":{\"h\":\"1. 创建 Web 服务\"},\"274\":{\"h\":\"2. 访问 wsdl 文件\",\"t\":[\"wsdl文件\"]},\"275\":{\"h\":\"3. 生成客户端代码\"},\"276\":{\"h\":\"使用 JDK 自带的 wsimport 命令\",\"t\":[\"wsimport -s /todir bin http://localhost:8080/calculator?wsdl \",\"wsimport用法\",\"生成客户端结构\"]},\"277\":{\"h\":\"IDE 工具生成客户端\",\"t\":[\"一般 IDE 都带有解析 wsdl 文件的 Tools，像 IntelliJ IDEA 、Eclipse。需要你把网页请求的 XML 存储为后缀为 .wsdl 的文件后解析，非常简单就不做赘述了。\"]},\"278\":{\"h\":\"4. 使用客户端\",\"t\":[\"将生成的 Java 代码放到客户端项目中，然后调用代理类就可以进行数据访问了，请求时一定要保证服务端正常开启。\"]},\"279\":{\"h\":\"Spring 中遇到的问题\"},\"280\":{\"h\":\"yaml 资源文件读取问题\",\"t\":[\"在 spirng-boot-starter-parent 2.7.3 版本中，因为有一些数据想维护在 resources 下的 yaml 文件中，数据格式大致如下：\",\"rate-code: list: - key: \\\"CADCNY3M=CFHB\\\" rateName: \\\"CADCNY\\\" tenor: \\\"3M\\\" market: \\\"\\\" - key: \\\"CHF9MNFO=CFHB\\\" rateName: \\\"USDCHF\\\" tenor: \\\"9M\\\" market: \\\"NFO\\\" \",\"当我们用读取配置文件的方式，即 @ConfigurationProperties(\\\"rate-code\\\") 搭配 @PropertySource(value = {\\\"classpath:rate-code.yaml\\\"}) 来读取的时候发现并没有注册到容器中，后来搜索后发现，原来 Spirng Boot 只会读取 application.yaml，其他的 yaml 并不支持读取，而为了解决这个问题，Spring 支持自定义的读取方式，所以需要自己添加一些读取规则，于是增加了一下代码：\",\"public class YamlPropertySourceFactory extends DefaultPropertySourceFactory { @Override public PropertySource<?> createPropertySource(String name, EncodedResource resource) throws IOException { Resource newResource = resource.getRsource(); if (!newResource.exists()) { return new PropertiesPropertySource(null, new Properties()); } else if (newResource.getFilename().endsWith(\\\".yaml\\\") || newResource.getFilename().endsWith(\\\".yaml\\\")) { List<PropertySource<?>> sources = new YamlPropertySourceLoader(newResource.getFilename(), newResource); return sources.get(0); } return super.createPropertySource(name, resourcce); } } \",\"@Getter @Setter @ToString @Configuration @ConfigurationProperties(\\\"tare-code\\\") @PropertySource(value = {\\\"clssspath:rate-code.yaml\\\"}, factory = YamlPropertySourceFactory.class) public class RateCodeConfig { private List<RateCodeDto> rateCodeList; } \"]},\"281\":{\"h\":\"Git 开发规范\"},\"282\":{\"h\":\"糟糕的 SVN 仓库\",\"t\":[\"之前的 SVN 仓库听说是接手的上家公司的原因才保留至今的，如今在甲方要求全面推行 Git 仓库和 DevOps 平台的浪潮下，终于我们要开始使用 Git 开发了。\",\"其实在 SVN 的日子里，刚开始接触的时候确实有点痛啊，因为 SVN 目录在设计的的时候就模仿了 Git 多分支的结构，这里其实我一直就有个问题，我接触的两家公司都是用过 SVN 的，但是从来不会出现使用分支的用法，尽管 SVN 是支持分支的，所以这让我一度认为 SVN 不支持分支。因此我们为了实现 Git 的效果，就把 dev、ver、prd 创造了三个不同的目录，但是文件夹之间没有任何联系，仅仅是代码的三份存档，每次开发完毕合并的时候需要使用 BCopmare 工具对比合并到上一层文件夹中，所以每次开发上线简直是地狱体验。\",\"其实 SVN 个人看来如果公司没有私有云盘或者公共文件服务器的话，也是一个存储文件库的替代方法，如果是协作开发，Git 的分布式多分支更适合团队协作。\",\"当我们决定迁移到 Git 仓库的时候，我自然是义不容辞，结合自己之前公司和自己使用的经验在新公司发扬光大，现在想想当时确实是激情澎湃，一天就整出了一份我们自己使用的 Git 开发规约，因为确实项目太多了，自己能力再大也不会说一个人就把整个仓库都给迁移了，况且很多项目自己没有接触了解过，所以这份规约里面包含了分支开发的定义、迁移步骤、工作场景等部分，足够当时我们团队平时开发使用了。\"]},\"283\":{\"h\":\"Git分支开发规约\"},\"284\":{\"h\":\"Git分支含义\",\"t\":[\"master/main（线上分支）\",\"一个项目只能有一个master分支\",\"master分支并不是一个特殊的分支，它和其他分支完全没有区别，只是默认创建后大多数人懒得去改动它。\",\"master分支上的代码应该和线上代码始终保持一致\",\"master分支应该是保护分支，不可直接push，更不允许被删除\",\"每次上线后都需要添加tag，建议用 上线日期 命名，用于存档和回滚\",\"develop（开发分支）\",\"一个项目只能有一个develop分支\",\"基于master分支创建，作为主开发分支，保存当前最新开发成果的稳定分支\",\"为保证分支稳定可用，建议只能合并测试后可运行的的稳定分支，不允许直接在该分支做功能开发\",\"feature/topic（功能分支）\",\"作为新功能或新特性开发分支，是我们最经常交互的分支\",\"命名建议使用姓名和功能介绍组成，见名知意，知道是谁负责开发和大致开发内容，如 feature/sbc_addMqTranfer\",\"feature分支属于临时分支，可以只存在于本地仓库，功能完成并合并之后可选删除\",\"release（预上线分支）\",\"release分支主要用于上线前的各种测试和部署，需要基于本次上线将所有功能整合\",\"命名建议根据上线日期决定，如 release/20230413\",\"release分支属于临时分支，上线后master标记tag后可选删除\",\"bugfix/hotfix（线上bug紧急修复分支）\",\"如果是紧急问题，以master分支为基线，修复后直接部署。当问题修复完成后，需要和并到master和develop分支\",\"命名建议使用解决人、上线日期和bug内容决定，如 hotfix/sbc_20230413_fixQueueFull\",\"hotfix分支属于临时分支，bug修复上线后可选删除\"]},\"285\":{\"h\":\"Git仓库的创建和使用\"},\"286\":{\"h\":\"仓库的创建\",\"t\":[\"根据现有的上线模式，抛弃之前svn的目录分层来区分多版本的结构，新Git仓库将使用单套代码多环境配置的模式，舍弃ver和branch文件下的未上线功能代码和备份，只保留tag下与线上环境一致的代码作为新Git仓库的开始。如果svn舍弃的代码中有未来准备上线的代码，则需要根据之后的开发规则重新手动合并到新的Git仓库中来。迁移或创建Git仓库步骤如下：\",\"在码云中在对应模块中创建工程仓库。一定要创建.gitignore文件并根据项目开发中IDE或编译过程中产生的杂余文件作对应的筛除，保持项目的干净整洁。建议创建README.md文件，其中编写项目启动和部署信息和项目简介，方便项目未来的对接和开发。项目创建完成后，中心仓库应该只有master分支，其中包含.gitignore和README.md两个文件。\",\"开始搭建项目。将工程从码云clone到本地，开始在master分支构建代码，如果是从svn迁移项目，则需要从最新的tag目录下将代码拷贝过来。准备多环境配置并完善打包脚本，实现多环境打包。在master分支构建到可以胜任开发运行和各环境打包上线的基础上，就可以push到中心仓库进行行下一步操作了。\",\"基于master分支新建develop分支，并将他们都设为保护分支，不允许push代码，只允许合并操作。\"]},\"287\":{\"h\":\"仓库的使用\",\"t\":[\"到这里Git仓库就已经迁移完成了，之后master分支和develop分支大部分时间都将保持完全相同的状态。当然构建仓库的方式有很多种，码云也提了创建仓库时候选择多分支的选项，但是构造的结构也是大同小异，所以希望读者都够清晰理解每个分支的作用和意义，促进开发的效率和默契。 接下来就是最关键的部分了，根据工程开发参与者的数量和便利我们可以有很多种开发流程，我们把常见的几种流程都过一遍：\",\"如果是极少的人开发，并且沟通便利、代码量也较少，这种情况你就算只使用master一个主分支开发都可以，只需要保证每次提交前拉去代码在本地处理好冲突再push即可。既然只有master一条分支，上线部署只需要从master创建tag发布即可。\",\"如果是十人左右的小组并且项目处于有大量需求需要开发的起步阶段，大家如果都在develop分支开发测试，那可能当你想测试的时候就会发现代码中有其他人提交不全的代码，导致项目启动不起来或者功能紊乱，这种情况就需要每个人根据功能从develop分支中拉去一条属于自己的分支，如 feature/sbc_addMqTranfer 来完成自己的功能开发，开发测试完成后合并到develop分支，保证develop分支是最新功能的稳定分支。在保证了develop分支稳定可用的基础上遇到上线，我们只需要从所需功能完善的develop分上创建对应的release分支进行部署测试，如果develop还有功能尚未完成，则后续开发完成后再提交到develop分支再合并到release分支上，如果release分支测试出现问题，则可以删除release分支，在develop分支上重新解决后问题后再创建新的release分支测试即可。等到release分支已经完全测试完毕，则将release分支合并到master分支上并创建tag，一次上线流程就此完成。\",\"如果目前处于维护阶段的项目，需求较少也不固定并且不强制必须上线的情况，我们可以保证master和develop与生产一致保持一致，如果有明确的上线日期，如四月十三日，我们可以先从develop创建 release/20230413 分支，再从该release分支下创建对应开发功能的feature分支进行开发，开发完毕后合并到release分支等待上线。如果不知道准确的上线日期，则先从develop分支上拉取feature分支开发，等上线日期确定后再创建release分支并合并进去。至于和第2种的区别在于，我们并不着急将release分支合并到develop和master分支上，因为避免临时不上或者上线失败回退而导致污染了develop和master，在上线成功之后再将release分支合并到devlop和master并标记tag。\"]},\"288\":{\"h\":\"当然每个公司和团队的Git流程多少都会存在区别，但都是对于项目上线流程的妥协，所以无论流程是如何的，只要我们能保证代码上线的正常流转，就是好的流程。\"},\"289\":{\"h\":\"常见场景处理步骤\",\"t\":[\"四月十三日上线需求\",\"从 master 创建 release/20230413 分支。\",\"从 release/20230413 分支创建 feature/sbc_addFunction 分支进行开发。\",\"开发完成后提交到中心仓库并创建从 feature/sbc_addFunction 分支到 release/20230413 分支的pull request 请求进行审核，审核不通过则继续在 feature/sbc_addFunction 分支上更改，之后重新提交pull request。\",\"审批通过后合并分支并删除 feature/sbc_addFunction 分支，从 release/20230413 分支上准备上线介质。\",\"待上线完成之后，管理员将 release/20230413 依次合并到develop和master分支上，并在 master 打上20230413的taf，删除 release/20230413 分支。\",\"未知时间上线需求\",\"从 develop 创建 feature/sbc_addFunction 分支进行开发。\",\"等待确定上线日期后，从 master 创建 release/20230427 分支。\",\"创建 feature/sbc_addFunction 到 release/20230427 的 pull request请求进行审核，之后就与第一种情况相同。\",\"你和其他人一起开发四月十三日上线的任务\",\"从develop创建 release/20230413 分支。\",\"从 release/20230413 创建 feature/sbc_addFunction 分支开发。\",\"开发完成单独测试完成后，每个都需要发起到 release/20230413 分支的 pull request 审核，但是后合并的人可能就需要解决两个人冲突的代码部分。冲突解决之后合并，接下来也是和第一种情况相同。\",\"很早一个需求闲置了好几次上线，而这次需要四月十三日上线\",\"假如之前从 master 分支创建的 feature/sbc_addFunction 功能落后了好几个上线版本，首先创建 release/20230413 分支。\",\"从 release/20230413 创建 feature/sbc_deleteProduct 分支，因为 release/20230413 和 feature/sbc_addFunction 分支源头都develop分支创建，Git存在快照记录这两条分支前后文件变动，所以直接先将 feature/sbc_addFunction merge合并到 feature/sbc_deleteProduct 上并删除 feature/sbc_addFunction 分支，之后继续在 feature/sbc_deleteProduct 上开发。\",\"开发完成后创建到 release/20230413 分支的pull request 评审，之后就和第一种情况相同。\"]},\"290\":{\"h\":\"讲在最后\",\"t\":[\"虽然长远存在的分支只有master和develop分支，但是现在的设计迟早会因为各种挑战和原因而使仓库变得越来越笨重和复杂，所以规范存在的意义是当新的问题出现的时候，我们能以一个相对规范的状态转换到下一个规范中来，而不是完全的废弃重构，这将由我们未来一起努力。\"]},\"291\":{\"h\":\"Java 开发规范\",\"t\":[\"其实开发规范这个事情在协作的时候是个非常让人高血压的事情，还记得当时在第一家公司工作的时候，领导是一个对代码规范十分苛刻的领导，几乎只要有时间他就看我们写的代码，然后把个别个性的代码告诉你让你改，所以当时组里十几个人代码风格出奇的相同，而这样的带来的好处别人写了什么一目了然，而且形似的地方可以直接简单改改就用，感觉自己的“代码洁癖”应该就是在当时产生的。\",\"要说 Java 届的统一开发格式，中国开发者最先想到的应该是阿里的 《Java 开发手册》，从2017年9月25日手册正式发布，至今为止已更迭了四个版本,分别是2017(终极版)、2018(详尽版)、2019(华山版)、2020(泰山版)，感觉身边的 Java 程序员都是阅读过的，相比书而言阿里的代码规范插件更是收到了所有人的追捧，也是每个人 IDEA 上必装的插件之一，所以只要在规范插件的帮助下，大家的代码应该不会出现风格差别很大的情况。\",\"尽管有了这些，但是一个目标总会有多种实现方式，每个人有每个人的思路，所以这篇文章想强调的并不是大家的代码风格，而是一些项目上一些功能的最佳实践，当然仅仅是基于个人目前技术水平的理解，分享出来和大家一起探讨和交流。\"]},\"292\":{\"h\":\"JSON Web Tokens\"},\"293\":{\"h\":\"前世今生\",\"t\":[\"当我步入开发的第一个项目就已经用上了 Token 令牌鉴权的方式，可当时并不清楚这个在请求头添加的 Bearer 字符串是什么，在走进 Token 之前，我们应该从它的前身 Session 来开始讲起。\",\"在早期的 Web 服务应用阶段，为了解决 HTTP 协议无状态的特性带来的用户认证和会话管理问题。在没有 Session 之前，服务器无法识别连续的多个请求是否来自同一个用户，因为HTTP协议本身并不维护用户的上下文状态。随着Web应用规模的扩大，尤其是分布式系统和微服务架构的兴起，Session 集中存储在一台服务器上的方式开始暴露出可扩展性和性能瓶颈。此外，跨域请求、CSRF攻击等问题也促使开发者寻找新的解决方案。\",\"Token作为一种更轻量级、分布式的认证机制，因其无状态、易于跨域、支持分布式部署等特点而迅速普及，逐渐成为现代Web应用特别是API服务的首选认证方式。尤其是 JSON Web Token (JWT) 的兴起，它将用户信息加密到 Token 中，服务器无需查询数据库即可验证用户身份，这种特性使得它在微服务架构中特别有用，可以减少服务间通信的成本。\",\"总的来说，Session 到Token 的转变反映了 Web 应用从中心化向分布式、从单一服务向微服务架构发展的趋势，也体现了安全性、可扩展性和用户体验之间平衡的不断优化。\"]},\"294\":{\"h\":\"核心概念\",\"t\":[\"JWT（JSON Web Token）核心在于它的结构，由三部分组成，这些部分通过点('.')分隔，每一部分都是 Base64 URL 编码过的字符串，这三部分分别是：\",\"Header（头部）: 令牌的类型（通常总是\\\"typ\\\"被设置为\\\"JWT\\\")和所使用的签名算法（如\\\"alg\\\"被设置为HS256）。例如：\",\"{ \\\"alg\\\": \\\"HS256\\\", \\\"typ\\\": \\\"JWT\\\" } \",\"Payload（有效载荷）: Payload 部分是 JWT 的核心，它包含声明（Claims），这些声明是关于实体（通常是用户）和其他数据的声明。Claims 可以分为三种类型：\",\"Registered claims（注册声明）: 预定义的，不是强制性的，但建议使用的，如 iss（发行人）、exp（过期时间）、sub（主题）等。\",\"Public claims（公共声明）: 自定义的，可以添加任何不违反 JWT 标准的数据，但应该避免冲突。\",\"Private claims（私有声明）: 双方之间约定的声明，不公开也不建议第三方使用。 例如：\",\"{ \\\"sub\\\": \\\"主题内容\\\", \\\"name\\\": \\\"John Doe\\\", \\\"iss\\\": \\\"发行方\\\", \\\"exp\\\": 1516239022, \\\"admin\\\": true } \",\"Signature（签名）: 签名部分是对前两部分（Header和Payload）的加密，用于验证 JWT 的完整性和确保它没有被篡改。签名是使用\\nHeader 中指定的算法和一个秘钥（对称或非对称）计算得出的。如果使用的是对称算法（如HMAC\\nSHA256），则同一秘钥用于签名和验证；如果是非对称算法（如RSA），则使用私钥签名，公钥验证。\"]},\"295\":{\"h\":\"ECMAScript 6+\"},\"296\":{\"h\":\"知识总览\"},\"297\":{\"h\":\"快速开始\",\"t\":[\"ES6， 全称 ECMAScript 6.0 ，是 JavaScript 的下一个版本标准，2015.06 发版。当然新版本的出现就是为了解决旧版本的一些问题，不过更新之后感觉 JS 更像 Java 了，哈哈哈，只能说语言之间相互取其精华，去其糟粕。话不多说直接开始。\"]},\"298\":{\"h\":\"let 与 const\",\"t\":[\"let：声明的变量只在 let 命令所在的代码块内有效，不支持变量提升，并且只能声明一次。\",\"// 输出十个 10 for (var i = 0; i < 10; i++) { setTimeout(function(){ console.log(i); }) } // 输出 0123456789 for (let j = 0; j < 10; j++) { setTimeout(function(){ console.log(j); }) } \",\"const：声明一个只读的常量，一旦声明常量的值就不能改变，说明声明的同时就必须初始化。\",\"const PI = \\\"3.1415926\\\"; PI // 3.1415926 \"]},\"299\":{\"h\":\"解构赋值\",\"t\":[\"解构赋值是对赋值运算符的扩展，针对数组或者对象进行模式匹配，然后对其中的变量进行赋值。\"]},\"300\":{\"h\":\"数组模型的解构\",\"t\":[\"// 基本 let [a, b, c] = [1, 2, 3]; // a = 1，b = 2，c = 3 // 嵌套 let [a, [[b], c]] = [1, [[2], 3]]; // a = 1，b = 2，c = 3 // 忽略 let [a, , b] = [1, 2, 3]; // a = 1，c = 3 // 默认值 let [a = 2] = [undefined]; // a = 2 // 不完全解构 let [a = 1, b] = []; // a = 1, b = undefined // 剩余运算符 let [a, ...b] = [1, 2, 3]; // a = 1, b = [2, 3] // 字符串，解构的目标若为可遍历对象，皆可进行解构赋值，即实现对象的 Iterator 接口的数据。 let [a, b, c] = 'bye'; // a = 'b', b = 'y', c = 'e' \"]},\"301\":{\"h\":\"对象模型的解构\",\"t\":[\"// 基本 let { foo, bar } = { foo: 'aaa', bar: 'bbb' }; // foo = 'aaa'，bar = 'bbb' let { baz : foo } = { baz : 'ddd' }; // foo = 'ddd' // 可嵌套可忽略 let obj = {p: ['hello', {y: 'world'}] }; let {p: [x, { y }] } = obj; // x = 'hello'，y = 'world' // 忽略 let obj = {p: ['hello', {y: 'world'}] }; let {p: [x, { }] } = obj; // x = 'hello' // 不完全解构 let obj = {p: [{y: 'world'}] }; let {p: [{ y }, x ] } = obj; // x = undefined，y = 'world' // 剩余运算符 let {a, b, ...rest} = {a: 10, b: 20, c: 30, d: 40}; // a = 10，b = 20，rest = {c: 30, d: 40} // 解构默认值 let {a = 10, b = 5} = {a: 3}; // a = 3; b = 5; \"]},\"302\":{\"h\":\"Symbol\",\"t\":[\"一种非字符串的新数据类型 Symbol，表示独一无二的值，即使是相同参数 Symbol() 返回的值不相等，最大的用法是用来定义对象的唯一属性名。\",\"现在数据类型有：Number、String、Boolean、Object、null、undefined 和 Symbol。\",\"let sy = Symbol(\\\"value\\\"); console.log(sy); // Symbol(KK) typeof(sy); // \\\"symbol\\\" let sy1 = Symbol(\\\"value\\\"); sy === sy1; // false \"]},\"303\":{\"h\":\"使用场景\"},\"304\":{\"h\":\"作为属性名\",\"t\":[\"let sy = Symbol(\\\"key1\\\"); // 写法1 let syObject = {}; syObject[sy] = \\\"value\\\"; console.log(syObject); // {Symbol(key1): \\\"kk\\\"} // 写法2 let syObject = { [sy]: \\\"value\\\" }; console.log(syObject); // {Symbol(key1): \\\"kk\\\"} // 写法3 let syObject = {}; Object.defineProperty(syObject, sy, {value: \\\"value\\\"}); console.log(syObject); // {Symbol(key1): \\\"kk\\\"} \",\"我们使用 Symbol 定义对象唯一属性名的时候，要是用方括号获取其对应的属性值，因为.运算符后面是字符串，所以取到的是字符串 sy 属性，而 Symbol 是非字符串类型，所以获取的并不是 Symbol 的 sy。\",\"// 定义对象 let sy = Symbol(\\\"key1\\\"); let syObject = {}; syObject[sy] = \\\"value\\\"; syObject[sy]; // \\\"value\\\" syObject.sy; // undefined \",\"Symbol 值作为属性名时，该属性是公有属性不是私有属性，可以在类的外部访问，获取方法如下：\",\"// 定义对象 let syObject = {}; syObject[sy] = \\\"value\\\"; console.log(syObject); for (let i in syObject) { console.log(i); // 无输出 } Object.keys(syObject); // [] Object.getOwnPropertySymbols(syObject); // [Symbol(key1)] Reflect.ownKeys(syObject); // [Symbol(key1)] \"]},\"305\":{\"h\":\"定义常量\",\"t\":[\"在之前 ES5 定义字符串常量的时候：\",\"const COLOR_RED = \\\"red\\\"; const COLOR_YELLOW = \\\"yellow\\\"; const COLOR_BLUE = \\\"blue\\\"; \",\"上面的写法其实并不能保证唯一性，而现在有了 Symbol 后，可以写成：\",\"const COLOR_RED = Symbol(\\\"red\\\"); const COLOR_YELLOW = Symbol(\\\"yellow\\\"); const COLOR_BLUE = Symbol(\\\"blue\\\"); \",\"Symbol 还提供了两个方法在我们创建 Symbol 时使用：\",\"Symbol.for()：首先会在全局搜索被登记的 Symbol 中是否有该字符串参数作为名称的 Symbol 值，如果有即返回该 Symbol 值，若没有则新建并返回一个以该字符串参数为名称的 Symbol 值，并登记在全局环境中供搜索。\",\"let yellow = Symbol(\\\"Yellow\\\"); let yellow1 = Symbol.for(\\\"Yellow\\\"); yellow === yellow1; // false let yellow2 = Symbol.for(\\\"Yellow\\\"); yellow1 === yellow2; // true \",\"Symbol.keyFor()：返回一个已登记的 Symbol 类型值的 key ，用来检测该字符串参数作为名称的 Symbol 值是否已被登记。\",\"let yellow1 = Symbol.for(\\\"Yellow\\\"); Symbol.keyFor(yellow1); // \\\"Yellow\\\" \"]},\"306\":{\"h\":\"Map 与 Set\"},\"307\":{\"h\":\"Map\",\"t\":[\"Map 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。\",\"var myMap = new Map(); // 字符串 myMap.set(\\\"String\\\", \\\"字符串\\\"); // 对象 var keyObj = {}; myMap.set(keyObj, \\\"obj\\\"); // 函数 var keyFunc = function () {}; myMap.set(keyFunc, \\\"func\\\"); // NAN myMap.set(NaN, \\\"not a number\\\"); myMap; // Map(4) {'String' => '字符串', {…} => 'obj', ƒ => 'func', NaN => 'not a number'} \"]},\"308\":{\"h\":\"Map 的迭代\",\"t\":[\"// 定义一个 Map var myMap = new Map(); myMap.set(0, \\\"zero\\\"); myMap.set(1, \\\"one\\\"); for (var key of myMap.keys()) { console.log(key); // 将会显示两个log。 一个是 \\\"0\\\" 另一个是 \\\"1\\\" } for (var value of myMap.values()) { console.log(value); // 将会显示两个log。 一个是 \\\"zero\\\" 另一个是 \\\"one\\\" } for (var [key, value] of myMap) { console.log(key + \\\" = \\\" + value); // 将会显示两个 log。 一个是 \\\"0 = zero\\\" 另一个是 \\\"1 = one\\\" } myMap.forEach(function(value, key) { console.log(key + \\\" = \\\" + value); // 将会显示两个 logs。 一个是 \\\"0 = zero\\\" 另一个是 \\\"1 = one\\\" }, myMap) \"]},\"309\":{\"h\":\"Map 小技巧\",\"t\":[\"// Map 与 Array的转换 var kvArray = [[\\\"key1\\\", \\\"value1\\\"], [\\\"key2\\\", \\\"value2\\\"]]; var myMap = new Map(kvArray); // Map 构造函数可以将一个 二维 键值对数组转换成一个 Map 对象 var outArray = Array.from(myMap); // 使用 Array.from 函数可以将一个 Map 对象转换成一个二维键值对数组 // Map 的克隆 var myMap1 = new Map([[\\\"key1\\\", \\\"value1\\\"], [\\\"key2\\\", \\\"value2\\\"]]); var myMap2 = new Map(myMap1); // Map 的合并 var first = new Map([[1, 'one'], [2, 'two'], [3, 'three'],]); var second = new Map([[1, 'uno'], [2, 'dos']]); var merged = new Map([...first, ...second]); // 合并两个 Map 对象时，如果有重复的键值，则后面的会覆盖前面的，对应值即 uno，dos， three \"]},\"310\":{\"h\":\"Set\",\"t\":[\"Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。\",\"let mySet = new Set(); mySet.add(1); // Set(1) {1} mySet.add(5); // Set(2) {1, 5} mySet.add(5); // Set(2) {1, 5} mySet.add(\\\"some text\\\"); // Set(3) {1, 5, \\\"some text\\\"} 这里体现了类型的多样性 var o = {a: 1, b: 2}; mySet.add(o); mySet.add({a: 1, b: 2}); // Set(5) {1, 5, \\\"some text\\\", {…}, {…}} \"]},\"311\":{\"h\":\"Set 小技巧\",\"t\":[\"// 去重 var arr = [1, 2, 3, 4, 4]; var mySet = new Set(arr); [...mySet]; // [1, 2, 3, 4] // 并集 var a = new Set([1, 2, 3]); var b = new Set([4, 3, 2]); var union = new Set([...a, ...b]); // {1, 2, 3, 4} // 交集 var a = new Set([1, 2, 3]); var b = new Set([4, 3, 2]); var intersect = new Set([...a].filter(x => b.has(x))); // {2, 3} // 差集 var a = new Set([1, 2, 3]); var b = new Set([4, 3, 2]); var difference = new Set([...a].filter(x => !b.has(x))); // {1} \"]},\"312\":{\"h\":\"Reflect 与 Proxy\"},\"313\":{\"h\":\"Proxy\",\"t\":[\"可以对目标对象的读取、函数调用等操作进行拦截，然后进行操作处理。它不直接操作对象，而是像代理模式，通过对象的代理对象进行操作，在进行这些操作时，可以添加一些需要的额外操作。\",\"let target = { name: 'Tom', age: 24 } let handler = { get: function(target, key) { console.log('getting '+key); return target[key]; // 不是target.key }, set: function(target, key, value) { console.log('setting '+key); target[key] = value; } } let proxy = new Proxy(target, handler) proxy.name // 实际执行 handler.get proxy.age = 25 // 实际执行 handler.set \"]},\"314\":{\"h\":\"Reflect\",\"t\":[\"可以用于获取目标对象的行为，它与 Object 类似，但是更易读，为操作对象提供了一种更优雅的方式。它的方法与 Proxy 是对应的。\",\"// 定义对象 let exam = { name: \\\"Tom\\\", age: 24, get info(){ return this.name + this.age; } } Reflect.get(exam, 'name'); // \\\"Tom\\\" \"]},\"315\":{\"h\":\"组合使用\",\"t\":[\"// 定义一个对象 let exam = { name: \\\"Tom\\\", age: 24 } // 定义拦截方法 let handler = { get: function(target, key){ console.log(\\\"getting \\\" + key); return Reflect.get(target, key); }, set: function(target, key, value){ console.log(\\\"setting \\\" + key + \\\" to \\\" + value) Reflect.set(target, key, value); } } let proxy = new Proxy(exam, handler) proxy.name = \\\"Jerry\\\" proxy.name // \\\"Jerry\\\" \"]},\"316\":{\"h\":\"函数\",\"t\":[\"这里我们主要介绍一下箭头函数，它提供了一种更加简洁的函数书写方式，基本语法是：参数 => 函数体。并且箭头函数体中的 this 对象，是定义函数时的对象，而不是使用函数时的对象。\",\"// 正常 var Person = { 'age': 18, 'sayHello': function () { setTimeout(function () { console.log(this.age); }); } }; var age = 20; Person.sayHello(); // 20 // 箭头函数 var Person1 = { 'age': 18, 'sayHello': function () { setTimeout(()=>{ console.log(this.age); }); } }; var age = 20; Person1.sayHello(); // 18 \"]},\"317\":{\"h\":\"Class 类\",\"t\":[\"在ES6中，class (类)作为对象的模板被引入，可以通过 class 关键字定义类。class 的本质是 function，它可以看作一个语法糖，让对象原型的写法更加清晰、更像面向对象编程的语法。\",\"// 匿名类 let Example = class { constructor(a) { this.a = a; } } // 命名类 let Example = class Example { constructor(a) { this.a = a; } } \",\"要注意：类不可以重复声明；类定义不会被提升，这意味着，必须在访问前对类进行定义，否则就会报错；类中方法不需要 function 关键字，方法间也不能加分号；类的实例化需要 new 关键字。\",\"class Example { constructor(a, b) { this.a = a; this.b = b; console.log('Example'); } sum() { return this.a + this.b; } } let exam1 = new Example(2, 1); let exam2 = new Example(3, 1); \",\"ES6 的类也有类似封装和继承的概念，不过类中的 getter 与 setter 必须同级出现。通过 extends 实现类的继承，子类 constructor 方法中必须有 super ，且必须出现在 this 之前。\",\"class Father { constructor(){} // 或者都放在子类中 get a() { return this._a; } set a(a) { this._a = a; } } class Child extends Father { constructor(){ super(); } } let test1 = new Child(); test1.a = 2; console.log(test1.a); // 2 \"]},\"318\":{\"h\":\"模块\",\"t\":[\"ES6 引入了模块化，分为导出（export） @与导入（import）两个模块，其设计思想是在编译时就能确定模块的依赖关系，以及输入和输出的变量。\",\"// 正常导入导出 // 导出 let myName = \\\"Tom\\\"; export { myName as exportName } // 导入 import { exportName } from \\\"./test.js\\\"; console.log(exportName);// Tom // export default // 导出 var a = \\\"My name is Tom!\\\"; export default a; // export default 仅有一个 // 导入 import b from \\\"./xxx.js\\\"; // 不需要加{}， 使用任意变量接收 \"]},\"319\":{\"h\":\"Promise 对象\",\"t\":[\"Promise 对象是异步编程的一种解决方案，从它可以获取异步操作的消息。Promise 异步操作有三种状态：pending（进行中）、fulfilled（已成功）和 rejected（已失败），而且只有从 pending 变为 fulfilled 和从 pending 变为 rejected 的状态改变。只要处于 fulfilled 和 rejected ，状态就不会再改变了。\",\"Promise 对象往往搭配 then 方法使用，then 方法接收两个函数作为参数，第一个参数是 Promise 执行成功时的回调，第二个参数是 Promise 执行失败时的回调，两个函数只会有一个被调用。搭配使用的时候要遵守链式编程的规则，保持扁平化，不要嵌套 Promise。\",\"const p = new Promise(function(resolve,reject){ resolve(1); }).then(function(value){ // 第一个then // 1 console.log(value); return value * 2; }).then(function(value){ // 第二个then // 2 console.log(value); }).then(function(value){ // 第三个then // undefined console.log(value); return Promise.resolve('resolve'); }).then(function(value){ // 第四个then // resolve console.log(value); return Promise.reject('reject'); }) .then( function(value){ // 第五个then // reject:reject !!!这里不会打印,因为上一个then方法返回的是一个reject状态的promise console.log('resolve:' + value); }, function(err) { // 此行会打印, 因第五个than只能接受 resolve状态的promise, 而第四个than返回的是reject状态的promise // 所以会被本行 err 捕获 console.log('reject:' + err); } ); \"]},\"320\":{\"h\":\"Generator 函数\",\"t\":[\"ES6 新引入了 Generator 函数，可以通过 yield 关键字，把函数的执行流挂起，为改变执行流程提供了可能，从而为异步编程提供解决方案。\",\"Generator 有两个区分于普通函数的部分：在 function 后面，函数名之前有个 * ；函数内部有 yield 表达式。调用 Generator 函数和调用普通函数一样，在函数名后面加上()即可，但是 Generator 函数不会像普通函数一样立即执行，而是返回一个指向内部状态对象的指针，所以要调用遍历器对象Iterator 的 next 方法，指针就会从函数头部或者上一次停下来的地方开始执行。\",\"function* func(){ console.log(\\\"one\\\"); yield '1'; console.log(\\\"two\\\"); yield '2'; console.log(\\\"three\\\"); return '3'; } let f = func(); f.next(); // one // {value: \\\"1\\\", done: false} f.next(); // two // {value: \\\"2\\\", done: false} f.next(); // three // {value: \\\"3\\\", done: true} f.next(); // {value: undefined, done: true} \"]},\"321\":{\"h\":\"async 函数\",\"t\":[\"看都没看明白，等我用明白了再说\"]},\"322\":{\"h\":\"Layout 布局\"},\"323\":{\"h\":\"走进 Layout 布局\",\"t\":[\"早期的布局的即把界面看作分为东南西北中五块个模块，其中每个模块的相对位置又可以分流式布局、自适应布局等，到现在网页项目逐渐趋于模块化后，现在认识到的布局更多的是指嵌套 Header、Sider、Content、Footer 和 Main 组件的界面样式，我们可以在 Element UI 的组件中看到这几个部分的排列演示：\",\"常见页面布局\",\"在真正落地布局之前我们还应该需要很多基础知识来支撑 Layout 的实现，提到布局最重要的当然是 CSS 样式，在目前 CSS 有很多样式来增加其规范性和可读性，这里我们结合 Element UI 描述一下 CSS 的 BEM 架构。\"]},\"324\":{\"h\":\"BEM 架构\",\"t\":[\"我们知道 CSS 只有一个作用域，无论你通过什么选择器去操作样式，一旦你声明一个选择器，它就是全局的，一不小心可能就会影响到其他元素，代码的维护性很差，而且 CSS 代码的可读性也不高，虽然目前的前端框架像 Vue 会有 scoped 组件样式的功能，但一些全局样式还是需要有一个规范来整理。\",\"结合目前的 Layout 布局的组件化思想，我们把界面模块化后借助结构将样式进行规整，结合这种思想，由 Yandex 团队提出的一种 CSS 命名方法论 BEM，也就是一种命名规范。它把 CSS 样式分为三层：block、element 和 modifier，分别是块层、元素层和修饰层。其书写原则就是使用 __ 将块名称和元素名称分开，用 -- 分隔元素名称和修饰符，经典写法为 block-name__element-name--modifier-name--modifier-value。\",\"当然很多人觉得 BEM 规范的双下划线和破折号太长或者奇怪，往往大家都是接受其思想而通过短横线来代替，如 Element UI 中的样式命名规范：\",\"Element 样式\",\"而我们又知道我们在样式中嵌套会自动追加上父选择器的类名，这样就会破坏 BEM 的命名规范，所以基础的 CSS 语法已经不满足我们去实现这种规范，这里我们需要借助一些 CSS 拓展语言来实现，这里我们选择 Sass。\"]},\"325\":{\"h\":\"Sass\",\"t\":[\"作为自称世界上最成熟、最稳定、最强大的专业级CSS扩展语言，Sass 拥有更多的功能和特性，如果想详细了解 Sass 可以点击下面卡片去官网学习。\"]},\"326\":{\"h\":\"TypeScript + ES6+\"},\"327\":{\"h\":\"前言\",\"t\":[\"TypeScript 与 JavaScript 有着不同寻常的关系。TypeScript 提供了 JavaScript 的所有功能，并在这些功能之上添加了一层：TypeScript 的类型系统,所以很多人都说 TS 是 JS 的超集。更多的细节详见官网，话不多说，我们直接开始准备工作。\",\"所有的测试代码都在博客首页中的 typescript-study-demo 中找到。\"]},\"328\":{\"h\":\"Pinia\"},\"329\":{\"h\":\"关于 Pinia 和 Vuex\",\"t\":[\"Pinia 最初是为了探索 Vuex 的下一次迭代会是什么样子，结合了 Vuex 5 核心团队讨论中的许多想法。最终，我们意识到 Pinia 已经实现了我们在 Vuex 5 中想要的大部分内容，并决定实现它 取而代之的是新的建议。\",\"与 Vuex 相比，Pinia 提供了一个更简单的 API，具有更少的规范，提供了 Composition-API 风格的 API，最重要的是，在与 TypeScript 一起使用时具有可靠的类型推断支持。\"]},\"330\":{\"h\":\"Vue3\"},\"331\":{\"h\":\"Vue3 和 Vue 2\",\"t\":[\"问过一些从事前端的朋友，他们大部分都还在用 Vue2，倒不是因为不想用 3，主要是公司的框架都是2，如果重新改造得不偿失，但是他们自己都是已经在使用 3 开始做项目了。学习 Vue3 之前还是建议有一些 Vue2 的基础，官网给出了 3 中我们值得关注的一些新特性：\",\"组合式 API\",\"Teleport 组件\",\"Fragments 片段\",\"Emits 组件选项\",\"来自 @vue/runtime-core 的 createRenderer API 用来创建自定义渲染函数\",\"单文件组件中的状态驱动的 CSS 变量\",\"新增全局规则和针对插槽内容的规则\",\"Suspense\",\"新特性还是非常多的，其中最直观也是最重要的就是 组合式API 的出现，它取代了 Vue2 的 选项式API 的风格，在灵活性和逻辑的复用性上有了很大的提升，官网也是推荐开发使用组合式 API + 单文件组件（SFC）的方式，所以我们也遵循此道来进行 Vue3 的学习。\",\"所有的测试代码都在博客首页中的 vue3-study-demo 中找到。\"]},\"332\":{\"h\":\"快速开始\",\"t\":[\"确保在安装了最新版本的 Node.js，并且你的当前工作目录正是打算创建项目的目录下执行下面命令。\",\"npm init vue@latest \",\"根据安装指引可能根据个人不同的选项初始化出目录结构不太相同的项目，但是我们只关注 Vue 的文件，我们只关注根目录中 src 里的文件。\",\"初始化目录\",\"我们把将目光聚集在 App.vue 这个文件上，作为 Vue 的全局入口文件，我们可以先把其他扰乱视线的东西删除，把它作为一个干净的单文件组件来写第一个 demo 案例。\",\"<script setup> import { ref } from 'vue' const count = ref(0) function increment() { count.value++ } </script> <template> <button @click=\\\"increment\\\"> {{ count }} </button> </template> \",\"这样我们就得到了一个最简单的自增按钮的界面，至于其中的setup、ref等“新面孔”在下面的学习里再缓缓道来。\"]},\"333\":{\"h\":\"三种书写风格\",\"t\":[\"Vue3 支持三种书写风格，一种是延续 Vue2 的 Option API，这种可以让有 Vue2 基础的人无缝衔接 Vue3 的开发；第二种是使用 Vue3 提供的 setup 函数来实现，setup 函数中的代码会在每次组件实例被创建的时候执行，并且能直接在模版中直接使用；第三种方式则是 Vue3 提供的 setup 函数的语法糖，在 setup() 函数中手动暴露大量的状态和方法非常繁琐,我们可以通过使用单文件组件搭配 <script setup> 来大幅度地简化代码，这也是比较推荐和以后常用的方式。\"]},\"334\":{\"h\":\"Option API\",\"t\":[\"<template> {{ name }} </template> <script> export default { data() { return { name: 'songbaicheng' } } } </script> \"]},\"335\":{\"h\":\"setup()\",\"t\":[\"<template> {{ name }} </template> <script> export default { setup() { const name = 'songbaicheng' return { name } } } </script> \"]},\"336\":{\"h\":\"<script setup>\",\"t\":[\"<template> {{ name }} </template> <script setup> const name = 'songbaicheng' </script> \"]},\"337\":{\"h\":\"指令\"},\"338\":{\"h\":\"v-text\",\"t\":[\"<script setup> let context = 'my name is songbaicheng' </script> <template> <div v-text=\\\"context\\\" /> </template> \"]},\"339\":{\"h\":\"v-html\",\"t\":[\"<script setup> let context = '<h1 style=\\\"font-weight: bold\\\">my name is songbaicheng</h1>' </script> <template> <div v-html=\\\"context\\\" /> </template> \"]},\"340\":{\"h\":\"v-if\",\"t\":[\"v-else-if 和 v-else 的上一个兄弟元素必须有 v-if 或 v-else-if，而且 v-else 无需传入表达式。如果是 false Vue 会把你的标签注释掉达到隐藏的效果。\",\"<script setup lang=\\\"ts\\\"> let typeFlag: string = 'A' </script> <template> <div v-if=\\\"typeFlag === 'A'\\\"> A </div> <div v-else-if=\\\"typeFlag === 'B'\\\"> B </div> <div v-else-if=\\\"typeFlag === 'C'\\\"> C </div> <div v-else> Not A/B/C </div> </template> \"]},\"341\":{\"h\":\"v-show\",\"t\":[\"相比于 v-if，如果是 false Vue 会把标签增加display: none;样式，效率更高。\",\"<script setup lang=\\\"ts\\\"> let trueFlag: boolean = true let falseFlag: boolean = false </script> <template> <span v-show=\\\"trueFlag\\\"> 事了拂衣去 </span> <span v-show=\\\"falseFlag\\\"> 深藏功与名 </span> </template> \"]},\"342\":{\"h\":\"v-on\",\"t\":[\"一般平时我都是使用 @ 符号代替 v-on 来简写。v-on也提供很多方法，比如：\",\"once： 只点击一次\",\"stop： 阻止事件冒泡\",\"<script setup lang=\\\"ts\\\"> let sout = () => { console.log('我是父级！') } let click = () => { alert('你好！') } </script> <template> <div @:click=\\\"sout\\\"> <button @:click.stop=\\\"click\\\">欢迎光临</button> </div> </template> \"]},\"343\":{\"h\":\"v-bind\",\"t\":[\"<script setup lang=\\\"ts\\\"> let style = { color: 'red' } </script> <template> <div :style=\\\"style\\\"> bind绑定样式 </div> </template> \"]},\"344\":{\"h\":\"v-model\",\"t\":[\"<script setup lang=\\\"ts\\\"> import { ref } from 'vue' let name = ref('songbaicheng') </script> <template> <input v-model=\\\"name\\\" type=\\\"text\\\" /> <span>{{ name }}</span> </template> \"]},\"345\":{\"h\":\"v-for\",\"t\":[\"<script setup lang=\\\"ts\\\"> let arr: string[] = ['one', 'two', 'three', 'four'] </script> <template> <div :key=\\\"index\\\" v-for=\\\"(e, index) in arr\\\"> {{ index }}->{{ e }} </div> </template> \"]},\"346\":{\"h\":\"虚拟 Dom 和 Dom diff 算法\",\"t\":[\"Vue.js 使用虚拟 DOM 实现了高效的页面更新。当数据发生改变时，Vue.js 会先比对新旧虚拟 DOM 树的差异，然后只会更新实际变化的部分。虚拟 Dom 当然对标的是真实 Dom，它是一个能代表 Dom 树的对象，通常含有标签名、标签上的属性、事件监听和子元素等其他属性。虚拟 Dom 的优点是可以减少 Dom 操作，所以是在一些情况下比操作真实 Dom 快的，而且因为虚拟 Dom 本质上是一个JS对象，所以虚拟 Dom 也是支持跨平台。\",\"Dom diff 是虚拟 Dom 的对比算法，我们大概说一下其比较逻辑，首先diff算法有三种比较：tree diff、component diff 和 element diff。Tree diff 要做的就是新旧两棵 Dom 树比较找出不同的节点，而其中的节点比较就是交给其他两个 diff，如果节点是组件则进行 component diff，如果节点是标签则进行 element diff。component diff首先看组件类型，类型不同直接替换旧类型，类型相同则对比替换属性，之后再递归走组件内的节点做 tree diff。而 element diff 先比较标签名，如果是不同直接替换旧标签，如果相同则更新属性，之后也是再递归走子节点的 tree diff。这样比较下来很显然可以减少操作 Dom 的次数。\",\"不过在这些比较过程中，:key 有什么作用呢？如果我们不声明 key，我们将 Dom 看成是一棵虚拟的树，如果我们删除了一个左子节点，我们以为的是这棵树的右子节点会变成左子节点，但是计算机会认为是我们修改了左子节点，删除了右子节点，所以我们为了让计算机知道我们删除的究竟是哪个节点，我们要给每个节点绑定唯一的key标记，这样就避免了误判的情况发生。\"]},\"347\":{\"h\":\"响应式\",\"t\":[\"在组合式 API 中，推荐使用 ref() 函数来声明响应式状态，在标准的 JavaScript 中，检测普通变量的访问或修改是行不通的。但是我们可以拦截属性的 get 和 set 操作，从概念上讲，.value 属性给予了 Vue 一个机会来检测 ref 何时被访问或修改，在其内部，Vue 在它的 getter 中执行追踪，在它的 setter 中执行触发。\",\"当你在模板中使用了一个 ref，然后改变了这个 ref 的值时，Vue 会自动检测到这个变化，并且相应地更新 DOM。这是通过一个基于依赖追踪的响应式系统实现的。当一个组件首次渲染时，Vue 会追踪在渲染过程中使用的每一个 ref。然后，当一个 ref 被修改时，它会触发追踪它的组件的重新渲染。\",\"另一个 ref 的好处是，与普通变量不同，你可以将 ref 传递给函数，同时保留对最新值和响应式连接的访问。当将复杂的逻辑重构为可重用的代码时，这将非常有用。\",\"值得注意的是，和 Vue2 相比的双向绑定不同的是，ref 响应式的对象会多出一层 .value 来调用其属性，并不可以直接获取属性，而 reactive 响应式并不需要 .value 去获取属性和元素。\"]},\"348\":{\"h\":\"ref\",\"t\":[\"常见的有三种 ref：ref、shallowRef、triggerRef。ref 作为深层响应式，包括深层嵌套的对象、数组或者 JavaScript 内置的数据结构，改变嵌套对象或数组时，变化也会被检测到；与之相对的就是 shallowRef 浅层响应式，它只能检测到 .value 下的变化，如果在深层的改变则不会检测。要注意 ref 和 shallowRef 不能同时使用，因为它俩的直接区别就是 ref 的底层会调用 triggerRef 强制更新收集依赖，这样会导致一些 shallowRef 本不该响应变成响应的。\"]},\"349\":{\"h\":\"reactive\",\"t\":[\"与 ref 不同的是，ref 可以接受所有类型的参数，而 reactive 被泛型约束只能接收引用类型的参数，如 Object、Array、Map、Set等，并且 reavtive 的底层是用代理去拦截对响应式对象所有属性的访问和修改，以便进行依赖追踪和触发更新，所以不能直接对对象进行赋值，否则会破坏响应式对象。\"]},\"350\":{\"h\":\"toRef\"},\"351\":{\"h\":\"计算属性\",\"t\":[\"有函数式写法和选项式写法两种。如果只是仅仅获取结果可以使用函数式的写法，computed() 方法期望接收一个 getter 函数，返回值为一个计算属性 ref，计算属性 ref 也会在模板中自动解包，因此在模板表达式中引用时无需添加 .value；如果你需要用到“可写”的属性，你可以通过同时提供 getter 和 setter 的选项式写法来创建。\"]},\"352\":{\"h\":\"监听器\",\"t\":[\"计算属性允许我们声明性地计算衍生值。然而在有些情况下，我们需要在状态变化时执行一些异步操作的结果去修改另一处的状态，在组合式 API 中，我们可以使用 watch 函数在每次响应式状态发生变化时触发回调函数。\",\"当我们使用 immediate: true 时可以用 watchEffect代替，它自动跟踪回调的响应式依赖，对于有多个依赖项的侦听器来说，使用 watchEffect() 可以消除手动维护依赖列表的负担。此外，如果你需要侦听一个嵌套数据结构中的几个属性，watchEffect() 可能会比深度侦听器更有效，因为它将只跟踪回调中被使用到的属性，而不是递归地跟踪所有的属性。\"]},\"353\":{\"h\":\"生命周期\",\"t\":[\"每个 Vue 组件实例在创建时都需要经历一系列的初始化步骤，比如设置好数据侦听，编译模板，挂载实例到 DOM，以及在数据改变时更新 DOM。在此过程中，它也会运行被称为生命周期钩子的函数，让开发者有机会在特定阶段运行自己的代码。\",\"生命周期钩子\",\"执行时间\",\"onMounted\",\"在组件挂载完成后执行\",\"onUpdated\",\"在组件因为响应式状态变更而更新其 DOM 树之后调用\",\"onUnmounted\",\"在组件实例被卸载之后调用\",\"onBeforeMount\",\"在组件被挂载之前被调用\",\"onBeforeUpdate\",\"在组件即将因为响应式状态变更而更新其 DOM 树之前调用\",\"onBeforeUnmount\",\"在组件实例被卸载之前调用\",\"onErrorCaptured\",\"在捕获了后代组件传递的错误时调用\",\"onRenderTracked\",\"当组件渲染过程中追踪到响应式依赖时调用\",\"onRenderTriggered\",\"当响应式依赖的变更触发了组件渲染时调用\",\"onRenderTriggered\",\"当组件被插入到 DOM 中时调用。\",\"onActivated\",\"若组件实例是缓存树的一部分，当组件被插入到 DOM 中时调用\",\"onDeactivated\",\"若组件实例是缓存树的一部分，当组件从 DOM 中被移除时调用\",\"onServerPrefetch\",\"若组件实例是缓存树的一部分，当组件从 DOM 中被移除时调用\"]},\"354\":{\"h\":\"父子模块传值\",\"t\":[\"父子文件交互主要有下几个函数：defineProps()、defineEmits()、defineExpose()、defineOptions()和defineSlots()\"]},\"355\":{\"h\":\"动态组件\"},\"356\":{\"h\":\"过度和动画\",\"t\":[\"Transition\"]},\"357\":{\"h\":\"依赖注入\",\"t\":[\"provide/inject\"]},\"358\":{\"h\":\"组件通信\",\"t\":[\"全局Bus\"]},\"359\":{\"h\":\"自定义指令\",\"t\":[\"Directives\"]},\"360\":{\"h\":\"全局变量和方法\",\"t\":[\"globalProperties\"]},\"361\":{\"h\":\"第三方UI\",\"t\":[\"pc：Element UI、AntDesign、ViewDesign\\n移动端：vant\"]},\"362\":{\"h\":\"走进 CI/CD 的世界\",\"t\":[\"少年，还在自己手动打包介质吗，还在手动传包到服务器部署吗，借用一名国外开发者的话来说：“如果一件事会让你觉得机械无聊浪费时间的话，就把它交给计算机。”\",\"什么是 CI/CD，是“Continuous Integration”（持续集成）和“Continuous Delivery/Deployment”（持续交付/部署）的缩写，现在大环境处在敏捷开发和 DevOps 文化之中，几乎所有主流的工具和服务都提供了该功能，如 Jenkins、GitHub Actions、GitLab CI/CD、CircleCI 等，这个博客的实现就是基于 GitHub Actions 来实现自动更新部署。\",\"当我入职当前公司的时候，正值公司进行产品、架构和 APSSA 推广的关键时期，前后正好经历了从单体架构到微服务的转型，开发工具的迭代与产品的升级改造，一年多的时间里每次的上线窗口的规范和方式一直在变化，而大部分的责任就这样落在了我的肩膀上。\",\"还记得一开始上线的方式，一些项目并没有配置平台，每个环境的包因为配置的不同都要同时准备三份甚至更多，通过每次打包后上传到 Bitbucket 统一的制品仓库，然后编写这的上线手册，运维团队在拿到介质包和手册后按照步骤在生产环境部署，其过程听起来就让人头皮发麻，经常因为手册不明确和包有问题而导致上线失败。\",\"之后经过第一轮的升级改造，代码仓库和流水线的出现，我们不需要关心环境和上传介质的问题了，通过脚本控制各个环境的配置打包并上传到介质库，通过开发创建测试和版本的流水线后，运维进行校验和更新，彻底抛弃了每次手动执行带来的问题。\",\"到现在慢慢的将静态代码分析、单元测试、集成测试、性能测试、安全测试、介质检查等步骤完善到流水线，项目架构升级也支持对接统一配置平台后，一键部署上线已经不是问题，开发人员只需要关心代码分支的规范和业务功能就可以了，十分 nice。\",\"CI/CD 并不是只是运维人员掌握，尤其是现在云服务器价格逐渐降低，自己项目的部署也需要我们每个程序员掌握这项技术，而 Jenkins 作为行业最主流的 CI/CD 工具，学习它可以让我们更好的理解 DevOps 理念，并且为之后结合 Docker 与 Kubernetes 更是如虎添翼。\",\"这里我以我自己工作和日常开发用到的 Jenkins 经历进行归纳和整理，方便以后更高效合理的进行软件的高效迭代和稳定交付。\"]},\"363\":{\"h\":\"初始 Jenkins\"},\"364\":{\"h\":\"快速搭建\",\"t\":[\"个人理解主节点的 Jenkins 因为不推荐参与构建任务，再加性能损耗小、系统调用权限更直接、复杂度降低等优点，所以应该是安装在宿主机上的，但是目前主流的方案都因为隔离性、可移植性、易于管理和更新的原因都选择容器部署，那我们也就选择容器的方式进行搭建。\",\"便于管理和配置复用，我们这里采用 Docker Compose 的容器编排方式创建 Jenkins 容器。我们在工作目录中创建下列 Dockerfile 和 Docker Compose。\",\" # 选择自己的容器镜像 FROM jenkins/jenkins # 设置环境变量，也可以省略，因为不推荐使用自带的 JDK ENV JAVA_OPTS=\\\"-Xms512m -Xmx1024m\\\" # 安装必要的插件，当然可以选择启动容器后手动安装 COPY plugins.txt /usr/share/jenkins/ref/plugins.txt RUN /usr/local/bin/install-plugins.sh $(cat /usr/share/jenkins/ref/plugins.txt) # 用户和权限配置（如有必要，根据实际需求调整） USER root RUN chown -R jenkins:jenkins /var/jenkins_home/ # 切换容器登录账户 USER jenkins \",\"version: '3' services: jenkins: build: context: ./jenkins dockerfile: Dockerfile container_name: jenkins restart: always # 在生产环境中通常希望容器崩溃后自动重启 ports: - \\\"8080:8080\\\" # 映射Jenkins Web UI端口到宿主机 - \\\"50000:50000\\\" # 映射Jenkins Agent端口 volumes: - jenkins_data:/var/jenkins_home # 数据持久化，保存在宿主机的数据卷中 - /var/run/docker.sock:/var/run/docker.sock # 如果要在Jenkins中执行Docker命令，需要映射Docker守护进程socket - /path/to/your/config:/usr/share/jenkins/ref/init.groovy.d # 若有自定义初始化脚本 - /usr/local/maven:/usr/local/maven # 自定义 Maven - /usr/local/java:/usr/local/java # 自定义 Java - /usr/local/node:/usr/local/node # 自定义 Node \",\"在 docker-compose.yml 目录下执行 docker-compose up -d 即可创建容器，可以用 docker ps 查看是否启动成功，如果成功则立即执行 docker logs jenkins 来显示管理员初始化密码，如果没有看到也可以执行 docker exec -it jenkins cat /var/jenkins_home/secrets/initialAdminPassword 进入容器内查看初始化密码。\"]},\"365\":{\"h\":\"基础配置\"},\"366\":{\"h\":\"项目前言\",\"t\":[\"里程碑般的项目，这是我开始金融项目中第一次完整的跟进一个比较大的项目，从需求说明书到设计到落地到测试到联调至上线，就在这四五个月的时间里，虽然很多东西都是依赖了行里已经成熟可靠的项目经验，可确实是从无到有，让我考虑和学习到了之前从来没有接触过的东西，我会借着这个机会把握认为有价值的知识点都记录下来，这将是我程序员职业生涯中重要的一次经历和经验。\"]},\"367\":{\"h\":\"项目需求\"},\"368\":{\"h\":\"背景\",\"t\":[\"目前我行代客利率掉期[1]交易的询价、报价、审批、交易以及账务处理都是采用手工方式，需要等待总分行之间反复确认，时效性低，并且操作风险性高，为了完善为企业客户提升更全面、方便、快捷的服务，并且在同业具备自动化代客利率掉期交易的功能基础上，开始着手实现自动化的线上代客利率掉期交易。\",\"代客利率掉期，指采取只进行利息轧差计算，不交换名义本金的方式，在未来的一定期限内，根据约定的名义本金和利率进行一次或多次利息交换的产品。 ↩︎\"]},\"369\":{\"h\":\"并发\"},\"370\":{\"h\":\"Java 并发机制基础\",\"t\":[\"提到 Java 的编译过程，我们都会想到 .java 文件到 .class 字节码文件再到汇编指令到 CPU 内执行，而 Java 的并发机制正是依赖了 JVM 的实现和 CPU 的指令，让我们从 volatile 和 synchronized 这两个关键字来配合理解一下并发的原理。\"]},\"371\":{\"h\":\"volatile\",\"t\":[\"都说 volatile 是轻量的 synchronized，是因为它在多线程处理中过程中保证了共享变量的可见性，即一个线程在修改一个共享变量时，另一个线程可以读到这个变量值。所以在 volatile 使用恰当的情况下不会引起线程上下文的切换和调度，相比于 synchronized 成本更低。\",\"《Java 语言规范 第三版》对 volatile 的定义：Java 编程语言允许线程访问共享变量，为了确保共享变量能别准确和一致的更新，线程应确保能通过排他锁单独获得这个变量。\",\"让我们聊一下它的底层原理：Java 在对使用了 volatile 的变量进行写操作的时候，JVM 会向处理器发一条 Lock 前缀的指令，将这个变量所存在的缓冲行[1]的数据写回到系统内存。虽然被写回到内存，但是其他处理器缓存已经读取的值还是旧的，这里就得用得到缓存一致性协议了，每个处理器会嗅探总线上传播的数据检查自己的数据是否时最新的，当发现自己的缓存行地址被修改的时候，就会将当前缓存行状态设置为无效并重新从内存中读取到处理器缓存中来。\"]},\"372\":{\"h\":\"synchronized\",\"t\":[\"synchronized 作为多线程并发中的元老级角色也被称作重量级锁，虽然在日后的优化中可能已经没有那么“重”了。了解锁我们得先知道什么是锁。在 Java 中每个对象都可以是一个锁，具体有以下三种锁：\",\"对于普通同步方法，锁的是当前的实例对象。\",\"对于静态同步方法，锁的是当前类的 Class 对象。\",\"对于同步方法块，锁的是 Synchronized 括号里的配置对象。\",\"当一个线程试图访问同步代码块的时候，他必须先获得锁，退出和异常的时候必须释放锁。而具体的得到和释放锁的过程需要依赖 monitorenter 和 monitorexit 两个指令配合完成，JVM 会保证每个 monitorenter 必须有对应的 monitorexit ，它们在编译时会插入到代码块的开始和异常或者结束位置，任何对象都有一个 monitor 与之对应，并且一个 monitor 在被持有后将处于锁定状态，所以线程对锁的获取和释放就是对 monitor 的所有权的获取和释放。\",\"在我们就近的 JDK 版本里，为了解决对锁的获得和释放待来的性能损耗，引入了“偏向锁”和“轻量级锁”。这就得提到锁的状态了，锁一共有四种状态，级别由低到高分别是：无状态锁、偏向锁、轻量级锁、重量级锁。这几个状态会随着竞争情况而升级，并且锁只能升级不能降级，这种做法是为了提高获得锁和释放锁的效率，至于如果做到的我们得先了解这几种锁的状态才能展开。\"]},\"373\":{\"h\":\"偏向锁\",\"t\":[\"在大多数情况下，锁并不会存在多线程的竞争，而且总是由同一线程多次获得，所以就引入偏向锁的概念。当一个线程访问同步块并获取锁的时候，会在对当头和栈帧[2]的锁记录里存储偏向锁的线程ID，以后该线程在进入和退出同步块的时候不需要进行 CAS[3] 操作来加锁和解锁，只要测试对象头中是否是存储着当前线程的偏向锁即可。偏向锁提供了一种竞争出现才会释放的锁机制，当竞争出现的时候，首先会停止偏向锁的线程，然后检测持有偏向锁的线程是否活着，如果不活动则将对象头设置成无锁状态，如果活着则拥有偏向锁的栈会被执行，最后唤醒暂停的线程。\"]},\"374\":{\"h\":\"轻量级锁\",\"t\":[\"当一个线程获取轻量级锁时，JVM 会先在对象头中存储锁记录的指针，然后使用 CAS 指令尝试将对象的锁记录指针替换为指向当前线程的指针。如果 CAS 成功，表示当前线程获取了锁，可以继续执行，否则说明有竞争发生。在有竞争的情况下，如果其他线程也尝试获取同一个对象的轻量级锁，JVM 会将锁升级为重量级锁，当锁处于这个状态下，其他线程获取锁就会处于阻塞状态，一直等到只有锁的线程释放锁再唤醒这些阻塞线程进行新一轮争夺锁之战，因为锁不可降级的特性在，那么在释放锁时可以直接将锁的状态改为未锁定状态，无需进行额外的处理。这样就减少了释放锁的开销，提高了效率。\"]},\"375\":{\"h\":\"总结\",\"t\":[\"锁\",\"优点\",\"缺点\",\"使用场景\",\"偏向锁\",\"加锁和解锁不需要额外消耗\",\"锁竞争会带来额外的锁撤销的消耗\",\"适用于一个线程访问同步块场景\",\"轻量级锁\",\"竞争线程不会阻塞，提高了程序的响应速度\",\"始终得不到锁的线程会自旋消耗 CPU\",\"追求响应时间，执行速度快\",\"重量级锁\",\"线程不会自旋，不会消耗 CPU\",\"线程阻塞，相应时间慢\",\"追求吞吐量\"]},\"376\":{\"h\":\"原子操作 [4]\",\"t\":[\"处理器能保证从系统内存中读取和写入一个字节是原子的，而复杂的内存操作需要搭配处理器提供的总线锁定和缓存锁来保证其原子性。Java 通过锁和循环CAS来实现原子操作，从 JDK1.5 开始，并发包中就出现了 AtomicBoolean、AtomicInteger 等原子类将当前值加一减一。不过用 CAS 实现原子操作也是存在问题的，ABA 问题、循环时间开销大和只能保证一个变量的原子操作等。\"]},\"377\":{\"h\":\"总结\",\"t\":[\"Java 大部分的容器和框架都是依赖 volatile 和原子操作，这对展开并发编程很有帮助。\"]},\"378\":{\"h\":\"Java 内存模型\",\"t\":[\"在并发编程中有两个重要的问题：线程之间如何通讯及线程之间如何同步。Java 的并发采用的是共享内存模型，即线程之间共享程序的公共状态，通过写-读内存中的公共状态进行隐式通讯。\"]},\"379\":{\"h\":\"内存模型的抽象结构\",\"t\":[\"在 Java 中，所有的实例域、静态域和数组元素都存在堆内存中，堆内存在线程间共享，而局部变量、方法定义参数和异常处理器参数不会在线程之间共享，也不会有可见性问题。Java 线程之间的通讯由 Java 内存模型（JMM）控制，由 JMM 决定一个线程对共享变量的写入何时对另一个线程可见，从抽象的角度来讲，线程之间的共享变量存储在主内存，而每个线程都有本地内存，本地内存存放的共享变量的副本，示意图如下所示：\",\"Java 内存模型抽象结构图\",\"从图中来看，如果线程A和线程B之间通讯需要线程A先将本地内存A中更新的变量刷新到主内存去，然后线程B到住内存去读取线程A之前已经更新的共享变量。所以这个步骤的实质就是线程A向线程B发送消息，而且这个通信过程必须经过主内存。\"]},\"380\":{\"h\":\"指令重排\",\"t\":[\"在执行程序的过程中，为了提高性能，编译器和处理器常常会对指令进行重新排序，排序方式有以下三种：\",\"编译器优化的重新排序：编译器在不改变单线程程序语意的情况下可以进行语句的执行顺序。\",\"指令级并行的重新排序：根据指令集并行技术（ILP）来将多条指令重叠执行，如果不存在数据依赖，处理器可以改变语句对机器指令的执行顺序。\",\"内存系统的重新排序：由于处理器使用缓存和读写缓冲区，使得加载和存储操作看上去可能是乱序执行。\",\"因为这些重排序可能造成多线程程序出现内存可见性的问题，JMM 的的处理器重排规则会要求 Java 编译器在生成指令序列的时候插入特定类型的内存屏障（Memory Barriers，也被称为 Memeory Fence），JMM 属于语言级别的内存模型，它确保在不同编译器和不同处理器平台上通过禁止重排序来提供一致的内存可见性保证。\",\"缓冲行（cache line）缓存中可以分配的最小单位。 ↩︎\",\"栈帧（Stack Frame）支持虚拟机进行方法调用和方法执行的数据结构，在当前线程中，每执行一个方法就会往栈中插入一个栈帧。 ↩︎\",\"CAS（compare and swap）判断内存某个位置的值是否为预期值，如果是则更改为新的值，这个过程是原子操作。 ↩︎\",\"原子操作（atomic operations）不可中断的一个或者一系列指令。 ↩︎\"]},\"381\":{\"h\":\"动态代理\"},\"382\":{\"h\":\"引言\",\"t\":[\"今天在复习微服务的时候看到 OpenFeign 使用动态代理集成调用 Ribbon 来实现负载均衡，出于兴趣我就想简单瞥一眼到底是如何调用的，可是结果非常出乎意料，搜索到的结果是：在 OpenFeign 中，Ribbon 的集成是通过使用 Feign 的 Client 接口来实现的。可能那个作者单纯是想延伸一下动态代理这一块的知识，至于到底如何调用的先放在下次再谈，但是动态代理这个知识点必须该梳理梳理了，无论是背面试题还是源码当中它都无处不在，什么 jdk 实现和 cjlib 实现，今天都得给我整明白。\"]},\"383\":{\"h\":\"走进动态代理\"},\"384\":{\"h\":\"什么是动态代理\",\"t\":[\"Java 的动态代理是一种运行时生成代理对象的机制，允许在运行时创建代理类及其实例，以实现对目标对象的代理操作。简单来说就是它提供了一种灵活的方式来在不修改目标对象源代码的情况下，对其方法进行增强或添加额外的逻辑。有动态代理就有静态代理，见名知意，静态代理就是代码中事先定义好的，在编译的时候就已经确定的，在灵活性上肯定就是略逊一筹了。动态代理在需要在运行时对对象进行控制、增强或拦截的场景中非常有用，使用的场景有以下几种：\",\"AOP（面向切面编程）：动态代理可以用于实现横切关注点的模块化，例如日志记录、性能监控、事务管理等。通过在目标方法执行前后插入额外的逻辑，可以实现对目标方法的增强。\",\"延迟加载（Lazy Loading）：动态代理可以延迟加载对象，当需要访问对象时才进行实例化，可以提高系统的性能和资源利用率。代理对象可以在真正需要对象时才创建，从而避免了不必要的对象创建和初始化过程。\",\"远程代理（Remote Proxy）：动态代理可以用于远程方法调用，通过代理对象在本地调用方法，实际执行的是远程的对象的方法。这种方式可以隐藏远程调用的细节，提供更简洁的调用方式。\",\"安全控制：动态代理可以用于实现安全控制，例如权限验证、身份认证等。代理对象可以在调用目标方法之前进行权限检查，只有符合要求的用户才能访问目标方法。\",\"缓存管理：动态代理可以用于实现缓存管理，通过在代理对象中添加缓存逻辑，可以在访问某个方法时先检查缓存，如果缓存中存在结果，则直接返回结果，避免重复计算。\",\"日志记录：动态代理可以用于实现日志记录，通过在代理对象中添加日志记录逻辑，可以记录方法的调用信息、参数和返回值，方便系统的跟踪和调试。\",\"当我们遇到以上这些情况的时候怎么知道这是在使用动态代理呢，那我们就需要知道如何实现动态代理了。\"]},\"385\":{\"h\":\"如何实现动态代理\",\"t\":[\"在Java中，有两种常见的实现方式用于实现动态代理：基于接口的动态代理和基于类的动态代理。\",\"基于接口的动态代理：\",\"基于Java的java.lang.reflect.Proxy类实现。\",\"要求目标对象实现一个或多个接口。\",\"代理类是在运行时动态生成的，基于接口生成代理类，因此代理类只能代理接口中定义的方法。\",\"代理对象通过实现InvocationHandler接口来处理被代理方法的调用。\",\"基于类的动态代理：\",\"基于第三方库如CGLIB（Code Generation Library）实现。\",\"不要求目标对象实现接口，可以代理普通的类。\",\"代理类是通过继承目标类来生成的，因此代理类可以代理目标类中的所有方法，包括非公共的方法。\",\"代理对象通过继承目标类并重写方法来实现对被代理方法的调用。\",\"这两种实现方式的区别在于代理对象的生成方式和代理的范围。基于接口的动态代理要求目标对象实现接口，生成的代理类只能代理接口中的方法；而基于类的动态代理不要求目标对象实现接口，生成的代理类可以代理目标类中的所有方法，包括非公共的方法。\",\"总的来说，基于接口的动态代理适用于那些已经实现了接口的目标对象；而基于类的动态代理适用于那些没有实现接口的目标对象，或者需要代理非公共方法的情况。\"]},\"386\":{\"h\":\"基于接口实现动态代理\"},\"387\":{\"h\":\"示例思路\",\"t\":[\"我们定义了一个 UserService 接口和其实现类 UserServiceImpl。然后，创建了一个 UserServiceProxy 类作为代理对象的处理器，并实现了 InvocationHandler 接口。在 invoke() 方法中，我们可以在方法执行前后添加额外的逻辑。最后，使用 Proxy 类的 newProxyInstance() 方法创建代理对象并执行目标方法。\"]},\"388\":{\"h\":\"实例代码\",\"t\":[\"定义接口和实现类：首先，需要定义一个接口，该接口是目标对象和代理对象共同实现的接口。假设我们有一个简单的接口 UserService，包含了一些用户操作的方法，然后简单实现该接口。\",\"public interface UserService { void addUser(String username); void deleteUser(String username); void updateUser(String username); void getUser(String username); } public class UserServiceImpl implements UserService { @Override public void addUser(String username) { System.out.println(\\\"Adding user: \\\" + username); } @Override public void deleteUser(String username) { System.out.println(\\\"Deleting user: \\\" + username); } @Override public void updateUser(String username) { System.out.println(\\\"Updating user: \\\" + username); } @Override public void getUser(String username) { System.out.println(\\\"Getting user: \\\" + username); } } \",\"实现 InvocationHandler 接口：创建一个实现 InvocationHandler 接口的类，该类负责处理代理对象的方法调用。在该类中，你可以定义在目标方法执行前后需要执行的逻辑。\",\"import java.lang.reflect.InvocationHandler; import java.lang.reflect.Method; public class UserServiceProxy implements InvocationHandler { private Object target; public UserServiceProxy(Object target) { this.target = target; } @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { // 在方法执行前添加额外逻辑 System.out.println(\\\"Before method: \\\" + method.getName()); // 调用目标对象的方法 Object result = method.invoke(target, args); // 在方法执行后添加额外逻辑 System.out.println(\\\"After method: \\\" + method.getName()); return result; } } \",\"创建代理对象：使用 java.lang.reflect.Proxy 类的 newProxyInstance() 方法创建代理对象。该方法接受三个参数：类加载器，目标对象实现的接口数组，和 InvocationHandler 对象。\",\"import java.lang.reflect.Proxy; public class Main { public static void main(String[] args) { // 创建目标对象 UserService userService = new UserServiceImpl(); // 创建 InvocationHandler 对象 UserServiceProxy handler = new UserServiceProxy(userService); // 创建代理对象 UserService proxy = (UserService) Proxy.newProxyInstance( userService.getClass().getClassLoader(), userService.getClass().getInterfaces(), handler); // 通过代理对象调用方法 proxy.addUser(\\\"John Doe\\\"); proxy.deleteUser(\\\"John Doe\\\"); } } \"]},\"389\":{\"h\":\"基于类实现动态代理\"},\"390\":{\"h\":\"示例思路\",\"t\":[\"通过Enhancer类创建了一个代理类，将MyInterceptor作为拦截器。当调用代理对象的方法时，拦截器的intercept方法将被调用，你可以在该方法中添加适当的逻辑来丰富目标功能。\"]},\"391\":{\"h\":\"实例代码\",\"t\":[\"引入 CGLib 依赖\",\"dependencies { // 其他依赖项... implementation 'cglib:cglib:3.3.0' } \",\"<dependencies> <!-- 其他依赖项... --> <dependency> <groupId>cglib</groupId> <artifactId>cglib</artifactId> <version>3.3.0</version> </dependency> </dependencies> \",\"创建一个被代理的类，无需实现任何接口。\",\"public class MyClass { public void doSomething() { System.out.println(\\\"Doing something\\\"); } } \",\"实现一个MethodInterceptor接口的类，该接口定义了一个intercept方法，在该方法中定义了代理类的行为。\",\"import net.sf.cglib.proxy.MethodInterceptor; import net.sf.cglib.proxy.MethodProxy; import java.lang.reflect.Method; public class MyInterceptor implements MethodInterceptor { @Override public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable { // 在调用被代理类方法前执行一些操作 System.out.println(\\\"Before method invocation\\\"); // 调用被代理类的方法 Object result = proxy.invokeSuper(obj, args); // 在调用被代理类方法后执行一些操作 System.out.println(\\\"After method invocation\\\"); return result; } } \",\"使用CGLib的Enhancer类来创建代理对象。Enhancer类提供了一种方便的方式来生成代理类的子类，并将拦截逻辑应用到被代理类的方法上。\",\"import net.sf.cglib.proxy.Enhancer; public class Main { public static void main(String[] args) { // 创建Enhancer实例 Enhancer enhancer = new Enhancer(); // 设置被代理类的父类 enhancer.setSuperclass(MyClass.class); // 设置拦截器 enhancer.setCallback(new MyInterceptor()); // 创建代理对象 MyClass proxy = (MyClass) enhancer.create(); // 调用代理对象的方法 proxy.doSomething(); } } \"]},\"392\":{\"h\":\"总结和延伸\",\"t\":[\"示例中代理对象通过反射的方式调用目标对象的方法，并在方法执行前后执行了额外的逻辑，实现了动态代理的动态性。我们可以根据这两个 demo 在各个场景中做延伸，比如：\",\"日志记录：你可以添加日志记录的逻辑，记录方法的调用信息、参数和返回值。这样可以实现在不修改目标对象的代码的情况下，对方法的调用进行日志记录。\",\"性能监控：你可以添加性能监控的逻辑，包括记录方法的执行时间、计数器等。通过动态代理，你可以在方法调用前后测量和监控方法的性能指标。\",\"缓存管理：你可以添加缓存管理的逻辑，检查缓存中是否存在方法调用的结果。如果缓存中存在结果，则直接返回缓存的结果，避免重复计算。\",\"事务管理：你可以添加事务管理的逻辑，包括在方法执行前开启事务、在方法执行后提交或回滚事务。通过动态代理，可以实现对方法的事务控制，确保方法的执行在事务的上下文中进行。\",\"安全控制：你可以添加安全控制的逻辑，包括对方法的权限验证、身份认证等。通过动态代理，可以在方法调用前对用户进行权限检查，只有符合要求的用户才能访问目标方法。\"]},\"393\":{\"h\":\"Java 8 新特性\"},\"394\":{\"h\":\"Interface\",\"t\":[\"Java 8 中的接口可以包含默认方法（default）和静态方法（static）,default 修饰的方法，是普通实例方法，可以用this调用，可以被子类继承、重写，而 static 修饰的方法，使用上和一般类静态方法一样。但它不能被子类继承，只能用 Interface 调用。\",\"public interface InterfaceNew { static void sm() { System.out.println(\\\"interface提供的方式实现\\\"); } static void sm2() { System.out.println(\\\"interface提供的方式实现\\\"); } default void def() { System.out.println(\\\"interface default方法\\\"); } default void def2() { System.out.println(\\\"interface default2方法\\\"); } //须要实现类重写 void f(); } public interface InterfaceNew1 { default void def() { System.out.println(\\\"InterfaceNew1 default方法\\\"); } } \",\"如果有一个类既实现了 InterfaceNew 接口又实现了 InterfaceNew1接口，它们都有def()，并且 InterfaceNew 接口和 InterfaceNew1接口没有继承关系的话，这时就必须重写def()。不然的话，编译的时候就会报错。\"]},\"395\":{\"h\":\"Optional\",\"t\":[\"Java 8中的 Optional 类可以在以下情况下使用：\",\"当你不确定一个值是否存在时，可以使用 Optional 来封装这个值，避免在运行时出现 NullPointerException 异常。\",\"当你需要返回一个可能为空的值时，可以使用 Optional 来代替空指针。这样，你可以避免在代码中使用 null 值，并且可以更加优雅地处理可能为空的情况。\",\"当你需要对一个可能为空的值进行操作时，可以使用 Optional 提供的 map、filter 等方法来避免空指针异常的出现。\",\"无论何时何地，Optional 类可以帮助你更好地处理可能为空的值，使得你的代码更加健壮、优雅。\"]},\"396\":{\"h\":\"创建一个 Optional\",\"t\":[\"创建Optional有以下几种方式：\",\"使用 Optional.empty() 方法创建一个空的 Optional 对象。\",\"使用 Optional.of() 方法创建一个包含指定值的 Optional 对象。\",\"使用 Optional.ofNullable() 方法创建一个包含指定值的 Optional 对象，如果指定值为 null 则返回空的 Optional 对象。\",\"Optional<String> optional1 = Optional.of(\\\"hello\\\"); Optional<String> optional2 = Optional.ofNullable(null); Optional<String> optional3 = Optional.empty(); \"]},\"397\":{\"h\":\"判断一个 Optional 是否为空\",\"t\":[\"Optional<String> optional = Optional.of(\\\"hello\\\"); if (optional.isPresent()) { System.out.println(\\\"Optional is not empty\\\"); } else { System.out.println(\\\"Optional is empty\\\"); } // Optional is not empty \"]},\"398\":{\"h\":\"获取一个 Optional 的值\"},\"399\":{\"h\":\"get()：如果该 Optional 不为空则返回该对象，否则抛出 NullPointerException 异常。\",\"t\":[\"Optional<String> optional = Optional.of(\\\"hello\\\"); String value = optional.get(); // 输出hello \"]},\"400\":{\"h\":\"orElse()：如果该 Optional 不为空则返回该对象，否则返回指定的默认值。\",\"t\":[\"Optional<String> optional = Optional.ofNullable(null); String value = optional.orElse(\\\"fallback value\\\"); // 输出fallback value \"]},\"401\":{\"h\":\"orElseGet()：如果该 Optional 不为空则返回该对象，否则调用指定的 Supplier 获取默认值。\",\"t\":[\"Optional<String> optional = Optional.ofNullable(null); String value = optional.orElseGet(() -> \\\"fallback value\\\"); // 输出fallback value \"]},\"402\":{\"h\":\"map()：如果有值，则对其执行调用映射函数得到返回值。如果返回值不为 null，则创建包含映射返回值的 Optional 作为 map 方法返回值，否则返回空 Optional。\",\"t\":[\"Optional<String> optional = Optional.of(\\\"hello\\\"); Optional<String> value = optional.map(str -> str.toUpperCase()); // 输出HELLO \"]},\"403\":{\"h\":\"filter()：如果值存在，并且这个值匹配给定的条件，返回一个 Optional 用以描述这个值，否则返回一个空的 Optional。\",\"t\":[\"Optional<String> optional = Optional.of(\\\"hello\\\"); Optional<String> value = optional.filter(str -> str.startsWith(\\\"he\\\")); // 输出hello \"]},\"404\":{\"h\":\"orElseThrow()：如果该 Optional 不为空则返回对象，否则抛出指定的异常。\",\"t\":[\"Optional<String> optional = Optional.ofNullable(null); String value = optional.orElseThrow(() -> new RuntimeException(\\\"fallback value\\\")); // 抛出RuntimeException \"]},\"405\":{\"h\":\"反例\",\"t\":[\"一开始我在知道这些 API 后，最常用的写法就像下面这样：\",\"Optional<String> optional = Optional.ofNullable(null); String value = optional.get(); if (value == null) { System.out.println(\\\"Value is null\\\"); } \",\"或者下面这样：\",\"Optional<String> optional = Optional.ofNullable(null); if (optional.isPresent()) { String value = optional.get(); System.out.println(value); } else { System.out.println(\\\"Value is null\\\"); } \",\"low！用了也是白用。\"]},\"406\":{\"h\":\"正例\"},\"407\":{\"h\":\"总结\",\"t\":[\"我们使用 Optional 的核心原因就是不想代码出现 NPE，我们发现就算使用 Optionl 也会出现 NPE 出现的情况，所以为了避免这种情况的发生，不要轻易 of()、get()、flatMap() 这几个方法。\"]},\"408\":{\"h\":\"Servlet\"},\"409\":{\"h\":\"Servlet 是什么\",\"t\":[\"Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。\",\"Servlet 执行以下主要任务：\",\"读取客户端（浏览器）发送的显式的数据。这包括网页上的 HTML 表单，或者也可以是来自 applet 或自定义的 HTTP 客户端程序的表单。\",\"读取客户端（浏览器）发送的隐式的 HTTP 请求数据。这包括 cookies、媒体类型和浏览器能理解的压缩格式等等。\",\"处理数据并生成结果。这个过程可能需要访问数据库，执行 RMI 或 CORBA 调用，调用 Web 服务，或者直接计算得出对应的响应。\",\"发送显式的数据（即文档）到客户端（浏览器）。该文档的格式可以是多种多样的，包括文本文件（HTML 或 XML）、二进制文件（GIF 图像）、Excel 等。\",\"发送隐式的 HTTP 响应到客户端（浏览器）。这包括告诉浏览器或其他客户端被返回的文档类型（例如 HTML），设置 cookies 和缓存参数，以及其他类似的任务。\"]},\"410\":{\"h\":\"快速开始\"},\"411\":{\"h\":\"Servlet 生命周期\",\"t\":[\"Servlet 生命周期可被定义为从创建直到毁灭的整个过程。以下是 Servlet 遵循的过程：\",\"Servlet 初始化后调用 init () 方法。\",\"Servlet 调用 service() 方法来处理客户端的请求。\",\"Servlet 销毁前调用 destroy() 方法。\",\"Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。\"]},\"412\":{\"h\":\"init 方法\",\"t\":[\"init 方法被设计成只调用一次。它在第一次创建 Servlet 时被调用，在后续每次用户请求时不再调用。当用户调用一个 Servlet 时，就会创建一个 Servlet 实例，每一个用户请求都会产生一个新的线程，适当的时候移交给 doGet 或 doPost 方法。init() 方法简单地创建或加载一些数据，这些数据将被用于 Servlet 的整个生命周期。\"]},\"413\":{\"h\":\"service 方法\",\"t\":[\"service() 方法是执行实际任务的主要方法。Servlet 容器（即 Web 服务器）调用 service() 方法来处理来自客户端（浏览器）的请求，并把格式化的响应写回给客户端。\",\"每次服务器接收到一个 Servlet 请求时，服务器会产生一个新的线程并调用服务。service() 方法检查 HTTP 请求类型（GET、POST、PUT、DELETE 等），并在适当的时候调用 doGet、doPost、doPut，doDelete 等方法。\"]},\"414\":{\"h\":\"doGet 方法\",\"t\":[\"GET 请求来自于一个 URL 的正常请求，或者来自于一个未指定 method 的 HTML 表单，它由 doGet() 方法处理。\"]},\"415\":{\"h\":\"doPost 方法\",\"t\":[\"POST 请求来自于一个特别指定了 method 为 POST 的 HTML 表单，它由 doPost() 方法处理。\"]},\"416\":{\"h\":\"destroy 方法\",\"t\":[\"destroy() 方法只会被调用一次，在 Servlet 生命周期结束时被调用。destroy() 方法可以让您的 Servlet 关闭数据库连接、停止后台线程、把 Cookie 列表或点击计数器写入到磁盘，并执行其他类似的清理活动。在调用 destroy() 方法之后，servlet 对象被标记为垃圾回收。\"]},\"417\":{\"h\":\"实现 Servlet\"},\"418\":{\"h\":\"微服务之路\"},\"419\":{\"h\":\"碎谈\",\"t\":[\"还记得上大学的时候学 JavaWeb，当时连个 Tomcat 都起不来，什么8080，什么 JavaBean ，什么 Servlet ，完全就是一知半解，一塌糊涂，可是当你毕业开始找工作的时候，你要是没有个 Spring Boot 的项目经验，怎么找工作呀，根本找不到。当我第二份工作的时候，你要是不会 Spring Cloud ，根本找不到满意的工作，就在这短短两三年的时间里，技术更新愈发频繁，这也充分印证了那句话：程序员是要不断学习的。\",\"基础不牢，地动山摇。大家嘴上说着大学里的课程已经完全和社会脱节，是啊，计算机四大天书：《计算机网络》、《计算机组成原理》、《计算机操作系统》、《数据结构》，如果你是本科毕业就开始找工作，除了《数据结构》开发中还用得到，其他的根本见不着它们的影子，可是随着自己的进步和发展，你会慢慢发现，如果你不知道它们，你也能做，如果你会它们，你会做的更好。虽然感觉行业的趋势下，蜂拥而至的新人都直接选择加入使用框架的队伍来瓜分互联网的红利，可是现在浪潮退去，一片红海，希望大家能在学习新技术的同时夯实基础，稳重求进。\",\"but 作为新时代的青年，就该有拥抱新技术的激情，面对该过时、该淘汰的技术，就是 low ，别和我谈什么 MVC 、SSH、SSM 了，任何被时代所遗弃的技术必有其弊端，现在让我做项目，我就要上微服务，什么不要为了用技术而用技术，我自己学习我可不管什么该不该、值不值，我喜欢、我乐意就够了，冲！\"]},\"420\":{\"h\":\"微服务的出现\",\"t\":[\"言归正传，提到微服务就不得不提到单体地狱的问题，随着互联网的发展，用户对应用程序的要求变得越来越高，需要更快速、更稳定、更可扩展的解决方案。传统的单体应用程序在面对快速变化的需求时往往显得笨重且难以满足这些要求，这就是单体地狱。再加上敏捷开发和交付的出现，为了能够更加灵活地开发、测试和交付功能，后来又出现了模块化拆分和服务化拆分的方案，这也就是微服务的前身了。随着云计算、容器化技术（如Docker）和自动化部署工具的出现，微服务架构如雨后春笋彻底发展起来了。\",\"微服务架构的核心概念是\\\"解耦\\\"，通过拆分应用程序为一系列松耦合的服务来实现更高的灵活性和可伸缩性。每个服务都有自己的数据库和业务逻辑，可以使用不同的技术栈进行开发，以满足不同的需求，于是乎各种技术对应的技术栈应运而生，比如服务之间的通信复杂性、分布式系统的管理和监控等，这也给我们带来了全新的挑战。\"]},\"421\":{\"h\":\"如何学习微服务\",\"t\":[\"在我第一次快速通关微服务的时候，没有一个完整的体系，导致后来我真正开始想加入微服务的时候剪不断理还乱，所以这一次我选择的是号称微服务一站式解决方案的 Spring Cloud Alibaba 。罗列一下 Spring Cloud 大致的技术栈：\",\"服务注册与发现\",\"服务调用\",\"服务熔断器\",\"负载均衡\",\"服务接口调用\",\"消息队列\",\"服务路由\",\"服务监控\",\"全链路由追踪\",\"服务部署\",\"消息驱动数据流\",\"事件消息总线\",\"而目前的组件框架会同时兼顾以上多个功能并且基本已经涵盖到了，详情在下面的 GitHub 仓库中可以看到，我们接下来就跟着组件一步一步完成就可以了。唯一要注意的就是组件版本对应的问题，因为框架过于繁杂，如果自行组建确实会出现版本兼容一致性的问题，所以 GitHub 里也给出了官方推荐的组件配合建议，请开始之前参考选择。\"]},\"422\":{\"h\":\"Gateway\"},\"423\":{\"h\":\"浅聊微服务网关\",\"t\":[\"网关是一个通用的概念，它在计算机网络中指的是在不同网络之间进行连接、转发和控制流量的设备或软件。而微服务网关我们通用的理解是统一对外暴露可共享的服务 API 的功能，一般这些微服务网关都与服务注册中心相配合使用，这里我们要谈的 Spring Cloud Gateway 是基于 Spring Boot 和 Spring WebFlux 构建的网关框架。它提供了一种简单、轻量级的方式来处理路由、过滤和负载均衡。Spring Cloud Gateway 还支持动态路由、断路器、限流等功能，并与 Spring Cloud 生态系统无缝集成，具体详情见其官网文档。\"]},\"424\":{\"h\":\"Nacos\"},\"425\":{\"h\":\"浅聊微服务配置和注册中心\"},\"426\":{\"h\":\"配置中心\",\"t\":[\"传统的静态配置方式要想修改某个配置只能修改之后重新发布应用，要实现动态性，可以选择使用数据库，通过定时轮询访问数据库来感知配置的变化。轮询频率低感知配置变化的延时就长，轮询频率高，感知配置变化的延时就短，但比较损耗性能，需要在实时性和性能之间做折中。配置中心专门针对这个业务场景，兼顾实时性和一致性来管理动态配置。配置中心兼往往顾了集中管理、动态更新和版本控制等优点。\"]},\"427\":{\"h\":\"注册中心\",\"t\":[\"注册中心用于管理和维护微服务的注册信息，包括微服务的网络位置（IP地址和端口）以及其他元数据。每个微服务在启动时向注册中心注册自己的信息，并定期发送心跳以保持活动状态。其他微服务可以通过查询注册中心获取所需服务的信息，从而实现服务的发现和调用。\"]},\"428\":{\"h\":\"微服务中的使用\",\"t\":[\"配置中心和注册中心通常会一起使用，配合实现微服务的配置管理、服务发现和通信。它们为微服务架构的可伸缩性、弹性和灵活性提供了重要的基础设施。\",\"作为配置中心应该要求支持集中化管理、配置存储和分发、动态更新、版本控制、安全性和权限控制和监控和告警；作为注册中心要做到服务注册和注销、服务发现、心跳和健康检查、负载均衡、高可用性和容错性和监控和告警。目前市面上现在针对配置中心和注册中心分别都有很多产品，像百度的 Disconf、Spring的 Spring Cloud Config、携程的 Apollo、阿里的 Nacos、网飞的 Eureka等。\",\"结合网络上的综合评价来看总，作为配置中心的话，Apollo 和 Nacos 相对于 Spring Cloud Config 的生态支持更广，在配置管理流程上做的更好。Apollo 相对于 Nacos 在配置管理做的更加全面，不过使用起来也要麻烦一些。Nacos 使用起来相对比较简洁，在对性能要求比较高的大规模场景更适合。在注册中心上来看，Eureka 在跨区域部署和大规模集群上可能面临一些性能和可扩展性方面的挑战，并且在广泛的生态上来看， Nacos 是更好的选择。结合双方的优点，Nacos 非常适合作为微服务学习的第一选择，想要更加详细了解 Nacos 请点击下方官网链接访问。\"]},\"429\":{\"h\":\"Spring Boot Admin\"},\"430\":{\"h\":\"介绍\",\"t\":[\"Spring Boot Admin是一个用于管理和监控 Spring Boot 应用程序的开源项目。它提供了一个用户界面，可以集中管理多个 Spring Boot 应用程序，并提供有关这些应用程序的详细信息和指标。\",\"其模式也和 Eureka 相同分为客户端和服务端相同，主要功能如下：\",\"应用程序监控：Spring Boot Admin 可以监控和展示每个 Spring Boot 应用程序的运行状态、健康状况和指标数据，如内存使用、线程数、请求统计等。\",\"健康检查和管理：它提供了对Spring Boot应用程序的健康检查功能，并可以根据应用程序的健康状况采取相应的管理措施，如重启应用程序或发送警报通知。\",\"易于集成：Spring Boot Admin可以轻松集成到现有的Spring Boot应用程序中，只需添加相应的依赖并进行简单的配置即可。\",\"实时日志查看：它提供了实时查看应用程序日志的功能，可以帮助开发人员快速定位和解决问题。\",\"事件通知：Spring Boot Admin 支持通过邮件、Slack等方式发送事件通知，如应用程序上线、下线、健康状态变更等。\",\"安全性：它提供了一些安全特性，如基于角色的访问控制、HTTPS支持等，以确保管理界面的安全性。\",\"Spring Boot Admin 可以选择和服务注册中心搭配使用，当与服务注册中心配合使用时，它可以自动发现注册在服务注册中心中的 Spring Boot 应用程序，并将其添加到管理界面中进行监控和管理。这样可以实现动态管理多个应用程序，并且随着应用程序的启动和关闭，管理界面能够及时更新应用程序的状态和信息。\",\"另外 Spring Boot Admin 和 Spring Boot Actuator 可以很好地配合使用。通过在Spring Boot应用程序中集成 Spring Boot Actuator，可以使 Spring Boot Admin 能够获取应用程序的详细信息和指标数据，从而在管理界面上展示和监控这些数据。同时，Spring Boot Admin 还可以利用 Spring Boot Actuator 提供的功能，如远程 Shell、线程转储等，与应用程序进行交互和管理。因此，Spring Boot Admin 和 Spring Boot Actuator是相互配合使用的，Spring Boot Actuator 提供了监控和管理的基础功能，而 Spring Boot Admin 提供了一个集中管理和监控的用户界面，通过与 Spring Boot Actuator 端点的交互，实现对多个 Spring Boot 应用程序的管理和监控。\"]},\"431\":{\"h\":\"快速开始\"},\"432\":{\"h\":\"服务端\"},\"433\":{\"h\":\"引入依赖\",\"t\":[\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-actuator</artifactId> </dependency> <dependency> <groupId>de.codecentric</groupId> <artifactId>spring-boot-admin-starter-server</artifactId> </dependency> \"]},\"434\":{\"h\":\"简单配置\",\"t\":[\"启动类增加@EnableAdminServer注解，启动后访问项目根目录即自动跳转服务端界面。\",\"Spring Boot admin 主页\"]},\"435\":{\"h\":\"客户端\"},\"436\":{\"h\":\"引入依赖\",\"t\":[\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-actuator</artifactId> </dependency> <dependency> <groupId>de.codecentric</groupId> <artifactId>spring-boot-admin-starter-client</artifactId> </dependency> \"]},\"437\":{\"h\":\"简单配置\",\"t\":[\"spring: boot: admin: client: url: http://localhost:8110/ # spring boot admin server 地址 management: endpoints: web: exposure: include: '*' # 暴露给监控全部接口 \",\"客户端服务注册\",\"客户端服务详情\"]},\"438\":{\"h\":\"Spring Boot Logging\"},\"439\":{\"h\":\"关于 Spring 日志\",\"t\":[\"在 Spring Boot 的官方文档的核心功能部分介绍了 Spring 对日志功能的支持，Spring 并没有自己的日志框架实现，而是使用 SLF4J（Simple Logging Facade for Java）作为日志门面，在底层使用 Commons Logging 作为抽象层去识别和对接一些常见的日志框架，如 Logback、Log4j2 等。Spring Boot 默认集成了 Logback 作为日志框架并支持我们在配置文件通过简单的配置就可以开箱即用，如果想了解更多细节可以点击下面卡片跳转官网查看。\"]},\"440\":{\"h\":\"Spring Data Redis\"},\"441\":{\"h\":\"引言\",\"t\":[\"Redis 作为基于内存的 NoSQL 数据库，在解决包括缓存、会话存储、排行榜、实时分析和消息队列等场景上有着不可替代的作用，所以目前几乎所有的项目都会有依赖它的需求，相比于一些传统的关系型数据库 Redis 的配置更加简单容易，所以在项目中使用非常推荐放在 common 模块当中来方便其他模块依赖，使用的时候直接注入即可，这里我也是基于这种思想来演示一个 Redis 模块的创建，以后搭建项目可以直接开箱即用。\"]},\"442\":{\"h\":\"快速开始\"},\"443\":{\"h\":\"添加依赖\"},\"444\":{\"h\":\"工具方法服务类和具体实现类\",\"t\":[\"用命令行学习 Redis 的时候得心应手，但是 RedisTemplate 的方法直接用起来还是不太顺手，这里是根据命令封装好的 RedisTemplate 方法，可以直接 cv。\"]},\"445\":{\"h\":\"配置类实现\",\"t\":[\"引用该配之类的话就需要实现一个 RedisConfig 继承下面的 BaseRedisConfig 并添加 @Configuration 注册到容器中即可。\"]},\"446\":{\"h\":\"总结\",\"t\":[\"使用 Spring Data Redis 只需要配置以上三步，在你真正调用的模块中配置你的 Redis 连接参数后就可以很方便的使用了。\"]},\"447\":{\"h\":\"Spring Security + JWT\"},\"448\":{\"h\":\"前言\",\"t\":[\"说到 JWT（JSON Web Token），我们首先要知道 Token 是什么，想要知道 Token 是什么，我们就得先谈一下早期 Session 登录的时代，下面是之前 Session 登录的大致流程。\",\"然而，随着应用程序的复杂性和扩展性的增加，分布式系统和跨服务的场景变得更加常见。在这种情况下，使用基于 Session 会话的登录可能会面临一些挑战，例如会话状态的同步和跨服务的会话管理。而且如果 Cookie 如果被截获，用户就会很容易受到跨站请求伪造（CSRF）的攻击。于是令牌（Token）应运而生，Token 承载了用户身份信息和其他必要的声明，无需在服务器端存储会话信息，使其具备了无状态性（stateless）的特性。这样可以减轻服务器的负担，并且适用于分布式环境和跨服务的场景。基于这种特性 Token 的登录过程如下所示。\",\"虽然看似流程上十分相似，但是每个请求都必须携带包含了所有必要的用户身份信息和声明的令牌来进行身份验证，而且令牌可以通过签名和加密机制来保护身份信息的完整性和真实性，这样极大的保证了安全性的同时也解决了跨域支持的问题。JWT 官网也告诉了我们什么是 JSON Web Token 并告诉我们什么情况下可以去使用它，如果有兴趣可以点击下面链接去深入了解。\"]},\"449\":{\"h\":\"Spring Security + OAuth2\"},\"450\":{\"h\":\"介绍\"},\"451\":{\"h\":\"OAuth2\",\"t\":[\"OAuth 2.0（开放授权 2.0）是一种授权框架，用于允许用户授权第三方应用程序访问其在另一个应用程序（如社交媒体、电子邮件服务或云存储服务）上的受保护资源，而无需向第三方应用程序共享其凭据（例如用户名和密码）。其主要职责就是实现一个三方互信的功能，目前网站上支持的第三方登录就是 OAuth 协议的实现。OAuth 2.0 的核心概念包括以下角色：\",\"资源所有者（Resource Owner）：资源所有者是指控制受保护资源的用户，例如网站用户或移动应用程序用户。\",\"客户端（Client）：客户端是请求访问受保护资源的第三方应用程序，它通过 OAuth 2.0 协议与身份和授权服务器进行交互。\",\"身份和授权服务器（Authorization Server）：身份和授权服务器负责验证资源所有者的身份，并根据资源所有者的授权向客户端颁发访问令牌。\",\"受保护资源服务器（Resource Server）：受保护资源服务器托管受保护的用户数据或服务，只有在经过授权的情况下才能访问。\",\"OAuth 2.0 的工作流程如下：\",\"客户端向资源所有者请求授权，以访问其受保护资源。这可以通过重定向资源所有者到身份和授权服务器的授权页面来实现。\",\"资源所有者向身份和授权服务器提供其凭据（例如用户名和密码），并授权客户端访问受保护资源。\",\"身份和授权服务器验证资源所有者的身份，并生成一个访问令牌（Access Token）。\",\"身份和授权服务器将访问令牌颁发给客户端。\",\"客户端使用访问令牌向受保护资源服务器发起请求，并在请求中提供访问令牌作为身份验证凭据。\",\"OAuth 2.0 的优势在于它根据受保护资源服务器验证访问令牌的有效性，并根据访问令牌决定是否授权客户端访问受保护资源，使得用户可以授予对其受保护资源的有限访问权限，而无需共享其凭据。这提供了更好的安全性和用户隐私保护。此外，OAuth 2.0 支持多种授权流程，如授权码授权流程、隐式授权流程、密码授权流程和客户端凭据授权流程，以满足不同应用场景的需求。\"]},\"452\":{\"h\":\"Spring Security 基础\"},\"453\":{\"h\":\"介绍\",\"t\":[\"目前提到安全框架，Shiro 和 Spring Security 算得上是分庭抗争了，并且 Shiro 主打的是简单、轻量，但却没有 Spring Security 灵活，在 Spring Security 支持 OAuth2 之后更加贴合当前社会需求，并且我们如果使用 Spring 框架的话，学习 Spring Security 更是如鱼得水，并且是重中之重。如果想要更加深入的了解 Spring Security ，请预览下面官方文档的链接进行研读。\"]},\"454\":{\"h\":\"走进算法\"},\"455\":{\"h\":\"算法无处不在\",\"t\":[\"其实算法并不是必须牵扯数学的复杂东西，更多的是一种逻辑思想。其实在生活中我们已经不知不觉学会了很多算法，比如：\",\"查阅字典 比如说我想查字典，我可以先打开字典，然后翻到A开头，再找到A-Z，最后找到需要的单词。但是我们通常不会采用这种方法，而是随即从比较中间的位置打开，如果我们需要找到 R 开头的单词，当前看到的却是 M，我们知道 R 在 M 之后，所以我们就会默认排除字典当前的前半部分继续重复上面的操作来找到我们的目标 R，这就是后面要学到的二分查找。\",\"整理扑克 在抓牌的过程中，我们抽取的下一张牌的大小是未知的，而且我们手里的牌序是在我们自己的规则下是有序的，每当我们抽取一张未知的新牌后就会按照自己的规则放到指定的位置去，慢慢的就会让一堆无序的牌堆变成有序的手牌，这也就是后面我们要学的插入排序。\",\"货币找零 在需要找零31块的时候，我们采取的方案一般是先找到能找零的最大面值的再依次减少，直到找完为止，也就是 20 -> 10 -> 1，这就是后面我们要学的贪心算法。\"]},\"456\":{\"h\":\"什么是算法\",\"t\":[\"算法是对特定问题求解步骤的一种描述，它是指令的有限序列，其中的每条指令有一个或多个操作。\",\"算法五大特性：\",\"有穷性：一个算法必须在执行有穷步骤后结束，并且每一步都在有穷时间内完成。\",\"确定性：算法中每条指令都应该有确切的含义，对于相同的输入只能得出相同的结果。\",\"可行性：算法中描述的操作都可以通过已经实现的基本运算执行有限次来实现。\",\"输入：一个算法可以有零个或多个输入。\",\"输出：一个算法必须有一个或多个输出。\",\"基于这五种特性，一个好的算法应该达到正确性、可读性、健壮性和高效率与地存储量的需求。\"]},\"457\":{\"h\":\"算法的效率\",\"t\":[\"算法和数据结构高度相关、紧密结合。数据结构是算法的基石，算法是数据结构发挥作用的舞台，算法通常可以基于不同的数据结构进行实现。\"]},\"458\":{\"h\":\"时间复杂度\",\"t\":[\"首先我们需要知道大O表示法，算法中所有语句的频度之和记为 T(N)，算法中的最深层循环内的语句的频度与 T(n) 同数量级，所以算法的频度 f(n) 记为 T(n)=O(F(n))。\",\"常见的渐进时间负责度排序：O(1) < O(log n) < O(n) < O(n log n) < O(n^2) < O(2^n) < O(n!)\",\"算法的时间复杂度不是固定的，而是与输入数据的分布有关，根据不同情况我们可以得到算法的最佳、平均和最差时间复杂度。我们在实际中很少使用最佳实践复杂度，因为通常只有很小概率才会达到，而最差时间复杂度更为实用，因为他给出了个一个效率的安全值。相比之下，平均时间复杂度可以体现算法在随机数据下的运行效率。\"]},\"459\":{\"h\":\"空间复杂度\",\"t\":[\"算法的空间复杂度是 S(n) ，为该算法所耗费的存储空间，记为 S(n) =O(g(n))。一个算法所需要的空间包括存放本身所用的指令、常数、变量和输入数据，还有对一些数据进行操作的工作单元和存储一些为实现计算所需的辅助空间。\",\"最后，算法的效率是时间复杂度和空间复杂度的综合，一个算法的时间复杂度和空间复杂度中较大的一个决定了算法的时间效率。通常我们在用算法解决实际问题的过程中，往往是在两者之间进行权衡，通过时间换取空间或者用空间换取时间。\",\"虽然我们在实际使用和设计算法的过程中不会每次都先考虑其大O表示法的复杂度，但是我们应该了解常见代码形式的复杂度，能直接意识到代码是常数阶、对数阶、线性阶、平方阶还是指数阶，从而帮助我们选择合适的算法。\"]},\"460\":{\"h\":\"并查集\"},\"461\":{\"h\":\"查找\"},\"462\":{\"h\":\"查找的基本概念\",\"t\":[\"在数据集合中寻找满足某各种条件的数据元素的过程称为查找。\",\"用于查找的数据集合称为查找表，它由同一类型的数据元素组成，可以是一个数组或链表等数据结构。对查找表的操作一般有四种：\",\"查询某个特定的数据元素是否在查找表中。\",\"检索满足条件的的某个特定的数据元素的各种属性。\",\"在擦杭州啊表中插入一个数据元素。\",\"从查找表中删除某个数据元素。\",\"若一个查找表的操作只涉及上述操作1和2，则无须动态的改变查找表，此类查找表称为静态查找表，与此对应，需要动态的插入或删除的查找表称为动态查找表。\",\"对应静态查找表的查找方法有顺序查找、折半查找、散列查找；适合动态查找表的查找方式有二叉排序树的查找、散列查找等。\",\"数据元素中唯一标识该元素的某个数据项的值，使用基于关键字的查找，查找结果应该是唯一的。\",\"在查找过程中，一次查找的长度是指需要比较的关键字次数，而平均查找长度则是所有查找过程中惊醒关键字的比较次数的平均值，平均查找长度是衡量查找算法效率的最主要的指标。\"]},\"463\":{\"h\":\"顺序查找\",\"t\":[\"顺序查找又称为线性查找，它对顺序表和链表都是适用的。对于顺序表，可通过数组下标递增来顺序扫描每个元素；对于链表，可通过指针 next 来一次扫描每个元素。顺序查找通常分为对一般的无序线性表的顺序查找和对按关键字有序的线性表的顺序查找，如果是一般线性表的顺序查找即通过“哨兵”从一端开始查找到表的另一端，如果“哨兵”找到关键字则跳出循环，查找成功；如果到另一端也没有找到关键字则查找失败，成功的ASL为 (n+1)/2。如果是有序表的顺序查找，则不需要再比较到另一端就能返回查找失败的信息，从而降低顺序查找失败的平均查找长度，所以其 ASL 会好一些。\",\"顺序查询的好处是对数据元素的存储没有要求，无论是顺序和链式存储皆可，记录按关键字有序也均可，缺点就是如果 n 过大平均查找长度较大，效率低；\"]},\"464\":{\"h\":\"折半查找（二分查找）\",\"t\":[\"折半查找仅适用于有序的顺序表。基本思想是首先将给定 key 与表中中间位置的元素比较，若相等，则查找成功，返回该元素的存储位置；若不等，则所需查找的元素只能在中间元素以外的前半部分和后半部分，然后再缩小的范围内继续进行同样的查找，如此重复直到找到为止，或确定表中没有所需要查找的元素，则查找不成功。\",\"折半查找的过程可以用二叉树来描述，称为判定树。树中的圆形结点表示一个记录，结点中的值为该记录的关键字值；树最下面叶结点表示不成功的查找条件。从判定树可以看出，查找成功时的查找长度为从根结点到目的结点的路径上的结点树，而查找不成功时的查找长度为从根结点到对应失败结点的父结点的路径上的结点数。显然，判定树是一颗平衡二叉树。所以二分查找的平均查找长度为ASL=log2(n+1)-1。\",\"因为折半查找需要方便的定位查找区域，所以它要求线性表必须具有随机存取的特性。因此，该查找方法仅适用于顺序存储结构，不适合于链式存储结构，且要求元素按关键字有序排列。\"]},\"465\":{\"h\":\"分块查找\",\"t\":[\"分块查找又称为索引顺序查找，它吸取了顺序查找和折半查找各自的优点，既有动态结构，又适于快速查找。\",\"分块查找的基本思想：将查找表分为若干子块。块内的元素可以无序，但块间的元素是有序的，即第一个块中的最大关键小于第二块中的所有记录的关键字，以此类推。再建立一个索引表，索引表中的每个元素含有各块的最大关键字和各块中的第一个元素的地址，索引表按关键字有序排列。\",\"分块查找的过程分为两步：第一步是在索引表中确定待查记录所在的块，可以顺序查找或折半查找索引表；第二步是在块内顺序查找。\",\"将长度为n的查找表均匀的分为b块，每块有s个记录，平均查找长度ASL=(s^2+2s+n)/2s。\"]},\"466\":{\"h\":\"树型查找\"},\"467\":{\"h\":\"二叉排序树（BST）\",\"t\":[\"二叉排序树有称为二叉查找树，它可以是一颗空树，它具有以下特点：\",\"若左子树非空，则左子树上所有结点的值均小于根结点的值。\",\"若右子树非空，则右子树上所有的结点的值均大于根结点的值。\",\"左右子树分别也是一颗二叉排序树。\"]},\"468\":{\"h\":\"查找\",\"t\":[\"二叉排序树的查找是从根结点开始，沿着某个分支逐层向下比较的过程。若二叉排序树非空，先将给定值和根结点关键字比较，若相同则返回成功，若不相同则在根结点的左子树寻找，否则在右子树寻找。\"]},\"469\":{\"h\":\"插入\",\"t\":[\"二叉排序树是一种动态树表，其特点是树的结构通常不是一次生成的，而是在查找的过程中，当树中不存在关键字值等于给定值时在进行插入的。过程如下：若原二叉树为空，则直接插入，否则，若小于根结点值，则插入到左子树，否则插入到右子树。\"]},\"470\":{\"h\":\"删除\",\"t\":[\"二叉排序树中删除一个结点的时候，不能把以该结点为根的子树上的结点全部删除，必须先把被删除结点从存储二叉树排序树的链表上摘下，将因删除结点而断开的二叉链表重新链接起来，同时确保二叉排序树的性质不会丢失。删除操作按照下面三种情况来处理：\",\"若被删除的结点 z 是叶结点，则直接删除，不会破坏二叉树的性质。\",\"若结点 z 只有一颗左子树或者右子树，则让 z 的子树成为 z 父结点的子树来代替 z 的位置即可。\",\"若结点 z 既有左子树又有右子树，则令 z 的直接后继（直接前驱）代替 z，然后从二叉排序树删去找个直接后继（直接前驱），这样就转换成了第一或第二种情况。\"]},\"471\":{\"h\":\"效率分析\",\"t\":[\"二叉排序树的查找效率主要取决于树的高度，若是平衡二叉树，则平均查找长度就是 O(log2n)，如果是有序的单枝树，则平均查找长度就会变成 O(n)。\"]},\"472\":{\"h\":\"平衡二叉树（AVL）\",\"t\":[\"为了避免树的高度增长过快，降低二叉排序树的性能，规定在插入和删除结点时，要保证任意结点的左右子树高度差的绝对值不超过 1，将这样的二叉树成为平衡二叉树。\"]},\"473\":{\"h\":\"插入\",\"t\":[\"基本思想：每当在二叉排序树中插入或删除一个结点的时候，首先检查其插入路径上的结点是否因为此次操作而导致了不平衡。若导致了不平衡则先找到插入路径上离插入结点最近的平衡因子的绝对值大于 1 的结点 A，然后再对 A 为根的子树保持二叉排序树特性的前提下调整各个结点的位置关系。\"]},\"474\":{\"h\":\"删除\"},\"475\":{\"h\":\"查找\"},\"476\":{\"h\":\"红黑树\",\"t\":[\"为了保持 AVL 树的平衡性，插入和删除后非常频繁的调整全树整体拓扑结构代价太大，为此放宽条件成为红黑树：\",\"每个结点或是红色或是黑色。\",\"根结点是黑色的。\",\"叶结点都是黑色的。\",\"不存在两个相邻的红结点。\",\"对每个结点，从该结点到任意一个叶结点的简单路径上，所含黑结点的数量相同。\"]},\"477\":{\"h\":\"B树和B+树\"},\"478\":{\"h\":\"散列表\"},\"479\":{\"h\":\"LeetCode 每日一题\",\"t\":[\"想起来就做一题吧！\"]},\"480\":{\"h\":\"2578.最小和分割\"},\"481\":{\"h\":\"题目内容\",\"t\":[\"给你一个正整数 num ，请你将它分割成两个非负整数 num1 和 num2 ，满足：\",\"num1 和 num2 直接连起来，得到 num 各数位的一个排列。\",\"换句话说，num1 和 num2 中所有数字出现的次数之和等于 num 中所有数字出现的次数。\",\"num1 和 num2 可以包含前导 0 。 请你返回 num1 和 num2 可以得到的和的 最小 值。\"]},\"482\":{\"h\":\"注意\",\"t\":[\"num 保证没有前导 0 。\",\"num1 和 num2 中数位顺序可以与 num 中数位顺序不同。\"]},\"483\":{\"h\":\"示例\",\"t\":[\"示例 1： 输入：num = 4325 输出：59 解释：我们可以将 4325 分割成 num1 = 24 和 num2 = 35 ，和为 59 ，59 是最小和。\",\"示例 2： 输入：num = 687 输出：75 解释：我们可以将 687 分割成 num1 = 68 和 num2 = 7 ，和为最优值 75 。\"]},\"484\":{\"h\":\"题解思路\",\"t\":[\"首先我们看到想要让和最小就必须让 num1 和 num2 都做到尽量的小，这个时候我们就应该想到排序了，第一步肯定是先对给出的数字数组进行排序，其次想让 num1 和 num2 都做到尽量小的相同，那我们可以从排序出的数字依次给数字组合。\"]},\"485\":{\"h\":\"题解代码\",\"t\":[\"public int splitNum(int num) { // 排序 char[] chars = Integer.toString(num).toCharArray(); Arrays.sort(chars); // 依次组合数字 int num1 = 0, num2 = 0; for (int i = 0; i < chars.length; i++) { if (i % 2 == 0) { num1 = num1 * 10 + chars[i] - '0'; } else { num2 = num2 * 10 + chars[i] - '0'; } } return num1 + num2; } \"]},\"486\":{\"h\":\"排序\"},\"487\":{\"h\":\"排序的概念\",\"t\":[\"排序就是重新排列表中的元素，使表中的元素满足按关键字有序的过程。在排序的过程中，根据数据元素是否完全在内存中，可将排序排序算法分为两类，内部排序：是指在排序期间元素全部存放在内存中的排序；外部排序：是指在排序期间元素无法全部同时存放在内存中，必须在排序过程中根据要求不断的在内外存之间移动的排序。\",\"每种排序算法都有各自的优缺点，适合在不同的环境下使用，就其全面性能而言，很难提出一种被认为是最好的算法。\"]},\"488\":{\"h\":\"插入排序\",\"t\":[\"插入排序是一种简单直观的插入排序，其基本思想是每次将一个带排序的记录按照其关键字大小插入到前面已排好序的子序列，直到全部记录插入完成。\"]},\"489\":{\"h\":\"直接插入排序\",\"t\":[\"最简单直观的直接插入排序就是假设从第一位开始已经排好顺序，向后的比较过程中如果出现反序的数字遍向前移动，相对的比较后的元素也逐步往后移动为新元素提供插入空间。\",\"直接插入排序在空间上使用了常数个辅助单元，所以空间复杂度为 O(1)，而时间上需要逐个对比元素进行操作和移动元素，所以平均下来复杂度为 O(n2)。\",\"因为插入元素都是从后面顺序向前进行，所以不会出现相对位置的移动，所以直接插入排序是一个稳定的排序方法，适用于顺序存储或者链式存储的线性表。\"]},\"490\":{\"h\":\"走进数据结构\"},\"491\":{\"h\":\"知识框架\"},\"492\":{\"h\":\"基本概念和术语\",\"t\":[\"数据：信息的载体，是描述客观事物属性的数、字符及所能输入到计算机中并被计算机程序识别和处理的符号的集合\",\"数据元素：数据的基本单位。一个数据元素可以由若干数据项组成。\",\"数据项：构成数据元素的不可分割的最小单位。\",\"数据对象：相同性质的数据元素的集合。\",\"数据类型：一个值的集合和定义在此集合上的一组操作的总称。 \",\"原子类型：值不可再分。\",\"结构类型：值可再分。\",\"抽象数据类型：可再分解为若干类型。\",\"数据结构：相互之间存在一种或多种特定关系的数据元素的集合。\"]},\"493\":{\"h\":\"数据结构三要素\",\"t\":[\"数据结构是算法的基础，一个算法的设计取决于所选的逻辑结构，而算法的实现则依赖多采用的存储结构。\"]},\"494\":{\"h\":\"逻辑结构\",\"t\":[\"逻辑结构可以从知识结构的图中看到，细分到最后有：\",\"集合：结构中的数据结构元素除了同属一个集合外，别无其他关系。\",\"线性结构：结构中的数据元素之间只存在一对一的关系。\",\"树形结构：结构中的数据元素之间存在一对多的关系。\",\"图状结构或网状结构：结构中的数据元素之间存在多对多的关系。\"]},\"495\":{\"h\":\"存储结构\",\"t\":[\"存储结构是数据结构在计算机中的表示（映像），也称为物理结构。存储结构的分类有以下几种：\",\"顺序存储：把逻辑上相邻的元素存储在物理地址也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现。优点是实现随机存取，每个元素占用最小的存储空间。缺点是只能使用相邻的一整块存储单元导致产生较多的外部碎片。\",\"链式存储：不要求逻辑上相邻的元素在物理位置上也相邻，借助指示元素存储地址的指针来表示元素之间的逻辑关系。优点是不会出现碎片。缺点是每个元素因为指针而产生额外的空间。\",\"索引存储：在存储元素信息的同时，还建立附加的索引表。有点事检索速度快。缺点是附加的索引表额外占用存储空间，并且增删改也会修改索引表而导致花费更多的时间。\",\"散列存储：根据元素的关键字直接计算出元素的存储地址，也就是哈希（Hash）存储。优点是检索、增加和删除节点的操作都很快。缺点是依赖散列函数，容易出现哈希冲突而导致时间和空间的开销。\"]},\"496\":{\"h\":\"数据的运算\",\"t\":[\"施加在数据上的运算包括运算的定义和实现。运算的定义是针对逻辑结构的，指出运算的功能。运算的实现是针对存储结构的，指出运算的具体操作步骤。\"]},\"497\":{\"h\":\"数组和特殊矩阵\",\"t\":[\"矩阵在数据结构中考虑的是如何用最小的内存空间来存储同样的一组数据，所以我们应该把精力放在如何将矩阵更有效的存储在内存中，并能更方便的提取矩阵中的元素。通常矩阵在计算机语言中借助数组进行存储，我们首先认识一下数组的存储。\"]},\"498\":{\"h\":\"数组\",\"t\":[\"数组是由 n（n >= 1）个相同类型的数据元素构成的有限序列，每个数据元素称为一个数组元素，每个元素在 n 个线性关系中的序号称为该元素的下标，下标的取值范围称为数组的边界。数组是线性表的推广，一维数组可视为一个线性表，二维数组可视为其元素也是定长线性表的线性表，以此类推。并且数组一点定义，其维数和维界就不会改变，因此，除结构的初始化和销毁操作外，数组只会有存取和修改元素的操作。\",\"以一维数组 A[0……n-1] 为例，其存储的结构关系为 LOC(ai) = LOC(a0) + i * L (0<= i < n)，其中 L 是每个数组元素所占的存储单元。对于多维数组，有按行优先和按列优先两种映射方法。以二维数组为例，其基本思想是：先行后列，先存储行号较小的元素，行号相等先存储列号较小的元素，设二维数组的行下标与列下标的范围分别为[0, h1]与[1, h2]，则关系存储关系式为 LOC(ai,j) = LOC(A0,0) + [i * (h2 + 1) + j] * L。\",\"二维数组按行优先顺序存储\",\"同理以列优先方式存储时，得出的存储结构关系式为 LOC(ai,j) = LOC(A0,0) + [j * (h1 + 1) + j] * L。\",\"二维数组按列优先顺序存储\"]},\"499\":{\"h\":\"特殊矩阵\",\"t\":[\"矩阵中有许多相同矩阵元素或者零元素的被称为特殊矩阵。为了节约存储空间，多个值相同的元素分配一个存储空间，或者对零元素不分配存储空间，所以要找出特殊矩阵中值相同的矩阵元素的分布规律，把那些呈现规律性分布、值相同的多个矩阵元素压缩到一个存储空间中。\"]},\"500\":{\"h\":\"对称矩阵\",\"t\":[\"若对一个 n 阶矩阵 A 中的任意一个元素都有 ai,j = aj,i，则称其为对称矩阵。其中的元素可以分为三个部分，上半区域、主对角线和下半区域，对于 n 阶对称矩阵，上三角区的的所有元素和下三角区的所有元素都是相同的，所以我们根据这个特性可以找到其对应规律：当在下三角区，即 i >= j 的时候 (i(i -1)) / 2 + j - 1，在上三角区，即 i < j 的时候 (j(j - 1)) / 2 + i - 1。\"]},\"501\":{\"h\":\"三角矩阵\",\"t\":[\"分为上三角矩阵和下三角矩阵，其中另外一半的元素全部都是一个元素，我们在对称矩阵的基础上，把另一半的元素放在另一半存储完的最后，在下三角矩阵中，即 i >= j 的时候 (i(i - 1)) / 2 + j - 1，在 i < j 的时候 (n(n - 1)) / 2；在上三角矩阵中，即 i <= j 的时候 ((i -1)(2n - j + 2)) / 2 + j - j，在 i < j 的时候 (n(n - 1)) / 2。\"]},\"502\":{\"h\":\"三对角矩阵\",\"t\":[\"对角矩阵也叫袋状矩阵，对于 n 阶矩阵 A 中的任意一个元素 ai,j，当 |i - j| > 1 时，ai,j = 0 (1 <= i, j <= n)，则称为三对角矩阵。三对角矩阵将三条对角线上的元素按照行优先方式存放在一维数组中，将 a1,1 放入数组第一个元元素中，则在数组中的下标符合 k = 2i + j - 3。如果我们知道了 k 值也可以反推，i = （k + 1）/ 3 + 1，顺带就可以求出 j 的值。\"]},\"503\":{\"h\":\"稀疏矩阵\",\"t\":[\"矩阵中非零元素的个数 t，相对矩阵总元素 s 来说相对非常少，即 s >> t 的矩阵被称为稀疏矩阵，至于这个到底是远大于多少并没有明确的指标，可凭借个人主观因素判断。\",\"若采用常规的方法存储稀疏矩阵，则相当浪费空间，因为对于稀疏矩阵我们仅存储非零元素。因此将非零元素及相对应的行和列构成一个三元组（行标、列标、值）。此方法虽然可以节省了空间，但是也失去了随机存取的特性。\",\"稀疏矩阵以及对应的三元组\"]},\"504\":{\"h\":\"线性表\",\"t\":[\"所有的测试代码都在博客首页中的 java-study-demo 中找到。\"]},\"505\":{\"h\":\"基本定义\",\"t\":[\"线性表是具有相同数据结构的n(n ≥ 0)个数据元素的有限序列，其中n为表长，为0即为空表。一般标识为：L=(a1,a2,a3,ai,ai+1,……,an,)，其中a1是唯一的第一个元素，被称为表头元素；an是唯一一个最后一个元素，被称为表尾元素。除了第一个元素外，每个元素有且仅有一个直接前驱，除最后一个外，每个元素有且仅有一个直接后继，这种线性有序的表被称为线性表。线性表有以下特点：\",\"表中元素个数有限。\",\"表中元素具有逻辑上的顺序性，表中元素有先后顺序。\",\"表中元素都是数据结构，每个元素都是单个结构。\",\"表中的元素类型数据都相同，这意味着每个元素所占相同大小的空间。\",\"表中的元素具有抽象性。\"]},\"506\":{\"h\":\"基本操作\",\"t\":[\"initList：初始化表，构造一个空的线性表。\",\"length：求表长，返回线性表的长度即其中的元素个数。\",\"locationElem：按值查找元素。\",\"getElem：按位查找元素。\",\"listInsert：插入操作。\",\"listDelete：删除操作。\",\"printList：输出操作。\",\"empty：判空操作。\",\"destoryList：销毁操作。\"]},\"507\":{\"h\":\"线性表的顺序表示\"},\"508\":{\"h\":\"顺序表的定义\",\"t\":[\"线性表的顺序存储又叫顺序表，使用一组地址连续的存储单元依次存储线性表中的的数据元素，从而使逻辑上相邻的两个元素在物理位置上也相邻。\",\"顺序表的存储结构\"]},\"509\":{\"h\":\"顺序表的实现\"},\"510\":{\"h\":\"线性表的链式表示\"},\"511\":{\"h\":\"单链表\",\"t\":[\"线性表的链式存储又被称为单链表，指通过一组任意的存储单元来存储线性表中的数据元素，为了建立数据元素之间的线性关系，对于每个额链表的节点，除了存放元素自身外，还需要存放一个指向其后继的指针。\",\"public class LNode<T> { /** * 当前节点的值 */ public T data; /** * 下一个节点的指针 */ public LNode<T> next; /** * 初始化节点 * @param data 节点的值 */ LNode (T data) { this.data = data; this.next = null; } } \",\"虽然单链表解决了顺序表需要大量连续存储单元的缺点，但是也因为存储附加指针域倒是浪费存储空间，正是是由于过于分散的存储，所以单链表是非随机存取的存储结构。\",\"我们通常用头指针来标识一个单链表，如果头指针为Null，则表示一个空表。注意，我们刚才提到的是头指针，与此相区别的定义是头结点，头结点是为了方便操作而在单链表第一个结点之前附加的一个结点，头结点的数据域可以不设任何信息，也可以记录表长等信息，而指针域则必须指向线性表的第一个元素结点。引入头结点之后有两个优点：\",\"由于第一个数据结点的位置被存放在头结点的指针域中，因此在链表的第一个位置上的操作和在表中其他位置的操作一致。\",\"无论链表是否为空，其头指针都是只想头结点的非空指针，所以空表和非空表得到了统一。\"]},\"512\":{\"h\":\"头插法\"},\"513\":{\"h\":\"尾插法\"},\"514\":{\"h\":\"查找第i个结点\"},\"515\":{\"h\":\"查找某个元素结点\"},\"516\":{\"h\":\"插入结点\"},\"517\":{\"h\":\"删除结点\"},\"518\":{\"h\":\"求表长\"},\"519\":{\"h\":\"双链表\",\"t\":[\"为了克服访问单链表访问结点需要从头遍历的问题，引入了双链表的概念，双链表结点中有两个指针 prior 和 next，分别指向了前驱和后继结点，有了这两个指针的存在，插入和删除操作的时间复杂度仅为O(1)。\",\"这里说的“插入和删除操作的时间复杂度仅为O(1)”只是说插入和删除这个节点的过程复杂度为O(1)，而并不包括找到这个节点的过程。\",\"public class DNode<T> { /** * 当前节点的值 */ public T data; /** * 前驱指针 */ public DNode<T> prior; /** * 后继指针 */ public DNode<T> next; /** * 初始化节点 * @param data 节点的值 */ DNode (T data) { this.data = data; this.prior = null; this.next = null; } } \"]},\"520\":{\"h\":\"双链表的插入\"},\"521\":{\"h\":\"双链表的删除\"},\"522\":{\"h\":\"循环链表\"},\"523\":{\"h\":\"循环单链表\",\"t\":[\"循环单链表和单链表的区别就是最后一个结点的指针不是 Null 而是改为指向头指针，从而使链表形成一个环状。这个时候的判空操作就是头结点的指针是否为头结点。\",\"因为循环单链表是一个“环”，因此在任何一个位置上的插入和删除都是等价的，无需判断表尾，而且每次操作无需寻找表头，可以从任意结点开始遍历。有时对循环单链表不设置头指针而设置尾指针，因为设置尾指针可以直用next找到头指针并且可以直接在队尾插入元素，省去了在头指针遍历的麻烦。\"]},\"524\":{\"h\":\"循环双链表\",\"t\":[\"照葫芦画瓢，循环双链表即为头结点的prior指向尾结点，尾结点的next指向头结点。这时的判空条件为头结点的prior和next都为本身。\"]},\"525\":{\"h\":\"静态链表\",\"t\":[\"静态链表借助数组来描述线性表的链式存储结构，结点也有数据域和指针域，不过这里的指针用数组的下标来代替，又称为游标，因为是数组的原因，静态链表也需要一块连续的内存空间。\",\"静态链表存储示意图\"]},\"526\":{\"h\":\"顺序表和链表的比较\",\"t\":[\"比较方面\",\"顺序表\",\"链表\",\"存取方式\",\"随机存取\",\"只能从表头开始顺序存取\",\"逻辑结构与物理结构\",\"逻辑相邻物理也相邻\",\"逻辑相邻但物理不一定相邻\",\"删查找操作\",\"插入删除慢，查找快\",\"删除插入快，查找慢\",\"空间分配\",\"密度大，但是对连续存储空间要求高\",\"密度小，但操作灵活高效\",\"总之，两种存储结构各有长短，选择哪一种有实际问题的主要因素决定。通常较稳定的线性表选择顺序存储，而频繁进行插入删除操作的线性表宜选择链式存储。\"]},\"527\":{\"h\":\"图\"},\"528\":{\"h\":\"图的基本概念\",\"t\":[\"图G由顶点集V和边集E组成，记为G=(V,E)，其中V(G)表示图G中顶点的有限非空集；E(G)表示图G中顶点关系的集合。注意线性表可以是空表，树可以是空树，但是图不可以是空图。\",\"下面是图的一些基本概念和基本术语：\"]},\"529\":{\"h\":\"有向图和无向图\",\"t\":[\"当E是有向边（弧）的有限集合时，则图G为无向图。若E是无向边的有限集合则图G为无向图。\"]},\"530\":{\"h\":\"简单图、多重图\",\"t\":[\"一个图G如果满足不存在重复边、不存在顶点到自身的边，那么称图G为简单图。若图G中某两个顶点之间的边数大于1条，又允许顶点通过一条边和自身关联，则称图G为多重图。\"]},\"531\":{\"h\":\"完全图\",\"t\":[\"任何两个顶点之间都存在边的无向图是完全图。有向完全图是任意两个顶点之间都存在方向相反的两条弧的有向图。\"]},\"532\":{\"h\":\"子图\",\"t\":[\"如果一个图中的顶点集和边集是另一个图的子集，那么称前者为后者的子图。\"]},\"533\":{\"h\":\"连通、连通图和连通分量\",\"t\":[\"在无向图中，若从顶点v到顶点w有路径存在，则称v和w是连通的。若图G中任意两个顶点都是连通的，则称图G为连通图，否则称为非连通图。无向图中极大连通子图称为连通分量。\"]},\"534\":{\"h\":\"强连通图和强连通分量\",\"t\":[\"在有向图中，如果有一对顶点v和w，从v到w和从w到v之间都有路径，则称为这两个顶点时强连通的。若图中任何一对顶点都是强连通的，则称为此图为强连通图。有向图中的极大强连通子图称为有向图的强连通分量。\"]},\"535\":{\"h\":\"生成树和生成森林\",\"t\":[\"连通图的生成树是包含图中全部顶点的一个极小连通子图。若痛中的顶点树为n，则它生成树包含n-1条边。在非连通图中，连通分量的生成树构成了非连通图的生成森林。\"]},\"536\":{\"h\":\"顶点的度、入度和出度\",\"t\":[\"在无向图中，顶点v的度是指依附于顶点v的边的条数，无向图的全部顶点的度的和等于边数的2倍，因为每条边和两个顶点相关联。\",\"在有向图中，顶点v的度分为入度和出度，入度是以顶点v为终点的有向边的数量，而出度是以顶点v为起点的有向边的数目。\"]},\"537\":{\"h\":\"边的权和网\",\"t\":[\"在一个图中，每条边都可以标上具有某种含义的数值，该数值称为该边的权值。这种边上带有权值的图称为带权图，也称为网。\"]},\"538\":{\"h\":\"稠密图和稀疏图\",\"t\":[\"边数很少的图称为稀疏图，反之称为稠密图。\"]},\"539\":{\"h\":\"路径、路径长度和回路\",\"t\":[\"两个顶点之间的路径是指两个顶点间的顶点序列，路径上边的数目称为路径长度。第一个顶点和最后一个顶点相同的路径称为回路或环。若一个图有n个顶点，并且有大于n-1 条边，则此图一定有环。\"]},\"540\":{\"h\":\"简单路径和简单回路\",\"t\":[\"在路径序列中，顶点不重复出现的路径称为简单路径。除第一个顶点和最后一个顶点外，其余顶点不重复出现的回路称为简单回路。\"]},\"541\":{\"h\":\"距离\",\"t\":[\"从顶点u出发到顶点v的最短路径若存在，则此路径的长度为从u到v的距离。若从u到v根本不存在路径，则记该距离为无穷。\"]},\"542\":{\"h\":\"有向树\",\"t\":[\"一个顶点的入度为0，其余顶点的入度均为1的有向图称为有向树。\"]},\"543\":{\"h\":\"图的存储及基本操作\",\"t\":[\"图的存储需要完整、准确的反映顶点集和边集的信息。\"]},\"544\":{\"h\":\"邻接矩阵法\",\"t\":[\"所谓邻接矩阵，是指用一个一维数组存储图中顶点的信息，用一个二维数组存储图中边的信息，存储顶点之间邻接关系的二维数组称为邻接矩阵。\",\"图的邻接矩阵存储表示法具有以下特点：\",\"无向图邻接矩阵一定是唯一的对称矩阵。因此，在实际存储邻接矩阵时只需存储上或下三角矩阵即可。\",\"对于无向图，邻接矩阵的第i行或第i列非零元素的个数正好是顶点i的度。\",\"对于有向图，邻接矩阵的第i行非零元素或非∞元素的个数正好是顶点i的出度，第i列非零元素或非∞元素的个数正好是顶点i的入度。\",\"用邻接矩阵存储图，很容易确定两个顶点是否相连。但是，要确定图中有多少条边，则必须按行、按列对每个元素进行检测。\",\"稠密图适合使用邻接矩阵存储。\",\"设图G的邻接矩阵为A，An[i][j]等于由顶点i到顶点j的长度为n的路径的数目。\"]},\"545\":{\"h\":\"邻接表法\",\"t\":[\"当一个图是稀疏图的时候，使用邻接矩阵法显然要量费大量的存储空间，而使用邻接表是指对图G中的每一个顶点vi建立一个单链表，第i个单链表中的结点表示依附于顶点vi的边，如果是有向图则就是以顶点i为尾的弧，这个单链表就称为顶点i的边表。边表的头指针和顶点的数据信息采用顺序存储。\",\"图的邻接表存储方法具有以下特点：\",\"稀疏图适合使用邻接表法。\",\"邻接表中对于一个顶点很容易找到他所有的邻边，但是确定两个点之间是否有边，则需要在相应结点对应的边表中查找另一个结点。\",\"在有向图的邻接表表示中，求一个给定顶点的出度只需要计算其边表中结点的个数，如果是出度则需遍历整个表。\",\"图的邻接表不唯一。\"]},\"546\":{\"h\":\"十字链表\",\"t\":[\"十字链表是有向图的一种链式存储结构，在十字链表中，对应于有向图中的每条弧有一个结点，对应于每个顶点也有一个结点。\"]},\"547\":{\"h\":\"邻接多重表\",\"t\":[\"邻接多重表是无向图的另一种链式存储结构，在邻接表中，容易求的顶点和边的各种信息，但是在邻接表中求两点之间是否存在边对边执行删除等操作时，需要分别在两个顶点的边表中遍历，效率低，在邻接多重表中，所有依附于同一顶点的边串联在同一个链表中，由于每条边依附于两个顶点，因此每个边结点同时链接在两个链表中。对无向图而言，其邻接多重表和邻接表的区别在于，同一条边在邻接表中用两个结点表示，二在邻接多重表只有一个。\"]},\"548\":{\"h\":\"图的基本操作\",\"t\":[\"Adjacent(G, x, y)：判断图G是否存在边<x,y>或（x,y）。\",\"Neighbors(G, x): 列出图G中与结点x邻接的边。\",\"InsertVertex(G, x): 在图G中插入顶点x。\",\"DeleteVertex(G, x): 在图G中删除顶点x。\",\"AddEdge(G, x, y): 若无向边（x,y）或有向边<x,y>不存在，则有向图G中添加该边。\",\"RemoveEdge(G, x, y): 若无向边（x,y）或有向边<x,y>存在，则自从图G中删除该边。\",\"FirstNeighbor(G, x): 求图G中顶点x的第一个邻接点。\",\"NextNeightbor(G, x, y): 假设图G中顶点y是顶点x的一个邻接点，返回除了y外顶点x的下一个邻接点的顶点号。\",\"Get_edge_velue(G, x, y): 获取图G中边（x，y）或<x,y>的权值。\",\"Set_edge_value(G, x, y, v): 设置图G中边（x，y）或<x,y>的权值。\"]},\"549\":{\"h\":\"图的遍历\",\"t\":[\"图的遍历是指从图中的某一个顶点出发，按照某种搜索方法沿着图中的边对图中的所有顶点访问一次且仅访问一次。\"]},\"550\":{\"h\":\"广度优先搜索\",\"t\":[\"广度优先搜索类似于二叉树的层序遍历算法。基本思想是：首先访问起始顶点v，然后从v出发，依次访问\"]},\"551\":{\"h\":\"深度优先搜索\"},\"552\":{\"h\":\"图的遍历与连通性\",\"t\":[\"图的遍历算法可以用来判断图的连通性，对于无向图来说，若无向图是连通的，则从任意一个结点出发，仅需一次遍历就能够访问图中的所有顶点；若无向图是非连通的，则从某一个顶点出发，一次遍历只能访问到该顶点在连通分量的所有顶点，而对于途中其他连通分量的顶点，则无法通过这次遍历访问。对于有向图来说，若从初始点到图中的每个顶点都有路径，则能够访问到图中的所有顶点，否则不能访问到所有顶点。\"]},\"553\":{\"h\":\"队列\",\"t\":[\"所有的测试代码都在博客首页中的 java-study-demo 中找到。\"]},\"554\":{\"h\":\"基本概念\",\"t\":[\"队列简称队，也是一种操作受限的线性表，只允许在表的一端进行插入，而在表的另一端进行删除。向队列中插入元素称为入队或进队；删除元素称为出队或离队。特性是最早进队的也是最早出队的，即先进先出（FIFO， First In First Out）。\",\"队列示意图\",\"队头（Front）：允许删除的一端，又称队首。\",\"队尾（Rear）：允许插入的一端。\",\"空队列：不包含任何元素的空表。\"]},\"555\":{\"h\":\"基础操作\",\"t\":[\"InitQueue：初始化队列，构造一个空队列。\",\"QueueEmpty：判队列空。\",\"EnQueue：入队。\",\"DeQueue：出队。\",\"GetHead：读队头元素。\"]},\"556\":{\"h\":\"队列的顺序存储\",\"t\":[\"看完以上的代码我们发现我们可以用rear == maxSize这个条件来作为队满的条件吗？哒咩哟！因为在我们不断入对和出队的时候，会发现不仅仅是尾指针在增加的同时头指针也在增加，这就导致最后数组上溢是一种假溢出，数组中依然可以存放数组，只不过指针全都聚集到了数组尾部，为了解决这种问题就引出了下面循环队列的概念。\"]},\"557\":{\"h\":\"循环队列\",\"t\":[\"在循环队列中，我们将顺序队列臆想为一个环状空间，即把存储队列元素的表从逻辑上视为一个环，这也就是循环队列的精髓，当队首或队尾指针到 maxSize - 1 的位置时，再前进一个位置就自动到 0。\",\"对于循环队列判空和满的方式有三种，上面只展示了最常用的一种，即通过队头指针在队尾指针的下一个位置来牺牲一个队列单元作为队满的标志。其他两种是通过增加标识位来区别队空和队满，一个是增设表示元素个数的单位成员和 maxSize 进行对来判断，另一个是设置 tag 标志位来判断。\"]},\"558\":{\"h\":\"队列的链式存储\",\"t\":[\"队列的链式表称为链队列，是一个同时带有队头指针和队尾指针的单链表。\",\"不带头结点的链式队列\",\"不难看出在不带头结点链队列操作比较麻烦，所以为了统一操作一般都会使用带头结点的链表存储。相对于容易出现存储不合分配不合理或者溢出情况的顺序存储队列，我们最好使用链式队列。\"]},\"559\":{\"h\":\"双端队列\",\"t\":[\"双端队列是指允许两端都可以进行入队和出队操作的队列，逻辑结构仍为线性结构。\",\"双端队列\",\"在双端队列进队时，前端进的元素排列在队列后端进的元素前面，后端进的元素在队列前端进的后面，前后端出队的时候还是遵循先进先出的规律。\",\"在双端队列的基础上，衍生出了输出受限和输入受限的两种特殊的队列。输出受限的队列只允许在一端进行插入和删除，在另一端只允许插入；输入受限的队列只允许在一端进行插入删除，另一端只允许删除。\",\"输出受限的双端队列\",\"输入受限的双端队列\",\"我并没有遇到实际的场景来使用双端队列这种结构，Java也有Deque来实现双端队列，但是并没有说做到输入输出限制和出入的前后顺序的限制，这个知识点最重要的是要理解下面这个经典问题即可。\"]},\"560\":{\"h\":\"双端队列经典问题\",\"t\":[\"设有一个双端队列，输入顺序为1，2，3，4，求出下列三种条件的输出队列\",\"能由输入受限的双端队列得到，但不能由输出受限的双端队列得到的输出序列。\",\"4，1，3，2\",\"能由输出受限的双端队列得到，但不能由输入受限的双端队列得到的输出序列。\",\"4，2，1，3\",\"既不能由输入受限的双端队列得到，也不能由输出受限的双端队列得到的输出序列。\",\"4，2，3，1\",\"当然这些结果是这么出来的呢，当然可能在只接触过定义之后我们并不知道双端队列甚至是队列的进出顺序，这里我们直接结合这个问题来给大家简单理理头绪。\",\"首先我们严格意义上的队列应该严格遵循先进先出的规则，所以在保证入队顺序的情况下就只会有一种出队顺序。这里不得不提一下栈的进出顺序，我们常问的一组入栈顺序为什么会有多种出栈顺序，因为虽然是保证这先进后出的规则，但是我们可以不断的进出来打乱顺序，而队列先进只能先出，并不会被后面入队元素所影响。\",\"其次到了双端队列，这种先进先出的规则被打破，既然可以两边同时进队，还要保证线性结构，那该如何保证先进入的在两侧都再次入队的情况下可以先出来呢，所以回到这个经典问题之所以能有这种答案，都是在保证了所有元素都入队的情况下再出队的，基于这个条件，我们才可以根据输入输出限制来找到不可能得到的序列。\",\"我们拿第一个问题的 4，1，3，2 来解释，如果是输入受限，我们能在一端入队，因为入队顺序是确定的，所以四个元素在队内的相对位置就是顺序的 1，2，3，4，而因为两端都可以出队，所以可以用右左右左的顺序得到 4，1，3，2 的顺序，相反如果是输出受限，就应该反向推测输出前队内的顺序只能是4，1，3，2，而我们不能够在 1 和 2 入队之后让 3 在 1 和 2 之间，所以这输出序列是唯一正确的。\"]},\"561\":{\"h\":\"栈和队列的应用\"},\"562\":{\"h\":\"栈在括号匹配的应用\",\"t\":[\"假设表达式中允许包含两种括号：圆括号和方括号，其嵌套的顺序任意，只需要成对匹配即位正确，否则为不正确。\",\"算法思想如下：\",\"初始设置一个空栈，顺序读入括号。\",\"若是右括号，则和栈顶最紧迫的期待的括号消解，如果不能成对消除则不合法，退出程序。\",\"若是左括号，则作为一个新的更紧迫的期待压入栈中。当算法结束时，栈为空，否则不合法。\"]},\"563\":{\"h\":\"栈在表达式求值的应用\",\"t\":[\"表达式求值可以结合二叉树进行理解。其中中缀表达式不仅依赖算符的优先级，而且还要处理括号。后缀表达式的运算符在操作数后面，在后缀表达式中已经考虑了运算符的优先级，所以没有括号只有操作数和运算符。通过后缀表达式表示计算过程为：\",\"顺序扫描表达式的每一项。\",\"如果是操作数则压入栈中\",\"若是操作符，则从栈中出栈两个操作数进行运算并将结果重新入栈。\",\"扫描完毕后，栈顶元素就是最后的运算结果。\"]},\"564\":{\"h\":\"栈在递归中的应用\",\"t\":[\"递归即把一个大型的复杂问题层层转化成一个与原问题相似的规模较小的问题来就求解的过程，往往只需要少量代码就可以描述出解题过程中的多次重复计算，虽然减少了程序代码量，但是效率并不会很高。\",\"在递归调用的过程中，系统为每一层的返回点、局部变量、传入实参等开辟了递归工作栈来进行数据存储，递归的次数过多容易产生栈溢出，效率不高的原因是因为递归调用过程会产生重复运算，但是代码简单，容易理解，可以为初学者提供解题思路。\"]},\"565\":{\"h\":\"队列在层次遍历中的应用\",\"t\":[\"在信息处理中有一大类问题需要逐层或逐行进行处理，这种问题往往是在处理当前层或行时就对下一层或下一行进行预处理，把处理顺序安排好，等当前层或当前行处理完毕就可以进行处理下一层或者下一行，这个过程就可以使用队列保存下一步的处理顺序，类似于二叉树的层序遍历。\"]},\"566\":{\"h\":\"队列在计算机系统中的应用\",\"t\":[\"队列在计算机系统中的应用非常广泛，一方面是解决主机与外部设备之间速度不匹配的问题，一方面是解决由多用户引起的资源竞争问题。\",\"第一方面仅以主机和打印机之间速度不匹配的问题作说明。主机把数据输送给打印机，输出的数据速度比打印机的速度快得多，解决的方法就是设置一个打印数据缓冲区，主机把要打印的数据写入这个缓冲区，写满后就暂停输出，转去做其他事情，打印机就从缓冲区按照先进先出的原则依次取出数据并打印，打印完再向主机发出申请，主机接到请求后再向缓冲区写入打印数据。这样做既保证了打印的数量正确，又使主机提升了效率。\",\"第二个方面，CPU 资源的竞争就是一个典型的例子。在一个带有多终端的计算机系统上，由多个用户需要 CPU 各自运行自己的程序，他们分别通过各自的终端向操作系统提出占用 CPU 的请求。操作系统通常会按照请求在时间上的先后顺序把他们呢拍成一个队列，每次把 CPU 分配给队首请求的用户使用。当对应的程序运行结束或用完规定的时间间隔，令其出队，再把自己 CPU 分配给新的队首请求的用户使用。这样既保证了每个用户的请求，又能使 CPU 正常运行。\"]},\"567\":{\"h\":\"栈\",\"t\":[\"所有的测试代码都在博客首页中的 java-study-demo 中找到。\"]},\"568\":{\"h\":\"基本概念\",\"t\":[\"栈（Stack）是只允许在一端进行插入或删除操作的线性表。\",\"栈的示意图\",\"栈顶：线性表允许进行插入和删除的那一端。\",\"栈底：固定的，不允许进行插入和删除的那一端。\",\"空栈：不含任何元素空表。\",\"如上图所示，a1为栈底元素，a5为栈顶元素。根据规则，进栈次序依次为a1,a2,a3,a4,a5，而出栈依次为a5,a4,a3,a2,a1，由此可见栈的操作特性可以明显囊括为先进后出（Last In First Out，LIFO）。\",\"栈的数学性质：n个不同元素进栈，出栈元素不同排列的个数为 1/(n+1)乘2n中选n个数的排列，也被称为卡特兰（Catalan）数。\"]},\"569\":{\"h\":\"基本操作\",\"t\":[\"InitStack：初始化一个空栈。\",\"StackEmpty：判断一个栈是否为空。\",\"Push：进栈。\",\"Pop：出栈。\",\"GetTop：读取栈顶元素。\",\"DestroyStack：销毁栈。\"]},\"570\":{\"h\":\"栈的顺序存储\",\"t\":[\"采用顺序存储的栈成为顺序栈，利用一组地址连续的存储单元存放自栈底到栈顶的数据元素，同时附设一个指针指示当前栈顶元素的位置。\"]},\"571\":{\"h\":\"共享栈\",\"t\":[\"利用栈底位置不变的特性，可以让两个顺序栈共享一个一维数组空间，将两个栈的栈底分别设在共享空间的两端，两个栈顶向共享空间的中间延伸，共享栈是为了更有效的利用存储空间，两个栈互相调节，存取数据的时间复杂度都为O(1)。\",\"两个栈的栈顶指针一个为-1一个为MaxSize时各自为空，而两个指针相邻，即top0 - top1 = 1的时候为栈满。\"]},\"572\":{\"h\":\"栈的链式存储\",\"t\":[\"采用链式存储的栈称为链栈，优点是便于多个栈共享存储空间提高效率，并且不存在栈满的情况。通常采用单链表实现并规定所有的操作都在表头进行。\"]},\"573\":{\"h\":\"串\",\"t\":[\"字符串简称串，计算机上非数值处理的对象基本都是字符串。通常用的搜索引擎、文本编辑程序、问答系统和自然语言翻译等都是以字符串作为处理对象。串是由零个或多个字符组成的有限序列，一般记为 S = 'a1a2a3……an'，其中 S 是串名，单引号内的括起来的字符序列是串的值，其中 ai 可以是字母、数字或者其他字符；串中字符的个数称为串的长度，为 0 时是空串。串中任意多个连续的字符组成的子序列称为该串的子串，包含子串的串称为主串。某个字符在串中的序号称为该字符在串中的位置。子串在主串中的位置以子串在主串的第一个字符位置来表示，当两个串的长度相等且每个对应对应位置的元素都相等时，称这两个串是相等的。由一个或者多个空格组成的串为空格串，其长度为串中空格字符的个数。\"]},\"574\":{\"h\":\"串的存储结构\"},\"575\":{\"h\":\"定长顺序存储\",\"t\":[\"类似于线性表的顺序存储结构，文用一组地址连续的存储单元存储串值的字符序列，因为每个元素都是定长的，所以当串的实际长度长过了 MaxSize ，超过预定义长度的串将被舍去，称为截断。\"]},\"576\":{\"h\":\"堆分配存储\",\"t\":[\"堆分配存储仍然以一组地址连续的存储单元进行存放，但是存储空间是在程序执行过程中动态分配的。\"]},\"577\":{\"h\":\"块链存储\",\"t\":[\"类似于线性表的链式存储结构，由于串每个元素只有一个字符，在具体的实现，每个链表结点可以存放一个字符，也可以存放多个字符，这样每个结点就可以被称为块，整个链表被称为块链结构。\"]},\"578\":{\"h\":\"串的基本操作\",\"t\":[\"StrAssign：赋值操作。\",\"StrCopy：赋值操作。\",\"StrEmpty：判空操作。\",\"StrCompare：比较操作。\",\"StrLength：求表长。\",\"SubString：求子串。\",\"Concat：串连接。\",\"Index：定位串出现的位置。\",\"ClearString：清空串。\",\"DestroyString：销毁串。\"]},\"579\":{\"h\":\"树和二叉树的应用\"},\"580\":{\"h\":\"哈夫曼树和哈夫曼码\",\"t\":[\"在许多应用中，树中结点常常被赋予一个表示某种意义的数值，称为该结点的权，从树的根结点到任意结点的路径长度与该结点上的权值的乘积，称为该结点的带权路径长。树中所有叶结点的带权路径长被称为该树的带权路径长（WPL）。\",\"在含有 n 个带权叶结点的二叉树中，其中带权路径长度最小的二叉树称为哈夫曼树，也称为最优二叉树。\",\"具有不同带权长度的二叉树\"]},\"581\":{\"h\":\"哈夫曼树的构造\",\"t\":[\"哈夫曼树的构造过程\",\"从上述的构造过程中可以看出哈夫曼树具有一下特点：\",\"每个初始结点最终都成了叶结点，且权值越小的结点到根结点的路径长度越大。\",\"构造过程中新建了 n - 1 个分支结点，因此哈夫曼树的总结点数为 2n - 1。\",\"每次构造都选择两棵树作为新结点的孩子，因此哈夫曼树不存在度为 1 的结点。\"]},\"582\":{\"h\":\"哈夫曼编码\",\"t\":[\"在数据通讯中，若对每个字符用相等长度的二进制位表示，称这种编码方式为固定长度编码。若允许对不同字符用不等长的二进制表示，则这种编码方式称为可变长度编码，其特点是对频率高的字符覆以短编码，频率低的字符则赋予长编码，从而使字符的平均长度减短，起到压缩数据的作用，哈夫曼编码正是一种被广泛应用而且有效的数据压缩编码。\",\"若没有一个编码是另一个编码的前缀，则称为这样的编码为前缀编码。由哈夫曼树得到哈夫曼编码是很自然的过程，其权值正好对应它出现的次数，构造出对应的哈夫曼树，我们将字符的编码解释为从根至该字符路径上边界的标记的序列，0 表示转向左孩子，1 表示转向右孩子。\",\"由哈夫曼树构成哈夫曼编码\"]},\"583\":{\"h\":\"并查集\",\"t\":[\"参考算法模块中的并查集。\"]},\"584\":{\"h\":\"树和二叉树\",\"t\":[\"所有的测试代码都在博客首页中的 java-study-demo 中找到。\"]},\"585\":{\"h\":\"树的基本概念\",\"t\":[\"树是 n(n >= 0) 个结点的有限集。当 n = 0 的时候，称为空树，在任何一个非空树中应该满足：\",\"有且只有一个特定的称为根的结点。\",\"当 n > 1 时，其余结点可以分为 m(m > 0) 个互不相交的有限集 T1,T2,T3,……,Tm，其中每个结合本身又是一棵树，并成为根的子树。\",\"显然，树的定义是递归的，即在树的定义中又用到了其自身，树作为一种逻辑结构，同时也是一种分层结构，具有两个特点\",\"树的根结点没有前驱，根结点外的所有结点有且只有一个前驱。\",\"树中的所有所有结点都可以有零个或多个前驱。\",\"因为树中的某个节点（除根结点外）最多只和上一层的一个结点有直接关系，根结点没有直接上层结点，所有n个结点的树有 n - 1 条边，而且每个结点与其下一层的零个或多个结点（即子女结点）都有直接关系。\"]},\"586\":{\"h\":\"基本术语\",\"t\":[\"树的树形表示\",\"首先观察结点K，根A到K的唯一路径到的任意点，称为结点K的祖先，即A、B、E都是K的祖先。而E是路径上最接近K的祖先，所以称E为K的双亲，而K是E的孩子。\",\"有相同双亲结点称为兄弟，如K和L都有共同的双亲E，即K和L为兄弟结点。\",\"树中一个结点的孩子总数称为该结点的度，树中结点最大的度称为树的度，如结点B的度为2，D的度为3，树的度为3.\",\"度大于0的结点称为分支结点（又称非终端结点），度为0的结点为叶子结点（又称终端结点）。\",\"结点的层次从根结点开始，根结点为第一层，它的子结点为第二层，以此类推。双亲在同一层的结点互为堂兄弟，如G和E、F、H、I、J互为堂兄弟。\",\"结点的深度是从根结点开始自顶向下逐层累加，结点的高度从叶子结点开始自底向上逐层累加。树的高度或深度是树中结点的最大深度。\",\"有序树和无序树。树中的结点从左到右是有次序的，不能互换被称为有序树。否则称为无序树。\",\"路径和路径长度。树中的两个结点之间的路径是由这两个结点之间所经过的的结点序列构成的，而路径长度是路径上所经过的边的个数。\",\"树的分支是有向的，从双亲结点指向子结点。\",\"森林。森林是m（m>=0）颗互不相交的树的集合。森里只要把所有树的根结点去除就成了森林，相反，只要给m颗树独立的树添加一个根结点，森林就成了树。\"]},\"587\":{\"h\":\"基本性质\",\"t\":[\"树中的结点数等于所有结点的度之和加一。\",\"度为m的树第i层上至多有mi-1个结点（i>=1）。\",\"高度为h的m叉树至多有 (mh-1)/(m-1)个结点。\",\"具有n个结点的m叉树的最小高度为⌈logm(n(m-1)+1)⌉。\"]},\"588\":{\"h\":\"二叉树\",\"t\":[\"二叉树是一种特殊的树形结构，其特点就是每个结点至多只有两颗子树，即不存在度大于2的结点，而且二叉树是有序树，左右结点次序不能随意颠倒。二叉树的递归定义是或为空二叉树，或为一个根结点和两个互不相交的被称为根的左子树和右子树组成，左子树和右子树分别又是一颗二叉树。\",\"二叉树是特殊的度为二的有序树，度为2的有序树至少有三个结点，而二叉树可以为空。度为二的有序树左右次序是对于另一个孩子而言的，若某个节点只有一个孩子，则这个孩子就无需区分其左右次序，而二叉树无论孩子个数是否为2，均需要确定其左右次序。\"]},\"589\":{\"h\":\"几种特殊的二叉树\",\"t\":[\"完全二叉树和满二叉树\",\"完全二叉树：高度为h，有n个结点的二叉树，当且仅当每个结点都与高度为h的满二叉树中编号为1～n的结点一一对应称为完全二叉树。 \",\"若 i <= ⌊n/2⌋，则i为分支结点，否则为叶子结点。\",\"叶子结点只可能在层数最大的两层出现，并且最大层出现的叶子结点应该依次排列在该层的最左边的位置。\",\"若有度为1的结点，则只可能有一个，且该结点，且该结点只有左孩子。\",\"按照层序编号后，一旦出现结点为叶子结点或者只有左孩子，则编号大于i的结点均为叶子结点。\",\"若n为奇数，则每个分支结点都有左右孩子，若n为偶数，则编号n/2的结点只有左孩子。\",\"满二叉树：一个高度为h，且含有2h-1个结点的二叉树称为满二叉树，即每层都是最多的结点。按照层序排序后，对于编号为i的结点，若有双亲则双亲为⌊i/2⌋，若有左孩子，则左孩子为 2i，若有右孩子，有孩子为 2i+1。\",\"二叉排序树：左子树上所有的结点的关键字均小于更结点的关键字；右子树上的所有结点句大于根结点的关键字，左右子树分别又各是一颗二叉排序树。\",\"平衡二叉树：树上任意一个结点的左子树和右子树的深度之差不超过1。\"]},\"590\":{\"h\":\"二叉树的性质\",\"t\":[\"非空二叉树的叶子结点数等于度为2的结点树加一，即 n0=n2 + 1。\",\"非空二叉树上第k层上至多有 2k-1 个结点。\",\"高度为h的二叉树至多有 2k-1 个结点，h >= 1.\",\"结点所在的深度为 ⌊log2n⌋ + 1。\",\"具有n个（n>0）结点的完全二叉树的高度为 ⌈log2(n + 1)⌉ 或 ⌊log2n⌋ + 1。\"]},\"591\":{\"h\":\"二叉树的存储\"},\"592\":{\"h\":\"顺序存储\",\"t\":[\"二叉树的顺序存储是指用一组地址连续的存储单元依次自上而下、自左至右完全存储二叉树的所有结点元素。根据二叉树的性质，完全二叉树和满二叉树采用顺序结构比较合适，树中结点的序号可以唯一的反应结点之间的逻辑结构，这样既能最大可能的节省存储空间，又能利用数组元素的下标确定结点的位置以及结点的关系。如果是一般的二叉树为了让数组下标反应二叉树中结点之间的逻辑关系，只能添加一些并不存在空结点，让其每个结点与完全二叉树的结点相对照，如果最坏的情况高度为h且之后h个结点的单枝树却要占据 2h - 1 个单元。\",\"需要注意的是，顺序存储需要从数组下标1开始存储树中的结点，否则一些性质则无法满足。\"]},\"593\":{\"h\":\"链式存储\",\"t\":[\"由于顺序存储的空间利用率较低，因此二叉树一般都是采用链式存储，在二叉树中结点通常包含数据域和指针域，二叉链表就必须包含数据域 data、左指针域 lchild 和右指针域 rchild。\",\"import lombok.Getter; import lombok.Setter; /** * @description 二叉树的链式存储 */ @Getter @Setter public class BiTree<E> { /** * 数据域 */ E data; /** * 左孩子指针 */ BiTree<E> leftChild; /** * 右孩子指针 */ BiTree<E> rightChild; /** * 初始化方法 * @param data 数据域 */ public BiTree(E data) { this.data = data; } } \"]},\"594\":{\"h\":\"二叉树的遍历\",\"t\":[\"二叉树中的遍历是指按某条搜索路径访问树中的每个结点，使得每个结点均被访问一次，而且仅被访问一次，而且仅被访问一次。由于二叉树是一种非线性结构，每个结点都可以能有两个子树，因而需要寻找一种规律以便使二叉树的结点能排列在一个线性队列上，方便遍历。我们根据二叉树的定义，遍历一颗二叉树要决定对根和左右结点的访问顺序，常见的遍历次序是先序、中序和后序三种，其中的序是指根结点在何时被访问。\",\"二叉树的三种遍历顺序\",\"递归的巧妙确实让我们省略了很多代码，可是在我们享受这种便利的时候，同样也徒增了很多次计算的消耗，每次扫描叶子结点的时候总会将其父母结点重新计算一次，在一些特殊情况中非常浪费性能，尤其是递归中经典的斐波那契数列中，如果追求更高的时间复杂度，我们会采取非递归的方式新增一个标记记录每一次计算出的值来减少多次计算的消耗，所以这里也借助栈来实现二叉树的中序遍历：\"]},\"595\":{\"h\":\"由遍历序列构造二叉树\",\"t\":[\"我们先由二叉树的先序序列和中序序列来唯一确定一颗二叉树，在先序遍历序列中，第一个结点一定是二叉树的根结点，而在中序遍历中，根结点一定在讲中序序列分割为两个子序列，根据这两个子序列在先序序列中根据同样的规律找到左右子树的根结点，依次递归下去就能唯一确定这颗二叉树，同理，二叉树的后序序例和中序序列也可以诶唯一确定二叉树、层序遍历和中序序列也可以唯一确定二叉树，但是先序序列和后续序列不能确定。\"]},\"596\":{\"h\":\"线索二叉树\",\"t\":[\"遍历二叉树是以一定的规则将二叉树中的结点排列成一个线性序列，只能体现一种父子关系，不能直接得到结点在遍历中的前驱和后继。如果我们把二叉树中的空指针结点存放指向其前驱或者后继的指针，可以像遍历单链表那样方便的遍历二叉树，加快了查找结点前驱和后继的速度，这也就是二叉排序树，规定每个结点若无左子树，令lchild指向其前驱结点，若无右子树，令rchild指向其后继结点，并且需要增加两个标识域标识指针域，以指向左右孩子或者前驱后继，标识为0则表示为左右孩子，如果是1则代表是前驱或者后继。\"]},\"597\":{\"h\":\"树、森林\"},\"598\":{\"h\":\"树的存储结构\",\"t\":[\"树的存储结构有很多，即可采用顺序存储结构，又可采用链式存储结构，但无论采用何种存储方式，都要求能唯一的反应树中各个节点之间的逻辑关系，下面是三种常见的存储结构。\"]},\"599\":{\"h\":\"双亲表示法\",\"t\":[\"采用一组连续空间来存储每个结点，同时在每个结点中增设一个伪指针，指示双亲结点在数组中的位置，根结点下标为0，其尾指针域为-1.\",\"双亲表示法\"]},\"600\":{\"h\":\"孩子表示法\",\"t\":[\"将每个结点的孩子结点都用单链表链接起来形成一个线性结构，此时 n 个结点就有 n 个孩子链表（叶子结点的孩子链表为空表）。\",\"孩子表示法\"]},\"601\":{\"h\":\"孩子兄弟表示法\",\"t\":[\"即以二叉链表作为树的存储结构，使每个结点包括三部分内容：结点值、指向结点第一个孩子结点的指针，以及指向结点在一个兄弟结点的指针。\",\"孩子兄弟表示法\"]},\"602\":{\"h\":\"树、森林与二叉树的转换\",\"t\":[\"树转换为二叉树的规则：每个结点左指针指向它的第一个孩子，右指针指向它在树中的相临右兄弟，这个规矩也叫左孩子右兄弟，其规则也正如上面的孩子兄弟表示法图所示。\",\"森林转换成二叉树的规则：把下一棵树转化为上一棵树的右兄弟，其他和树转化二叉树的规则相同。\"]},\"603\":{\"h\":\"树和森林的遍历\",\"t\":[\"树的遍历是指用某种方式访问树的每个结点，且仅访问一次，主要有先根遍历和后根遍历两种方式：\",\"先根遍历：先访问根结点，再依次遍历根结点的每棵子树，遍历子树时仍遵循先根后子树的规则。\",\"后根遍历：先依次遍历根结点的每棵子树，再访问根结点，遍历子树时仍遵循先子树后根的规则。\",\"森林的两种遍历方式：\",\"先序遍历森林 \",\"访问森心的第一棵树的根结点\",\"先序遍历第一棵树中根结点的子树森林。\",\"先序遍历除去第一棵树之后剩余树构成的森林。\",\"中序遍历森林 \",\"中序遍历森里中第一棵子树的根结点的子树森林。\",\"访问第一棵树的根结点。\",\"中序遍历去除第一棵树之后剩余树构成的森林。\"]},\"604\":{\"h\":\"Books\"},\"605\":{\"h\":\"Open Source Project\"},\"606\":{\"h\":\"Techniques\"},\"607\":{\"h\":\"Tools\"},\"608\":{\"h\":\"Backend\"},\"609\":{\"h\":\"Development\"},\"610\":{\"h\":\"Design\"},\"611\":{\"h\":\"Development\"},\"612\":{\"h\":\"Problems\"},\"613\":{\"h\":\"Standard\"},\"614\":{\"h\":\"Tools\"},\"615\":{\"h\":\"Basic\"},\"616\":{\"h\":\"Framework\"},\"617\":{\"h\":\"Basic\"},\"618\":{\"h\":\"Java\"},\"619\":{\"h\":\"Spring\"},\"620\":{\"h\":\"Ads\"},\"621\":{\"h\":\"Computer Basis\"}},\"dirtCount\":0,\"index\":[[\"孩子兄弟表示法\",{\"0\":{\"601\":1},\"1\":{\"601\":1}}],[\"孩子表示法\",{\"0\":{\"600\":1},\"1\":{\"600\":1}}],[\"遍历子树时仍遵循先子树后根的规则\",{\"1\":{\"603\":1}}],[\"遍历子树时仍遵循先根后子树的规则\",{\"1\":{\"603\":1}}],[\"遍历二叉树是以一定的规则将二叉树中的结点排列成一个线性序列\",{\"1\":{\"596\":1}}],[\"遍历一颗二叉树要决定对根和左右结点的访问顺序\",{\"1\":{\"594\":1}}],[\"层序遍历和中序序列也可以唯一确定二叉树\",{\"1\":{\"595\":1}}],[\"右指针指向它在树中的相临右兄弟\",{\"1\":{\"602\":1}}],[\"右孩子指针\",{\"1\":{\"593\":1}}],[\"右子树上的所有结点句大于根结点的关键字\",{\"1\":{\"589\":1}}],[\"叶子结点的孩子链表为空表\",{\"1\":{\"600\":1}}],[\"叶子结点只可能在层数最大的两层出现\",{\"1\":{\"589\":1}}],[\"叶结点都是黑色的\",{\"1\":{\"476\":1}}],[\"几种特殊的二叉树\",{\"0\":{\"589\":1}}],[\"几乎所有主流的工具和服务都提供了该功能\",{\"1\":{\"362\":1}}],[\"几乎只要有时间他就看我们写的代码\",{\"1\":{\"291\":1}}],[\"几乎没有什么逻辑处理\",{\"1\":{\"204\":1}}],[\"几乎每个经典系列书籍中都会有讲设计模式的书\",{\"1\":{\"101\":1}}],[\"均需要确定其左右次序\",{\"1\":{\"588\":1}}],[\"左孩子指针\",{\"1\":{\"593\":1}}],[\"左指针域\",{\"1\":{\"593\":1}}],[\"左子树上所有的结点的关键字均小于更结点的关键字\",{\"1\":{\"589\":1}}],[\"左子树和右子树分别又是一颗二叉树\",{\"1\":{\"588\":1}}],[\"左右子树分别又各是一颗二叉排序树\",{\"1\":{\"589\":1}}],[\"左右子树分别也是一颗二叉排序树\",{\"1\":{\"467\":1}}],[\"左右结点次序不能随意颠倒\",{\"1\":{\"588\":1}}],[\"森里只要把所有树的根结点去除就成了森林\",{\"1\":{\"586\":1}}],[\"森林的两种遍历方式\",{\"1\":{\"603\":1}}],[\"森林转换成二叉树的规则\",{\"1\":{\"602\":1}}],[\"森林与二叉树的转换\",{\"0\":{\"602\":1}}],[\"森林就成了树\",{\"1\":{\"586\":1}}],[\"森林是m\",{\"1\":{\"586\":1}}],[\"森林\",{\"0\":{\"597\":1},\"1\":{\"586\":1}}],[\"颗互不相交的树的集合\",{\"1\":{\"586\":1}}],[\"度为二的有序树左右次序是对于另一个孩子而言的\",{\"1\":{\"588\":1}}],[\"度为2的有序树至少有三个结点\",{\"1\":{\"588\":1}}],[\"度为m的树第i层上至多有mi\",{\"1\":{\"587\":1}}],[\"度为0的结点为叶子结点\",{\"1\":{\"586\":1}}],[\"度大于0的结点称为分支结点\",{\"1\":{\"586\":1}}],[\"参考算法模块中的并查集\",{\"1\":{\"583\":1}}],[\"参数\",{\"1\":{\"316\":1}}],[\"参数和返回值\",{\"1\":{\"269\":1,\"384\":1,\"392\":1}}],[\"起到压缩数据的作用\",{\"1\":{\"582\":1}}],[\"起码现在还觉得没有什么值得学习借鉴的部分\",{\"1\":{\"4\":1}}],[\"频率低的字符则赋予长编码\",{\"1\":{\"582\":1}}],[\"清空串\",{\"1\":{\"578\":1}}],[\"清理任务\",{\"1\":{\"231\":1}}],[\"赋值操作\",{\"1\":{\"578\":2}}],[\"赋值方式\",{\"1\":{\"245\":1}}],[\"整个链表被称为块链结构\",{\"1\":{\"577\":1}}],[\"整理扑克\",{\"1\":{\"455\":1}}],[\"整理一下工作中遇到的实际开发任务\",{\"1\":{\"4\":1}}],[\"块链存储\",{\"0\":{\"577\":1}}],[\"块内的元素可以无序\",{\"1\":{\"465\":1}}],[\"堆分配存储仍然以一组地址连续的存储单元进行存放\",{\"1\":{\"576\":1}}],[\"堆分配存储\",{\"0\":{\"576\":1}}],[\"堆内存在线程间共享\",{\"1\":{\"379\":1}}],[\"某个字符在串中的序号称为该字符在串中的位置\",{\"1\":{\"573\":1}}],[\"串连接\",{\"1\":{\"578\":1}}],[\"串的基本操作\",{\"0\":{\"578\":1}}],[\"串的存储结构\",{\"0\":{\"574\":1}}],[\"串中任意多个连续的字符组成的子序列称为该串的子串\",{\"1\":{\"573\":1}}],[\"串中字符的个数称为串的长度\",{\"1\":{\"573\":1}}],[\"串是由零个或多个字符组成的有限序列\",{\"1\":{\"573\":1}}],[\"串\",{\"0\":{\"573\":1}}],[\"采用一组连续空间来存储每个结点\",{\"1\":{\"599\":1}}],[\"采用链式存储的栈称为链栈\",{\"1\":{\"572\":1}}],[\"采用顺序存储的栈成为顺序栈\",{\"1\":{\"570\":1}}],[\"共享栈是为了更有效的利用存储空间\",{\"1\":{\"571\":1}}],[\"共享栈\",{\"0\":{\"571\":1}}],[\"乘2n中选n个数的排列\",{\"1\":{\"568\":1}}],[\"固定的\",{\"1\":{\"568\":1}}],[\"令rchild指向其后继结点\",{\"1\":{\"596\":1}}],[\"令lchild指向其前驱结点\",{\"1\":{\"596\":1}}],[\"令其出队\",{\"1\":{\"566\":1}}],[\"令牌的类型\",{\"1\":{\"294\":1}}],[\"令牌鉴权的方式\",{\"1\":{\"293\":1}}],[\"写满后就暂停输出\",{\"1\":{\"566\":1}}],[\"写法3\",{\"1\":{\"304\":1}}],[\"写法2\",{\"1\":{\"304\":1}}],[\"写法1\",{\"1\":{\"304\":1}}],[\"递归的巧妙确实让我们省略了很多代码\",{\"1\":{\"594\":1}}],[\"递归的次数过多容易产生栈溢出\",{\"1\":{\"564\":1}}],[\"递归即把一个大型的复杂问题层层转化成一个与原问题相似的规模较小的问题来就求解的过程\",{\"1\":{\"564\":1}}],[\"局部变量\",{\"1\":{\"564\":1}}],[\"扫描完毕后\",{\"1\":{\"563\":1}}],[\"退出程序\",{\"1\":{\"562\":1}}],[\"退出和异常的时候必须释放锁\",{\"1\":{\"372\":1}}],[\"圆括号和方括号\",{\"1\":{\"562\":1}}],[\"栈的链式存储\",{\"0\":{\"572\":1}}],[\"栈的顺序存储\",{\"0\":{\"570\":1}}],[\"栈的数学性质\",{\"1\":{\"568\":1}}],[\"栈的示意图\",{\"1\":{\"568\":1}}],[\"栈底\",{\"1\":{\"568\":1}}],[\"栈顶\",{\"1\":{\"568\":1}}],[\"栈顶元素就是最后的运算结果\",{\"1\":{\"563\":1}}],[\"栈\",{\"0\":{\"567\":1},\"1\":{\"568\":1}}],[\"栈在递归中的应用\",{\"0\":{\"564\":1}}],[\"栈在表达式求值的应用\",{\"0\":{\"563\":1}}],[\"栈在括号匹配的应用\",{\"0\":{\"562\":1}}],[\"栈为空\",{\"1\":{\"562\":1}}],[\"栈和队列的应用\",{\"0\":{\"561\":1}}],[\"栈帧\",{\"1\":{\"380\":1}}],[\"衍生出了输出受限和输入受限的两种特殊的队列\",{\"1\":{\"559\":1}}],[\"哒咩哟\",{\"1\":{\"556\":1}}],[\"空栈\",{\"1\":{\"568\":1}}],[\"空队列\",{\"1\":{\"554\":1}}],[\"空间分配\",{\"1\":{\"526\":1}}],[\"空间复杂度\",{\"0\":{\"459\":1}}],[\"允许插入的一端\",{\"1\":{\"554\":1}}],[\"允许删除的一端\",{\"1\":{\"554\":1}}],[\"允许在运行时创建代理类及其实例\",{\"1\":{\"384\":1}}],[\"队尾\",{\"1\":{\"554\":1}}],[\"队头\",{\"1\":{\"554\":1}}],[\"队列在计算机系统中的应用非常广泛\",{\"1\":{\"566\":1}}],[\"队列在计算机系统中的应用\",{\"0\":{\"566\":1}}],[\"队列在层次遍历中的应用\",{\"0\":{\"565\":1}}],[\"队列的链式表称为链队列\",{\"1\":{\"558\":1}}],[\"队列的链式存储\",{\"0\":{\"558\":1}}],[\"队列的顺序存储\",{\"0\":{\"556\":1}}],[\"队列示意图\",{\"1\":{\"554\":1}}],[\"队列简称队\",{\"1\":{\"554\":1}}],[\"队列\",{\"0\":{\"553\":1}}],[\"向队列中插入元素称为入队或进队\",{\"1\":{\"554\":1}}],[\"向后的比较过程中如果出现反序的数字遍向前移动\",{\"1\":{\"489\":1}}],[\"广度优先搜索类似于二叉树的层序遍历算法\",{\"1\":{\"550\":1}}],[\"广度优先搜索\",{\"0\":{\"550\":1}}],[\"十字链表是有向图的一种链式存储结构\",{\"1\":{\"546\":1}}],[\"十字链表\",{\"0\":{\"546\":1}}],[\"十分\",{\"1\":{\"362\":1}}],[\"十分相像\",{\"1\":{\"217\":1}}],[\"十分易于理解\",{\"1\":{\"99\":1}}],[\"求子串\",{\"1\":{\"578\":1}}],[\"求出下列三种条件的输出队列\",{\"1\":{\"560\":1}}],[\"求图g中顶点x的第一个邻接点\",{\"1\":{\"548\":1}}],[\"求一个给定顶点的出度只需要计算其边表中结点的个数\",{\"1\":{\"545\":1}}],[\"求表长\",{\"0\":{\"518\":1},\"1\":{\"506\":1,\"578\":1}}],[\"稀疏图适合使用邻接表法\",{\"1\":{\"545\":1}}],[\"稀疏矩阵以及对应的三元组\",{\"1\":{\"503\":1}}],[\"稀疏矩阵\",{\"0\":{\"503\":1}}],[\"邻接多重表是无向图的另一种链式存储结构\",{\"1\":{\"547\":1}}],[\"邻接多重表\",{\"0\":{\"547\":1}}],[\"邻接表中对于一个顶点很容易找到他所有的邻边\",{\"1\":{\"545\":1}}],[\"邻接表法\",{\"0\":{\"545\":1}}],[\"邻接矩阵的第i行非零元素或非∞元素的个数正好是顶点i的出度\",{\"1\":{\"544\":1}}],[\"邻接矩阵的第i行或第i列非零元素的个数正好是顶点i的度\",{\"1\":{\"544\":1}}],[\"邻接矩阵法\",{\"0\":{\"544\":1}}],[\"稠密图适合使用邻接矩阵存储\",{\"1\":{\"544\":1}}],[\"稠密图和稀疏图\",{\"0\":{\"538\":1}}],[\"准确的反映顶点集和边集的信息\",{\"1\":{\"543\":1}}],[\"准备多环境配置并完善打包脚本\",{\"1\":{\"286\":1}}],[\"准备安装包\",{\"1\":{\"155\":1}}],[\"准备好便利贴\",{\"1\":{\"142\":1}}],[\"准备工作\",{\"1\":{\"142\":1}}],[\"距离\",{\"0\":{\"541\":1}}],[\"条边\",{\"1\":{\"539\":1,\"585\":1}}],[\"路径和路径长度\",{\"1\":{\"586\":1}}],[\"路径上边的数目称为路径长度\",{\"1\":{\"539\":1}}],[\"路径长度和回路\",{\"0\":{\"539\":1}}],[\"路径\",{\"0\":{\"539\":1}}],[\"路虽远行则将至\",{\"1\":{\"3\":1}}],[\"边表的头指针和顶点的数据信息采用顺序存储\",{\"1\":{\"545\":1}}],[\"边数很少的图称为稀疏图\",{\"1\":{\"538\":1}}],[\"边的权和网\",{\"0\":{\"537\":1}}],[\"顶点不重复出现的路径称为简单路径\",{\"1\":{\"540\":1}}],[\"顶点v的度分为入度和出度\",{\"1\":{\"536\":1}}],[\"顶点v的度是指依附于顶点v的边的条数\",{\"1\":{\"536\":1}}],[\"顶点的度\",{\"0\":{\"536\":1}}],[\"入队之后让\",{\"1\":{\"560\":1}}],[\"入队\",{\"1\":{\"555\":1}}],[\"入度是以顶点v为终点的有向边的数量\",{\"1\":{\"536\":1}}],[\"入度和出度\",{\"0\":{\"536\":1}}],[\"入参打印是否打印\",{\"1\":{\"224\":1}}],[\"子串在主串中的位置以子串在主串的第一个字符位置来表示\",{\"1\":{\"573\":1}}],[\"子图\",{\"0\":{\"532\":1}}],[\"子类\",{\"1\":{\"317\":1}}],[\"弧\",{\"1\":{\"529\":1}}],[\"密度小\",{\"1\":{\"526\":1}}],[\"密度大\",{\"1\":{\"526\":1}}],[\"密码授权流程和客户端凭据授权流程\",{\"1\":{\"451\":1}}],[\"删查找操作\",{\"1\":{\"526\":1}}],[\"删除元素称为出队或离队\",{\"1\":{\"554\":1}}],[\"删除插入快\",{\"1\":{\"526\":1}}],[\"删除结点\",{\"0\":{\"517\":1}}],[\"删除操作\",{\"1\":{\"506\":1}}],[\"删除操作按照下面三种情况来处理\",{\"1\":{\"470\":1}}],[\"删除了右子节点\",{\"1\":{\"346\":1}}],[\"删除文件\",{\"1\":{\"236\":1}}],[\"删除文件夹\",{\"1\":{\"236\":1}}],[\"删除七天前的\",{\"1\":{\"236\":1}}],[\"删除七天前日期格式的文件夹\",{\"1\":{\"236\":1}}],[\"删除\",{\"0\":{\"470\":1,\"474\":1},\"1\":{\"183\":1,\"289\":1}}],[\"随机存取\",{\"1\":{\"526\":1}}],[\"随着应用程序的复杂性和扩展性的增加\",{\"1\":{\"448\":1}}],[\"随着云计算\",{\"1\":{\"420\":1}}],[\"随着互联网的发展\",{\"1\":{\"420\":1}}],[\"随着web应用规模的扩大\",{\"1\":{\"293\":1}}],[\"存取数据的时间复杂度都为o\",{\"1\":{\"571\":1}}],[\"存取方式\",{\"1\":{\"526\":1}}],[\"存储顶点之间邻接关系的二维数组称为邻接矩阵\",{\"1\":{\"544\":1}}],[\"存储\",{\"1\":{\"495\":1}}],[\"存储结构的分类有以下几种\",{\"1\":{\"495\":1}}],[\"存储结构是数据结构在计算机中的表示\",{\"1\":{\"495\":1}}],[\"存储结构\",{\"0\":{\"495\":1}}],[\"存储为后缀为\",{\"1\":{\"277\":1}}],[\"存储和查询地理位置数据\",{\"1\":{\"200\":1}}],[\"链表\",{\"1\":{\"526\":1}}],[\"链式存储\",{\"0\":{\"593\":1},\"1\":{\"495\":1}}],[\"尾结点的next指向头结点\",{\"1\":{\"524\":1}}],[\"尾插法\",{\"0\":{\"513\":1}}],[\"照葫芦画瓢\",{\"1\":{\"524\":1}}],[\"省去了在头指针遍历的麻烦\",{\"1\":{\"523\":1}}],[\"环\",{\"1\":{\"523\":1}}],[\"环境变量有$error\",{\"1\":{\"237\":1}}],[\"环境变量完全相同\",{\"1\":{\"237\":1}}],[\"环境变量中的变量值为$env\",{\"1\":{\"237\":1}}],[\"环境准备和下载\",{\"0\":{\"152\":1}}],[\"双亲表示法\",{\"0\":{\"599\":1},\"1\":{\"599\":1}}],[\"双亲在同一层的结点互为堂兄弟\",{\"1\":{\"586\":1}}],[\"双端队列经典问题\",{\"0\":{\"560\":1}}],[\"双端队列是指允许两端都可以进行入队和出队操作的队列\",{\"1\":{\"559\":1}}],[\"双端队列\",{\"0\":{\"559\":1},\"1\":{\"559\":1}}],[\"双链表的删除\",{\"0\":{\"521\":1}}],[\"双链表的插入\",{\"0\":{\"520\":1}}],[\"双链表结点中有两个指针\",{\"1\":{\"519\":1}}],[\"双链表\",{\"0\":{\"519\":1}}],[\"双方之间约定的声明\",{\"1\":{\"294\":1}}],[\"头插法\",{\"0\":{\"512\":1}}],[\"头结点的数据域可以不设任何信息\",{\"1\":{\"511\":1}}],[\"头结点是为了方便操作而在单链表第一个结点之前附加的一个结点\",{\"1\":{\"511\":1}}],[\"头部\",{\"1\":{\"294\":1}}],[\"节点的值\",{\"1\":{\"511\":1,\"519\":1}}],[\"节省开支\",{\"1\":{\"182\":1}}],[\"节省了磁盘空间\",{\"1\":{\"148\":1}}],[\"销毁串\",{\"1\":{\"578\":1}}],[\"销毁栈\",{\"1\":{\"569\":1}}],[\"销毁操作\",{\"1\":{\"506\":1}}],[\"销毁前调用\",{\"1\":{\"411\":1}}],[\"≥\",{\"1\":{\"505\":1}}],[\"列出图g中与结点x邻接的边\",{\"1\":{\"548\":1}}],[\"列标\",{\"1\":{\"503\":1}}],[\"列表或点击计数器写入到磁盘\",{\"1\":{\"416\":1}}],[\"列表\",{\"1\":{\"198\":1}}],[\"顺带就可以求出\",{\"1\":{\"502\":1}}],[\"顺序扫描表达式的每一项\",{\"1\":{\"563\":1}}],[\"顺序读入括号\",{\"1\":{\"562\":1}}],[\"顺序表\",{\"1\":{\"526\":1}}],[\"顺序表和链表的比较\",{\"0\":{\"526\":1}}],[\"顺序表的实现\",{\"0\":{\"509\":1}}],[\"顺序表的存储结构\",{\"1\":{\"508\":1}}],[\"顺序表的定义\",{\"0\":{\"508\":1}}],[\"顺序存储需要从数组下标1开始存储树中的结点\",{\"1\":{\"592\":1}}],[\"顺序存储\",{\"0\":{\"592\":1},\"1\":{\"495\":1}}],[\"顺序查询的好处是对数据元素的存储没有要求\",{\"1\":{\"463\":1}}],[\"顺序查找通常分为对一般的无序线性表的顺序查找和对按关键字有序的线性表的顺序查找\",{\"1\":{\"463\":1}}],[\"顺序查找又称为线性查找\",{\"1\":{\"463\":1}}],[\"顺序查找\",{\"0\":{\"463\":1}}],[\"顺序验证\",{\"1\":{\"264\":1}}],[\"顺序来进行排序\",{\"1\":{\"130\":1}}],[\"放入数组第一个元元素中\",{\"1\":{\"502\":1}}],[\"放在现在如果仔细想想如果重新设计这个请求的话\",{\"1\":{\"233\":1}}],[\"阶对称矩阵\",{\"1\":{\"500\":1}}],[\"阶矩阵\",{\"1\":{\"500\":1,\"502\":1}}],[\"矩阵中非零元素的个数\",{\"1\":{\"503\":1}}],[\"矩阵中有许多相同矩阵元素或者零元素的被称为特殊矩阵\",{\"1\":{\"499\":1}}],[\"矩阵在数据结构中考虑的是如何用最小的内存空间来存储同样的一组数据\",{\"1\":{\"497\":1}}],[\"得出的存储结构关系式为\",{\"1\":{\"498\":1}}],[\"得到\",{\"1\":{\"481\":1}}],[\"个孩子链表\",{\"1\":{\"600\":1}}],[\"个单元\",{\"1\":{\"592\":1}}],[\"个结点就有\",{\"1\":{\"600\":1}}],[\"个结点\",{\"1\":{\"587\":1,\"590\":2}}],[\"个结点的有限集\",{\"1\":{\"585\":1}}],[\"个互不相交的有限集\",{\"1\":{\"585\":1}}],[\"个分支结点\",{\"1\":{\"581\":1}}],[\"个带权叶结点的二叉树中\",{\"1\":{\"580\":1}}],[\"个数据元素的有限序列\",{\"1\":{\"505\":1}}],[\"个线性关系中的序号称为该元素的下标\",{\"1\":{\"498\":1}}],[\"个相同类型的数据元素构成的有限序列\",{\"1\":{\"498\":1}}],[\"个人理解主节点的\",{\"1\":{\"364\":1}}],[\"个人看来如果公司没有私有云盘或者公共文件服务器的话\",{\"1\":{\"282\":1}}],[\"个人图床\",{\"0\":{\"104\":1}}],[\"施加在数据上的运算包括运算的定义和实现\",{\"1\":{\"496\":1}}],[\"索引存储\",{\"1\":{\"495\":1}}],[\"索引表按关键字有序排列\",{\"1\":{\"465\":1}}],[\"索引表中的每个元素含有各块的最大关键字和各块中的第一个元素的地址\",{\"1\":{\"465\":1}}],[\"元素之间的关系由存储单元的邻接关系来体现\",{\"1\":{\"495\":1}}],[\"元素层和修饰层\",{\"1\":{\"324\":1}}],[\"映像\",{\"1\":{\"495\":1}}],[\"映射jenkins\",{\"1\":{\"364\":2}}],[\"别无其他关系\",{\"1\":{\"494\":1}}],[\"别和我谈什么\",{\"1\":{\"419\":1}}],[\"逻辑相邻但物理不一定相邻\",{\"1\":{\"526\":1}}],[\"逻辑相邻物理也相邻\",{\"1\":{\"526\":1}}],[\"逻辑结构仍为线性结构\",{\"1\":{\"559\":1}}],[\"逻辑结构与物理结构\",{\"1\":{\"526\":1}}],[\"逻辑结构可以从知识结构的图中看到\",{\"1\":{\"494\":1}}],[\"逻辑结构\",{\"0\":{\"494\":1}}],[\"逻辑链接\",{\"1\":{\"148\":1}}],[\"信息的载体\",{\"1\":{\"492\":1}}],[\"信息或者任务的过程\",{\"1\":{\"103\":1}}],[\"外部排序\",{\"1\":{\"487\":1}}],[\"外部接口\",{\"1\":{\"244\":1}}],[\"题解代码\",{\"0\":{\"485\":1}}],[\"题解思路\",{\"0\":{\"484\":1}}],[\"题目内容\",{\"0\":{\"481\":1}}],[\"换句话说\",{\"1\":{\"481\":1}}],[\"换到\",{\"1\":{\"112\":1}}],[\"满二叉树\",{\"1\":{\"589\":1}}],[\"满足\",{\"1\":{\"481\":1}}],[\"满天飞\",{\"1\":{\"202\":1}}],[\"给你一个正整数\",{\"1\":{\"481\":1}}],[\"给所有注册的监听器\",{\"1\":{\"135\":1}}],[\"散列存储\",{\"1\":{\"495\":1}}],[\"散列表\",{\"0\":{\"478\":1}}],[\"散列查找等\",{\"1\":{\"462\":1}}],[\"散列查找\",{\"1\":{\"462\":1}}],[\"红黑树\",{\"0\":{\"476\":1}}],[\"规定每个结点若无左子树\",{\"1\":{\"596\":1}}],[\"规定在插入和删除结点时\",{\"1\":{\"472\":1}}],[\"规范的双下划线和破折号太长或者奇怪\",{\"1\":{\"324\":1}}],[\"规范的单元测试\",{\"0\":{\"241\":1}}],[\"规范\",{\"0\":{\"271\":1}}],[\"规范什么的就更别提了\",{\"1\":{\"202\":1}}],[\"规范命名\",{\"0\":{\"117\":1}}],[\"降低二叉排序树的性能\",{\"1\":{\"472\":1}}],[\"降低系统维护成本\",{\"1\":{\"103\":1}}],[\"直接插入排序在空间上使用了常数个辅助单元\",{\"1\":{\"489\":1}}],[\"直接插入排序\",{\"0\":{\"489\":1}}],[\"直接连起来\",{\"1\":{\"481\":1}}],[\"直接前驱\",{\"1\":{\"470\":2}}],[\"直到全部记录插入完成\",{\"1\":{\"488\":1}}],[\"直到找完为止\",{\"1\":{\"455\":1}}],[\"直到自己负责这些项目打包上线的时候\",{\"1\":{\"217\":1}}],[\"直到请求被批准或拒绝\",{\"1\":{\"128\":1}}],[\"直到有一个处理器处理该异常\",{\"1\":{\"128\":1}}],[\"直到有一个处理器处理该命令\",{\"1\":{\"128\":1}}],[\"直到有一个处理器处理了该事件\",{\"1\":{\"128\":1}}],[\"直到有一个处理器确认用户具有足够的权限或到达链的末尾\",{\"1\":{\"128\":1}}],[\"直到有一个对象处理它为止\",{\"1\":{\"124\":1}}],[\"直到现在我看到某种设计模式还会想到当时书中的案例\",{\"1\":{\"101\":1}}],[\"插入删除慢\",{\"1\":{\"526\":1}}],[\"插入和删除操作的时间复杂度仅为o\",{\"1\":{\"519\":2}}],[\"插入和删除后非常频繁的调整全树整体拓扑结构代价太大\",{\"1\":{\"476\":1}}],[\"插入结点\",{\"0\":{\"516\":1}}],[\"插入操作\",{\"1\":{\"506\":1}}],[\"插入排序是一种简单直观的插入排序\",{\"1\":{\"488\":1}}],[\"插入排序\",{\"0\":{\"488\":1}}],[\"插入\",{\"0\":{\"469\":1,\"473\":1}}],[\"插入语\",{\"0\":{\"50\":1}}],[\"沿着某个分支逐层向下比较的过程\",{\"1\":{\"468\":1}}],[\"又可采用链式存储结构\",{\"1\":{\"598\":1}}],[\"又能利用数组元素的下标确定结点的位置以及结点的关系\",{\"1\":{\"592\":1}}],[\"又能使\",{\"1\":{\"566\":1}}],[\"又使主机提升了效率\",{\"1\":{\"566\":1}}],[\"又称终端结点\",{\"1\":{\"586\":1}}],[\"又称非终端结点\",{\"1\":{\"586\":1}}],[\"又称队首\",{\"1\":{\"554\":1}}],[\"又称为游标\",{\"1\":{\"525\":1}}],[\"又允许顶点通过一条边和自身关联\",{\"1\":{\"530\":1}}],[\"又适于快速查找\",{\"1\":{\"465\":1}}],[\"又出现了\",{\"1\":{\"239\":1}}],[\"既然可以两边同时进队\",{\"1\":{\"560\":1}}],[\"既然只有master一条分支\",{\"1\":{\"287\":1}}],[\"既不能由输入受限的双端队列得到\",{\"1\":{\"560\":1}}],[\"既有左子树又有右子树\",{\"1\":{\"470\":1}}],[\"既有动态结构\",{\"1\":{\"465\":1}}],[\"且仅访问一次\",{\"1\":{\"603\":1}}],[\"且含有2h\",{\"1\":{\"589\":1}}],[\"且该结点只有左孩子\",{\"1\":{\"589\":1}}],[\"且该结点\",{\"1\":{\"589\":1}}],[\"且权值越小的结点到根结点的路径长度越大\",{\"1\":{\"581\":1}}],[\"且要求元素按关键字有序排列\",{\"1\":{\"464\":1}}],[\"且必须出现在\",{\"1\":{\"317\":1}}],[\"判队列空\",{\"1\":{\"555\":1}}],[\"判空操作\",{\"1\":{\"506\":1,\"578\":1}}],[\"判定树是一颗平衡二叉树\",{\"1\":{\"464\":1}}],[\"判断图g是否存在边<x\",{\"1\":{\"548\":1}}],[\"判断一个栈是否为空\",{\"1\":{\"569\":1}}],[\"判断一个\",{\"0\":{\"397\":1}}],[\"判断内存某个位置的值是否为预期值\",{\"1\":{\"380\":1}}],[\"判断错误计数器是否为0\",{\"1\":{\"237\":1}}],[\"判断和\",{\"1\":{\"122\":1}}],[\"结点值\",{\"1\":{\"601\":1}}],[\"结点所在的深度为\",{\"1\":{\"590\":1}}],[\"结点的完全二叉树的高度为\",{\"1\":{\"590\":1}}],[\"结点的高度从叶子结点开始自底向上逐层累加\",{\"1\":{\"586\":1}}],[\"结点的深度是从根结点开始自顶向下逐层累加\",{\"1\":{\"586\":1}}],[\"结点的层次从根结点开始\",{\"1\":{\"586\":1}}],[\"结点也有数据域和指针域\",{\"1\":{\"525\":1}}],[\"结点中的值为该记录的关键字值\",{\"1\":{\"464\":1}}],[\"结构中的数据元素之间存在多对多的关系\",{\"1\":{\"494\":1}}],[\"结构中的数据元素之间存在一对多的关系\",{\"1\":{\"494\":1}}],[\"结构中的数据元素之间只存在一对一的关系\",{\"1\":{\"494\":1}}],[\"结构中的数据结构元素除了同属一个集合外\",{\"1\":{\"494\":1}}],[\"结构类型\",{\"1\":{\"492\":1}}],[\"结合双方的优点\",{\"1\":{\"428\":1}}],[\"结合网络上的综合评价来看总\",{\"1\":{\"428\":1}}],[\"结合了\",{\"1\":{\"329\":1}}],[\"结合这种思想\",{\"1\":{\"324\":1}}],[\"结合目前的\",{\"1\":{\"324\":1}}],[\"结合自己之前公司和自己使用的经验在新公司发扬光大\",{\"1\":{\"282\":1}}],[\"称这种编码方式为固定长度编码\",{\"1\":{\"582\":1}}],[\"称这两个串是相等的\",{\"1\":{\"573\":1}}],[\"称为结点k的祖先\",{\"1\":{\"586\":1}}],[\"称为空树\",{\"1\":{\"585\":1}}],[\"称为该结点的带权路径长\",{\"1\":{\"580\":1}}],[\"称为该结点的权\",{\"1\":{\"580\":1}}],[\"称为截断\",{\"1\":{\"575\":1}}],[\"称为判定树\",{\"1\":{\"464\":1}}],[\"称呼\",{\"0\":{\"74\":1}}],[\"效率不高的原因是因为递归调用过程会产生重复运算\",{\"1\":{\"564\":1}}],[\"效率分析\",{\"0\":{\"471\":1}}],[\"效率低\",{\"1\":{\"463\":1,\"547\":1}}],[\"效率更高\",{\"1\":{\"341\":1}}],[\"找到关键字则跳出循环\",{\"1\":{\"463\":1}}],[\"找的工作可能直奔\",{\"1\":{\"95\":1}}],[\"哨兵\",{\"1\":{\"463\":2}}],[\"折半查找的过程可以用二叉树来描述\",{\"1\":{\"464\":1}}],[\"折半查找仅适用于有序的顺序表\",{\"1\":{\"464\":1}}],[\"折半查找\",{\"0\":{\"464\":1},\"1\":{\"462\":1}}],[\"平衡二叉树\",{\"0\":{\"472\":1},\"1\":{\"589\":1}}],[\"平方阶还是指数阶\",{\"1\":{\"459\":1}}],[\"平均查找长度asl=\",{\"1\":{\"465\":1}}],[\"平均查找长度是衡量查找算法效率的最主要的指标\",{\"1\":{\"462\":1}}],[\"平均时间复杂度可以体现算法在随机数据下的运行效率\",{\"1\":{\"458\":1}}],[\"平均和最差时间复杂度\",{\"1\":{\"458\":1}}],[\"平台的浪潮下\",{\"1\":{\"282\":1}}],[\"记录按关键字有序也均可\",{\"1\":{\"463\":1}}],[\"记录方法的调用信息\",{\"1\":{\"392\":1}}],[\"记为g=\",{\"1\":{\"528\":1}}],[\"记为\",{\"1\":{\"458\":1,\"459\":1}}],[\"紧密结合\",{\"1\":{\"457\":1}}],[\"健壮性和高效率与地存储量的需求\",{\"1\":{\"456\":1}}],[\"健康状态变更等\",{\"1\":{\"430\":1}}],[\"健康状况和指标数据\",{\"1\":{\"430\":1}}],[\"健康检查和管理\",{\"1\":{\"430\":1}}],[\"输入顺序为1\",{\"1\":{\"560\":1}}],[\"输入受限的双端队列\",{\"1\":{\"559\":1}}],[\"输入受限的队列只允许在一端进行插入删除\",{\"1\":{\"559\":1}}],[\"输入\",{\"1\":{\"456\":1,\"483\":2}}],[\"输出的数据速度比打印机的速度快得多\",{\"1\":{\"566\":1}}],[\"输出受限的双端队列\",{\"1\":{\"559\":1}}],[\"输出受限的队列只允许在一端进行插入和删除\",{\"1\":{\"559\":1}}],[\"输出操作\",{\"1\":{\"506\":1}}],[\"输出fallback\",{\"1\":{\"400\":1,\"401\":1}}],[\"输出hello\",{\"1\":{\"399\":1,\"402\":1,\"403\":1}}],[\"输出\",{\"1\":{\"298\":1,\"456\":1,\"483\":2}}],[\"输出十个\",{\"1\":{\"298\":1}}],[\"货币找零\",{\"1\":{\"455\":1}}],[\"慢慢的就会让一堆无序的牌堆变成有序的手牌\",{\"1\":{\"455\":1}}],[\"慢慢的才觉得可视化是真香啊\",{\"1\":{\"179\":1}}],[\"灵活\",{\"1\":{\"453\":1}}],[\"灵活性和可扩展性\",{\"1\":{\"126\":1}}],[\"轻量\",{\"1\":{\"453\":1}}],[\"轻量级的方式来处理路由\",{\"1\":{\"423\":1}}],[\"轻量级锁\",{\"0\":{\"374\":1},\"1\":{\"372\":2,\"375\":1}}],[\"算得上是分庭抗争了\",{\"1\":{\"453\":1}}],[\"算法思想如下\",{\"1\":{\"562\":1}}],[\"算法的空间复杂度是\",{\"1\":{\"459\":1}}],[\"算法的时间复杂度不是固定的\",{\"1\":{\"458\":1}}],[\"算法的效率是时间复杂度和空间复杂度的综合\",{\"1\":{\"459\":1}}],[\"算法的效率\",{\"0\":{\"457\":1}}],[\"算法通常可以基于不同的数据结构进行实现\",{\"1\":{\"457\":1}}],[\"算法是数据结构发挥作用的舞台\",{\"1\":{\"457\":1}}],[\"算法是对特定问题求解步骤的一种描述\",{\"1\":{\"456\":1}}],[\"算法和数据结构高度相关\",{\"1\":{\"457\":1}}],[\"算法中的最深层循环内的语句的频度与\",{\"1\":{\"458\":1}}],[\"算法中所有语句的频度之和记为\",{\"1\":{\"458\":1}}],[\"算法中描述的操作都可以通过已经实现的基本运算执行有限次来实现\",{\"1\":{\"456\":1}}],[\"算法中每条指令都应该有确切的含义\",{\"1\":{\"456\":1}}],[\"算法五大特性\",{\"1\":{\"456\":1}}],[\"算法无处不在\",{\"0\":{\"455\":1}}],[\"算法\",{\"0\":{\"92\":1,\"346\":1},\"1\":{\"92\":2}}],[\"隐式授权流程\",{\"1\":{\"451\":1}}],[\"受保护资源服务器托管受保护的用户数据或服务\",{\"1\":{\"451\":1}}],[\"受保护资源服务器\",{\"1\":{\"451\":1}}],[\"身份和授权服务器将访问令牌颁发给客户端\",{\"1\":{\"451\":1}}],[\"身份和授权服务器验证资源所有者的身份\",{\"1\":{\"451\":1}}],[\"身份和授权服务器负责验证资源所有者的身份\",{\"1\":{\"451\":1}}],[\"身份和授权服务器\",{\"1\":{\"451\":1}}],[\"身份认证等\",{\"1\":{\"384\":1,\"392\":1}}],[\"承载了用户身份信息和其他必要的声明\",{\"1\":{\"448\":1}}],[\"继承下面的\",{\"1\":{\"445\":1}}],[\"暴露给监控全部接口\",{\"1\":{\"437\":1}}],[\"端点的交互\",{\"1\":{\"430\":1}}],[\"端口的概率就是\",{\"1\":{\"165\":1}}],[\"管理界面能够及时更新应用程序的状态和信息\",{\"1\":{\"430\":1}}],[\"管理员将\",{\"1\":{\"289\":1}}],[\"携程的\",{\"1\":{\"428\":1}}],[\"心跳和健康检查\",{\"1\":{\"428\":1}}],[\"弹性和灵活性提供了重要的基础设施\",{\"1\":{\"428\":1}}],[\"兼顾实时性和一致性来管理动态配置\",{\"1\":{\"426\":1}}],[\"兼容查询结果强转为list\",{\"1\":{\"229\":1}}],[\"感知配置变化的延时就短\",{\"1\":{\"426\":1}}],[\"感觉身边的\",{\"1\":{\"291\":1}}],[\"感觉自己的\",{\"1\":{\"291\":1}}],[\"感觉命令行窗口酷炫得很\",{\"1\":{\"179\":1}}],[\"轮询频率高\",{\"1\":{\"426\":1}}],[\"轮询频率低感知配置变化的延时就长\",{\"1\":{\"426\":1}}],[\"轮训\",{\"0\":{\"164\":1}}],[\"限流等功能\",{\"1\":{\"423\":1}}],[\"限定词\",{\"0\":{\"52\":1}}],[\"断路器\",{\"1\":{\"423\":1}}],[\"网飞的\",{\"1\":{\"428\":1}}],[\"网关是一个通用的概念\",{\"1\":{\"423\":1}}],[\"网络上常见的定时任务场景有以下几种\",{\"1\":{\"231\":1}}],[\"网络异常\",{\"1\":{\"128\":1}}],[\"请你返回\",{\"1\":{\"481\":1}}],[\"请你将它分割成两个非负整数\",{\"1\":{\"481\":1}}],[\"请预览下面官方文档的链接进行研读\",{\"1\":{\"453\":1}}],[\"请点击下方官网链接访问\",{\"1\":{\"428\":1}}],[\"请开始之前参考选择\",{\"1\":{\"421\":1}}],[\"请求统计等\",{\"1\":{\"430\":1}}],[\"请求来自于一个特别指定了\",{\"1\":{\"415\":1}}],[\"请求来自于一个\",{\"1\":{\"414\":1}}],[\"请求类型\",{\"1\":{\"413\":1}}],[\"请求时\",{\"1\":{\"413\":1}}],[\"请求时一定要保证服务端正常开启\",{\"1\":{\"278\":1}}],[\"请求数据\",{\"1\":{\"409\":1}}],[\"请求进行审核\",{\"1\":{\"289\":1}}],[\"请求\",{\"1\":{\"266\":2}}],[\"请求方法就可以看到返回的\",{\"1\":{\"225\":1}}],[\"请求入参\",{\"1\":{\"224\":1}}],[\"请求参数\",{\"1\":{\"130\":1}}],[\"请求参数的类型\",{\"1\":{\"130\":1}}],[\"请求沿着责任链传递\",{\"1\":{\"128\":1}}],[\"请求沿着过滤器链传递\",{\"1\":{\"128\":1}}],[\"请求从一个审批者传递到下一个审批者\",{\"1\":{\"128\":1}}],[\"请求处理管道\",{\"1\":{\"128\":1}}],[\"请求可能会到达链的末端而未被处理\",{\"1\":{\"127\":1}}],[\"请求会沿着链传递\",{\"1\":{\"124\":1}}],[\"唯一要注意的就是组件版本对应的问题\",{\"1\":{\"421\":1}}],[\"详情在下面的\",{\"1\":{\"421\":1}}],[\"详尽版\",{\"1\":{\"291\":1}}],[\"罗列一下\",{\"1\":{\"421\":1}}],[\"没有一个完整的体系\",{\"1\":{\"421\":1}}],[\"没想到\",{\"1\":{\"202\":1}}],[\"微服务中的使用\",{\"0\":{\"428\":1}}],[\"微服务架构的核心概念是\",{\"1\":{\"420\":1}}],[\"微服务架构如雨后春笋彻底发展起来了\",{\"1\":{\"420\":1}}],[\"微服务的出现\",{\"0\":{\"420\":1}}],[\"微服务之路\",{\"0\":{\"418\":1}}],[\"冲\",{\"1\":{\"419\":1}}],[\"冲突解决之后合并\",{\"1\":{\"289\":1}}],[\"稳重求进\",{\"1\":{\"419\":1}}],[\"希望大家能在学习新技术的同时夯实基础\",{\"1\":{\"419\":1}}],[\"希望以后可以学习到其他更优实践\",{\"1\":{\"215\":1}}],[\"蜂拥而至的新人都直接选择加入使用框架的队伍来瓜分互联网的红利\",{\"1\":{\"419\":1}}],[\"技术更新愈发频繁\",{\"1\":{\"419\":1}}],[\"技术框架\",{\"0\":{\"84\":1}}],[\"根a到k的唯一路径到的任意点\",{\"1\":{\"586\":1}}],[\"根结点下标为0\",{\"1\":{\"599\":1}}],[\"根结点一定在讲中序序列分割为两个子序列\",{\"1\":{\"595\":1}}],[\"根结点为第一层\",{\"1\":{\"586\":1}}],[\"根结点没有直接上层结点\",{\"1\":{\"585\":1}}],[\"根结点外的所有结点有且只有一个前驱\",{\"1\":{\"585\":1}}],[\"根结点是黑色的\",{\"1\":{\"476\":1}}],[\"根本找不到满意的工作\",{\"1\":{\"419\":1}}],[\"根本找不到\",{\"1\":{\"419\":1}}],[\"根据这两个子序列在先序序列中根据同样的规律找到左右子树的根结点\",{\"1\":{\"595\":1}}],[\"根据二叉树的性质\",{\"1\":{\"592\":1}}],[\"根据规则\",{\"1\":{\"568\":1}}],[\"根据元素的关键字直接计算出元素的存储地址\",{\"1\":{\"495\":1}}],[\"根据数据元素是否完全在内存中\",{\"1\":{\"487\":1}}],[\"根据不同情况我们可以得到算法的最佳\",{\"1\":{\"458\":1}}],[\"根据指令集并行技术\",{\"1\":{\"380\":1}}],[\"根据约定的名义本金和利率进行一次或多次利息交换的产品\",{\"1\":{\"368\":1}}],[\"根据实际需求调整\",{\"1\":{\"364\":1}}],[\"根据安装指引可能根据个人不同的选项初始化出目录结构不太相同的项目\",{\"1\":{\"332\":1}}],[\"根据工程开发参与者的数量和便利我们可以有很多种开发流程\",{\"1\":{\"287\":1}}],[\"根据现有的上线模式\",{\"1\":{\"286\":1}}],[\"根据系统需求规定好核心线程数\",{\"1\":{\"207\":1}}],[\"根据官方文档下载指定操作系统的安装包安装即可\",{\"1\":{\"185\":1}}],[\"根据请求携带的\",{\"1\":{\"177\":1}}],[\"根据请求携带的路径进行定向请求\",{\"1\":{\"176\":1}}],[\"根据后端服务器响应时间请求转发\",{\"1\":{\"169\":1}}],[\"根据\",{\"1\":{\"168\":1,\"220\":1}}],[\"根据客户端的\",{\"1\":{\"166\":1}}],[\"根据责任链组件标识将组件分类\",{\"1\":{\"130\":1}}],[\"遵循的过程\",{\"1\":{\"411\":1}}],[\"遵循老项目不能大刀阔斧的原则\",{\"1\":{\"229\":1}}],[\"响应到客户端\",{\"1\":{\"409\":1}}],[\"响应式并不需要\",{\"1\":{\"347\":1}}],[\"响应式的对象会多出一层\",{\"1\":{\"347\":1}}],[\"响应式\",{\"0\":{\"347\":1}}],[\"媒体类型和浏览器能理解的压缩格式等等\",{\"1\":{\"409\":1}}],[\"浏览器\",{\"1\":{\"409\":4,\"413\":1}}],[\"浏览器或其他\",{\"1\":{\"409\":1}}],[\"浏览器会显示跳转后的url地址\",{\"1\":{\"171\":2}}],[\"须要实现类重写\",{\"1\":{\"394\":1}}],[\"计数器等\",{\"1\":{\"392\":1}}],[\"计算属性允许我们声明性地计算衍生值\",{\"1\":{\"352\":1}}],[\"计算属性\",{\"0\":{\"351\":1},\"1\":{\"351\":1}}],[\"计算得出的\",{\"1\":{\"294\":1}}],[\"计算七天前的曰期\",{\"1\":{\"236\":1}}],[\"计算机上非数值处理的对象基本都是字符串\",{\"1\":{\"573\":1}}],[\"计算机组成原理\",{\"1\":{\"419\":1}}],[\"计算机组成与设计\",{\"1\":{\"91\":1}}],[\"计算机四大天书\",{\"1\":{\"419\":1}}],[\"计算机网络\",{\"1\":{\"91\":1,\"419\":1}}],[\"计算机操作系统\",{\"1\":{\"91\":1,\"419\":1}}],[\"拦截器的intercept方法将被调用\",{\"1\":{\"390\":1}}],[\"假设表达式中允许包含两种括号\",{\"1\":{\"562\":1}}],[\"假设图g中顶点y是顶点x的一个邻接点\",{\"1\":{\"548\":1}}],[\"假设我们有一个简单的接口\",{\"1\":{\"388\":1}}],[\"假如之前从\",{\"1\":{\"289\":1}}],[\"该数值称为该边的权值\",{\"1\":{\"537\":1}}],[\"该查找方法仅适用于顺序存储结构\",{\"1\":{\"464\":1}}],[\"该淘汰的技术\",{\"1\":{\"419\":1}}],[\"该文档的格式可以是多种多样的\",{\"1\":{\"409\":1}}],[\"该接口定义了一个intercept方法\",{\"1\":{\"391\":1}}],[\"该接口是目标对象和代理对象共同实现的接口\",{\"1\":{\"388\":1}}],[\"该方法接受三个参数\",{\"1\":{\"388\":1}}],[\"该类负责处理代理对象的方法调用\",{\"1\":{\"388\":1}}],[\"该属性是公有属性不是私有属性\",{\"1\":{\"304\":1}}],[\"示例\",{\"0\":{\"483\":1},\"1\":{\"483\":2}}],[\"示例中代理对象通过反射的方式调用目标对象的方法\",{\"1\":{\"392\":1}}],[\"示例思路\",{\"0\":{\"387\":1,\"390\":1}}],[\"示意图如下所示\",{\"1\":{\"379\":1}}],[\"延迟加载\",{\"1\":{\"384\":1}}],[\"什么不要为了用技术而用技术\",{\"1\":{\"419\":1}}],[\"什么8080\",{\"1\":{\"419\":1}}],[\"什么\",{\"1\":{\"382\":1,\"419\":2}}],[\"什么是算法\",{\"0\":{\"456\":1}}],[\"什么是动态代理\",{\"0\":{\"384\":1}}],[\"什么是\",{\"1\":{\"362\":1}}],[\"什么是观察者模式\",{\"0\":{\"132\":1}}],[\"什么是责任链模式\",{\"0\":{\"124\":1}}],[\"搜索到的结果是\",{\"1\":{\"382\":1}}],[\"搜索引擎也引来了巨大革新\",{\"1\":{\"2\":1}}],[\"出栈\",{\"1\":{\"569\":1}}],[\"出栈元素不同排列的个数为\",{\"1\":{\"568\":1}}],[\"出队\",{\"1\":{\"555\":1}}],[\"出现的情况\",{\"1\":{\"407\":1}}],[\"出于兴趣我就想简单瞥一眼到底是如何调用的\",{\"1\":{\"382\":1}}],[\"出参打印是否打印\",{\"1\":{\"224\":1}}],[\"今天都得给我整明白\",{\"1\":{\"382\":1}}],[\"今天在复习微服务的时候看到\",{\"1\":{\"382\":1}}],[\"今年居然比去年更贵了\",{\"1\":{\"115\":1}}],[\"缓冲行\",{\"1\":{\"380\":1}}],[\"缓存管理\",{\"1\":{\"384\":1,\"392\":1}}],[\"缓存中可以分配的最小单位\",{\"1\":{\"380\":1}}],[\"缓存\",{\"1\":{\"200\":1,\"222\":1}}],[\"缓存和消息代理\",{\"1\":{\"198\":1}}],[\"缓存等\",{\"1\":{\"145\":1}}],[\"缓存更新等\",{\"1\":{\"136\":1}}],[\"属于语言级别的内存模型\",{\"1\":{\"380\":1}}],[\"属性给予了\",{\"1\":{\"347\":1}}],[\"属性\",{\"1\":{\"304\":1}}],[\"属性来决定是否执行\",{\"1\":{\"220\":1}}],[\"决定一个线程对共享变量的写入何时对另一个线程可见\",{\"1\":{\"379\":1}}],[\"控制\",{\"1\":{\"379\":1}}],[\"控制反转\",{\"1\":{\"222\":1}}],[\"循环队列\",{\"0\":{\"557\":1}}],[\"循环双链表即为头结点的prior指向尾结点\",{\"1\":{\"524\":1}}],[\"循环双链表\",{\"0\":{\"524\":1}}],[\"循环单链表和单链表的区别就是最后一个结点的指针不是\",{\"1\":{\"523\":1}}],[\"循环单链表\",{\"0\":{\"523\":1}}],[\"循环链表\",{\"0\":{\"522\":1}}],[\"循环时间开销大和只能保证一个变量的原子操作等\",{\"1\":{\"376\":1}}],[\"循环就好了\",{\"1\":{\"122\":1}}],[\"问答系统和自然语言翻译等都是以字符串作为处理对象\",{\"1\":{\"573\":1}}],[\"问题\",{\"1\":{\"376\":1}}],[\"问过一些从事前端的朋友\",{\"1\":{\"331\":1}}],[\"追求吞吐量\",{\"1\":{\"375\":1}}],[\"追求响应时间\",{\"1\":{\"375\":1}}],[\"始终得不到锁的线程会自旋消耗\",{\"1\":{\"375\":1}}],[\"竞争线程不会阻塞\",{\"1\":{\"375\":1}}],[\"加快了查找结点前驱和后继的速度\",{\"1\":{\"596\":1}}],[\"加锁和解锁不需要额外消耗\",{\"1\":{\"375\":1}}],[\"加载一下添加的配置\",{\"1\":{\"156\":1}}],[\"级别由低到高分别是\",{\"1\":{\"372\":1}}],[\"锁竞争会带来额外的锁撤销的消耗\",{\"1\":{\"375\":1}}],[\"锁\",{\"1\":{\"375\":1}}],[\"锁并不会存在多线程的竞争\",{\"1\":{\"373\":1}}],[\"锁一共有四种状态\",{\"1\":{\"372\":1}}],[\"锁的是\",{\"1\":{\"372\":1}}],[\"锁的是当前类的\",{\"1\":{\"372\":1}}],[\"锁的是当前的实例对象\",{\"1\":{\"372\":1}}],[\"偏向锁提供了一种竞争出现才会释放的锁机制\",{\"1\":{\"373\":1}}],[\"偏向锁\",{\"0\":{\"373\":1},\"1\":{\"372\":2,\"375\":1}}],[\"他必须先获得锁\",{\"1\":{\"372\":1}}],[\"他们分别通过各自的终端向操作系统提出占用\",{\"1\":{\"566\":1}}],[\"他们大部分都还在用\",{\"1\":{\"331\":1}}],[\"他们对程序的效率就好比赛车手对速度的执着一样\",{\"1\":{\"122\":1}}],[\"括号里的配置对象\",{\"1\":{\"372\":1}}],[\"成功的asl为\",{\"1\":{\"463\":1}}],[\"成功\",{\"1\":{\"374\":1}}],[\"成本更低\",{\"1\":{\"371\":1}}],[\"成熟\",{\"1\":{\"217\":1}}],[\"↩︎\",{\"1\":{\"368\":1,\"380\":4}}],[\"报价\",{\"1\":{\"368\":1}}],[\"背景\",{\"0\":{\"368\":1}}],[\"初始设置一个空栈\",{\"1\":{\"562\":1}}],[\"初始\",{\"0\":{\"363\":1}}],[\"初始化方法\",{\"1\":{\"593\":1}}],[\"初始化一个空栈\",{\"1\":{\"569\":1}}],[\"初始化队列\",{\"1\":{\"555\":1}}],[\"初始化节点\",{\"1\":{\"511\":1,\"519\":1}}],[\"初始化表\",{\"1\":{\"506\":1}}],[\"初始化后调用\",{\"1\":{\"411\":1}}],[\"初始化目录\",{\"1\":{\"332\":1}}],[\"初始化错误计数器\",{\"1\":{\"237\":1}}],[\"理念\",{\"1\":{\"362\":1}}],[\"性能监控\",{\"1\":{\"384\":1,\"392\":1}}],[\"性能测试\",{\"1\":{\"362\":1}}],[\"性能问题\",{\"1\":{\"127\":1}}],[\"彻底抛弃了每次手动执行带来的问题\",{\"1\":{\"362\":1}}],[\"经历进行归纳和整理\",{\"1\":{\"362\":1}}],[\"经常因为手册不明确和包有问题而导致上线失败\",{\"1\":{\"362\":1}}],[\"经典写法为\",{\"1\":{\"324\":1}}],[\"统一的制品仓库\",{\"1\":{\"362\":1}}],[\"统一加上工具类中的脱敏方法\",{\"1\":{\"225\":1}}],[\"少年\",{\"1\":{\"362\":1}}],[\"移动端\",{\"1\":{\"361\":1}}],[\"移除或重新排序处理者\",{\"1\":{\"126\":1}}],[\"若无右子树\",{\"1\":{\"596\":1}}],[\"若无向图是非连通的\",{\"1\":{\"552\":1}}],[\"若无向图是连通的\",{\"1\":{\"552\":1}}],[\"若无向边\",{\"1\":{\"548\":2}}],[\"若n为偶数\",{\"1\":{\"589\":1}}],[\"若n为奇数\",{\"1\":{\"589\":1}}],[\"若有右孩子\",{\"1\":{\"589\":1}}],[\"若有左孩子\",{\"1\":{\"589\":1}}],[\"若有双亲则双亲为\",{\"1\":{\"589\":1}}],[\"若有度为1的结点\",{\"1\":{\"589\":1}}],[\"若有自定义初始化脚本\",{\"1\":{\"364\":1}}],[\"若\",{\"1\":{\"589\":1}}],[\"若某个节点只有一个孩子\",{\"1\":{\"588\":1}}],[\"若没有一个编码是另一个编码的前缀\",{\"1\":{\"582\":1}}],[\"若没有则新建并返回一个以该字符串参数为名称的\",{\"1\":{\"305\":1}}],[\"若允许对不同字符用不等长的二进制表示\",{\"1\":{\"582\":1}}],[\"若对每个字符用相等长度的二进制位表示\",{\"1\":{\"582\":1}}],[\"若对一个\",{\"1\":{\"500\":1}}],[\"若是操作符\",{\"1\":{\"563\":1}}],[\"若是左括号\",{\"1\":{\"562\":1}}],[\"若是右括号\",{\"1\":{\"562\":1}}],[\"若是平衡二叉树\",{\"1\":{\"471\":1}}],[\"若从初始点到图中的每个顶点都有路径\",{\"1\":{\"552\":1}}],[\"若从u到v根本不存在路径\",{\"1\":{\"541\":1}}],[\"若从顶点v到顶点w有路径存在\",{\"1\":{\"533\":1}}],[\"若一个图有n个顶点\",{\"1\":{\"539\":1}}],[\"若一个查找表的操作只涉及上述操作1和2\",{\"1\":{\"462\":1}}],[\"若痛中的顶点树为n\",{\"1\":{\"535\":1}}],[\"若图中任何一对顶点都是强连通的\",{\"1\":{\"534\":1}}],[\"若图g中任意两个顶点都是连通的\",{\"1\":{\"533\":1}}],[\"若图g中某两个顶点之间的边数大于1条\",{\"1\":{\"530\":1}}],[\"若e是无向边的有限集合则图g为无向图\",{\"1\":{\"529\":1}}],[\"若采用常规的方法存储稀疏矩阵\",{\"1\":{\"503\":1}}],[\"若导致了不平衡则先找到插入路径上离插入结点最近的平衡因子的绝对值大于\",{\"1\":{\"473\":1}}],[\"若结点\",{\"1\":{\"470\":2}}],[\"若被删除的结点\",{\"1\":{\"470\":1}}],[\"若小于根结点值\",{\"1\":{\"469\":1}}],[\"若原二叉树为空\",{\"1\":{\"469\":1}}],[\"若不相同则在根结点的左子树寻找\",{\"1\":{\"468\":1}}],[\"若不等\",{\"1\":{\"464\":1}}],[\"若相同则返回成功\",{\"1\":{\"468\":1}}],[\"若相等\",{\"1\":{\"464\":1}}],[\"若二叉排序树非空\",{\"1\":{\"468\":1}}],[\"若右子树非空\",{\"1\":{\"467\":1}}],[\"若左子树非空\",{\"1\":{\"467\":1}}],[\"若组件实例是缓存树的一部分\",{\"1\":{\"353\":3}}],[\"挂载实例到\",{\"1\":{\"353\":1}}],[\"然而\",{\"1\":{\"448\":1}}],[\"然而在有些情况下\",{\"1\":{\"352\":1}}],[\"然后从v出发\",{\"1\":{\"550\":1}}],[\"然后从二叉排序树删去找个直接后继\",{\"1\":{\"470\":1}}],[\"然后再对\",{\"1\":{\"473\":1}}],[\"然后再缩小的范围内继续进行同样的查找\",{\"1\":{\"464\":1}}],[\"然后翻到a开头\",{\"1\":{\"455\":1}}],[\"然后简单实现该接口\",{\"1\":{\"388\":1}}],[\"然后线程b到住内存去读取线程a之前已经更新的共享变量\",{\"1\":{\"379\":1}}],[\"然后检测持有偏向锁的线程是否活着\",{\"1\":{\"373\":1}}],[\"然后编写这的上线手册\",{\"1\":{\"362\":1}}],[\"然后改变了这个\",{\"1\":{\"347\":1}}],[\"然后只会更新实际变化的部分\",{\"1\":{\"346\":1}}],[\"然后进行操作处理\",{\"1\":{\"313\":1}}],[\"然后对其中的变量进行赋值\",{\"1\":{\"299\":1}}],[\"然后把个别个性的代码告诉你让你改\",{\"1\":{\"291\":1}}],[\"然后调用代理类就可以进行数据访问了\",{\"1\":{\"278\":1}}],[\"然后声明行为\",{\"1\":{\"246\":1}}],[\"然后根据变量名获取环境变量中已经生效的值和文件中的变量值进行比较即可\",{\"1\":{\"237\":1}}],[\"然后添加以下内容\",{\"1\":{\"236\":1}}],[\"然后在系统运行时\",{\"1\":{\"222\":1}}],[\"然后匹配赋值即可\",{\"1\":{\"214\":1}}],[\"然后通过\",{\"1\":{\"164\":1}}],[\"然后使用\",{\"1\":{\"153\":1,\"374\":1}}],[\"然后就需要提到前端一个跨时代的产物\",{\"1\":{\"148\":1}}],[\"然后说一下\",{\"1\":{\"148\":1}}],[\"然后\",{\"1\":{\"134\":1,\"347\":1,\"387\":1}}],[\"浅层响应式\",{\"1\":{\"348\":1}}],[\"浅聊微服务配置和注册中心\",{\"0\":{\"425\":1}}],[\"浅聊微服务网关\",{\"0\":{\"423\":1}}],[\"浅聊\",{\"0\":{\"266\":1}}],[\"浅聊aop\",{\"0\":{\"222\":1}}],[\"改变嵌套对象或数组时\",{\"1\":{\"348\":1}}],[\"传入实参等开辟了递归工作栈来进行数据存储\",{\"1\":{\"564\":1}}],[\"传统的静态配置方式要想修改某个配置只能修改之后重新发布应用\",{\"1\":{\"426\":1}}],[\"传统的单体应用程序在面对快速变化的需求时往往显得笨重且难以满足这些要求\",{\"1\":{\"420\":1}}],[\"传递给函数\",{\"1\":{\"347\":1}}],[\"传输\",{\"1\":{\"266\":1}}],[\"何时被访问或修改\",{\"1\":{\"347\":1}}],[\"树和森林的遍历\",{\"0\":{\"603\":1}}],[\"树和二叉树\",{\"0\":{\"584\":1}}],[\"树和二叉树的应用\",{\"0\":{\"579\":1}}],[\"树转换为二叉树的规则\",{\"1\":{\"602\":1}}],[\"树\",{\"0\":{\"597\":1,\"602\":1}}],[\"树上任意一个结点的左子树和右子树的深度之差不超过1\",{\"1\":{\"589\":1}}],[\"树作为一种逻辑结构\",{\"1\":{\"585\":1}}],[\"树是\",{\"1\":{\"585\":1}}],[\"树中结点的序号可以唯一的反应结点之间的逻辑结构\",{\"1\":{\"592\":1}}],[\"树中结点最大的度称为树的度\",{\"1\":{\"586\":1}}],[\"树中结点常常被赋予一个表示某种意义的数值\",{\"1\":{\"580\":1}}],[\"树中一个结点的孩子总数称为该结点的度\",{\"1\":{\"586\":1}}],[\"树中的结点数等于所有结点的度之和加一\",{\"1\":{\"587\":1}}],[\"树中的结点从左到右是有次序的\",{\"1\":{\"586\":1}}],[\"树中的两个结点之间的路径是由这两个结点之间所经过的的结点序列构成的\",{\"1\":{\"586\":1}}],[\"树中的所有所有结点都可以有零个或多个前驱\",{\"1\":{\"585\":1}}],[\"树中的圆形结点表示一个记录\",{\"1\":{\"464\":1}}],[\"树中所有叶结点的带权路径长被称为该树的带权路径长\",{\"1\":{\"580\":1}}],[\"树可以是空树\",{\"1\":{\"528\":1}}],[\"树形结构\",{\"1\":{\"494\":1}}],[\"树型查找\",{\"0\":{\"466\":1}}],[\"树最下面叶结点表示不成功的查找条件\",{\"1\":{\"464\":1}}],[\"树之前调用\",{\"1\":{\"353\":1}}],[\"树之后调用\",{\"1\":{\"353\":1}}],[\"树比较找出不同的节点\",{\"1\":{\"346\":1}}],[\"树的遍历是指用某种方式访问树的每个结点\",{\"1\":{\"603\":1}}],[\"树的存储结构有很多\",{\"1\":{\"598\":1}}],[\"树的存储结构\",{\"0\":{\"598\":1}}],[\"树的分支是有向的\",{\"1\":{\"586\":1}}],[\"树的高度或深度是树中结点的最大深度\",{\"1\":{\"586\":1}}],[\"树的度为3\",{\"1\":{\"586\":1}}],[\"树的树形表示\",{\"1\":{\"586\":1}}],[\"树的根结点没有前驱\",{\"1\":{\"585\":1}}],[\"树的定义是递归的\",{\"1\":{\"585\":1}}],[\"树的基本概念\",{\"0\":{\"585\":1}}],[\"树的平衡性\",{\"1\":{\"476\":1}}],[\"树的对象\",{\"1\":{\"346\":1}}],[\"树的差异\",{\"1\":{\"346\":1}}],[\"本地内存存放的共享变量的副本\",{\"1\":{\"379\":1}}],[\"本不该响应变成响应的\",{\"1\":{\"348\":1}}],[\"本质上是一个js对象\",{\"1\":{\"346\":1}}],[\"本项目唯一麻烦的点就是价格的处理与转发\",{\"1\":{\"209\":1}}],[\"快捷的服务\",{\"1\":{\"368\":1}}],[\"快的\",{\"1\":{\"346\":1}}],[\"快速搭建\",{\"0\":{\"364\":1}}],[\"快速\",{\"1\":{\"241\":1}}],[\"快速实现排名和分数统计\",{\"1\":{\"200\":1}}],[\"快速暴力停止\",{\"1\":{\"156\":1}}],[\"快速开始\",{\"0\":{\"151\":1,\"155\":1,\"272\":1,\"297\":1,\"332\":1,\"410\":1,\"431\":1,\"442\":1}}],[\"快速迭代\",{\"1\":{\"141\":1}}],[\"快速发现和识别领域中的关键事件和业务流程\",{\"1\":{\"139\":1}}],[\"快速入门\",{\"0\":{\"83\":1}}],[\"操作系统通常会按照请求在时间上的先后顺序把他们呢拍成一个队列\",{\"1\":{\"566\":1}}],[\"操作来加锁和解锁\",{\"1\":{\"373\":1}}],[\"操作\",{\"1\":{\"346\":1,\"347\":1}}],[\"操作起来费时费力并且容易出错\",{\"1\":{\"150\":1}}],[\"阻止事件冒泡\",{\"1\":{\"342\":1}}],[\"符号代替\",{\"1\":{\"342\":1}}],[\"符合单一职责原则\",{\"1\":{\"126\":1}}],[\"深度优先搜索\",{\"0\":{\"551\":1}}],[\"深藏功与名\",{\"1\":{\"341\":1}}],[\"深造\",{\"1\":{\"96\":1}}],[\"案例\",{\"1\":{\"332\":1}}],[\"选择哪一种有实际问题的主要因素决定\",{\"1\":{\"526\":1}}],[\"选择自己的容器镜像\",{\"1\":{\"364\":1}}],[\"选项式api\",{\"1\":{\"331\":1}}],[\"选它总没错\",{\"1\":{\"148\":1}}],[\"变化也会被检测到\",{\"1\":{\"348\":1}}],[\"变量和输入数据\",{\"1\":{\"459\":1}}],[\"变量\",{\"1\":{\"331\":1}}],[\"变为\",{\"1\":{\"319\":2}}],[\"片段\",{\"1\":{\"331\":1}}],[\"倒不是因为不想用\",{\"1\":{\"331\":1}}],[\"倒装\",{\"0\":{\"70\":1}}],[\"取而代之的是新的建议\",{\"1\":{\"329\":1}}],[\"话不多说\",{\"1\":{\"327\":1}}],[\"话不多说直接开始\",{\"1\":{\"202\":1,\"297\":1}}],[\"描述一下\",{\"1\":{\"323\":1}}],[\"样式分为三层\",{\"1\":{\"324\":1}}],[\"样式\",{\"1\":{\"323\":1,\"324\":1,\"341\":1}}],[\"样式都放在\",{\"1\":{\"170\":1}}],[\"早期的布局的即把界面看作分为东南西北中五块个模块\",{\"1\":{\"323\":1}}],[\"走进数据结构\",{\"0\":{\"490\":1}}],[\"走进算法\",{\"0\":{\"454\":1}}],[\"走进动态代理\",{\"0\":{\"383\":1}}],[\"走进\",{\"0\":{\"323\":1,\"362\":1}}],[\"布局的组件化思想\",{\"1\":{\"324\":1}}],[\"布局\",{\"0\":{\"322\":1,\"323\":1}}],[\"新特性\",{\"0\":{\"393\":1}}],[\"新特性还是非常多的\",{\"1\":{\"331\":1}}],[\"新面孔\",{\"1\":{\"332\":1}}],[\"新增全局规则和针对插槽内容的规则\",{\"1\":{\"331\":1}}],[\"新引入了\",{\"1\":{\"320\":1}}],[\"新git仓库将使用单套代码多环境配置的模式\",{\"1\":{\"286\":1}}],[\"捕获\",{\"1\":{\"319\":1}}],[\"已失败\",{\"1\":{\"319\":1}}],[\"已成功\",{\"1\":{\"319\":1}}],[\"已经实现了我们在\",{\"1\":{\"329\":1}}],[\"已经不用太过担心体验和性能问题\",{\"1\":{\"233\":1}}],[\"已经脱敏\",{\"1\":{\"225\":1}}],[\"已经有人开始推测\",{\"1\":{\"2\":1}}],[\"异步操作有三种状态\",{\"1\":{\"319\":1}}],[\"异常三种情况编写不同的用例\",{\"1\":{\"243\":1}}],[\"异常\",{\"0\":{\"399\":1},\"1\":{\"181\":1,\"395\":1}}],[\"异常请求沿着责任链传递\",{\"1\":{\"128\":1}}],[\"异常处理\",{\"1\":{\"128\":1}}],[\"两个栈的栈顶指针一个为\",{\"1\":{\"571\":1}}],[\"两个栈互相调节\",{\"1\":{\"571\":1}}],[\"两个栈顶向共享空间的中间延伸\",{\"1\":{\"571\":1}}],[\"两个顶点之间的路径是指两个顶点间的顶点序列\",{\"1\":{\"539\":1}}],[\"两个指令配合完成\",{\"1\":{\"372\":1}}],[\"两个函数只会有一个被调用\",{\"1\":{\"319\":1}}],[\"两个模块\",{\"1\":{\"318\":1}}],[\"两种存储结构各有长短\",{\"1\":{\"526\":1}}],[\"两种方式进行\",{\"1\":{\"199\":1}}],[\"两种进程进行工作\",{\"1\":{\"158\":1}}],[\"匿名类\",{\"1\":{\"317\":1}}],[\"箭头函数\",{\"1\":{\"316\":1}}],[\"组合式api\",{\"1\":{\"331\":1}}],[\"组合式\",{\"1\":{\"331\":1}}],[\"组合使用\",{\"0\":{\"315\":1}}],[\"组件通信\",{\"0\":{\"358\":1}}],[\"组件实例在创建时都需要经历一系列的初始化步骤\",{\"1\":{\"353\":1}}],[\"组件选项\",{\"1\":{\"331\":1}}],[\"组件\",{\"1\":{\"331\":1}}],[\"组件样式的功能\",{\"1\":{\"324\":1}}],[\"组件的界面样式\",{\"1\":{\"323\":1}}],[\"组成\",{\"1\":{\"244\":1}}],[\"差集\",{\"1\":{\"311\":1}}],[\"合并两个\",{\"1\":{\"309\":1}}],[\"键值对数组转换成一个\",{\"1\":{\"309\":1}}],[\"二叉链表就必须包含数据域\",{\"1\":{\"593\":1}}],[\"二叉树中的遍历是指按某条搜索路径访问树中的每个结点\",{\"1\":{\"594\":1}}],[\"二叉树的后序序例和中序序列也可以诶唯一确定二叉树\",{\"1\":{\"595\":1}}],[\"二叉树的三种遍历顺序\",{\"1\":{\"594\":1}}],[\"二叉树的遍历\",{\"0\":{\"594\":1}}],[\"二叉树的链式存储\",{\"1\":{\"593\":1}}],[\"二叉树的顺序存储是指用一组地址连续的存储单元依次自上而下\",{\"1\":{\"592\":1}}],[\"二叉树的存储\",{\"0\":{\"591\":1}}],[\"二叉树的性质\",{\"0\":{\"590\":1}}],[\"二叉树的递归定义是或为空二叉树\",{\"1\":{\"588\":1}}],[\"二叉树是特殊的度为二的有序树\",{\"1\":{\"588\":1}}],[\"二叉树是一种特殊的树形结构\",{\"1\":{\"588\":1}}],[\"二叉树\",{\"0\":{\"588\":1}}],[\"二叉排序树的查找效率主要取决于树的高度\",{\"1\":{\"471\":1}}],[\"二叉排序树的查找是从根结点开始\",{\"1\":{\"468\":1}}],[\"二叉排序树中删除一个结点的时候\",{\"1\":{\"470\":1}}],[\"二叉排序树是一种动态树表\",{\"1\":{\"469\":1}}],[\"二叉排序树有称为二叉查找树\",{\"1\":{\"467\":1}}],[\"二叉排序树\",{\"0\":{\"467\":1},\"1\":{\"589\":1}}],[\"二在邻接多重表只有一个\",{\"1\":{\"547\":1}}],[\"二分查找\",{\"0\":{\"464\":1}}],[\"二进制文件\",{\"1\":{\"409\":1}}],[\"二进制包\",{\"1\":{\"155\":1}}],[\"二维数组按列优先顺序存储\",{\"1\":{\"498\":1}}],[\"二维数组按行优先顺序存储\",{\"1\":{\"498\":1}}],[\"二维数组可视为其元素也是定长线性表的线性表\",{\"1\":{\"498\":1}}],[\"二维\",{\"1\":{\"309\":1}}],[\"小技巧\",{\"0\":{\"309\":1,\"311\":1}}],[\"ƒ\",{\"1\":{\"307\":1}}],[\"任何两个顶点之间都存在边的无向图是完全图\",{\"1\":{\"531\":1}}],[\"任何被时代所遗弃的技术必有其弊端\",{\"1\":{\"419\":1}}],[\"任何对象都有一个\",{\"1\":{\"372\":1}}],[\"任何值\",{\"1\":{\"307\":1}}],[\"任务表\",{\"1\":{\"236\":1}}],[\"任务和\",{\"1\":{\"217\":1}}],[\"任务队列长度和线程最大空闲时间等关键参数\",{\"1\":{\"207\":1}}],[\"皆可进行解构赋值\",{\"1\":{\"300\":1}}],[\"剩余运算符\",{\"1\":{\"300\":1,\"301\":1}}],[\"忽略\",{\"1\":{\"300\":1,\"301\":1}}],[\"嵌套\",{\"1\":{\"300\":1}}],[\"针对数组或者对象进行模式匹配\",{\"1\":{\"299\":1}}],[\"针对代码执行成功\",{\"1\":{\"243\":1}}],[\"说到\",{\"1\":{\"448\":1}}],[\"说明声明的同时就必须初始化\",{\"1\":{\"298\":1}}],[\"说句题外话\",{\"1\":{\"217\":1}}],[\"声明一个只读的常量\",{\"1\":{\"298\":1}}],[\"声明的变量只在\",{\"1\":{\"298\":1}}],[\"去获取属性和元素\",{\"1\":{\"347\":1}}],[\"去重\",{\"1\":{\"311\":1}}],[\"去其糟粕\",{\"1\":{\"297\":1}}],[\"去除文件中的单引号\",{\"1\":{\"237\":1}}],[\"去除行号\",{\"1\":{\"194\":1}}],[\"哈夫曼编码正是一种被广泛应用而且有效的数据压缩编码\",{\"1\":{\"582\":1}}],[\"哈夫曼编码\",{\"0\":{\"582\":1}}],[\"哈夫曼树的构造过程\",{\"1\":{\"581\":1}}],[\"哈夫曼树的构造\",{\"0\":{\"581\":1}}],[\"哈夫曼树和哈夫曼码\",{\"0\":{\"580\":1}}],[\"哈哈哈\",{\"1\":{\"297\":1}}],[\"哈希\",{\"1\":{\"198\":1}}],[\"68\",{\"1\":{\"483\":1}}],[\"687\",{\"1\":{\"483\":2}}],[\"6\",{\"1\":{\"297\":1}}],[\"6+\",{\"0\":{\"295\":1}}],[\"全链路由追踪\",{\"1\":{\"421\":1}}],[\"全局变量和方法\",{\"0\":{\"360\":1}}],[\"全局bus\",{\"1\":{\"358\":1}}],[\"全称\",{\"1\":{\"297\":1}}],[\"全部都是\",{\"1\":{\"214\":1}}],[\"全部删除并且把上面读取的\",{\"1\":{\"214\":1}}],[\"知识框架\",{\"0\":{\"491\":1}}],[\"知识总览\",{\"0\":{\"296\":1}}],[\"知道是谁负责开发和大致开发内容\",{\"1\":{\"284\":1}}],[\"签名是使用\",{\"1\":{\"294\":1}}],[\"签名部分是对前两部分\",{\"1\":{\"294\":1}}],[\"签名\",{\"1\":{\"294\":1}}],[\"私有声明\",{\"1\":{\"294\":1}}],[\"私有方法\",{\"1\":{\"246\":1}}],[\"公钥验证\",{\"1\":{\"294\":1}}],[\"公共声明\",{\"1\":{\"294\":1}}],[\"公司的最早的托管者之一编写的\",{\"1\":{\"99\":1}}],[\"过程如下\",{\"1\":{\"469\":1}}],[\"过大平均查找长度较大\",{\"1\":{\"463\":1}}],[\"过滤和负载均衡\",{\"1\":{\"423\":1}}],[\"过度和动画\",{\"0\":{\"356\":1}}],[\"过期时间\",{\"1\":{\"294\":1}}],[\"过去完成进行时\",{\"0\":{\"33\":1}}],[\"过去完成时\",{\"0\":{\"28\":1}}],[\"过去进行时\",{\"0\":{\"24\":1}}],[\"过去将来时\",{\"0\":{\"22\":1}}],[\"预定义的\",{\"1\":{\"294\":1}}],[\"预上线分支\",{\"1\":{\"284\":1}}],[\"部分是\",{\"1\":{\"294\":1}}],[\"部署\",{\"1\":{\"202\":1,\"362\":1}}],[\"部署项目\",{\"1\":{\"202\":1}}],[\"部署和部署\",{\"1\":{\"182\":1}}],[\"部署简单\",{\"1\":{\"107\":1}}],[\"尤其是递归中经典的斐波那契数列中\",{\"1\":{\"594\":1}}],[\"尤其是现在云服务器价格逐渐降低\",{\"1\":{\"362\":1}}],[\"尤其是\",{\"1\":{\"293\":1}}],[\"尤其是分布式系统和微服务架构的兴起\",{\"1\":{\"293\":1}}],[\"逐渐成为现代web应用特别是api服务的首选认证方式\",{\"1\":{\"293\":1}}],[\"逐行读取文件内容\",{\"1\":{\"237\":1}}],[\"易于集成\",{\"1\":{\"430\":1}}],[\"易于管理和更新的原因都选择容器部署\",{\"1\":{\"364\":1}}],[\"易于跨域\",{\"1\":{\"293\":1}}],[\"易维护的项目提供了方向\",{\"1\":{\"122\":1}}],[\"跨域请求\",{\"1\":{\"293\":1}}],[\"跨平台\",{\"1\":{\"217\":1}}],[\"此时\",{\"1\":{\"600\":1}}],[\"此时审批人再去点击审批结果的时候发现审批已经失效\",{\"1\":{\"233\":1}}],[\"此方法虽然可以节省了空间\",{\"1\":{\"503\":1}}],[\"此类查找表称为静态查找表\",{\"1\":{\"462\":1}}],[\"此行会打印\",{\"1\":{\"319\":1}}],[\"此外\",{\"1\":{\"293\":1,\"352\":1,\"451\":1}}],[\"字符及所能输入到计算机中并被计算机程序识别和处理的符号的集合\",{\"1\":{\"492\":1}}],[\"字符串简称串\",{\"1\":{\"573\":1}}],[\"字符串\",{\"1\":{\"300\":1,\"307\":3}}],[\"字符串是什么\",{\"1\":{\"293\":1}}],[\"字节码文件再到汇编指令到\",{\"1\":{\"370\":1}}],[\"字段\",{\"1\":{\"229\":1}}],[\"字段等\",{\"1\":{\"227\":1}}],[\"泰山版\",{\"1\":{\"291\":1}}],[\"华山版\",{\"1\":{\"291\":1}}],[\"终极版\",{\"1\":{\"291\":1}}],[\"终于我们要开始使用\",{\"1\":{\"282\":1}}],[\"至今为止已更迭了四个版本\",{\"1\":{\"291\":1}}],[\"至于这个到底是远大于多少并没有明确的指标\",{\"1\":{\"503\":1}}],[\"至于到底如何调用的先放在下次再谈\",{\"1\":{\"382\":1}}],[\"至于如果做到的我们得先了解这几种锁的状态才能展开\",{\"1\":{\"372\":1}}],[\"至于其中的setup\",{\"1\":{\"332\":1}}],[\"至于和第2种的区别在于\",{\"1\":{\"287\":1}}],[\"至于是不是最优解还尚且未知\",{\"1\":{\"215\":1}}],[\"至于加载\",{\"1\":{\"214\":1}}],[\"至于真的投产之后的问题还是得以后接触了才能下结论\",{\"1\":{\"179\":1}}],[\"至于为什么没有读完\",{\"1\":{\"96\":1}}],[\"届的统一开发格式\",{\"1\":{\"291\":1}}],[\"领导是一个对代码规范十分苛刻的领导\",{\"1\":{\"291\":1}}],[\"领域层是领域模型的核心\",{\"1\":{\"145\":1}}],[\"领域层\",{\"1\":{\"145\":1}}],[\"领域事件是领域中的一个概念\",{\"1\":{\"143\":1}}],[\"领域事件\",{\"1\":{\"143\":1}}],[\"领域服务是领域中的一个概念\",{\"1\":{\"143\":1}}],[\"领域服务是领域中的辅助服务\",{\"1\":{\"143\":1}}],[\"领域服务\",{\"1\":{\"143\":2}}],[\"领域是软件系统所要解决的问题域\",{\"1\":{\"143\":1}}],[\"领域\",{\"1\":{\"143\":1}}],[\"领域驱动\",{\"1\":{\"141\":1}}],[\"领域驱动设计\",{\"0\":{\"138\":1},\"1\":{\"139\":1}}],[\"讲在最后\",{\"0\":{\"290\":1}}],[\"评审\",{\"1\":{\"289\":1}}],[\"评审过后方可通过质量门禁校验\",{\"1\":{\"240\":1}}],[\"很容易确定两个顶点是否相连\",{\"1\":{\"544\":1}}],[\"很难提出一种被认为是最好的算法\",{\"1\":{\"487\":1}}],[\"很早一个需求闲置了好几次上线\",{\"1\":{\"289\":1}}],[\"很多同学他们在公司的工作都是全栈的职责\",{\"1\":{\"147\":1}}],[\"很多人都觉得开发只是写写代码\",{\"1\":{\"137\":1}}],[\"很多软件不支持这种\",{\"1\":{\"112\":1}}],[\"很多数据库也可以配合前端直接使用\",{\"1\":{\"93\":1}}],[\"很多结构或者框架以后难免要升级\",{\"1\":{\"3\":1}}],[\"未知时间上线需求\",{\"1\":{\"289\":1}}],[\"待上线完成之后\",{\"1\":{\"289\":1}}],[\"四月十三日上线需求\",{\"1\":{\"289\":1}}],[\"四层架构\",{\"0\":{\"145\":1}}],[\"促进开发的效率和默契\",{\"1\":{\"287\":1}}],[\"促进代码优化\",{\"1\":{\"241\":1}}],[\"码云也提了创建仓库时候选择多分支的选项\",{\"1\":{\"287\":1}}],[\"迁移或创建git仓库步骤如下\",{\"1\":{\"286\":1}}],[\"迁移步骤\",{\"1\":{\"282\":1}}],[\"舍弃ver和branch文件下的未上线功能代码和备份\",{\"1\":{\"286\":1}}],[\"抛出runtimeexception\",{\"1\":{\"404\":1}}],[\"抛出一个名为\",{\"1\":{\"259\":1}}],[\"抛弃之前svn的目录分层来区分多版本的结构\",{\"1\":{\"286\":1}}],[\"修饰的方法\",{\"1\":{\"394\":2}}],[\"修饰符\",{\"1\":{\"227\":2}}],[\"修复后直接部署\",{\"1\":{\"284\":1}}],[\"见名知意\",{\"1\":{\"284\":1,\"384\":1}}],[\"命名方法论\",{\"1\":{\"324\":1}}],[\"命名类\",{\"1\":{\"317\":1}}],[\"命名建议使用解决人\",{\"1\":{\"284\":1}}],[\"命名建议使用姓名和功能介绍组成\",{\"1\":{\"284\":1}}],[\"命名建议根据上线日期决定\",{\"1\":{\"284\":1}}],[\"命名\",{\"1\":{\"284\":1}}],[\"命令所在的代码块内有效\",{\"1\":{\"298\":1}}],[\"命令编辑当前用户的\",{\"1\":{\"236\":1}}],[\"命令\",{\"0\":{\"186\":1,\"194\":1,\"276\":1}}],[\"命令处理系统\",{\"1\":{\"128\":1}}],[\"命令参考\",{\"1\":{\"99\":1}}],[\"建议创建readme\",{\"1\":{\"286\":1}}],[\"建议只能合并测试后可运行的的稳定分支\",{\"1\":{\"284\":1}}],[\"建议用\",{\"1\":{\"284\":1}}],[\"建议使用mock\",{\"1\":{\"244\":1}}],[\"足够当时我们团队平时开发使用了\",{\"1\":{\"282\":1}}],[\"况且很多项目自己没有接触了解过\",{\"1\":{\"282\":1}}],[\"况且计算机这个行业在当下这个社会也是充满了功利的气息\",{\"1\":{\"95\":1}}],[\"仅需一次遍历就能够访问图中的所有顶点\",{\"1\":{\"552\":1}}],[\"仅有一个\",{\"1\":{\"318\":1}}],[\"仅仅是代码的三份存档\",{\"1\":{\"282\":1}}],[\"仅供大家学习参考\",{\"1\":{\"0\":1}}],[\"创造了三个不同的目录\",{\"1\":{\"282\":1}}],[\"创建optional有以下几种方式\",{\"1\":{\"396\":1}}],[\"创建enhancer实例\",{\"1\":{\"391\":1}}],[\"创建目标对象\",{\"1\":{\"388\":1}}],[\"创建代理对象\",{\"1\":{\"388\":2,\"391\":1}}],[\"创建了一个\",{\"1\":{\"387\":1}}],[\"创建\",{\"0\":{\"273\":1},\"1\":{\"289\":6,\"388\":1}}],[\"创建配置类\",{\"1\":{\"224\":1}}],[\"创建和查看定时任务\",{\"0\":{\"192\":1}}],[\"创建完成之后执行\",{\"1\":{\"156\":1}}],[\"创建的\",{\"1\":{\"148\":1}}],[\"创建订单\",{\"1\":{\"142\":1}}],[\"创建订阅者类\",{\"1\":{\"134\":1}}],[\"创建一个\",{\"0\":{\"396\":1}}],[\"创建一个被代理的类\",{\"1\":{\"391\":1}}],[\"创建一个实现\",{\"1\":{\"388\":1}}],[\"创建一个模拟对象\",{\"1\":{\"252\":1}}],[\"创建一个mock对象来模拟对象的行为\",{\"1\":{\"246\":1}}],[\"创建一个定时任务每过五分钟就遍历一下表中当前批次下已经在审核中状态超过半个小时的材料并重新将其置为未审核的状态\",{\"1\":{\"233\":1}}],[\"创建一个事件监听器类myeventlistener\",{\"1\":{\"135\":1}}],[\"创建一个事件源类myeventpublisher\",{\"1\":{\"135\":1}}],[\"创建一个具体的发布者和两个具体的订阅者来测试\",{\"1\":{\"134\":1}}],[\"创建一个发布者类\",{\"1\":{\"134\":1}}],[\"创建责任链\",{\"1\":{\"125\":1,\"130\":1}}],[\"因而需要寻找一种规律以便使二叉树的结点能排列在一个线性队列上\",{\"1\":{\"594\":1}}],[\"因此二叉树一般都是采用链式存储\",{\"1\":{\"593\":1}}],[\"因此哈夫曼树不存在度为\",{\"1\":{\"581\":1}}],[\"因此哈夫曼树的总结点数为\",{\"1\":{\"581\":1}}],[\"因此每个边结点同时链接在两个链表中\",{\"1\":{\"547\":1}}],[\"因此在任何一个位置上的插入和删除都是等价的\",{\"1\":{\"523\":1}}],[\"因此在链表的第一个位置上的操作和在表中其他位置的操作一致\",{\"1\":{\"511\":1}}],[\"因此在模板表达式中引用时无需添加\",{\"1\":{\"351\":1}}],[\"因此将非零元素及相对应的行和列构成一个三元组\",{\"1\":{\"503\":1}}],[\"因此\",{\"1\":{\"430\":1,\"464\":1,\"498\":1,\"544\":1}}],[\"因此代理类可以代理目标类中的所有方法\",{\"1\":{\"385\":1}}],[\"因此代理类只能代理接口中定义的方法\",{\"1\":{\"385\":1}}],[\"因此我们为了实现\",{\"1\":{\"282\":1}}],[\"因第五个than只能接受\",{\"1\":{\"319\":1}}],[\"因其无状态\",{\"1\":{\"293\":1}}],[\"因为树中的某个节点\",{\"1\":{\"585\":1}}],[\"因为每个元素都是定长的\",{\"1\":{\"575\":1}}],[\"因为每条边和两个顶点相关联\",{\"1\":{\"536\":1}}],[\"因为入队顺序是确定的\",{\"1\":{\"560\":1}}],[\"因为虽然是保证这先进后出的规则\",{\"1\":{\"560\":1}}],[\"因为在我们不断入对和出队的时候\",{\"1\":{\"556\":1}}],[\"因为是数组的原因\",{\"1\":{\"525\":1}}],[\"因为是订阅型的\",{\"1\":{\"115\":1}}],[\"因为设置尾指针可以直用next找到头指针并且可以直接在队尾插入元素\",{\"1\":{\"523\":1}}],[\"因为循环单链表是一个\",{\"1\":{\"523\":1}}],[\"因为对于稀疏矩阵我们仅存储非零元素\",{\"1\":{\"503\":1}}],[\"因为插入元素都是从后面顺序向前进行\",{\"1\":{\"489\":1}}],[\"因为折半查找需要方便的定位查找区域\",{\"1\":{\"464\":1}}],[\"因为他给出了个一个效率的安全值\",{\"1\":{\"458\":1}}],[\"因为通常只有很小概率才会达到\",{\"1\":{\"458\":1}}],[\"因为框架过于繁杂\",{\"1\":{\"421\":1}}],[\"因为这些重排序可能造成多线程程序出现内存可见性的问题\",{\"1\":{\"380\":1}}],[\"因为锁不可降级的特性在\",{\"1\":{\"374\":1}}],[\"因为不推荐使用自带的\",{\"1\":{\"364\":1}}],[\"因为不推荐参与构建任务\",{\"1\":{\"364\":1}}],[\"因为不规范的命名简直是一个项目的本质性的灾难\",{\"1\":{\"117\":1}}],[\"因为它将只跟踪回调中被使用到的属性\",{\"1\":{\"352\":1}}],[\"因为它俩的直接区别就是\",{\"1\":{\"348\":1}}],[\"因为上一个then方法返回的是一个reject状态的promise\",{\"1\":{\"319\":1}}],[\"因为http协议本身并不维护用户的上下文状态\",{\"1\":{\"293\":1}}],[\"因为避免临时不上或者上线失败回退而导致污染了develop和master\",{\"1\":{\"287\":1}}],[\"因为确实项目太多了\",{\"1\":{\"282\":1}}],[\"因为\",{\"1\":{\"282\":1,\"289\":1,\"304\":1}}],[\"因为有一些数据想维护在\",{\"1\":{\"280\":1}}],[\"因为有些产品的价格是我们不需要的\",{\"1\":{\"205\":1}}],[\"因为我们大部分项目都是纯后台\",{\"1\":{\"225\":1}}],[\"因为代码都在内网\",{\"1\":{\"210\":1}}],[\"因为需要往多个后台进行实时转发\",{\"1\":{\"209\":1}}],[\"因为要求价格的实时性\",{\"1\":{\"208\":1}}],[\"因为业务线程有依赖关系\",{\"1\":{\"207\":1}}],[\"因为数据压力不大\",{\"1\":{\"204\":1}}],[\"因为如果使用\",{\"1\":{\"271\":1}}],[\"因为如果是像淘宝这种静态文件非常多的项目如果放在\",{\"1\":{\"170\":1}}],[\"因为如果出现了正常服务器失效的时候\",{\"1\":{\"165\":1}}],[\"因为自己主要是使用\",{\"1\":{\"148\":1}}],[\"因为其实现存在一些问题和局限性\",{\"1\":{\"133\":1}}],[\"因为审查需要时间\",{\"1\":{\"110\":1}}],[\"因为算法大部分都是基于大量的数据结构组合而成的\",{\"1\":{\"91\":1}}],[\"多重图\",{\"0\":{\"530\":1}}],[\"多个值相同的元素分配一个存储空间\",{\"1\":{\"499\":1}}],[\"多分支的结构\",{\"1\":{\"282\":1}}],[\"多进程的工作模式\",{\"1\":{\"158\":1}}],[\"糟糕的\",{\"0\":{\"282\":1}}],[\"风格就都加入\",{\"1\":{\"271\":1}}],[\"风格的项目较少\",{\"1\":{\"271\":1}}],[\"风格的\",{\"1\":{\"271\":2,\"329\":1}}],[\"风格\",{\"1\":{\"271\":1}}],[\"远程代理\",{\"1\":{\"384\":1}}],[\"远程调用技术\",{\"1\":{\"270\":1}}],[\"远古时期\",{\"1\":{\"202\":1}}],[\"消息驱动数据流\",{\"1\":{\"421\":1}}],[\"消息的内容格式\",{\"1\":{\"270\":1}}],[\"消息头和\",{\"1\":{\"270\":1}}],[\"消息头\",{\"1\":{\"270\":1}}],[\"消息队列\",{\"1\":{\"200\":1,\"421\":1}}],[\"及其函数\",{\"1\":{\"269\":1}}],[\"及时\",{\"1\":{\"241\":1}}],[\"供其他用户使用\",{\"1\":{\"268\":1}}],[\"供交流讨论啦\",{\"1\":{\"115\":1}}],[\"企业可以根据自己的需要动态查找并使用web服务\",{\"1\":{\"268\":1}}],[\"三对角矩阵将三条对角线上的元素按照行优先方式存放在一维数组中\",{\"1\":{\"502\":1}}],[\"三对角矩阵\",{\"0\":{\"502\":1}}],[\"三角矩阵\",{\"0\":{\"501\":1}}],[\"三种书写风格\",{\"0\":{\"333\":1}}],[\"三要素\",{\"0\":{\"267\":1}}],[\"三态加一否\",{\"0\":{\"16\":1}}],[\"协议与身份和授权服务器进行交互\",{\"1\":{\"451\":1}}],[\"协议的实现\",{\"1\":{\"451\":1}}],[\"协议无状态的特性带来的用户认证和会话管理问题\",{\"1\":{\"293\":1}}],[\"协议在\",{\"1\":{\"270\":1}}],[\"协议发送请求和接收结果时\",{\"1\":{\"270\":1}}],[\"协议和\",{\"1\":{\"270\":1}}],[\"协议栈的一个重要部分\",{\"1\":{\"268\":1}}],[\"协议\",{\"1\":{\"266\":1,\"270\":1}}],[\"仔细想想只要能暴露接口\",{\"1\":{\"266\":1}}],[\"仔细理解每种模式所使用的场景才是真正的学习之道\",{\"1\":{\"101\":1}}],[\"专门的第三方软件或硬件就可相互交换数据或集成\",{\"1\":{\"266\":1}}],[\"专注于业务领域中的实际事件和流程\",{\"1\":{\"141\":1}}],[\"能由输出受限的双端队列得到\",{\"1\":{\"560\":1}}],[\"能由输入受限的双端队列得到\",{\"1\":{\"560\":1}}],[\"能直接意识到代码是常数阶\",{\"1\":{\"459\":1}}],[\"能够获取应用程序的详细信息和指标数据\",{\"1\":{\"430\":1}}],[\"能够通过录制\",{\"1\":{\"246\":1}}],[\"能使得运行在不同机器上的不同应用无须借助附加的\",{\"1\":{\"266\":1}}],[\"速度也慢\",{\"1\":{\"266\":1}}],[\"超过预定义长度的串将被舍去\",{\"1\":{\"575\":1}}],[\"超过可能需要选择购买\",{\"1\":{\"108\":1}}],[\"超时验证等\",{\"1\":{\"264\":1}}],[\"功能落后了好几个上线版本\",{\"1\":{\"289\":1}}],[\"功能完成并合并之后可选删除\",{\"1\":{\"284\":1}}],[\"功能分支\",{\"1\":{\"284\":1}}],[\"功能\",{\"1\":{\"250\":1}}],[\"导入\",{\"1\":{\"318\":2}}],[\"导入依赖\",{\"0\":{\"249\":1,\"262\":1}}],[\"导出\",{\"1\":{\"318\":2}}],[\"导致后来我真正开始想加入微服务的时候剪不断理还乱\",{\"1\":{\"421\":1}}],[\"导致项目启动不起来或者功能紊乱\",{\"1\":{\"287\":1}}],[\"导致架构设计不够合理\",{\"1\":{\"139\":1}}],[\"略复杂\",{\"1\":{\"246\":2}}],[\"拓展语言来实现\",{\"1\":{\"324\":1}}],[\"拓展\",{\"1\":{\"246\":1}}],[\"默认集成了\",{\"1\":{\"439\":1}}],[\"默认值\",{\"1\":{\"300\":1}}],[\"默认依赖\",{\"1\":{\"246\":1}}],[\"默认是安装在\",{\"1\":{\"152\":1}}],[\"复杂度降低等优点\",{\"1\":{\"364\":1}}],[\"复杂\",{\"1\":{\"246\":2}}],[\"复合句\",{\"0\":{\"60\":1}}],[\"弥补了对静态方法的不支持\",{\"1\":{\"246\":1}}],[\"验证模拟对象上的所有方法已经被验证\",{\"1\":{\"258\":1}}],[\"验证模拟对象的方法从未被调用\",{\"1\":{\"257\":1}}],[\"验证模拟对象的方法被调用了至少n次\",{\"1\":{\"256\":1}}],[\"验证模拟对象的方法被调用了特定的次数\",{\"1\":{\"255\":1}}],[\"验证模拟对象的方法是否被调用\",{\"1\":{\"254\":1}}],[\"验证\",{\"1\":{\"254\":1,\"255\":1,\"256\":1,\"257\":1,\"258\":1}}],[\"验证语法简单\",{\"1\":{\"246\":1}}],[\"验证等\",{\"1\":{\"143\":2}}],[\"回放\",{\"1\":{\"246\":1}}],[\"跳过外部依赖\",{\"1\":{\"246\":1}}],[\"跳到文件头\",{\"1\":{\"194\":1}}],[\"跳到文件最后\",{\"1\":{\"194\":1}}],[\"磁盘读取等\",{\"1\":{\"245\":8}}],[\"磁盘空间等\",{\"1\":{\"231\":1}}],[\"静态链表存储示意图\",{\"1\":{\"525\":1}}],[\"静态链表也需要一块连续的内存空间\",{\"1\":{\"525\":1}}],[\"静态链表借助数组来描述线性表的链式存储结构\",{\"1\":{\"525\":1}}],[\"静态链表\",{\"0\":{\"525\":1}}],[\"静态代理就是代码中事先定义好的\",{\"1\":{\"384\":1}}],[\"静态域和数组元素都存在堆内存中\",{\"1\":{\"379\":1}}],[\"静态方法\",{\"1\":{\"246\":1}}],[\"静态类初始化或其函数调用过程中\",{\"1\":{\"245\":8}}],[\"静态类\",{\"1\":{\"245\":2}}],[\"静态资源和界面\",{\"1\":{\"157\":1}}],[\"失败\",{\"1\":{\"243\":1}}],[\"避免在运行时出现\",{\"1\":{\"395\":1}}],[\"避免重复计算\",{\"1\":{\"384\":1,\"392\":1}}],[\"避免恒真\",{\"1\":{\"243\":1}}],[\"避免了每个项目都复制一份依赖项的情况\",{\"1\":{\"148\":1}}],[\"测试和交付功能\",{\"1\":{\"420\":1}}],[\"测试代码\",{\"0\":{\"250\":1,\"263\":1}}],[\"测试文件\",{\"1\":{\"244\":1}}],[\"测试用例均需需为\",{\"1\":{\"244\":1}}],[\"测试用例必须增加断言逻辑\",{\"1\":{\"243\":1}}],[\"测试力度足够小\",{\"1\":{\"243\":1}}],[\"测试我都不测试\",{\"1\":{\"239\":1}}],[\"枚举类\",{\"1\":{\"242\":1}}],[\"屏蔽内容限制\",{\"0\":{\"242\":1}}],[\"独立性\",{\"1\":{\"241\":1}}],[\"第i个单链表中的结点表示依附于顶点vi的边\",{\"1\":{\"545\":1}}],[\"第i列非零元素或非∞元素的个数正好是顶点i的入度\",{\"1\":{\"544\":1}}],[\"第二步是在块内顺序查找\",{\"1\":{\"465\":1}}],[\"第二种是使用\",{\"1\":{\"333\":1}}],[\"第二个方面\",{\"1\":{\"566\":1}}],[\"第二个then\",{\"1\":{\"319\":1}}],[\"第二个参数是\",{\"1\":{\"319\":1}}],[\"第五个then\",{\"1\":{\"319\":1}}],[\"第四个then\",{\"1\":{\"319\":1}}],[\"第三版\",{\"1\":{\"371\":1}}],[\"第三种方式则是\",{\"1\":{\"333\":1}}],[\"第三个then\",{\"1\":{\"319\":1}}],[\"第三方ui\",{\"0\":{\"361\":1}}],[\"第三方\",{\"1\":{\"241\":1}}],[\"第一方面仅以主机和打印机之间速度不匹配的问题作说明\",{\"1\":{\"566\":1}}],[\"第一步肯定是先对给出的数字数组进行排序\",{\"1\":{\"484\":1}}],[\"第一步是在索引表中确定待查记录所在的块\",{\"1\":{\"465\":1}}],[\"第一个结点一定是二叉树的根结点\",{\"1\":{\"595\":1}}],[\"第一个顶点和最后一个顶点相同的路径称为回路或环\",{\"1\":{\"539\":1}}],[\"第一个then\",{\"1\":{\"319\":1}}],[\"第一个参数是\",{\"1\":{\"319\":1}}],[\"第一次看见项目目录里的\",{\"1\":{\"217\":1}}],[\"隔离\",{\"1\":{\"241\":1}}],[\"隔行如隔山\",{\"1\":{\"148\":1}}],[\"增加和删除节点的操作都很快\",{\"1\":{\"495\":1}}],[\"增加重构自信\",{\"1\":{\"241\":1}}],[\"增强或拦截的场景中非常有用\",{\"1\":{\"384\":1}}],[\"增量代码单元测试行覆盖率要求\",{\"1\":{\"240\":1}}],[\"增量构建这些功能\",{\"1\":{\"217\":1}}],[\"范围\",{\"1\":{\"240\":1}}],[\"语法已经不满足我们去实现这种规范\",{\"1\":{\"324\":1}}],[\"语言规范\",{\"1\":{\"371\":1}}],[\"语言定义远程调用所需要实现的接口\",{\"1\":{\"271\":1}}],[\"语言之外的所有开发语言在投产时\",{\"1\":{\"240\":1}}],[\"语态\",{\"0\":{\"39\":1}}],[\"质量门襟要求\",{\"0\":{\"240\":1}}],[\"于是令牌\",{\"1\":{\"448\":1}}],[\"于是乎各种技术对应的技术栈应运而生\",{\"1\":{\"420\":1}}],[\"于是增加了一下代码\",{\"1\":{\"280\":1}}],[\"于是\",{\"1\":{\"239\":1}}],[\"于是他想将所有\",{\"1\":{\"225\":1}}],[\"摘自\",{\"1\":{\"238\":1}}],[\"单引号内的括起来的字符序列是串的值\",{\"1\":{\"573\":1}}],[\"单链表\",{\"0\":{\"511\":1}}],[\"单文件组件\",{\"1\":{\"331\":1}}],[\"单文件组件中的状态驱动的\",{\"1\":{\"331\":1}}],[\"单元测试实践\",{\"0\":{\"247\":1}}],[\"单元测试用例思路\",{\"0\":{\"245\":1}}],[\"单元测试文件名称是由被\",{\"1\":{\"244\":1}}],[\"单元测试包结构和源码结构尽量保持一致\",{\"1\":{\"244\":1}}],[\"单元测试是可重复执行的\",{\"1\":{\"243\":1}}],[\"单元测试需要尽可能的覆盖函数的所有范围\",{\"1\":{\"243\":1}}],[\"单元测试需要符合两大类原则\",{\"1\":{\"241\":1}}],[\"单元测试应该及时进行编写\",{\"1\":{\"241\":1}}],[\"单元测试应该是用例本身自动校验\",{\"1\":{\"241\":1}}],[\"单元测试应该是可以被重复执行的\",{\"1\":{\"241\":1}}],[\"单元测试不要依赖外部环境\",{\"1\":{\"241\":1}}],[\"单元测试能够快速执行\",{\"1\":{\"241\":1}}],[\"单元测试的目的是\",{\"1\":{\"241\":1}}],[\"单元测试\",{\"0\":{\"238\":1},\"1\":{\"238\":1,\"362\":1}}],[\"单一职责原则\",{\"1\":{\"126\":1,\"144\":1}}],[\"查询某个特定的数据元素是否在查找表中\",{\"1\":{\"462\":1}}],[\"查找慢\",{\"1\":{\"526\":1}}],[\"查找快\",{\"1\":{\"526\":1}}],[\"查找某个元素结点\",{\"0\":{\"515\":1}}],[\"查找第i个结点\",{\"0\":{\"514\":1}}],[\"查找成功时的查找长度为从根结点到目的结点的路径上的结点树\",{\"1\":{\"464\":1}}],[\"查找成功\",{\"1\":{\"463\":1}}],[\"查找结果应该是唯一的\",{\"1\":{\"462\":1}}],[\"查找的基本概念\",{\"0\":{\"462\":1}}],[\"查找\",{\"0\":{\"461\":1,\"468\":1,\"475\":1}}],[\"查找包含\",{\"1\":{\"237\":1}}],[\"查阅字典\",{\"1\":{\"455\":1}}],[\"查看是否启动成功\",{\"1\":{\"364\":1}}],[\"查看是否添加成功\",{\"1\":{\"236\":1}}],[\"查看定时任务\",{\"1\":{\"192\":1}}],[\"查看当前目录下占用磁盘空间大小前\",{\"1\":{\"191\":1}}],[\"查看根目录下文件夹大小\",{\"1\":{\"191\":1}}],[\"查看磁盘空间\",{\"0\":{\"191\":1}}],[\"查看\",{\"1\":{\"156\":1}}],[\"查看自己目前软件是什么版的可以在\",{\"1\":{\"112\":1}}],[\"检测普通变量的访问或修改是行不通的\",{\"1\":{\"347\":1}}],[\"检查缓存中是否存在方法调用的结果\",{\"1\":{\"392\":1}}],[\"检查三步来完成大体流程\",{\"1\":{\"246\":1}}],[\"检查文件是否存在并可读\",{\"1\":{\"237\":1}}],[\"检索满足条件的的某个特定的数据元素的各种属性\",{\"1\":{\"462\":1}}],[\"检索项目中所有打印日志的语句\",{\"1\":{\"225\":1}}],[\"检索内容\",{\"1\":{\"194\":2}}],[\"检索\",{\"1\":{\"194\":1}}],[\"函数在每次响应式状态发生变化时触发回调函数\",{\"1\":{\"352\":1}}],[\"函数中手动暴露大量的状态和方法非常繁琐\",{\"1\":{\"333\":1}}],[\"函数中的代码会在每次组件实例被创建的时候执行\",{\"1\":{\"333\":1}}],[\"函数的语法糖\",{\"1\":{\"333\":1}}],[\"函数来声明响应式状态\",{\"1\":{\"347\":1}}],[\"函数来实现\",{\"1\":{\"333\":1}}],[\"函数来处理错误计数\",{\"1\":{\"237\":1}}],[\"函数不会像普通函数一样立即执行\",{\"1\":{\"320\":1}}],[\"函数和调用普通函数一样\",{\"1\":{\"320\":1}}],[\"函数内部有\",{\"1\":{\"320\":1}}],[\"函数名之前有个\",{\"1\":{\"320\":1}}],[\"函数体\",{\"1\":{\"316\":1}}],[\"函数调用等操作进行拦截\",{\"1\":{\"313\":1}}],[\"函数可以将一个\",{\"1\":{\"309\":1}}],[\"函数\",{\"0\":{\"316\":1,\"320\":1,\"321\":1},\"1\":{\"307\":1,\"320\":1,\"351\":1}}],[\"函数就好了\",{\"1\":{\"122\":1}}],[\"格式封装\",{\"1\":{\"270\":1}}],[\"格式文件\",{\"1\":{\"236\":1}}],[\"格式化\",{\"1\":{\"128\":1}}],[\"＄folder\",{\"1\":{\"236\":1}}],[\"保持扁平化\",{\"1\":{\"319\":1}}],[\"保持项目的干净整洁\",{\"1\":{\"286\":1}}],[\"保存在宿主机的数据卷中\",{\"1\":{\"364\":1}}],[\"保存当前最新开发成果的稳定分支\",{\"1\":{\"284\":1}}],[\"保存后退出\",{\"1\":{\"236\":1}}],[\"保证没有前导\",{\"1\":{\"482\":1}}],[\"保证develop分支是最新功能的稳定分支\",{\"1\":{\"287\":1}}],[\"保证单元测试的独立性\",{\"1\":{\"243\":1}}],[\"保证一系列操作的原子性\",{\"1\":{\"199\":1}}],[\"保留的天数\",{\"1\":{\"236\":1}}],[\"推广的关键时期\",{\"1\":{\"362\":1}}],[\"推送到其他后台程序\",{\"1\":{\"234\":1}}],[\"推荐使用\",{\"1\":{\"347\":1}}],[\"推荐\",{\"1\":{\"225\":1}}],[\"推荐这本\",{\"1\":{\"94\":1}}],[\"彭博收到请求后将处理后的数据存放到公共的\",{\"1\":{\"234\":1}}],[\"被称为表尾元素\",{\"1\":{\"505\":1}}],[\"被称为表头元素\",{\"1\":{\"505\":1}}],[\"被泛型约束只能接收引用类型的参数\",{\"1\":{\"349\":1}}],[\"被修改时\",{\"1\":{\"347\":1}}],[\"被设置为hs256\",{\"1\":{\"294\":1}}],[\"被设置为\",{\"1\":{\"294\":1}}],[\"被审核的考生材料会被标记为审核中\",{\"1\":{\"233\":1}}],[\"被动\",{\"0\":{\"40\":1}}],[\"审批\",{\"1\":{\"368\":1}}],[\"审批通过后合并分支并删除\",{\"1\":{\"289\":1}}],[\"审批工作流系统\",{\"1\":{\"128\":1}}],[\"审核\",{\"1\":{\"289\":1}}],[\"审核不通过则继续在\",{\"1\":{\"289\":1}}],[\"审核的规则是这样的\",{\"1\":{\"233\":1}}],[\"招录组织实施系统\",{\"1\":{\"233\":1}}],[\"占用率\",{\"1\":{\"231\":1}}],[\"占位符读取出来的\",{\"1\":{\"214\":1}}],[\"资源的竞争就是一个典型的例子\",{\"1\":{\"566\":1}}],[\"资源所有者向身份和授权服务器提供其凭据\",{\"1\":{\"451\":1}}],[\"资源所有者是指控制受保护资源的用户\",{\"1\":{\"451\":1}}],[\"资源所有者\",{\"1\":{\"451\":1}}],[\"资源文件读取问题\",{\"0\":{\"280\":1}}],[\"资源管理\",{\"1\":{\"231\":1}}],[\"资源分享\",{\"0\":{\"2\":1}}],[\"垃圾文件等\",{\"1\":{\"231\":1}}],[\"顾名思义\",{\"1\":{\"231\":1}}],[\"打印完再向主机发出申请\",{\"1\":{\"566\":1}}],[\"打印机就从缓冲区按照先进先出的原则依次取出数据并打印\",{\"1\":{\"566\":1}}],[\"打上20230413的taf\",{\"1\":{\"289\":1}}],[\"打开字段访问权限\",{\"1\":{\"229\":1}}],[\"打包工具\",{\"0\":{\"216\":1}}],[\"显然\",{\"1\":{\"464\":1,\"585\":1}}],[\"显然我们要做的就是把其中价格字段处理一下\",{\"1\":{\"229\":1}}],[\"显示行号\",{\"1\":{\"194\":1}}],[\"甚至有没有把这写价格对象抽象一个父类出来\",{\"1\":{\"229\":1}}],[\"甚至觉得前端不是程序员\",{\"1\":{\"147\":1}}],[\"除根结点外\",{\"1\":{\"585\":1}}],[\"除第一个顶点和最后一个顶点外\",{\"1\":{\"540\":1}}],[\"除最后一个外\",{\"1\":{\"505\":1}}],[\"除结构的初始化和销毁操作外\",{\"1\":{\"498\":1}}],[\"除了存放元素自身外\",{\"1\":{\"511\":1}}],[\"除了第一个元素外\",{\"1\":{\"505\":1}}],[\"除了\",{\"1\":{\"419\":1}}],[\"除了日元和人民币的汇率不作处理外\",{\"1\":{\"229\":1}}],[\"除\",{\"1\":{\"240\":1}}],[\"除非遇到网络等特殊情况\",{\"1\":{\"205\":1}}],[\"需求较少也不固定并且不强制必须上线的情况\",{\"1\":{\"287\":1}}],[\"需求是这样的\",{\"1\":{\"229\":1}}],[\"需要分别在两个顶点的边表中遍历\",{\"1\":{\"547\":1}}],[\"需要动态的插入或删除的查找表称为动态查找表\",{\"1\":{\"462\":1}}],[\"需要在实时性和性能之间做折中\",{\"1\":{\"426\":1}}],[\"需要更快速\",{\"1\":{\"420\":1}}],[\"需要定义一个接口\",{\"1\":{\"388\":1}}],[\"需要等待总分行之间反复确认\",{\"1\":{\"368\":1}}],[\"需要映射docker守护进程socket\",{\"1\":{\"364\":1}}],[\"需要和并到master和develop分支\",{\"1\":{\"284\":1}}],[\"需要基于本次上线将所有功能整合\",{\"1\":{\"284\":1}}],[\"需要你把网页请求的\",{\"1\":{\"277\":1}}],[\"需要\",{\"1\":{\"245\":10}}],[\"需要控制b对象函数的返回值\",{\"1\":{\"245\":1}}],[\"需要我们将日志和前台界面的客户信息进行加密处理\",{\"1\":{\"225\":1}}],[\"需要考虑到线程的启动顺序\",{\"1\":{\"207\":1}}],[\"需要借助\",{\"1\":{\"173\":1}}],[\"需要手工输入命令安装各类软件\",{\"1\":{\"150\":1}}],[\"需要不断思考的过程\",{\"1\":{\"137\":1}}],[\"需要不断总结的过程\",{\"1\":{\"137\":1}}],[\"需要具备的能力也很多\",{\"1\":{\"137\":1}}],[\"需要掌握的知识面很广\",{\"1\":{\"137\":1}}],[\"需要合理设计观察者和被观察者的接口\",{\"1\":{\"136\":1}}],[\"需要通知其他模块或组件进行相应的处理\",{\"1\":{\"136\":1}}],[\"需要通知多个其他对象进行相应的处理\",{\"1\":{\"136\":1}}],[\"需要使用\",{\"1\":{\"135\":1}}],[\"需要注意的是\",{\"1\":{\"135\":1,\"136\":1,\"592\":1}}],[\"调用代理对象的方法\",{\"1\":{\"391\":1}}],[\"调用被代理类的方法\",{\"1\":{\"391\":1}}],[\"调用目标对象的方法\",{\"1\":{\"388\":1}}],[\"调用\",{\"1\":{\"320\":1,\"394\":1,\"409\":2,\"411\":1,\"413\":1}}],[\"调用类的方法\",{\"1\":{\"227\":1}}],[\"调用方法和访问字段之后\",{\"1\":{\"227\":1}}],[\"构造出对应的哈夫曼树\",{\"1\":{\"582\":1}}],[\"构造过程中新建了\",{\"1\":{\"581\":1}}],[\"构造一个空队列\",{\"1\":{\"555\":1}}],[\"构造一个空的线性表\",{\"1\":{\"506\":1}}],[\"构造函数可以将一个\",{\"1\":{\"309\":1}}],[\"构造函数\",{\"1\":{\"227\":2}}],[\"构成数据元素的不可分割的最小单位\",{\"1\":{\"492\":1}}],[\"构建的网关框架\",{\"1\":{\"423\":1}}],[\"构建war包和jar包中的manifest文件添加打包git分支明细\",{\"0\":{\"219\":1}}],[\"构建工具\",{\"1\":{\"148\":1}}],[\"父结点的子树来代替\",{\"1\":{\"470\":1}}],[\"父子文件交互主要有下几个函数\",{\"1\":{\"354\":1}}],[\"父子模块传值\",{\"0\":{\"354\":1}}],[\"父类\",{\"1\":{\"227\":2}}],[\"父容器\",{\"1\":{\"128\":1}}],[\"摆脱基础语法后迈入高级特性的第一步就是注解\",{\"1\":{\"227\":1}}],[\"脱敏后的\",{\"1\":{\"225\":1}}],[\"听起来无非就是将返回的\",{\"1\":{\"229\":1}}],[\"听起来这就是个感人的工作\",{\"1\":{\"225\":1}}],[\"听我一个朋友谈起\",{\"1\":{\"93\":1}}],[\"概念的语法和工具\",{\"1\":{\"222\":1}}],[\"动态更新\",{\"1\":{\"428\":1}}],[\"动态更新和版本控制等优点\",{\"1\":{\"426\":1}}],[\"动态组件\",{\"0\":{\"355\":1}}],[\"动态创建对象实例\",{\"1\":{\"227\":1}}],[\"动态代理可以用于实现日志记录\",{\"1\":{\"384\":1}}],[\"动态代理可以用于实现缓存管理\",{\"1\":{\"384\":1}}],[\"动态代理可以用于实现安全控制\",{\"1\":{\"384\":1}}],[\"动态代理可以用于实现横切关注点的模块化\",{\"1\":{\"384\":1}}],[\"动态代理可以用于远程方法调用\",{\"1\":{\"384\":1}}],[\"动态代理可以延迟加载对象\",{\"1\":{\"384\":1}}],[\"动态代理在需要在运行时对对象进行控制\",{\"1\":{\"384\":1}}],[\"动态代理\",{\"0\":{\"381\":1},\"1\":{\"227\":1}}],[\"动态地将切面织入到核心业务逻辑中\",{\"1\":{\"222\":1}}],[\"动静分离的目的就是减轻后台服务器的压力\",{\"1\":{\"170\":1}}],[\"动静分离\",{\"0\":{\"170\":1}}],[\"织入\",{\"1\":{\"222\":1}}],[\"等当前层或当前行处理完毕就可以进行处理下一层或者下一行\",{\"1\":{\"565\":1}}],[\"等于由顶点i到顶点j的长度为n的路径的数目\",{\"1\":{\"544\":1}}],[\"等方法\",{\"1\":{\"413\":1}}],[\"等方法来避免空指针异常的出现\",{\"1\":{\"395\":1}}],[\"等原子类将当前值加一减一\",{\"1\":{\"376\":1}}],[\"等我用明白了再说\",{\"1\":{\"321\":1}}],[\"等待确定上线日期后\",{\"1\":{\"289\":1}}],[\"等上线日期确定后再创建release分支并合并进去\",{\"1\":{\"287\":1}}],[\"等到release分支已经完全测试完毕\",{\"1\":{\"287\":1}}],[\"等\",{\"1\":{\"241\":1,\"294\":1,\"362\":1,\"409\":1,\"413\":1,\"439\":1}}],[\"等类型\",{\"1\":{\"222\":1}}],[\"等整个文件的翻译\",{\"1\":{\"113\":1}}],[\"切换容器登录账户\",{\"1\":{\"364\":1}}],[\"切点\",{\"1\":{\"222\":1}}],[\"切面在特定连接点上执行的操作\",{\"1\":{\"222\":1}}],[\"切面在这些点上执行它的操作\",{\"1\":{\"222\":1}}],[\"切面\",{\"1\":{\"222\":1,\"224\":1}}],[\"切面编程\",{\"0\":{\"221\":1}}],[\"程序员是要不断学习的\",{\"1\":{\"419\":1}}],[\"程序员都是阅读过的\",{\"1\":{\"291\":1}}],[\"程序员就像赛车手一样\",{\"1\":{\"122\":1}}],[\"程序执行过程中明确的点\",{\"1\":{\"222\":1}}],[\"连通分量的生成树构成了非连通图的生成森林\",{\"1\":{\"535\":1}}],[\"连通图的生成树是包含图中全部顶点的一个极小连通子图\",{\"1\":{\"535\":1}}],[\"连通图和连通分量\",{\"0\":{\"533\":1}}],[\"连通\",{\"0\":{\"533\":1}}],[\"连接参数后就可以很方便的使用了\",{\"1\":{\"446\":1}}],[\"连接点\",{\"1\":{\"222\":1}}],[\"连比尔\",{\"1\":{\"2\":1}}],[\"安全性\",{\"1\":{\"430\":1}}],[\"安全性和权限控制和监控和告警\",{\"1\":{\"428\":1}}],[\"安全控制\",{\"1\":{\"384\":1,\"392\":1}}],[\"安全测试\",{\"1\":{\"362\":1}}],[\"安全\",{\"1\":{\"222\":1}}],[\"安装必要的插件\",{\"1\":{\"364\":1}}],[\"安装\",{\"0\":{\"184\":1}}],[\"安装完成后就可以在\",{\"1\":{\"155\":1}}],[\"安装成功后\",{\"1\":{\"153\":1}}],[\"安装的话会有一些初始化操作的步骤\",{\"1\":{\"153\":1}}],[\"脑海中想到的只有零零散散的面试题\",{\"1\":{\"222\":1}}],[\"面对该过时\",{\"1\":{\"419\":1}}],[\"面对着越来越火热的ai技术\",{\"1\":{\"0\":1}}],[\"面板可以展示单元测试对代码的覆盖程度\",{\"1\":{\"239\":1}}],[\"面向切面编程\",{\"1\":{\"222\":1,\"384\":1}}],[\"脚本\",{\"0\":{\"235\":1}}],[\"脚本中逻辑判断\",{\"0\":{\"220\":1}}],[\"脚本进行启动\",{\"1\":{\"155\":1}}],[\"活还是得照干\",{\"1\":{\"218\":1}}],[\"归\",{\"1\":{\"218\":1}}],[\"强连通图和强连通分量\",{\"0\":{\"534\":1}}],[\"强制更新收集依赖\",{\"1\":{\"348\":1}}],[\"强大的任务库和可拓展性这些优点放在现在就是一句话\",{\"1\":{\"217\":1}}],[\"强调\",{\"0\":{\"42\":1,\"71\":1}}],[\"里也给出了官方推荐的组件配合建议\",{\"1\":{\"421\":1}}],[\"里程碑般的项目\",{\"1\":{\"366\":1}}],[\"里面的步骤也是根据一个个的命令标签从上到下执行的\",{\"1\":{\"217\":1}}],[\"里面的示例大部分都还在基于\",{\"1\":{\"96\":1}}],[\"里的文件\",{\"1\":{\"332\":1}}],[\"里的价格字段都是\",{\"1\":{\"229\":1}}],[\"里的\",{\"1\":{\"217\":1}}],[\"先序遍历除去第一棵树之后剩余树构成的森林\",{\"1\":{\"603\":1}}],[\"先序遍历第一棵树中根结点的子树森林\",{\"1\":{\"603\":1}}],[\"先序遍历森林\",{\"1\":{\"603\":1}}],[\"先依次遍历根结点的每棵子树\",{\"1\":{\"603\":1}}],[\"先访问根结点\",{\"1\":{\"603\":1}}],[\"先根遍历\",{\"1\":{\"603\":1}}],[\"先存储行号较小的元素\",{\"1\":{\"498\":1}}],[\"先行后列\",{\"1\":{\"498\":1}}],[\"先将给定值和根结点关键字比较\",{\"1\":{\"468\":1}}],[\"先比较标签名\",{\"1\":{\"346\":1}}],[\"先列举一个简单的java项目打\",{\"1\":{\"217\":1}}],[\"先看下面的例子\",{\"1\":{\"171\":1}}],[\"言归正传\",{\"1\":{\"217\":1,\"420\":1}}],[\"拥有更多的功能和特性\",{\"1\":{\"325\":1}}],[\"拥有更多样的协作流程将更有利于我们管理项目\",{\"1\":{\"98\":1}}],[\"拥抱\",{\"1\":{\"217\":1}}],[\"认识到ant还是因为刚步入社会的公司里总有些老旧的纯\",{\"1\":{\"217\":1}}],[\"认识目录\",{\"0\":{\"157\":1}}],[\"获取图g中边\",{\"1\":{\"548\":1}}],[\"获取默认值\",{\"0\":{\"401\":1}}],[\"获取一个\",{\"0\":{\"398\":1}}],[\"获取方法如下\",{\"1\":{\"304\":1}}],[\"获取方法返回值\",{\"1\":{\"225\":1}}],[\"获取对应的环境变量值\",{\"1\":{\"237\":1}}],[\"获取到价格后通过\",{\"1\":{\"234\":1}}],[\"获取币种对字段\",{\"1\":{\"229\":1}}],[\"获取类的信息\",{\"1\":{\"227\":1}}],[\"获取类信息\",{\"1\":{\"227\":1}}],[\"获取更多的钩子进行操作\",{\"1\":{\"225\":1}}],[\"获取不到个人用户下的环境变量\",{\"1\":{\"214\":1}}],[\"获取所有具体执行者组件\",{\"1\":{\"130\":1}}],[\"让其每个结点与完全二叉树的结点相对照\",{\"1\":{\"592\":1}}],[\"让我们聊一下它的底层原理\",{\"1\":{\"371\":1}}],[\"让我们从\",{\"1\":{\"370\":1}}],[\"让我考虑和学习到了之前从来没有接触过的东西\",{\"1\":{\"366\":1}}],[\"让开发者有机会在特定阶段运行自己的代码\",{\"1\":{\"353\":1}}],[\"让对象原型的写法更加清晰\",{\"1\":{\"317\":1}}],[\"让\",{\"1\":{\"214\":1}}],[\"让多台环境不用重复配置相同的配置\",{\"1\":{\"213\":1}}],[\"让多个对象都有机会处理请求\",{\"1\":{\"124\":1}}],[\"<=\",{\"1\":{\"501\":1,\"502\":2,\"589\":1}}],[\"<groupid>de\",{\"1\":{\"433\":1,\"436\":1}}],[\"<groupid>org\",{\"1\":{\"433\":1,\"436\":1}}],[\"<groupid>cglib<\",{\"1\":{\"391\":1}}],[\"<version>3\",{\"1\":{\"391\":1}}],[\"<input\",{\"1\":{\"344\":1}}],[\"<span>\",{\"1\":{\"344\":1}}],[\"<span\",{\"1\":{\"341\":2}}],[\"<script>\",{\"1\":{\"334\":1,\"335\":1}}],[\"<script\",{\"0\":{\"336\":1},\"1\":{\"332\":1,\"333\":1,\"336\":1,\"338\":1,\"339\":1,\"340\":1,\"341\":1,\"342\":1,\"343\":1,\"344\":1,\"345\":1}}],[\"<h1\",{\"1\":{\"339\":1}}],[\"<dependency>\",{\"1\":{\"391\":1,\"433\":2,\"436\":2}}],[\"<dependencies>\",{\"1\":{\"391\":1}}],[\"<delete\",{\"1\":{\"217\":2}}],[\"<div\",{\"1\":{\"338\":1,\"339\":1,\"340\":4,\"342\":1,\"343\":1,\"345\":1}}],[\"<button\",{\"1\":{\"332\":1,\"342\":1}}],[\"<bean\",{\"1\":{\"214\":1}}],[\"<artifactid>spring\",{\"1\":{\"433\":2,\"436\":2}}],[\"<artifactid>cglib<\",{\"1\":{\"391\":1}}],[\"<arg\",{\"1\":{\"219\":3}}],[\"<ant\",{\"1\":{\"220\":1}}],[\"<attribute\",{\"1\":{\"217\":1,\"219\":1}}],[\"<exec\",{\"1\":{\"219\":1}}],[\"<manifest\",{\"1\":{\"219\":1}}],[\"<manifest>\",{\"1\":{\"217\":1}}],[\"<mkdir\",{\"1\":{\"217\":2}}],[\"<jar\",{\"1\":{\"217\":1}}],[\"<javac\",{\"1\":{\"217\":1}}],[\"<project\",{\"1\":{\"217\":1}}],[\"<property\",{\"1\":{\"214\":1,\"217\":4}}],[\"<\",{\"1\":{\"214\":1,\"217\":9,\"219\":3,\"220\":2,\"224\":1,\"236\":2,\"237\":1,\"298\":2,\"332\":3,\"334\":2,\"335\":2,\"336\":2,\"338\":2,\"339\":2,\"340\":6,\"341\":4,\"342\":3,\"343\":3,\"344\":3,\"345\":3,\"391\":3,\"433\":2,\"436\":2,\"458\":6,\"485\":1,\"498\":1,\"500\":1,\"501\":2}}],[\"<template>\",{\"1\":{\"332\":1,\"334\":1,\"335\":1,\"336\":1,\"338\":1,\"339\":1,\"340\":1,\"341\":1,\"342\":1,\"343\":1,\"344\":1,\"345\":1}}],[\"<target\",{\"1\":{\"217\":3,\"219\":1,\"220\":2}}],[\"<t>\",{\"1\":{\"130\":1}}],[\"<t\",{\"1\":{\"130\":1}}],[\"另一端只允许删除\",{\"1\":{\"559\":1}}],[\"另一个线程可以读到这个变量值\",{\"1\":{\"371\":1}}],[\"另一个\",{\"1\":{\"347\":1}}],[\"另一个是设置\",{\"1\":{\"557\":1}}],[\"另一个是\",{\"1\":{\"308\":4}}],[\"另一种就是放在环境变量中\",{\"1\":{\"213\":1}}],[\"另外\",{\"1\":{\"133\":1,\"430\":1}}],[\"种类和接收方式也有要求\",{\"1\":{\"209\":1}}],[\"交易以及账务处理都是采用手工方式\",{\"1\":{\"368\":1}}],[\"交易的询价\",{\"1\":{\"368\":1}}],[\"交易所返回的价格存储到本地阻塞队列中\",{\"1\":{\"208\":1}}],[\"交集\",{\"1\":{\"311\":1}}],[\"交互的\",{\"1\":{\"204\":1}}],[\"长链接\",{\"1\":{\"208\":1}}],[\"长难句\",{\"0\":{\"58\":1}}],[\"价格处理与转发\",{\"0\":{\"212\":1}}],[\"价格的处理与转发\",{\"0\":{\"209\":1}}],[\"价格的接收与筛选\",{\"0\":{\"208\":1}}],[\"价格接收转发前置项目\",{\"1\":{\"204\":1}}],[\"方便遍历\",{\"1\":{\"594\":1}}],[\"方便系统的跟踪和调试\",{\"1\":{\"384\":1}}],[\"方便\",{\"1\":{\"368\":1}}],[\"方便以后更高效合理的进行软件的高效迭代和稳定交付\",{\"1\":{\"362\":1}}],[\"方便项目未来的对接和开发\",{\"1\":{\"286\":1}}],[\"方便其他审核人去拿到这些可能存在不能及时审批隐患的材料\",{\"1\":{\"233\":1}}],[\"方便前台展示\",{\"1\":{\"229\":1}}],[\"方法之后\",{\"1\":{\"416\":1}}],[\"方法可以让您的\",{\"1\":{\"416\":1}}],[\"方法可以获取字段对象\",{\"1\":{\"227\":1}}],[\"方法可以获取方法对象\",{\"1\":{\"227\":1}}],[\"方法可以获取构造函数对象\",{\"1\":{\"227\":1}}],[\"方法只会被调用一次\",{\"1\":{\"416\":1}}],[\"方法处理\",{\"1\":{\"414\":1,\"415\":1}}],[\"方法检查\",{\"1\":{\"413\":1}}],[\"方法是执行实际任务的主要方法\",{\"1\":{\"413\":1}}],[\"方法是否被调用\",{\"1\":{\"254\":1}}],[\"方法简单地创建或加载一些数据\",{\"1\":{\"412\":1}}],[\"方法被设计成只调用一次\",{\"1\":{\"412\":1}}],[\"方法被调用了至少3次\",{\"1\":{\"256\":1}}],[\"方法被调用了2次\",{\"1\":{\"255\":1}}],[\"方法来处理来自客户端\",{\"1\":{\"413\":1}}],[\"方法来处理客户端的请求\",{\"1\":{\"411\":1}}],[\"方法来调用web\",{\"1\":{\"270\":1}}],[\"方法返回值\",{\"0\":{\"402\":1}}],[\"方法创建一个包含指定值的\",{\"1\":{\"396\":2}}],[\"方法创建一个空的\",{\"1\":{\"396\":1}}],[\"方法创建代理对象\",{\"1\":{\"388\":1}}],[\"方法创建代理对象并执行目标方法\",{\"1\":{\"387\":1}}],[\"方法中\",{\"1\":{\"387\":1}}],[\"方法中必须有\",{\"1\":{\"317\":1}}],[\"方法定义参数和异常处理器参数不会在线程之间共享\",{\"1\":{\"379\":1}}],[\"方法期望接收一个\",{\"1\":{\"351\":1}}],[\"方法接收两个函数作为参数\",{\"1\":{\"319\":1}}],[\"方法使用\",{\"1\":{\"319\":1}}],[\"方法间也不能加分号\",{\"1\":{\"317\":1}}],[\"方法时\",{\"1\":{\"260\":1}}],[\"方法并传入任何参数时\",{\"1\":{\"259\":1}}],[\"方法并传入参数\",{\"1\":{\"253\":1}}],[\"方法从未被调用\",{\"1\":{\"257\":1}}],[\"方法和字段等信息\",{\"1\":{\"227\":1}}],[\"方法\",{\"0\":{\"412\":1,\"413\":1,\"414\":1,\"415\":1,\"416\":1},\"1\":{\"227\":1,\"245\":1,\"246\":1,\"320\":1,\"411\":2,\"412\":1,\"444\":1}}],[\"方法二\",{\"1\":{\"225\":1}}],[\"方法一\",{\"1\":{\"225\":1}}],[\"方法获取到环境变量的\",{\"1\":{\"214\":1}}],[\"方法在项目启动的时候从容器中拿到线程池来\",{\"1\":{\"207\":1}}],[\"方案设计\",{\"0\":{\"206\":1}}],[\"与表中中间位置的元素比较\",{\"1\":{\"464\":1}}],[\"与此相区别的定义是头结点\",{\"1\":{\"511\":1}}],[\"与此对应\",{\"1\":{\"462\":1}}],[\"与此伴随的各行各业要被替代的恐慌也开始蔓延\",{\"1\":{\"2\":1}}],[\"与应用程序进行交互和管理\",{\"1\":{\"430\":1}}],[\"与之对应\",{\"1\":{\"372\":1}}],[\"与之相对的就是\",{\"1\":{\"348\":1}}],[\"与普通变量不同\",{\"1\":{\"347\":1}}],[\"与导入\",{\"1\":{\"318\":1}}],[\"与\",{\"0\":{\"298\":1,\"306\":1,\"312\":1},\"1\":{\"309\":1,\"317\":1,\"327\":1,\"329\":1,\"349\":1,\"362\":1,\"498\":1}}],[\"与多种测试框架\",{\"1\":{\"250\":1}}],[\"与交易所建立通讯之后\",{\"1\":{\"205\":1}}],[\"置于其他的知识点就放在下面一一介绍了\",{\"1\":{\"204\":1}}],[\"原子类型\",{\"1\":{\"492\":1}}],[\"原子操作\",{\"0\":{\"376\":1},\"1\":{\"380\":1}}],[\"原来\",{\"1\":{\"280\":1}}],[\"原则\",{\"1\":{\"241\":2}}],[\"原则和\",{\"1\":{\"241\":1}}],[\"原生的\",{\"1\":{\"204\":1}}],[\"原级比较\",{\"0\":{\"54\":1}}],[\"往往只需要少量代码就可以描述出解题过程中的多次重复计算\",{\"1\":{\"564\":1}}],[\"往往是在两者之间进行权衡\",{\"1\":{\"459\":1}}],[\"往往是和内网的后台服务器配合\",{\"1\":{\"162\":1}}],[\"往往大家都是接受其思想而通过短横线来代替\",{\"1\":{\"324\":1}}],[\"往后台项目推送价格有使用\",{\"1\":{\"204\":1}}],[\"框架的话\",{\"1\":{\"453\":1}}],[\"框架目前也有很多版本\",{\"1\":{\"246\":1}}],[\"框架自动生成代码\",{\"1\":{\"242\":1}}],[\"框架\",{\"1\":{\"222\":1}}],[\"框架选型\",{\"0\":{\"204\":1}}],[\"框架和其他事件处理系统中广泛使用\",{\"1\":{\"128\":1}}],[\"趁着了解业务的人都还在和项目并不复杂的时候\",{\"1\":{\"202\":1}}],[\"核心团队讨论中的许多想法\",{\"1\":{\"329\":1}}],[\"核心在于它的结构\",{\"1\":{\"294\":1}}],[\"核心代码如下\",{\"1\":{\"202\":1}}],[\"核心概念\",{\"0\":{\"143\":1,\"294\":1}}],[\"纯\",{\"1\":{\"202\":1}}],[\"毒瘤\",{\"1\":{\"202\":1}}],[\"想起来就做一题吧\",{\"1\":{\"479\":1}}],[\"想要知道\",{\"1\":{\"448\":1}}],[\"想要更加详细了解\",{\"1\":{\"428\":1}}],[\"想要修改代码最好最保险\",{\"1\":{\"229\":1}}],[\"想要掌握好算法就必须在数据结构上下好功夫\",{\"1\":{\"91\":1}}],[\"想学会ant最主要的就是学会读懂构建脚本\",{\"1\":{\"217\":1}}],[\"想把之前的\",{\"1\":{\"202\":1}}],[\"地址\",{\"1\":{\"437\":1}}],[\"地动山摇\",{\"1\":{\"419\":1}}],[\"地图应用等\",{\"1\":{\"200\":1}}],[\"地理信息存储和查询\",{\"1\":{\"200\":1}}],[\"积分榜等\",{\"1\":{\"200\":1}}],[\"排序就是重新排列表中的元素\",{\"1\":{\"487\":1}}],[\"排序的概念\",{\"0\":{\"487\":1}}],[\"排序\",{\"0\":{\"486\":1},\"1\":{\"485\":1}}],[\"排序方式有以下三种\",{\"1\":{\"380\":1}}],[\"排除日元\",{\"1\":{\"229\":1}}],[\"排行榜\",{\"1\":{\"200\":1,\"441\":1}}],[\"排列事件\",{\"1\":{\"142\":1}}],[\"适合在不同的环境下使用\",{\"1\":{\"487\":1}}],[\"适合动态查找表的查找方式有二叉排序树的查找\",{\"1\":{\"462\":1}}],[\"适合中小规模的消息队列需求\",{\"1\":{\"200\":1}}],[\"适当的时候移交给\",{\"1\":{\"412\":1}}],[\"适用于顺序存储或者链式存储的线性表\",{\"1\":{\"489\":1}}],[\"适用于一个线程访问同步块场景\",{\"1\":{\"375\":1}}],[\"适用于消费品行业\",{\"1\":{\"103\":1}}],[\"机器上会失效\",{\"1\":{\"235\":1}}],[\"机器为准\",{\"1\":{\"235\":1}}],[\"机器并下载\",{\"1\":{\"155\":1}}],[\"机制实现消息队列\",{\"1\":{\"200\":1}}],[\"利用栈底位置不变的特性\",{\"1\":{\"571\":1}}],[\"利用一组地址连续的存储单元存放自栈底到栈顶的数据元素\",{\"1\":{\"570\":1}}],[\"利用redis的原子操作\",{\"1\":{\"200\":1}}],[\"利用redis的列表\",{\"1\":{\"200\":1}}],[\"利用便利贴和白板等工具\",{\"1\":{\"141\":1}}],[\"读队头元素\",{\"1\":{\"555\":1}}],[\"读内存中的公共状态进行隐式通讯\",{\"1\":{\"378\":1}}],[\"读取栈顶元素\",{\"1\":{\"569\":1}}],[\"读取客户端\",{\"1\":{\"409\":2}}],[\"读取文件获取的配置\",{\"1\":{\"214\":1}}],[\"读取速度快\",{\"1\":{\"200\":1}}],[\"读写速度非常快\",{\"1\":{\"199\":1}}],[\"购物车等\",{\"1\":{\"200\":1}}],[\"会发现不仅仅是尾指针在增加的同时头指针也在增加\",{\"1\":{\"556\":1}}],[\"会好一些\",{\"1\":{\"463\":1}}],[\"会话的登录可能会面临一些挑战\",{\"1\":{\"448\":1}}],[\"会话存储\",{\"1\":{\"200\":1,\"441\":1}}],[\"会将锁升级为重量级锁\",{\"1\":{\"374\":1}}],[\"会先在对象头中存储锁记录的指针\",{\"1\":{\"374\":1}}],[\"会先比对新旧虚拟\",{\"1\":{\"346\":1}}],[\"会在对当头和栈帧\",{\"1\":{\"373\":1}}],[\"会保证每个\",{\"1\":{\"372\":1}}],[\"会向处理器发一条\",{\"1\":{\"371\":1}}],[\"会追踪在渲染过程中使用的每一个\",{\"1\":{\"347\":1}}],[\"会自动检测到这个变化\",{\"1\":{\"347\":1}}],[\"会把标签增加display\",{\"1\":{\"341\":1}}],[\"会把你的标签注释掉达到隐藏的效果\",{\"1\":{\"340\":1}}],[\"会有\",{\"1\":{\"324\":1}}],[\"会占据大量带宽\",{\"1\":{\"170\":1}}],[\"减轻数据库负载\",{\"1\":{\"200\":1}}],[\"减少业务系统因为业务改变造成的任务量\",{\"1\":{\"103\":1}}],[\"极大提高数据的读取速度\",{\"1\":{\"200\":1}}],[\"商品信息等\",{\"1\":{\"200\":1}}],[\"事了拂衣去\",{\"1\":{\"341\":1}}],[\"事务管理\",{\"1\":{\"392\":1}}],[\"事务管理等\",{\"1\":{\"384\":1}}],[\"事务\",{\"1\":{\"222\":1}}],[\"事务支持\",{\"1\":{\"199\":1}}],[\"事件通知\",{\"1\":{\"430\":1}}],[\"事件通常以过去时态动词短语描述\",{\"1\":{\"142\":1}}],[\"事件消息总线\",{\"1\":{\"421\":1}}],[\"事件监听和子元素等其他属性\",{\"1\":{\"346\":1}}],[\"事件来处理每个平台价格的转发\",{\"1\":{\"209\":1}}],[\"事件风暴强调团队成员之间的互动和协作\",{\"1\":{\"141\":1}}],[\"事件风暴的核心思想是通过可视化事件流来揭示业务领域中的重要行为和互动\",{\"1\":{\"140\":1}}],[\"事件风暴\",{\"0\":{\"140\":1},\"1\":{\"139\":1}}],[\"事件驱动的系统和消息队列等场景\",{\"1\":{\"136\":1}}],[\"事件发布者\",{\"1\":{\"136\":1}}],[\"事件上下文可以作为事件对象的一部分\",{\"1\":{\"135\":1}}],[\"事件上下文是事件发生时的上下文信息\",{\"1\":{\"135\":1}}],[\"事件上下文\",{\"1\":{\"135\":1}}],[\"事件源可以是任何对象\",{\"1\":{\"135\":1}}],[\"事件源是触发事件的对象或组件\",{\"1\":{\"135\":1}}],[\"事件源\",{\"1\":{\"135\":1}}],[\"事件对象会被发布\",{\"1\":{\"135\":1}}],[\"事件对象中包含了相关的数据和信息\",{\"1\":{\"135\":1}}],[\"事件\",{\"1\":{\"135\":1}}],[\"事件处理系统\",{\"1\":{\"128\":1}}],[\"支持多种授权流程\",{\"1\":{\"451\":1}}],[\"支持多种数据结构\",{\"1\":{\"199\":1}}],[\"支持通过邮件\",{\"1\":{\"430\":1}}],[\"支持虚拟机进行方法调用和方法执行的数据结构\",{\"1\":{\"380\":1}}],[\"支持三种书写风格\",{\"1\":{\"333\":1}}],[\"支持分布式部署等特点而迅速普及\",{\"1\":{\"293\":1}}],[\"支持自定义的读取方式\",{\"1\":{\"280\":1}}],[\"支持\",{\"1\":{\"246\":4,\"453\":1}}],[\"支持持久化\",{\"1\":{\"200\":1}}],[\"支持事务\",{\"1\":{\"199\":1}}],[\"支持lua脚本\",{\"1\":{\"199\":1}}],[\"便于管理和配置复用\",{\"1\":{\"364\":1}}],[\"便于解决复杂的数据存储和操作问题\",{\"1\":{\"199\":1}}],[\"便于讨论和理解\",{\"1\":{\"141\":1}}],[\"丰富的数据类型\",{\"1\":{\"199\":1}}],[\"具有n个\",{\"1\":{\"590\":1}}],[\"具有n个结点的m叉树的最小高度为\",{\"1\":{\"587\":1}}],[\"具有两个特点\",{\"1\":{\"585\":1}}],[\"具有不同带权长度的二叉树\",{\"1\":{\"580\":1}}],[\"具有更少的规范\",{\"1\":{\"329\":1}}],[\"具有丰富的功能和高性能\",{\"1\":{\"198\":1}}],[\"具体详情见其官网文档\",{\"1\":{\"423\":1}}],[\"具体有以下三种锁\",{\"1\":{\"372\":1}}],[\"具体的订阅者类\",{\"1\":{\"134\":1}}],[\"具体的发布者类\",{\"1\":{\"134\":1}}],[\"具体处理者\",{\"1\":{\"125\":1,\"130\":1}}],[\"具体应用在关键业务流程\",{\"1\":{\"103\":1}}],[\"集中存储在一台服务器上的方式开始暴露出可扩展性和性能瓶颈\",{\"1\":{\"293\":1}}],[\"集成测试\",{\"1\":{\"362\":1}}],[\"集成\",{\"1\":{\"268\":1}}],[\"集成交易所的\",{\"1\":{\"208\":1}}],[\"集合\",{\"1\":{\"198\":1,\"494\":1}}],[\"集群化的水平扩容\",{\"1\":{\"174\":1}}],[\"指向结点第一个孩子结点的指针\",{\"1\":{\"601\":1}}],[\"指示双亲结点在数组中的位置\",{\"1\":{\"599\":1}}],[\"指通过一组任意的存储单元来存储线性表中的数据元素\",{\"1\":{\"511\":1}}],[\"指出运算的具体操作步骤\",{\"1\":{\"496\":1}}],[\"指出运算的功能\",{\"1\":{\"496\":1}}],[\"指采取只进行利息轧差计算\",{\"1\":{\"368\":1}}],[\"指令级并行的重新排序\",{\"1\":{\"380\":1}}],[\"指令重排\",{\"0\":{\"380\":1}}],[\"指令尝试将对象的锁记录指针替换为指向当前线程的指针\",{\"1\":{\"374\":1}}],[\"指令\",{\"0\":{\"337\":1}}],[\"指针就会从函数头部或者上一次停下来的地方开始执行\",{\"1\":{\"320\":1}}],[\"指定模拟对象方法的调用应该如何进行自定义处理\",{\"1\":{\"260\":1}}],[\"指定当调用\",{\"1\":{\"259\":1}}],[\"指定当调用模拟对象的方法时应该抛出的异常\",{\"1\":{\"259\":1}}],[\"指定当调用方法时应该返回的值\",{\"1\":{\"253\":1}}],[\"指定一个或多个连接点\",{\"1\":{\"222\":1}}],[\"指定这个代理集\",{\"1\":{\"164\":1}}],[\"指的是将数据在计算机系统中长期保存或持久存储的过程和方法\",{\"1\":{\"197\":1}}],[\"持续集成\",{\"1\":{\"362\":1}}],[\"持续交付\",{\"1\":{\"182\":1,\"362\":1}}],[\"持久化\",{\"1\":{\"199\":1}}],[\"持久化是计算机科学中一个重要的概念\",{\"1\":{\"197\":1}}],[\"引用该配之类的话就需要实现一个\",{\"1\":{\"445\":1}}],[\"引入头结点之后有两个优点\",{\"1\":{\"511\":1}}],[\"引入依赖\",{\"0\":{\"433\":1,\"436\":1}}],[\"引入\",{\"1\":{\"391\":1}}],[\"引入了双链表的概念\",{\"1\":{\"519\":1}}],[\"引入了\",{\"1\":{\"372\":1}}],[\"引入了模块化\",{\"1\":{\"318\":1}}],[\"引入了一种称为\",{\"1\":{\"148\":1}}],[\"引言\",{\"0\":{\"197\":1,\"202\":1,\"239\":1,\"382\":1,\"441\":1}}],[\"按照层序排序后\",{\"1\":{\"589\":1}}],[\"按照层序编号后\",{\"1\":{\"589\":1}}],[\"按照某种搜索方法沿着图中的边对图中的所有顶点访问一次且仅访问一次\",{\"1\":{\"549\":1}}],[\"按照组件\",{\"1\":{\"130\":1}}],[\"按列对每个元素进行检测\",{\"1\":{\"544\":1}}],[\"按位查找元素\",{\"1\":{\"506\":1}}],[\"按值查找元素\",{\"1\":{\"506\":1}}],[\"按n查找下一个\",{\"1\":{\"194\":1}}],[\"从双亲结点指向子结点\",{\"1\":{\"586\":1}}],[\"从上述的构造过程中可以看出哈夫曼树具有一下特点\",{\"1\":{\"581\":1}}],[\"从树的根结点到任意结点的路径长度与该结点上的权值的乘积\",{\"1\":{\"580\":1}}],[\"从顶点u出发到顶点v的最短路径若存在\",{\"1\":{\"541\":1}}],[\"从v到w和从w到v之间都有路径\",{\"1\":{\"534\":1}}],[\"从该结点到任意一个叶结点的简单路径上\",{\"1\":{\"476\":1}}],[\"从判定树可以看出\",{\"1\":{\"464\":1}}],[\"从一端开始查找到表的另一端\",{\"1\":{\"463\":1}}],[\"从查找表中删除某个数据元素\",{\"1\":{\"462\":1}}],[\"从图中来看\",{\"1\":{\"379\":1}}],[\"从抽象的角度来讲\",{\"1\":{\"379\":1}}],[\"从需求说明书到设计到落地到测试到联调至上线\",{\"1\":{\"366\":1}}],[\"从概念上讲\",{\"1\":{\"347\":1}}],[\"从它可以获取异步操作的消息\",{\"1\":{\"319\":1}}],[\"从单一服务向微服务架构发展的趋势\",{\"1\":{\"293\":1}}],[\"从2017年9月25日手册正式发布\",{\"1\":{\"291\":1}}],[\"从develop创建\",{\"1\":{\"289\":1}}],[\"从\",{\"1\":{\"289\":7,\"376\":1}}],[\"从表面看\",{\"1\":{\"267\":1}}],[\"从中取到变量名和值\",{\"1\":{\"237\":1}}],[\"从交易所获取的价格虽然密集的\",{\"1\":{\"208\":1}}],[\"从尾部检索\",{\"1\":{\"194\":1}}],[\"从头检索\",{\"1\":{\"194\":1}}],[\"从而使字符的平均长度减短\",{\"1\":{\"582\":1}}],[\"从而使链表形成一个环状\",{\"1\":{\"523\":1}}],[\"从而使逻辑上相邻的两个元素在物理位置上也相邻\",{\"1\":{\"508\":1}}],[\"从而降低顺序查找失败的平均查找长度\",{\"1\":{\"463\":1}}],[\"从而帮助我们选择合适的算法\",{\"1\":{\"459\":1}}],[\"从而在管理界面上展示和监控这些数据\",{\"1\":{\"430\":1}}],[\"从而实现服务的发现和调用\",{\"1\":{\"427\":1}}],[\"从而实现某个预期的业务目标\",{\"1\":{\"103\":1}}],[\"从而避免了不必要的对象创建和初始化过程\",{\"1\":{\"384\":1}}],[\"从而为异步编程提供解决方案\",{\"1\":{\"320\":1}}],[\"从而验证函数逻辑的正确性\",{\"1\":{\"245\":1}}],[\"从而减少对外部系统的依赖\",{\"1\":{\"143\":1}}],[\"从而提高软件系统的可维护性和可扩展性\",{\"1\":{\"139\":1}}],[\"从而形成一条链\",{\"1\":{\"124\":1}}],[\"光标移至行尾\",{\"1\":{\"194\":1}}],[\"光标移到行首\",{\"1\":{\"194\":1}}],[\"数字或者其他字符\",{\"1\":{\"573\":1}}],[\"数字0\",{\"1\":{\"194\":1}}],[\"数\",{\"1\":{\"568\":1}}],[\"数组中依然可以存放数组\",{\"1\":{\"556\":1}}],[\"数组只会有存取和修改元素的操作\",{\"1\":{\"498\":1}}],[\"数组是线性表的推广\",{\"1\":{\"498\":1}}],[\"数组是由\",{\"1\":{\"498\":1}}],[\"数组\",{\"0\":{\"498\":1}}],[\"数组和特殊矩阵\",{\"0\":{\"497\":1}}],[\"数组或者\",{\"1\":{\"348\":1}}],[\"数组模型的解构\",{\"0\":{\"300\":1}}],[\"数据域\",{\"1\":{\"593\":2}}],[\"数据的运算\",{\"0\":{\"496\":1}}],[\"数据的基本单位\",{\"1\":{\"492\":1}}],[\"数据类型\",{\"1\":{\"492\":1}}],[\"数据对象\",{\"1\":{\"492\":1}}],[\"数据项\",{\"1\":{\"492\":1}}],[\"数据元素\",{\"1\":{\"492\":1}}],[\"数据元素中唯一标识该元素的某个数据项的值\",{\"1\":{\"462\":1}}],[\"数据\",{\"1\":{\"492\":1}}],[\"数据持久化\",{\"1\":{\"364\":1}}],[\"数据格式大致如下\",{\"1\":{\"280\":1}}],[\"数据格式\",{\"1\":{\"270\":1}}],[\"数据统计\",{\"1\":{\"231\":1}}],[\"数据备份\",{\"1\":{\"231\":1}}],[\"数据能够被保留并在需要时恢复\",{\"1\":{\"197\":1}}],[\"数据校验等\",{\"1\":{\"128\":1}}],[\"数据处理管道可以由一系列的数据处理步骤组成\",{\"1\":{\"128\":1}}],[\"数据处理管道\",{\"1\":{\"128\":1}}],[\"数据库触发器\",{\"1\":{\"136\":1}}],[\"数据库的底层结构和高级用法显得尤为重要\",{\"1\":{\"93\":1}}],[\"数据库\",{\"0\":{\"93\":1},\"1\":{\"441\":1}}],[\"数据结构是算法的基础\",{\"1\":{\"493\":1}}],[\"数据结构是算法的基石\",{\"1\":{\"457\":1}}],[\"数据结构三要素\",{\"0\":{\"493\":1}}],[\"数据结构\",{\"1\":{\"91\":1,\"419\":2,\"492\":1}}],[\"数据结构和算法\",{\"0\":{\"91\":1}}],[\"z\",{\"1\":{\"455\":1,\"470\":8}}],[\"zhangsan\",{\"1\":{\"253\":2}}],[\"zero\",{\"1\":{\"229\":1,\"308\":4}}],[\"zxvf\",{\"1\":{\"193\":2}}],[\"zip\",{\"1\":{\"193\":5}}],[\"zcvf\",{\"1\":{\"193\":1}}],[\"压缩目录为\",{\"1\":{\"193\":2}}],[\"压缩过滤器等\",{\"1\":{\"128\":1}}],[\"编译的时候就会报错\",{\"1\":{\"394\":1}}],[\"编译器在生成指令序列的时候插入特定类型的内存屏障\",{\"1\":{\"380\":1}}],[\"编译器在不改变单线程程序语意的情况下可以进行语句的执行顺序\",{\"1\":{\"380\":1}}],[\"编译器优化的重新排序\",{\"1\":{\"380\":1}}],[\"编译器和处理器常常会对指令进行重新排序\",{\"1\":{\"380\":1}}],[\"编译模板\",{\"1\":{\"353\":1}}],[\"编程语言允许线程访问共享变量\",{\"1\":{\"371\":1}}],[\"编程思想\",{\"1\":{\"96\":1,\"238\":1}}],[\"编码过的字符串\",{\"1\":{\"294\":1}}],[\"编辑定时任务\",{\"1\":{\"192\":1}}],[\"|i\",{\"1\":{\"502\":1}}],[\"||\",{\"1\":{\"224\":2,\"229\":1,\"280\":1}}],[\"|\",{\"1\":{\"191\":2,\"236\":3,\"237\":4}}],[\"xmx1024m\",{\"1\":{\"364\":1}}],[\"xms512m\",{\"1\":{\"364\":1}}],[\"xml文件就已经逐渐被\",{\"1\":{\"217\":1}}],[\"xml\",{\"1\":{\"214\":1,\"217\":3,\"266\":3,\"270\":3,\"271\":2,\"277\":1,\"409\":1}}],[\"x\",{\"1\":{\"194\":1,\"301\":6,\"311\":4,\"548\":15}}],[\"x表示查找的内容\",{\"1\":{\"194\":1}}],[\"xxx\",{\"1\":{\"190\":3,\"193\":7,\"194\":2,\"318\":1}}],[\"x86\",{\"1\":{\"112\":1}}],[\"暂停等\",{\"1\":{\"183\":1}}],[\"暂无权限访问\",{\"1\":{\"153\":1}}],[\"镜像是静态的定义\",{\"1\":{\"183\":1}}],[\"镜像和容器的关系\",{\"1\":{\"183\":1}}],[\"镜像\",{\"1\":{\"183\":1}}],[\"怎么找工作呀\",{\"1\":{\"419\":1}}],[\"怎么快速定位应用的热点\",{\"1\":{\"181\":1}}],[\"怎样直接从\",{\"1\":{\"181\":1}}],[\"线索二叉树\",{\"0\":{\"596\":1}}],[\"线性表允许进行插入和删除的那一端\",{\"1\":{\"568\":1}}],[\"线性表的链式存储又被称为单链表\",{\"1\":{\"511\":1}}],[\"线性表的链式表示\",{\"0\":{\"510\":1}}],[\"线性表的顺序存储又叫顺序表\",{\"1\":{\"508\":1}}],[\"线性表的顺序表示\",{\"0\":{\"507\":1}}],[\"线性表有以下特点\",{\"1\":{\"505\":1}}],[\"线性表是具有相同数据结构的n\",{\"1\":{\"505\":1}}],[\"线性表\",{\"0\":{\"504\":1}}],[\"线性结构\",{\"1\":{\"494\":1}}],[\"线性阶\",{\"1\":{\"459\":1}}],[\"线上bug紧急修复分支\",{\"1\":{\"284\":1}}],[\"线上分支\",{\"1\":{\"284\":1}}],[\"线上遇到某个用户的数据处理有问题\",{\"1\":{\"181\":1}}],[\"线程转储等\",{\"1\":{\"430\":1}}],[\"线程数\",{\"1\":{\"430\":1}}],[\"线程之间的共享变量存储在主内存\",{\"1\":{\"379\":1}}],[\"线程之间的通讯由\",{\"1\":{\"379\":1}}],[\"线程之间如何通讯及线程之间如何同步\",{\"1\":{\"378\":1}}],[\"线程阻塞\",{\"1\":{\"375\":1}}],[\"线程不会自旋\",{\"1\":{\"375\":1}}],[\"线程应确保能通过排他锁单独获得这个变量\",{\"1\":{\"371\":1}}],[\"线程池\",{\"0\":{\"211\":1}}],[\"线程池方案\",{\"0\":{\"207\":1}}],[\"线程监听到价格并将价格借助\",{\"1\":{\"209\":1}}],[\"线程计数器来解决\",{\"1\":{\"207\":1}}],[\"线程的状态信息\",{\"1\":{\"181\":1}}],[\"线下无法重现\",{\"1\":{\"181\":1}}],[\"遇到问题无法在线上\",{\"1\":{\"181\":1}}],[\"难道只能通过加日志再重新发布吗\",{\"1\":{\"181\":1}}],[\"难道是我没\",{\"1\":{\"181\":1}}],[\"难免绕不开每个语言的圣经\",{\"1\":{\"96\":1}}],[\"类可以帮助你更好地处理可能为空的值\",{\"1\":{\"395\":1}}],[\"类可以在以下情况下使用\",{\"1\":{\"395\":1}}],[\"类加载器\",{\"1\":{\"388\":1}}],[\"类加载信息等\",{\"1\":{\"181\":1}}],[\"类作为代理对象的处理器\",{\"1\":{\"387\":1}}],[\"类中方法不需要\",{\"1\":{\"317\":1}}],[\"类定义不会被提升\",{\"1\":{\"317\":1}}],[\"类不可以重复声明\",{\"1\":{\"317\":1}}],[\"类似于线性表的链式存储结构\",{\"1\":{\"577\":1}}],[\"类似于线性表的顺序存储结构\",{\"1\":{\"575\":1}}],[\"类似于二叉树的层序遍历\",{\"1\":{\"565\":1}}],[\"类似\",{\"1\":{\"314\":1}}],[\"类表示类的字段\",{\"1\":{\"227\":1}}],[\"类表示类的方法\",{\"1\":{\"227\":1}}],[\"类表示类的构造函数\",{\"1\":{\"227\":1}}],[\"类的实例化需要\",{\"1\":{\"317\":1}}],[\"类的\",{\"1\":{\"227\":3,\"387\":1,\"388\":1}}],[\"类是反射的核心类\",{\"1\":{\"227\":1}}],[\"类\",{\"0\":{\"317\":1},\"1\":{\"227\":4,\"317\":1}}],[\"类型相同则对比替换属性\",{\"1\":{\"346\":1}}],[\"类型不同直接替换旧类型\",{\"1\":{\"346\":1}}],[\"类型值的\",{\"1\":{\"305\":1}}],[\"类型的字段\",{\"1\":{\"229\":2}}],[\"类型\",{\"1\":{\"214\":1}}],[\"类实现\",{\"1\":{\"204\":1}}],[\"类和\",{\"1\":{\"134\":1}}],[\"监测方法执行耗时\",{\"1\":{\"181\":1}}],[\"监听每个\",{\"1\":{\"209\":1}}],[\"监听器将接收到该事件\",{\"1\":{\"135\":1}}],[\"监听器需要实现applicationlistener\",{\"1\":{\"135\":1}}],[\"监听器\",{\"0\":{\"352\":1},\"1\":{\"135\":1}}],[\"监听模式\",{\"1\":{\"132\":1}}],[\"包含子串的串称为主串\",{\"1\":{\"573\":1}}],[\"包含了一些用户操作的方法\",{\"1\":{\"388\":1}}],[\"包的操作\",{\"1\":{\"217\":1}}],[\"包的例子\",{\"1\":{\"217\":1}}],[\"包双活部署\",{\"1\":{\"213\":1}}],[\"包部署\",{\"1\":{\"202\":1}}],[\"包启动的项目都换成\",{\"1\":{\"202\":1}}],[\"包括微服务的网络位置\",{\"1\":{\"427\":1}}],[\"包括文本文件\",{\"1\":{\"409\":1}}],[\"包括对方法的权限验证\",{\"1\":{\"392\":1}}],[\"包括在方法执行前开启事务\",{\"1\":{\"392\":1}}],[\"包括记录方法的执行时间\",{\"1\":{\"392\":1}}],[\"包括非公共的方法\",{\"1\":{\"385\":2}}],[\"包括深层嵌套的对象\",{\"1\":{\"348\":1}}],[\"包括三个基本概念\",{\"1\":{\"183\":1}}],[\"包括查看方法调用的出入参\",{\"1\":{\"181\":1}}],[\"包加载的\",{\"1\":{\"181\":1}}],[\"包管理工具\",{\"1\":{\"148\":1}}],[\"阿里的\",{\"1\":{\"428\":1}}],[\"阿里巴巴\",{\"1\":{\"117\":1}}],[\"阿尔萨斯\",{\"0\":{\"180\":1}}],[\"为0即为空表\",{\"1\":{\"505\":1}}],[\"为例\",{\"1\":{\"498\":1}}],[\"为此放宽条件成为红黑树\",{\"1\":{\"476\":1}}],[\"为根的子树保持二叉排序树特性的前提下调整各个结点的位置关系\",{\"1\":{\"473\":1}}],[\"为该算法所耗费的存储空间\",{\"1\":{\"459\":1}}],[\"为\",{\"1\":{\"415\":1,\"573\":1}}],[\"为改变执行流程提供了可能\",{\"1\":{\"320\":1}}],[\"为操作对象提供了一种更优雅的方式\",{\"1\":{\"314\":1}}],[\"为保证分支稳定可用\",{\"1\":{\"284\":1}}],[\"为了克服访问单链表访问结点需要从头遍历的问题\",{\"1\":{\"519\":1}}],[\"为了建立数据元素之间的线性关系\",{\"1\":{\"511\":1}}],[\"为了节约存储空间\",{\"1\":{\"499\":1}}],[\"为了保持\",{\"1\":{\"476\":1}}],[\"为了保证一定可以拿到彭博处理的数据\",{\"1\":{\"234\":1}}],[\"为了避免树的高度增长过快\",{\"1\":{\"472\":1}}],[\"为了能够更加灵活地开发\",{\"1\":{\"420\":1}}],[\"为了提高性能\",{\"1\":{\"380\":1}}],[\"为了确保共享变量能别准确和一致的更新\",{\"1\":{\"371\":1}}],[\"为了完善为企业客户提升更全面\",{\"1\":{\"368\":1}}],[\"为了描述\",{\"1\":{\"269\":1}}],[\"为了控制a中的代码逻辑\",{\"1\":{\"245\":1}}],[\"为了解决这种问题就引出了下面循环队列的概念\",{\"1\":{\"556\":1}}],[\"为了解决对锁的获得和释放待来的性能损耗\",{\"1\":{\"372\":1}}],[\"为了解决\",{\"1\":{\"293\":1}}],[\"为了解决有些材料一直无人审批的情况添加了一个定时任务\",{\"1\":{\"233\":1}}],[\"为了解决实时性\",{\"1\":{\"209\":1}}],[\"为了方便公用这个接口\",{\"1\":{\"229\":1}}],[\"为了更加灵活和方便的查看每个方法和请求的出参入参\",{\"1\":{\"224\":1}}],[\"为了追赶上线进度\",{\"1\":{\"202\":1}}],[\"为什么会报各种类相关的\",{\"1\":{\"181\":1}}],[\"为首的容器化技术部署方式发展迅猛\",{\"1\":{\"179\":1}}],[\"为庞大的计算机集群提供可靠的\",{\"1\":{\"121\":1}}],[\"流传下来的\",{\"1\":{\"202\":1}}],[\"流水线的方式\",{\"1\":{\"179\":1}}],[\"流行唱法\",{\"0\":{\"80\":1}}],[\"生态系统无缝集成\",{\"1\":{\"423\":1}}],[\"生态系统中的标准包管理工具\",{\"1\":{\"148\":1}}],[\"生命周期结束时被调用\",{\"1\":{\"416\":1}}],[\"生命周期可被定义为从创建直到毁灭的整个过程\",{\"1\":{\"411\":1}}],[\"生命周期钩子\",{\"1\":{\"353\":1}}],[\"生命周期\",{\"0\":{\"353\":1,\"411\":1}}],[\"生成树和生成森林\",{\"0\":{\"535\":1}}],[\"生成的代理类可以代理目标类中的所有方法\",{\"1\":{\"385\":1}}],[\"生成的代理类只能代理接口中的方法\",{\"1\":{\"385\":1}}],[\"生成客户端结构\",{\"1\":{\"276\":1}}],[\"生成客户端代码\",{\"0\":{\"275\":1}}],[\"生成远程服务端的代理可以使用\",{\"1\":{\"271\":1}}],[\"生成火焰图\",{\"1\":{\"181\":1}}],[\"生产安全可靠\",{\"0\":{\"179\":1}}],[\"$error\",{\"1\":{\"237\":1}}],[\"$env\",{\"1\":{\"237\":2}}],[\"$variable\",{\"1\":{\"237\":1}}],[\"$value\",{\"1\":{\"237\":2}}],[\"$line\",{\"1\":{\"237\":3}}],[\"$log\",{\"1\":{\"236\":2}}],[\"$file中$variable的值不相同\",{\"1\":{\"237\":1}}],[\"$file\",{\"1\":{\"236\":4,\"237\":4}}],[\"$folder\",{\"1\":{\"236\":3}}],[\"$target\",{\"1\":{\"236\":2}}],[\"$days\",{\"1\":{\"236\":1}}],[\"$\",{\"1\":{\"194\":1,\"214\":1,\"217\":9,\"219\":1,\"237\":1,\"364\":1}}],[\"$cookie\",{\"0\":{\"177\":1}}],[\"$request\",{\"0\":{\"176\":1}}],[\"扩容的方式有很多\",{\"1\":{\"174\":1}}],[\"扩容\",{\"0\":{\"174\":1}}],[\"漂移来实现一个模拟\",{\"1\":{\"173\":1}}],[\"区别于一些集群\",{\"1\":{\"173\":1}}],[\"返回除了y外顶点x的下一个邻接点的顶点号\",{\"1\":{\"548\":1}}],[\"返回线性表的长度即其中的元素个数\",{\"1\":{\"506\":1}}],[\"返回该元素的存储位置\",{\"1\":{\"464\":1}}],[\"返回值为一个计算属性\",{\"1\":{\"351\":1}}],[\"返回一个\",{\"0\":{\"403\":1}}],[\"返回一个已登记的\",{\"1\":{\"305\":1}}],[\"返回一个名为\",{\"1\":{\"253\":1}}],[\"返回的值不相等\",{\"1\":{\"302\":1}}],[\"返回的数据和进入的请求竞争带宽则非常影响性能\",{\"1\":{\"162\":1}}],[\"返回前台一个\",{\"1\":{\"225\":1}}],[\"返回对象脱敏\",{\"0\":{\"225\":1}}],[\"返回参数\",{\"1\":{\"224\":1}}],[\"返回301永久重定向\",{\"1\":{\"171\":1}}],[\"返回302临时重定向\",{\"1\":{\"171\":1}}],[\"匹配后立即终止返回结果\",{\"1\":{\"171\":1}}],[\"匹配多次正则\",{\"1\":{\"171\":1}}],[\"把下一棵树转化为上一棵树的右兄弟\",{\"1\":{\"602\":1}}],[\"把处理顺序安排好\",{\"1\":{\"565\":1}}],[\"把另一半的元素放在另一半存储完的最后\",{\"1\":{\"501\":1}}],[\"把那些呈现规律性分布\",{\"1\":{\"499\":1}}],[\"把逻辑上相邻的元素存储在物理地址也相邻的存储单元中\",{\"1\":{\"495\":1}}],[\"把\",{\"1\":{\"416\":1}}],[\"把它作为一个干净的单文件组件来写第一个\",{\"1\":{\"332\":1}}],[\"把函数的执行流挂起\",{\"1\":{\"320\":1}}],[\"把要处理返回值的方法作为切点托管\",{\"1\":{\"225\":1}}],[\"把项目中的\",{\"1\":{\"214\":1}}],[\"把一些静态的图片\",{\"1\":{\"170\":1}}],[\"把我觉得还不错的资源分享出来让更多的人看到\",{\"1\":{\"2\":1}}],[\"转去做其他事情\",{\"1\":{\"566\":1}}],[\"转发和控制流量的设备或软件\",{\"1\":{\"423\":1}}],[\"转发相同的服务器\",{\"1\":{\"166\":1}}],[\"转行到\",{\"1\":{\"95\":1}}],[\"备用服务器应该也有可能是失败的\",{\"1\":{\"165\":1}}],[\"像百度的\",{\"1\":{\"428\":1}}],[\"像\",{\"1\":{\"277\":1}}],[\"像现在类似oss和一些高性能的架构的出现\",{\"1\":{\"233\":1}}],[\"像这种可视化的运维管理界面确实降低了服务器部署服务的难度\",{\"1\":{\"179\":1}}],[\"像备用服务的\",{\"1\":{\"165\":1}}],[\"像大话系列\",{\"1\":{\"101\":1}}],[\"4325\",{\"1\":{\"483\":2}}],[\"40\",{\"1\":{\"301\":2}}],[\"4\",{\"0\":{\"278\":1,\"376\":1},\"1\":{\"165\":1,\"307\":1,\"311\":7,\"560\":7}}],[\"比如服务之间的通信复杂性\",{\"1\":{\"420\":1}}],[\"比如设置好数据侦听\",{\"1\":{\"353\":1}}],[\"比如\",{\"1\":{\"342\":1,\"392\":1,\"455\":1}}],[\"比如说我想查字典\",{\"1\":{\"455\":1}}],[\"比如说如果审核人正在审批一份超过30分钟或者已经被重新置为未审核的材料\",{\"1\":{\"233\":1}}],[\"比如说有些审核人拉取完十位考生后不能进行后面审核\",{\"1\":{\"233\":1}}],[\"比如说价格发送线程必须在价格接收线程启动完成后再启动\",{\"1\":{\"207\":1}}],[\"比如说下面的例子\",{\"1\":{\"165\":1}}],[\"比如官方镜像\",{\"1\":{\"183\":1}}],[\"比较操作\",{\"1\":{\"578\":1}}],[\"比较方面\",{\"1\":{\"526\":1}}],[\"比较声明环境文件是否生效\",{\"0\":{\"237\":1}}],[\"比较文件中的值和环境变量中的值\",{\"1\":{\"237\":1}}],[\"比较文件的日期与目标日期\",{\"1\":{\"236\":1}}],[\"比较文件夹的日期与目标日期\",{\"1\":{\"236\":1}}],[\"比较原始的工作流实现方式无非就是利用审核表或者增加审核字段\",{\"1\":{\"103\":1}}],[\"比较级\",{\"0\":{\"55\":1}}],[\"值也可以反推\",{\"1\":{\"502\":1}}],[\"值相同的多个矩阵元素压缩到一个存储空间中\",{\"1\":{\"499\":1}}],[\"值可再分\",{\"1\":{\"492\":1}}],[\"值不可再分\",{\"1\":{\"492\":1}}],[\"值不值\",{\"1\":{\"419\":1}}],[\"值得注意的是\",{\"1\":{\"347\":1}}],[\"值是否已被登记\",{\"1\":{\"305\":1}}],[\"值\",{\"1\":{\"305\":3,\"395\":1,\"481\":1,\"503\":1}}],[\"值作为属性名时\",{\"1\":{\"304\":1}}],[\"值即可\",{\"1\":{\"165\":1}}],[\"值对象是领域中的一个概念\",{\"1\":{\"143\":1}}],[\"值对象\",{\"1\":{\"143\":1}}],[\"值对象和领域服务\",{\"1\":{\"143\":1}}],[\"权重之比是\",{\"1\":{\"165\":1}}],[\"权重就是增加每台机器想访问概率的比重\",{\"1\":{\"165\":1}}],[\"权重\",{\"0\":{\"165\":1}}],[\"权限等功能场景\",{\"1\":{\"222\":1}}],[\"权限\",{\"1\":{\"155\":1}}],[\"权限检查请求沿着责任链传递\",{\"1\":{\"128\":1}}],[\"权限管理系统\",{\"1\":{\"128\":1}}],[\"则左孩子为\",{\"1\":{\"589\":1}}],[\"则左子树上所有结点的值均小于根结点的值\",{\"1\":{\"467\":1}}],[\"则编号n\",{\"1\":{\"589\":1}}],[\"则编号大于i的结点均为叶子结点\",{\"1\":{\"589\":1}}],[\"则每个分支结点都有左右孩子\",{\"1\":{\"589\":1}}],[\"则只可能有一个\",{\"1\":{\"589\":1}}],[\"则i为分支结点\",{\"1\":{\"589\":1}}],[\"则这个孩子就无需区分其左右次序\",{\"1\":{\"588\":1}}],[\"则这种编码方式称为可变长度编码\",{\"1\":{\"582\":1}}],[\"则作为一个新的更紧迫的期待压入栈中\",{\"1\":{\"562\":1}}],[\"则和栈顶最紧迫的期待的括号消解\",{\"1\":{\"562\":1}}],[\"则能够访问到图中的所有顶点\",{\"1\":{\"552\":1}}],[\"则无法通过这次遍历访问\",{\"1\":{\"552\":1}}],[\"则无须动态的改变查找表\",{\"1\":{\"462\":1}}],[\"则从栈中出栈两个操作数进行运算并将结果重新入栈\",{\"1\":{\"563\":1}}],[\"则从某一个顶点出发\",{\"1\":{\"552\":1}}],[\"则从任意一个结点出发\",{\"1\":{\"552\":1}}],[\"则自从图g中删除该边\",{\"1\":{\"548\":1}}],[\"则有向图g中添加该边\",{\"1\":{\"548\":1}}],[\"则必须按行\",{\"1\":{\"544\":1}}],[\"则记该距离为无穷\",{\"1\":{\"541\":1}}],[\"则此路径的长度为从u到v的距离\",{\"1\":{\"541\":1}}],[\"则此图一定有环\",{\"1\":{\"539\":1}}],[\"则它生成树包含n\",{\"1\":{\"535\":1}}],[\"则图g为无向图\",{\"1\":{\"529\":1}}],[\"则表示一个空表\",{\"1\":{\"511\":1}}],[\"则表示用户没有足够的权限\",{\"1\":{\"128\":1}}],[\"则相当浪费空间\",{\"1\":{\"503\":1}}],[\"则在数组中的下标符合\",{\"1\":{\"502\":1}}],[\"则称为这样的编码为前缀编码\",{\"1\":{\"582\":1}}],[\"则称为这两个顶点时强连通的\",{\"1\":{\"534\":1}}],[\"则称为此图为强连通图\",{\"1\":{\"534\":1}}],[\"则称为三对角矩阵\",{\"1\":{\"502\":1}}],[\"则称图g为连通图\",{\"1\":{\"533\":1}}],[\"则称图g为多重图\",{\"1\":{\"530\":1}}],[\"则称v和w是连通的\",{\"1\":{\"533\":1}}],[\"则称其为对称矩阵\",{\"1\":{\"500\":1}}],[\"则关系存储关系式为\",{\"1\":{\"498\":1}}],[\"则平均查找长度就会变成\",{\"1\":{\"471\":1}}],[\"则平均查找长度就是\",{\"1\":{\"471\":1}}],[\"则令\",{\"1\":{\"470\":1}}],[\"则让\",{\"1\":{\"470\":1}}],[\"则插入到左子树\",{\"1\":{\"469\":1}}],[\"则直接删除\",{\"1\":{\"470\":1}}],[\"则直接插入\",{\"1\":{\"469\":1}}],[\"则直接返回缓存的结果\",{\"1\":{\"392\":1}}],[\"则直接返回结果\",{\"1\":{\"384\":1}}],[\"则右子树上所有的结点的值均大于根结点的值\",{\"1\":{\"467\":1}}],[\"则查找不成功\",{\"1\":{\"464\":1}}],[\"则查找成功\",{\"1\":{\"464\":1}}],[\"则所需查找的元素只能在中间元素以外的前半部分和后半部分\",{\"1\":{\"464\":1}}],[\"则不需要再比较到另一端就能返回查找失败的信息\",{\"1\":{\"463\":1}}],[\"则创建包含映射返回值的\",{\"0\":{\"402\":1}}],[\"则对其执行调用映射函数得到返回值\",{\"0\":{\"402\":1}}],[\"则返回空的\",{\"1\":{\"396\":1}}],[\"则后面的会覆盖前面的\",{\"1\":{\"309\":1}}],[\"则后续开发完成后再提交到develop分支再合并到release分支上\",{\"1\":{\"287\":1}}],[\"则使用私钥签名\",{\"1\":{\"294\":1}}],[\"则同一秘钥用于签名和验证\",{\"1\":{\"294\":1}}],[\"则先从develop分支上拉取feature分支开发\",{\"1\":{\"287\":1}}],[\"则将release分支合并到master分支上并创建tag\",{\"1\":{\"287\":1}}],[\"则可以删除release分支\",{\"1\":{\"287\":1}}],[\"则可以在\",{\"1\":{\"225\":1}}],[\"则需要在相应结点对应的边表中查找另一个结点\",{\"1\":{\"545\":1}}],[\"则需要从最新的tag目录下将代码拷贝过来\",{\"1\":{\"286\":1}}],[\"则需要根据之后的开发规则重新手动合并到新的git仓库中来\",{\"1\":{\"286\":1}}],[\"则会浪费多余的审批时间\",{\"1\":{\"233\":1}}],[\"则推荐使用\",{\"1\":{\"225\":1}}],[\"则是基于\",{\"1\":{\"222\":1}}],[\"则是用下面这种方式读取配置的\",{\"1\":{\"214\":1}}],[\"则按照从上到下的优先级来决定\",{\"1\":{\"161\":1}}],[\"则按照完整的域名进行匹配\",{\"1\":{\"161\":1}}],[\"完全二叉树\",{\"1\":{\"589\":1}}],[\"完全二叉树和满二叉树采用顺序结构比较合适\",{\"1\":{\"592\":1}}],[\"完全二叉树和满二叉树\",{\"1\":{\"589\":1}}],[\"完全图\",{\"0\":{\"531\":1}}],[\"完全就是一知半解\",{\"1\":{\"419\":1}}],[\"完美集成\",{\"1\":{\"250\":1}}],[\"完整匹配\",{\"1\":{\"161\":1}}],[\"完成进行状态\",{\"0\":{\"32\":1}}],[\"完成状态\",{\"0\":{\"27\":1}}],[\"自左至右完全存储二叉树的所有结点元素\",{\"1\":{\"592\":1}}],[\"自适应布局等\",{\"1\":{\"323\":1}}],[\"自己项目的部署也需要我们每个程序员掌握这项技术\",{\"1\":{\"362\":1}}],[\"自己能力再大也不会说一个人就把整个仓库都给迁移了\",{\"1\":{\"282\":1}}],[\"自己把经常用到的命令都统计下来方便翻阅查看\",{\"1\":{\"186\":1}}],[\"自带的\",{\"0\":{\"276\":1},\"1\":{\"271\":1}}],[\"自我验证\",{\"1\":{\"241\":1}}],[\"自动化\",{\"1\":{\"241\":1}}],[\"自动化发布等任务\",{\"1\":{\"231\":1}}],[\"自动化任务\",{\"1\":{\"231\":1}}],[\"自动化测试\",{\"1\":{\"217\":1}}],[\"自定义\",{\"1\":{\"364\":3}}],[\"自定义指令\",{\"0\":{\"359\":1}}],[\"自定义的\",{\"1\":{\"294\":1}}],[\"自定义注解\",{\"1\":{\"227\":1}}],[\"自定义日志注解\",{\"0\":{\"224\":1}}],[\"自定义快捷指令\",{\"0\":{\"189\":1}}],[\"自定义虚拟主机域名\",{\"0\":{\"160\":1}}],[\"自从\",{\"1\":{\"98\":1}}],[\"产生\",{\"1\":{\"158\":1}}],[\"产品经理等不同角色\",{\"1\":{\"141\":1}}],[\"设有一个双端队列\",{\"1\":{\"560\":1}}],[\"设图g的邻接矩阵为a\",{\"1\":{\"544\":1}}],[\"设二维数组的行下标与列下标的范围分别为\",{\"1\":{\"498\":1}}],[\"设置图g中边\",{\"1\":{\"548\":1}}],[\"设置\",{\"1\":{\"409\":1}}],[\"设置拦截器\",{\"1\":{\"391\":1}}],[\"设置被代理类的父类\",{\"1\":{\"391\":1}}],[\"设置环境变量\",{\"1\":{\"364\":1}}],[\"设为开机启动\",{\"1\":{\"156\":1}}],[\"设计往往是隧道式的\",{\"1\":{\"162\":1}}],[\"设计和产品都需要涉猎\",{\"1\":{\"147\":1}}],[\"设计模式\",{\"0\":{\"100\":1},\"1\":{\"101\":1}}],[\"停止后台线程\",{\"1\":{\"416\":1}}],[\"停止\",{\"1\":{\"156\":1,\"183\":1}}],[\"状态就不会再改变了\",{\"1\":{\"319\":1}}],[\"状态\",{\"1\":{\"156\":1,\"234\":1}}],[\"状语从句\",{\"0\":{\"67\":1}}],[\"来解释\",{\"1\":{\"560\":1}}],[\"来说相对非常少\",{\"1\":{\"503\":1}}],[\"来一次扫描每个元素\",{\"1\":{\"463\":1}}],[\"来代替空指针\",{\"1\":{\"395\":1}}],[\"来封装这个值\",{\"1\":{\"395\":1}}],[\"来将多条指令重叠执行\",{\"1\":{\"380\":1}}],[\"来显示管理员初始化密码\",{\"1\":{\"364\":1}}],[\"来实现负载均衡\",{\"1\":{\"382\":1}}],[\"来实现自动更新部署\",{\"1\":{\"362\":1}}],[\"来实现每种责任链中处理者的执行排序\",{\"1\":{\"130\":1}}],[\"来调用其属性\",{\"1\":{\"347\":1}}],[\"来调用这个应用程序\",{\"1\":{\"267\":1}}],[\"来简写\",{\"1\":{\"342\":1}}],[\"来大幅度地简化代码\",{\"1\":{\"333\":1}}],[\"来自\",{\"1\":{\"331\":1}}],[\"来开始讲起\",{\"1\":{\"293\":1}}],[\"来完成自己的功能开发\",{\"1\":{\"287\":1}}],[\"来读取的时候发现并没有注册到容器中\",{\"1\":{\"280\":1}}],[\"来创建一个代理来\",{\"1\":{\"271\":1}}],[\"来创建线程池进行管理\",{\"1\":{\"207\":1}}],[\"来定时运行此脚本\",{\"1\":{\"236\":1}}],[\"来演示一下\",{\"1\":{\"225\":1}}],[\"来包含这些关注点\",{\"1\":{\"222\":1}}],[\"来选择重构部署\",{\"1\":{\"204\":1}}],[\"来校验请求头中是否携带\",{\"1\":{\"172\":1}}],[\"来访问\",{\"1\":{\"171\":1}}],[\"来做负载均衡\",{\"1\":{\"162\":1}}],[\"来匹配域名\",{\"1\":{\"161\":1}}],[\"来区分资源路径\",{\"1\":{\"160\":1}}],[\"来控制\",{\"1\":{\"156\":1}}],[\"来方便我们直接起停\",{\"1\":{\"156\":1}}],[\"重写\",{\"1\":{\"394\":1}}],[\"重量级锁\",{\"1\":{\"372\":1,\"375\":1}}],[\"重\",{\"1\":{\"372\":1}}],[\"重构思路\",{\"0\":{\"203\":1}}],[\"重构这个项目的原因居然是公司开始不再使用\",{\"1\":{\"202\":1}}],[\"重构接收价格前置项目\",{\"0\":{\"201\":1}}],[\"重启\",{\"1\":{\"187\":1}}],[\"重新加载配置\",{\"1\":{\"156\":1}}],[\"重点和难点知识将主要通过动画和图解形式展示\",{\"1\":{\"92\":1}}],[\"quotetime\",{\"1\":{\"229\":4}}],[\"query\",{\"1\":{\"200\":1}}],[\"queryuserdeletionnum\",{\"1\":{\"130\":1}}],[\"queueempty\",{\"1\":{\"555\":1}}],[\"queue\",{\"1\":{\"200\":1}}],[\"quit\",{\"1\":{\"156\":2}}],[\"启动后访问项目根目录即自动跳转服务端界面\",{\"1\":{\"434\":1}}],[\"启动类增加\",{\"1\":{\"434\":1}}],[\"启动\",{\"1\":{\"156\":2,\"183\":1,\"202\":1,\"250\":1}}],[\"启动展示\",{\"0\":{\"153\":1}}],[\"看完以上的代码我们发现我们可以用rear\",{\"1\":{\"556\":1}}],[\"看成是一棵虚拟的树\",{\"1\":{\"346\":1}}],[\"看都没看明白\",{\"1\":{\"321\":1}}],[\"看不到真实的后台服务器\",{\"1\":{\"162\":1}}],[\"看是否能够启动成功\",{\"1\":{\"155\":1}}],[\"看看以后吧\",{\"1\":{\"4\":1}}],[\"访问第一棵树的根结点\",{\"1\":{\"603\":1}}],[\"访问森心的第一棵树的根结点\",{\"1\":{\"603\":1}}],[\"访问和修改类的字段\",{\"1\":{\"227\":1}}],[\"访问两个\",{\"1\":{\"173\":1}}],[\"访问\",{\"0\":{\"274\":1},\"1\":{\"155\":1}}],[\"注意线性表可以是空表\",{\"1\":{\"528\":1}}],[\"注意\",{\"0\":{\"482\":1},\"1\":{\"511\":1}}],[\"注意可能需要\",{\"1\":{\"155\":1}}],[\"注册到容器中即可\",{\"1\":{\"445\":1}}],[\"注册中心用于管理和维护微服务的注册信息\",{\"1\":{\"427\":1}}],[\"注册中心\",{\"0\":{\"427\":1}}],[\"注册声明\",{\"1\":{\"294\":1}}],[\"注\",{\"1\":{\"272\":1}}],[\"注解\",{\"1\":{\"245\":1}}],[\"注解处理才会出现\",{\"1\":{\"227\":1}}],[\"注解将事件发布器和事件监听器声明为\",{\"1\":{\"135\":1}}],[\"注入到\",{\"1\":{\"207\":1}}],[\"防盗链\",{\"0\":{\"172\":1},\"1\":{\"154\":1}}],[\"防腐层是领域中的一个概念\",{\"1\":{\"143\":1}}],[\"防腐层\",{\"1\":{\"143\":1}}],[\"负责统一协调\",{\"1\":{\"158\":1}}],[\"负责发布事件\",{\"1\":{\"135\":1,\"136\":1}}],[\"负载均衡\",{\"0\":{\"163\":1},\"1\":{\"154\":1,\"421\":1,\"428\":1}}],[\"域名解析\",{\"1\":{\"154\":1}}],[\"反之称为稠密图\",{\"1\":{\"538\":1}}],[\"反例\",{\"0\":{\"405\":1}}],[\"反射的常用使用场景有以下几种\",{\"1\":{\"227\":1}}],[\"反射\",{\"0\":{\"226\":1}}],[\"反向代理不是什么高不可攀的东西\",{\"1\":{\"162\":1}}],[\"反向代理\",{\"0\":{\"162\":1},\"1\":{\"154\":1}}],[\"反手拉球\",{\"0\":{\"89\":1}}],[\"反手推挡\",{\"0\":{\"87\":1}}],[\"登录的大致流程\",{\"1\":{\"448\":1}}],[\"登录的时代\",{\"1\":{\"448\":1}}],[\"登录成功\",{\"1\":{\"153\":1}}],[\"登录责任链\",{\"1\":{\"130\":1}}],[\"界面会出现访问服务的网址\",{\"1\":{\"153\":1}}],[\"界面也很简洁\",{\"1\":{\"113\":1}}],[\"执行以下主要任务\",{\"1\":{\"409\":1}}],[\"执行速度快\",{\"1\":{\"375\":1}}],[\"执行时间\",{\"1\":{\"353\":1}}],[\"执行失败时的回调\",{\"1\":{\"319\":1}}],[\"执行成功时的回调\",{\"1\":{\"319\":1}}],[\"执行自定义逻辑来更新用户对象\",{\"1\":{\"260\":1}}],[\"执行自定义的逻辑来修改用户对象\",{\"1\":{\"260\":1}}],[\"执行任务\",{\"1\":{\"217\":1}}],[\"执行\",{\"1\":{\"155\":1,\"409\":1}}],[\"执行下面命令即可下载最新安装脚本并自动进行安装\",{\"1\":{\"152\":1}}],[\"执行责任链逻辑\",{\"1\":{\"130\":1}}],[\"目标对象实现的接口数组\",{\"1\":{\"388\":1}}],[\"目录在设计的的时候就模仿了\",{\"1\":{\"282\":1}}],[\"目录了\",{\"1\":{\"155\":1}}],[\"目录下执行\",{\"1\":{\"364\":1}}],[\"目录下添加\",{\"1\":{\"156\":1}}],[\"目录下看到我们安装的\",{\"1\":{\"155\":1}}],[\"目录下的\",{\"1\":{\"152\":1,\"155\":1}}],[\"目前提到安全框架\",{\"1\":{\"453\":1}}],[\"目前网站上支持的第三方登录就是\",{\"1\":{\"451\":1}}],[\"目前市面上现在针对配置中心和注册中心分别都有很多产品\",{\"1\":{\"428\":1}}],[\"目前我行代客利率掉期\",{\"1\":{\"368\":1}}],[\"目前有三种规范\",{\"1\":{\"271\":1}}],[\"目前在工作中的上线模式还是\",{\"1\":{\"179\":1}}],[\"目前肯定还是\",{\"1\":{\"148\":1}}],[\"目前\",{\"1\":{\"95\":1,\"96\":1}}],[\"下一个节点的指针\",{\"1\":{\"511\":1}}],[\"下标的取值范围称为数组的边界\",{\"1\":{\"498\":1}}],[\"下线\",{\"1\":{\"430\":1}}],[\"下线状态\",{\"1\":{\"165\":1}}],[\"下载并安装\",{\"0\":{\"185\":1}}],[\"下载前注意一下服务器用户是否有足够权限\",{\"1\":{\"152\":1}}],[\"下编辑\",{\"1\":{\"162\":1}}],[\"下的变化\",{\"1\":{\"348\":1}}],[\"下的\",{\"1\":{\"160\":1,\"280\":1}}],[\"下面代码建议使用\",{\"1\":{\"272\":1}}],[\"下面是三种常见的存储结构\",{\"1\":{\"598\":1}}],[\"下面是图的一些基本概念和基本术语\",{\"1\":{\"528\":1}}],[\"下面是之前\",{\"1\":{\"448\":1}}],[\"下面是工作上项目打包的一些需求记录\",{\"1\":{\"218\":1}}],[\"下面是数据库排行网站\",{\"1\":{\"197\":1}}],[\"下面是我收集并且进行的学习路线\",{\"1\":{\"0\":1}}],[\"下面我拿\",{\"1\":{\"225\":1}}],[\"下面我整理一下我自己在用的不错的开发工具给大家参考一下\",{\"1\":{\"114\":1}}],[\"下面我会分享一些我觉得值得一读的和数据库有关的书\",{\"1\":{\"93\":1}}],[\"下面这使用方式和展示效果更直观简洁\",{\"1\":{\"111\":1}}],[\"下面的链接是一个\",{\"1\":{\"99\":1}}],[\"横空出世\",{\"1\":{\"150\":1}}],[\"横空出世之后\",{\"1\":{\"98\":1}}],[\"非空二叉树上第k层上至多有\",{\"1\":{\"590\":1}}],[\"非空二叉树的叶子结点数等于度为2的结点树加一\",{\"1\":{\"590\":1}}],[\"非空的价格\",{\"1\":{\"229\":1}}],[\"非常适合作为微服务学习的第一选择\",{\"1\":{\"428\":1}}],[\"非常适合需要快速响应的场景\",{\"1\":{\"199\":1}}],[\"非常简单就不做赘述了\",{\"1\":{\"277\":1}}],[\"非常考验运维人员的基本功\",{\"1\":{\"150\":1}}],[\"非谓语动词\",{\"0\":{\"45\":1}}],[\"聊聊反射\",{\"0\":{\"227\":1}}],[\"聊聊运维面板\",{\"0\":{\"150\":1}}],[\"聊聊前端\",{\"0\":{\"146\":1}}],[\"坚持实践和不断积累经验才是成为优秀开发人员的关键\",{\"1\":{\"148\":1}}],[\"市面上现在使用率上感觉还是\",{\"1\":{\"148\":1}}],[\"官网也告诉了我们什么是\",{\"1\":{\"448\":1}}],[\"官网也是推荐开发使用组合式\",{\"1\":{\"331\":1}}],[\"官网给出了\",{\"1\":{\"331\":1}}],[\"官网维护的\",{\"1\":{\"266\":1}}],[\"官网\",{\"1\":{\"197\":1}}],[\"官网上就有回答\",{\"1\":{\"148\":1}}],[\"官方开源版作为示例\",{\"1\":{\"155\":1}}],[\"官方推荐使用其他更好的替代方案\",{\"1\":{\"133\":1}}],[\"老生常谈的三剑客\",{\"1\":{\"148\":1}}],[\"再访问根结点\",{\"1\":{\"603\":1}}],[\"再依次遍历根结点的每棵子树\",{\"1\":{\"603\":1}}],[\"再把自己\",{\"1\":{\"566\":1}}],[\"再前进一个位置就自动到\",{\"1\":{\"557\":1}}],[\"再建立一个索引表\",{\"1\":{\"465\":1}}],[\"再找到a\",{\"1\":{\"455\":1}}],[\"再加上敏捷开发和交付的出现\",{\"1\":{\"420\":1}}],[\"再加性能损耗小\",{\"1\":{\"364\":1}}],[\"再从该release分支下创建对应开发功能的feature分支进行开发\",{\"1\":{\"287\":1}}],[\"再执行\",{\"1\":{\"225\":1}}],[\"再之后就是前端基本功了\",{\"1\":{\"148\":1}}],[\"再到总经理\",{\"1\":{\"128\":1}}],[\"服务端\",{\"0\":{\"432\":1}}],[\"服务端渲染\",{\"1\":{\"148\":1}}],[\"服务发现\",{\"1\":{\"428\":1}}],[\"服务发现和通信\",{\"1\":{\"428\":1}}],[\"服务发布的xml格式\",{\"1\":{\"269\":1}}],[\"服务部署\",{\"1\":{\"421\":1}}],[\"服务监控\",{\"1\":{\"421\":1}}],[\"服务路由\",{\"1\":{\"421\":1}}],[\"服务接口调用\",{\"1\":{\"421\":1}}],[\"服务熔断器\",{\"1\":{\"421\":1}}],[\"服务调用\",{\"1\":{\"421\":1}}],[\"服务注册与发现\",{\"1\":{\"421\":1}}],[\"服务应用阶段\",{\"1\":{\"293\":1}}],[\"服务\",{\"0\":{\"273\":1},\"1\":{\"155\":1,\"271\":2,\"409\":1}}],[\"服务器会产生一个新的线程并调用服务\",{\"1\":{\"413\":1}}],[\"服务器或应用服务器上的程序\",{\"1\":{\"409\":1}}],[\"服务器无需查询数据库即可验证用户身份\",{\"1\":{\"293\":1}}],[\"服务器无法识别连续的多个请求是否来自同一个用户\",{\"1\":{\"293\":1}}],[\"服务器上的数据库或应用程序之间的中间层\",{\"1\":{\"409\":1}}],[\"服务器上\",{\"1\":{\"234\":1}}],[\"服务器运维管理面板\",{\"1\":{\"150\":1}}],[\"服务器\",{\"1\":{\"99\":1,\"413\":1}}],[\"模拟脱敏过程\",{\"1\":{\"225\":1}}],[\"模拟脱敏操作\",{\"1\":{\"225\":1}}],[\"模块的创建\",{\"1\":{\"441\":1}}],[\"模块当中来方便其他模块依赖\",{\"1\":{\"441\":1}}],[\"模块\",{\"0\":{\"318\":1}}],[\"模块实现\",{\"1\":{\"202\":1}}],[\"模块化开发\",{\"1\":{\"148\":1}}],[\"模型是领域中的实体\",{\"1\":{\"143\":1}}],[\"模型\",{\"1\":{\"143\":1}}],[\"使每个结点包括三部分内容\",{\"1\":{\"601\":1}}],[\"使表中的元素满足按关键字有序的过程\",{\"1\":{\"487\":1}}],[\"使其具备了无状态性\",{\"1\":{\"448\":1}}],[\"使其运行在服务器之上\",{\"1\":{\"148\":1}}],[\"使得每个结点均被访问一次\",{\"1\":{\"594\":1}}],[\"使得用户可以授予对其受保护资源的有限访问权限\",{\"1\":{\"451\":1}}],[\"使得你的代码更加健壮\",{\"1\":{\"395\":1}}],[\"使得加载和存储操作看上去可能是乱序执行\",{\"1\":{\"380\":1}}],[\"使得在单元测试中创建模拟对象\",{\"1\":{\"239\":1}}],[\"使文件生效即可\",{\"1\":{\"237\":1}}],[\"使用邻接矩阵法显然要量费大量的存储空间\",{\"1\":{\"545\":1}}],[\"使用一组地址连续的存储单元依次存储线性表中的的数据元素\",{\"1\":{\"508\":1}}],[\"使用基于关键字的查找\",{\"1\":{\"462\":1}}],[\"使用基于\",{\"1\":{\"448\":1}}],[\"使用的时候直接注入即可\",{\"1\":{\"441\":1}}],[\"使用的场景有以下几种\",{\"1\":{\"384\":1}}],[\"使用起来相对比较简洁\",{\"1\":{\"428\":1}}],[\"使用上和一般类静态方法一样\",{\"1\":{\"394\":1}}],[\"使用cglib的enhancer类来创建代理对象\",{\"1\":{\"391\":1}}],[\"使用动态代理集成调用\",{\"1\":{\"382\":1}}],[\"使用恰当的情况下不会引起线程上下文的切换和调度\",{\"1\":{\"371\":1}}],[\"使用虚拟\",{\"1\":{\"346\":1}}],[\"使用任意变量接收\",{\"1\":{\"318\":1}}],[\"使用场景\",{\"0\":{\"303\":1},\"1\":{\"375\":1}}],[\"使用客户端\",{\"0\":{\"278\":1}}],[\"使用wsdl\",{\"1\":{\"270\":1}}],[\"使用find命令查找以\",{\"1\":{\"237\":1}}],[\"使用反射我们必须知道的几个核心类和接口\",{\"1\":{\"227\":1}}],[\"使用责任链\",{\"1\":{\"130\":1}}],[\"使用正版需要订购\",{\"1\":{\"115\":1}}],[\"使用\",{\"0\":{\"276\":1},\"1\":{\"105\":1,\"121\":1,\"155\":1,\"217\":1,\"236\":1,\"272\":1,\"309\":1,\"352\":1,\"387\":1,\"388\":1,\"396\":3,\"446\":1}}],[\"使用专门的建模语言\",{\"1\":{\"103\":1}}],[\"或为一个根结点和两个互不相交的被称为根的左子树和右子树组成\",{\"1\":{\"588\":1}}],[\"或<x\",{\"1\":{\"548\":2}}],[\"或有向边<x\",{\"1\":{\"548\":2}}],[\"或确定表中没有所需要查找的元素\",{\"1\":{\"464\":1}}],[\"或自定义的\",{\"1\":{\"409\":1}}],[\"或发布\",{\"1\":{\"200\":1}}],[\"或\",{\"1\":{\"148\":2,\"213\":1,\"227\":3,\"340\":1,\"409\":2,\"412\":1,\"590\":1}}],[\"或者对零元素不分配存储空间\",{\"1\":{\"499\":1}}],[\"或者对软件架构的设计不够清晰\",{\"1\":{\"139\":1}}],[\"或者来自于一个未指定\",{\"1\":{\"414\":1}}],[\"或者直接计算得出对应的响应\",{\"1\":{\"409\":1}}],[\"或者也可以是来自\",{\"1\":{\"409\":1}}],[\"或者下面这样\",{\"1\":{\"405\":1}}],[\"或者需要代理非公共方法的情况\",{\"1\":{\"385\":1}}],[\"或者都放在子类中\",{\"1\":{\"317\":1}}],[\"或者是内网后台服务器只允许进入走\",{\"1\":{\"162\":1}}],[\"或者使用第三方的观察者模式框架\",{\"1\":{\"133\":1}}],[\"或者由同一个处理器处理但以不同的方式记录\",{\"1\":{\"128\":1}}],[\"或者将请求传递给链中的下一个处理者\",{\"1\":{\"125\":1}}],[\"或者促使此目标的实现\",{\"1\":{\"103\":1}}],[\"旨在解决\",{\"1\":{\"148\":1}}],[\"旨在帮助团队在短时间内对一个复杂领域进行建模和理解\",{\"1\":{\"139\":1}}],[\"解决的方法就是设置一个打印数据缓冲区\",{\"1\":{\"566\":1}}],[\"解决了国内用户使用\",{\"1\":{\"148\":1}}],[\"解释\",{\"1\":{\"483\":2}}],[\"解耦\",{\"1\":{\"420\":1}}],[\"解耦发送者和接收者\",{\"1\":{\"126\":1}}],[\"解构默认值\",{\"1\":{\"301\":1}}],[\"解构的目标若为可遍历对象\",{\"1\":{\"300\":1}}],[\"解构赋值是对赋值运算符的扩展\",{\"1\":{\"299\":1}}],[\"解构赋值\",{\"0\":{\"299\":1}}],[\"解压\",{\"1\":{\"193\":3}}],[\"解压缩命令\",{\"0\":{\"193\":1}}],[\"同样也徒增了很多次计算的消耗\",{\"1\":{\"594\":1}}],[\"同样的\",{\"1\":{\"148\":1}}],[\"同一条边在邻接表中用两个结点表示\",{\"1\":{\"547\":1}}],[\"同数量级\",{\"1\":{\"458\":1}}],[\"同时在每个结点中增设一个伪指针\",{\"1\":{\"599\":1}}],[\"同时附设一个指针指示当前栈顶元素的位置\",{\"1\":{\"570\":1}}],[\"同时确保二叉排序树的性质不会丢失\",{\"1\":{\"470\":1}}],[\"同时\",{\"1\":{\"430\":1}}],[\"同时保留对最新值和响应式连接的访问\",{\"1\":{\"347\":1}}],[\"同时保存转换状态的时间\",{\"1\":{\"233\":1}}],[\"同时将脱敏需要的依赖打包成\",{\"1\":{\"225\":1}}],[\"同时可以减轻网络的开销\",{\"1\":{\"170\":1}}],[\"同时也是一种分层结构\",{\"1\":{\"585\":1}}],[\"同时也是\",{\"1\":{\"148\":1}}],[\"同理以列优先方式存储时\",{\"1\":{\"498\":1}}],[\"同理\",{\"1\":{\"162\":1,\"595\":1}}],[\"同位语从句\",{\"0\":{\"65\":1}}],[\"同位语\",{\"0\":{\"49\":1}}],[\"y>的权值\",{\"1\":{\"548\":2}}],[\"y>存在\",{\"1\":{\"548\":1}}],[\"y>不存在\",{\"1\":{\"548\":1}}],[\"y>或\",{\"1\":{\"548\":1}}],[\"yield\",{\"1\":{\"320\":4}}],[\"yellow2\",{\"1\":{\"305\":2}}],[\"yellow1\",{\"1\":{\"305\":5}}],[\"yellow\",{\"1\":{\"305\":11}}],[\"yml\",{\"1\":{\"217\":1,\"364\":1}}],[\"yandex\",{\"1\":{\"324\":1}}],[\"yamlpropertysourceloader\",{\"1\":{\"280\":1}}],[\"yamlpropertysourcefactory\",{\"1\":{\"280\":2}}],[\"yaml\",{\"0\":{\"280\":1},\"1\":{\"208\":1,\"217\":1,\"280\":7}}],[\"yarn\",{\"1\":{\"148\":6}}],[\"y\",{\"1\":{\"194\":1,\"236\":2,\"300\":1,\"301\":7,\"548\":11}}],[\"y表示替换后的内容\",{\"1\":{\"194\":1}}],[\"yyy\",{\"1\":{\"193\":1}}],[\"your\",{\"1\":{\"188\":1,\"364\":1}}],[\"you\",{\"1\":{\"134\":1}}],[\"常数\",{\"1\":{\"459\":1}}],[\"常用方法\",{\"0\":{\"251\":1}}],[\"常用场景\",{\"0\":{\"200\":1}}],[\"常用\",{\"0\":{\"186\":1}}],[\"常见的遍历次序是先序\",{\"1\":{\"594\":1}}],[\"常见的渐进时间负责度排序\",{\"1\":{\"458\":1}}],[\"常见的有三种\",{\"1\":{\"348\":1}}],[\"常见的应该有\",{\"1\":{\"148\":1}}],[\"常见页面布局\",{\"1\":{\"323\":1}}],[\"常见场景处理步骤\",{\"0\":{\"289\":1}}],[\"常见版本如下\",{\"1\":{\"154\":1}}],[\"常常有一系列的过滤器\",{\"1\":{\"128\":1}}],[\"那该如何保证先进入的在两侧都再次入队的情况下可以先出来呢\",{\"1\":{\"560\":1}}],[\"那么称前者为后者的子图\",{\"1\":{\"532\":1}}],[\"那么称图g为简单图\",{\"1\":{\"530\":1}}],[\"那么在释放锁时可以直接将锁的状态改为未锁定状态\",{\"1\":{\"374\":1}}],[\"那么命中\",{\"1\":{\"165\":1}}],[\"那我们可以从排序出的数字依次给数字组合\",{\"1\":{\"484\":1}}],[\"那我们就需要知道如何实现动态代理了\",{\"1\":{\"384\":1}}],[\"那我们也就选择容器的方式进行搭建\",{\"1\":{\"364\":1}}],[\"那我应该也算是半个运维吧\",{\"1\":{\"179\":1}}],[\"那可能当你想测试的时候就会发现代码中有其他人提交不全的代码\",{\"1\":{\"287\":1}}],[\"那\",{\"1\":{\"266\":1}}],[\"那说不上是真的了解你的业务\",{\"1\":{\"147\":1}}],[\"那只能说是在做开发\",{\"1\":{\"137\":1}}],[\"觉得前端技术栈太窄了\",{\"1\":{\"147\":1}}],[\"好处\",{\"1\":{\"200\":6}}],[\"好像在早期后端是瞧不起前端的\",{\"1\":{\"147\":1}}],[\"好的代码就是注释\",{\"1\":{\"116\":1}}],[\"运算的实现是针对存储结构的\",{\"1\":{\"496\":1}}],[\"运算的定义是针对逻辑结构的\",{\"1\":{\"496\":1}}],[\"运算符后面是字符串\",{\"1\":{\"304\":1}}],[\"运维进行校验和更新\",{\"1\":{\"362\":1}}],[\"运维团队在拿到介质包和手册后按照步骤在生产环境部署\",{\"1\":{\"362\":1}}],[\"运维\",{\"1\":{\"147\":1}}],[\"运行脚本\",{\"1\":{\"236\":1}}],[\"运行上述代码时\",{\"1\":{\"134\":1}}],[\"运行\",{\"1\":{\"112\":1}}],[\"前后端出队的时候还是遵循先进先出的规律\",{\"1\":{\"559\":1}}],[\"前后正好经历了从单体架构到微服务的转型\",{\"1\":{\"362\":1}}],[\"前驱指针\",{\"1\":{\"519\":1}}],[\"前缀的指令\",{\"1\":{\"371\":1}}],[\"前言\",{\"0\":{\"327\":1,\"448\":1}}],[\"前世今生\",{\"0\":{\"293\":1}}],[\"前端进的元素排列在队列后端进的元素前面\",{\"1\":{\"559\":1}}],[\"前端框架三大金刚\",{\"1\":{\"148\":1}}],[\"前端\",{\"1\":{\"147\":1}}],[\"前辈们都说后端不仅仅需要掌握后端\",{\"1\":{\"147\":1}}],[\"碎谈\",{\"0\":{\"147\":1,\"419\":1}}],[\"依次递归下去就能唯一确定这颗二叉树\",{\"1\":{\"595\":1}}],[\"依次访问\",{\"1\":{\"550\":1}}],[\"依次组合数字\",{\"1\":{\"485\":1}}],[\"依次合并到develop和master分支上\",{\"1\":{\"289\":1}}],[\"依次处理数据\",{\"1\":{\"128\":1}}],[\"依赖\",{\"1\":{\"391\":1}}],[\"依赖注入\",{\"0\":{\"357\":1}}],[\"依赖了环境信息\",{\"1\":{\"245\":4}}],[\"依赖请先下载\",{\"1\":{\"155\":1}}],[\"依赖倒置原则\",{\"1\":{\"144\":1}}],[\"即以二叉链表作为树的存储结构\",{\"1\":{\"601\":1}}],[\"即每层都是最多的结点\",{\"1\":{\"589\":1}}],[\"即不存在度大于2的结点\",{\"1\":{\"588\":1}}],[\"即k和l为兄弟结点\",{\"1\":{\"586\":1}}],[\"即a\",{\"1\":{\"586\":1}}],[\"即子女结点\",{\"1\":{\"585\":1}}],[\"即在树的定义中又用到了其自身\",{\"1\":{\"585\":1}}],[\"即top0\",{\"1\":{\"571\":1}}],[\"即通过队头指针在队尾指针的下一个位置来牺牲一个队列单元作为队满的标志\",{\"1\":{\"557\":1}}],[\"即把存储队列元素的表从逻辑上视为一个环\",{\"1\":{\"557\":1}}],[\"即先进先出\",{\"1\":{\"554\":1}}],[\"即第一个块中的最大关键小于第二块中的所有记录的关键字\",{\"1\":{\"465\":1}}],[\"即文档\",{\"1\":{\"409\":1}}],[\"即线程之间共享程序的公共状态\",{\"1\":{\"378\":1}}],[\"即一个线程在修改一个共享变量时\",{\"1\":{\"371\":1}}],[\"即使是相同参数\",{\"1\":{\"302\":1}}],[\"即实现对象的\",{\"1\":{\"300\":1}}],[\"即\",{\"1\":{\"280\":1,\"413\":1,\"500\":2,\"501\":2,\"503\":1,\"590\":1}}],[\"即七天前的文件将被删除\",{\"1\":{\"236\":1}}],[\"即可采用顺序存储结构\",{\"1\":{\"598\":1}}],[\"即可创建容器\",{\"1\":{\"364\":1}}],[\"即可\",{\"1\":{\"229\":1,\"320\":1}}],[\"即可实现代理跳转\",{\"1\":{\"162\":1}}],[\"即根据访问请求的来源确定一个哈希值\",{\"1\":{\"175\":1}}],[\"即所有的请求都必须从\",{\"1\":{\"162\":1}}],[\"即应该只有一个原因导致模型发生变化\",{\"1\":{\"144\":1}}],[\"即主题对象\",{\"1\":{\"132\":1}}],[\"应运而生\",{\"1\":{\"448\":1}}],[\"应该就是在当时产生的\",{\"1\":{\"291\":1}}],[\"应该不会采用这种方式一次获取十份材料的方式\",{\"1\":{\"233\":1}}],[\"应该尽量使用抽象和接口\",{\"1\":{\"144\":2}}],[\"应该一直遵循高内聚低耦合的目标\",{\"1\":{\"144\":1}}],[\"应用程序的管理和监控\",{\"1\":{\"430\":1}}],[\"应用程序的运行状态\",{\"1\":{\"430\":1}}],[\"应用程序的开源项目\",{\"1\":{\"430\":1}}],[\"应用程序监控\",{\"1\":{\"430\":1}}],[\"应用程序\",{\"1\":{\"430\":2}}],[\"应用程序中\",{\"1\":{\"128\":2}}],[\"应用从中心化向分布式\",{\"1\":{\"293\":1}}],[\"应用层负责协调领域层和基础设施层之间的交互\",{\"1\":{\"145\":1}}],[\"应用层\",{\"1\":{\"145\":1}}],[\"应用事件监听器是一个接口\",{\"1\":{\"135\":1}}],[\"应用事件监听器\",{\"1\":{\"135\":1}}],[\"应用事件发布器是一个接口\",{\"1\":{\"135\":1}}],[\"应用事件发布器\",{\"1\":{\"135\":1}}],[\"应用场景\",{\"0\":{\"129\":1}}],[\"借用一名国外开发者的话来说\",{\"1\":{\"362\":1}}],[\"借鉴思想\",{\"0\":{\"144\":1}}],[\"借助指示元素存储地址的指针来表示元素之间的逻辑关系\",{\"1\":{\"495\":1}}],[\"借助\",{\"1\":{\"2\":1}}],[\"实例\",{\"1\":{\"412\":1}}],[\"实例代码\",{\"0\":{\"388\":1,\"391\":1}}],[\"实际执行的是远程的对象的方法\",{\"1\":{\"384\":1}}],[\"实际执行\",{\"1\":{\"313\":2}}],[\"实用性就更低了\",{\"1\":{\"266\":1}}],[\"实操\",{\"0\":{\"214\":1}}],[\"实时分析和消息队列等场景上有着不可替代的作用\",{\"1\":{\"441\":1}}],[\"实时日志查看\",{\"1\":{\"430\":1}}],[\"实时排名等\",{\"1\":{\"200\":1}}],[\"实时数据分析\",{\"1\":{\"200\":1}}],[\"实时通信等一系列的好处\",{\"1\":{\"148\":1}}],[\"实体类等\",{\"1\":{\"242\":1}}],[\"实体类\",{\"1\":{\"242\":1}}],[\"实体是领域中的一个概念\",{\"1\":{\"143\":1}}],[\"实体\",{\"1\":{\"143\":1}}],[\"实现对多个\",{\"1\":{\"430\":1}}],[\"实现了动态代理的动态性\",{\"1\":{\"392\":1}}],[\"实现了高效的页面更新\",{\"1\":{\"346\":1}}],[\"实现一个methodinterceptor接口的类\",{\"1\":{\"391\":1}}],[\"实现和\",{\"1\":{\"382\":1}}],[\"实现原子操作也是存在问题的\",{\"1\":{\"376\":1}}],[\"实现类的继承\",{\"1\":{\"317\":1}}],[\"实现多环境打包\",{\"1\":{\"286\":1}}],[\"实现远程服务端的调用\",{\"1\":{\"271\":1}}],[\"实现分支覆盖\",{\"1\":{\"246\":1}}],[\"实现简单有效的分布式锁\",{\"1\":{\"200\":1}}],[\"实现各种排行榜功能\",{\"1\":{\"200\":1}}],[\"实现防盗链需要配置\",{\"1\":{\"172\":1}}],[\"实现交给领域实体自己来做\",{\"1\":{\"143\":1}}],[\"实现\",{\"0\":{\"133\":1,\"417\":1},\"1\":{\"173\":1,\"175\":1,\"382\":1,\"385\":1,\"388\":1}}],[\"实现处理者接口\",{\"1\":{\"125\":1}}],[\"贫血模型是一种面向对象的设计思想\",{\"1\":{\"143\":1}}],[\"贫血模型\",{\"1\":{\"143\":1}}],[\"充血模型是一种面向对象的设计思想\",{\"1\":{\"143\":1}}],[\"充血模型\",{\"1\":{\"143\":1}}],[\"仓库中可以看到\",{\"1\":{\"421\":1}}],[\"仓库的使用\",{\"0\":{\"287\":1}}],[\"仓库的创建\",{\"0\":{\"286\":1}}],[\"仓库的时候\",{\"1\":{\"282\":1}}],[\"仓库和\",{\"1\":{\"282\":1}}],[\"仓库听说是接手的上家公司的原因才保留至今的\",{\"1\":{\"282\":1}}],[\"仓库可看成一个代码控制中心\",{\"1\":{\"183\":1}}],[\"仓库是领域中的一个概念\",{\"1\":{\"143\":1}}],[\"仓库\",{\"0\":{\"282\":1},\"1\":{\"143\":1,\"183\":1}}],[\"聚合根是领域中的一个概念\",{\"1\":{\"143\":1}}],[\"聚合根\",{\"1\":{\"143\":1}}],[\"聚合是领域中的一个概念\",{\"1\":{\"143\":1}}],[\"聚合\",{\"1\":{\"143\":1}}],[\"进栈\",{\"1\":{\"569\":1}}],[\"进栈次序依次为a1\",{\"1\":{\"568\":1}}],[\"进入容器内查看初始化密码\",{\"1\":{\"364\":1}}],[\"进入\",{\"1\":{\"162\":1}}],[\"进程\",{\"1\":{\"158\":1}}],[\"进程的工作调度\",{\"1\":{\"158\":1}}],[\"进而为后续的设计和开发工作打下坚实的基础\",{\"1\":{\"142\":1}}],[\"进行对来判断\",{\"1\":{\"557\":1}}],[\"进行中\",{\"1\":{\"319\":1}}],[\"进行注册服务供客户端调用\",{\"1\":{\"270\":1}}],[\"进行异步任务处理\",{\"1\":{\"200\":1}}],[\"进行定向请求\",{\"1\":{\"177\":1}}],[\"进行定义\",{\"1\":{\"103\":1}}],[\"进行查看\",{\"1\":{\"153\":1}}],[\"进行状态\",{\"0\":{\"23\":1}}],[\"高度为h的二叉树至多有\",{\"1\":{\"590\":1}}],[\"高度为h的m叉树至多有\",{\"1\":{\"587\":1}}],[\"高度为h\",{\"1\":{\"589\":1}}],[\"高度协作\",{\"1\":{\"141\":1}}],[\"高可用性和容错性和监控和告警\",{\"1\":{\"428\":1}}],[\"高可用性和分布式\",{\"1\":{\"199\":1}}],[\"高可用配置\",{\"0\":{\"173\":1}}],[\"高效地探索和理解复杂的业务领域\",{\"1\":{\"142\":1}}],[\"团队提出的一种\",{\"1\":{\"324\":1}}],[\"团队可以在一个开放和互动的环境中\",{\"1\":{\"142\":1}}],[\"团队能够在短时间内捕捉到领域的复杂性\",{\"1\":{\"141\":1}}],[\"帮助开发团队分析测试覆盖率\",{\"1\":{\"239\":1}}],[\"帮助进行更细化的领域建模\",{\"1\":{\"142\":1}}],[\"帮助跨职能团队通过讨论和协作\",{\"1\":{\"139\":1}}],[\"添加依赖\",{\"0\":{\"443\":1}}],[\"添加到每个项目中去\",{\"1\":{\"225\":1}}],[\"添加更多的细节和上下文\",{\"1\":{\"142\":1}}],[\"添加参与者\",{\"1\":{\"142\":1}}],[\"细分到最后有\",{\"1\":{\"494\":1}}],[\"细粒度拆分的分布式扩容\",{\"1\":{\"174\":1}}],[\"细化和调整事件模型\",{\"1\":{\"142\":1}}],[\"细到令你发指\",{\"1\":{\"96\":1}}],[\"讨论和细化\",{\"1\":{\"142\":1}}],[\"识别出领域中的聚合根和界限上下文\",{\"1\":{\"142\":1}}],[\"识别聚合根和界限上下文\",{\"1\":{\"142\":1}}],[\"识别执行这些命令的参与者\",{\"1\":{\"142\":1}}],[\"识别触发这些事件的命令或操作\",{\"1\":{\"142\":1}}],[\"识别命令\",{\"1\":{\"142\":1}}],[\"展示业务流程的先后顺序\",{\"1\":{\"142\":1}}],[\"订单支付等\",{\"1\":{\"143\":1}}],[\"订单已创建\",{\"1\":{\"142\":1}}],[\"订阅\",{\"1\":{\"200\":1}}],[\"订阅感兴趣的事件\",{\"1\":{\"136\":1}}],[\"订阅模式中\",{\"1\":{\"136\":1}}],[\"订阅模式\",{\"1\":{\"136\":1}}],[\"订阅模式或者事件\",{\"1\":{\"132\":1}}],[\"订阅者2\",{\"1\":{\"134\":1}}],[\"订阅者1\",{\"1\":{\"134\":1}}],[\"订阅者接口\",{\"1\":{\"134\":1}}],[\"订阅者\",{\"1\":{\"132\":1}}],[\"标识为0则表示为左右孩子\",{\"1\":{\"596\":1}}],[\"标识事件\",{\"1\":{\"142\":1}}],[\"标志位来判断\",{\"1\":{\"557\":1}}],[\"标记语言下的一个子集\",{\"1\":{\"270\":1}}],[\"标记部分有很多种\",{\"1\":{\"171\":1}}],[\"标准的数据\",{\"1\":{\"294\":1}}],[\"标准通用标记语言下的一个子集\",{\"1\":{\"269\":1}}],[\"标准库中\",{\"1\":{\"134\":1}}],[\"标签上的属性\",{\"1\":{\"346\":1}}],[\"标签中的\",{\"1\":{\"220\":1}}],[\"标签来调用\",{\"1\":{\"220\":1}}],[\"标签来进行逻辑判断\",{\"1\":{\"220\":1}}],[\"白板或大张纸\",{\"1\":{\"142\":1}}],[\"邀请相关领域的专家和团队成员\",{\"1\":{\"142\":1}}],[\"步骤\",{\"0\":{\"142\":1}}],[\"步伐\",{\"0\":{\"85\":1}}],[\"关键字\",{\"1\":{\"317\":2,\"320\":1}}],[\"关键字定义类\",{\"1\":{\"317\":1}}],[\"关键字的行\",{\"1\":{\"237\":1}}],[\"关键字声明然后\",{\"1\":{\"237\":1}}],[\"关键特点\",{\"0\":{\"141\":1}}],[\"关机\",{\"1\":{\"187\":1}}],[\"关机重启\",{\"0\":{\"187\":1}}],[\"关闭数据库连接\",{\"1\":{\"416\":1}}],[\"关闭开机启动\",{\"1\":{\"156\":1}}],[\"关闭\",{\"1\":{\"155\":1}}],[\"关于定时任务的使用场景\",{\"0\":{\"231\":1}}],[\"关于持久化\",{\"0\":{\"196\":1}}],[\"关于\",{\"0\":{\"139\":1,\"329\":1,\"439\":1}}],[\"关于设计模式\",{\"0\":{\"122\":1}}],[\"关于命名规范的问题这里我不是建议\",{\"1\":{\"117\":1}}],[\"年提出的工作坊方法\",{\"1\":{\"139\":1}}],[\"刚开始接触的时候确实有点痛啊\",{\"1\":{\"282\":1}}],[\"刚开始工作的时候谁写测试类啊\",{\"1\":{\"239\":1}}],[\"刚来公司的时候有些项目请求并不是用\",{\"1\":{\"266\":1}}],[\"刚接触\",{\"1\":{\"179\":1}}],[\"刚接触到一个新的领域可以引用事件风暴的方式\",{\"1\":{\"139\":1}}],[\"刚从\",{\"1\":{\"112\":1}}],[\"软件架构的设计往往是在项目开始之初就确立的\",{\"1\":{\"139\":1}}],[\"触发器可以自动触发相应的操作\",{\"1\":{\"136\":1}}],[\"触发器\",{\"1\":{\"136\":1}}],[\"确定性\",{\"1\":{\"456\":1}}],[\"确定讨论的主题和范围\",{\"1\":{\"142\":1}}],[\"确保方法的执行在事务的上下文中进行\",{\"1\":{\"392\":1}}],[\"确保在安装了最新版本的\",{\"1\":{\"332\":1}}],[\"确保同一资源不会被多个进程同时修改\",{\"1\":{\"200\":1}}],[\"确保它们之间的解耦和灵活性\",{\"1\":{\"136\":1}}],[\"确保所有相关的观察者都能接收到状态变化的通知并作出相应的响应\",{\"1\":{\"136\":1}}],[\"确实是一个不错的选择\",{\"1\":{\"148\":1}}],[\"确实是厉害\",{\"1\":{\"96\":1}}],[\"确实对这个安装软件晕得很\",{\"1\":{\"112\":1}}],[\"确实有点追不上时代了\",{\"1\":{\"96\":1}}],[\"确实目前看来就算计算机行业身处寒冬\",{\"1\":{\"95\":1}}],[\"总之\",{\"1\":{\"526\":1}}],[\"总之符合多层处理流程的功能都可以用责任链模式来应对\",{\"1\":{\"128\":1}}],[\"总的来说\",{\"1\":{\"293\":1,\"385\":1}}],[\"总结和延伸\",{\"0\":{\"392\":1}}],[\"总结\",{\"0\":{\"136\":1,\"215\":1,\"264\":1,\"375\":1,\"377\":1,\"407\":1,\"446\":1}}],[\"容易理解\",{\"1\":{\"564\":1}}],[\"容易求的顶点和边的各种信息\",{\"1\":{\"547\":1}}],[\"容易出现哈希冲突而导致时间和空间的开销\",{\"1\":{\"495\":1}}],[\"容易上手\",{\"1\":{\"98\":1}}],[\"容器化技术\",{\"1\":{\"420\":1}}],[\"容器测试\",{\"1\":{\"250\":1}}],[\"容器中\",{\"1\":{\"209\":1}}],[\"容器中的组件\",{\"1\":{\"135\":1}}],[\"容器后\",{\"1\":{\"207\":1}}],[\"容器可以被创建\",{\"1\":{\"183\":1}}],[\"容器是镜像运行时的实体\",{\"1\":{\"183\":1}}],[\"容器\",{\"1\":{\"183\":1,\"244\":1,\"364\":1,\"413\":1}}],[\"接收价格的前置项目\",{\"1\":{\"234\":1}}],[\"接下来也是和第一种情况相同\",{\"1\":{\"289\":1}}],[\"接下来就是最关键的部分了\",{\"1\":{\"287\":1}}],[\"接下来就是写测试类了\",{\"1\":{\"250\":1}}],[\"接下来新增切面\",{\"1\":{\"225\":1}}],[\"接下来\",{\"1\":{\"135\":1}}],[\"接下来我们使用\",{\"1\":{\"135\":1}}],[\"接口和\",{\"1\":{\"394\":1}}],[\"接口和其实现类\",{\"1\":{\"387\":1}}],[\"接口又实现了\",{\"1\":{\"394\":1}}],[\"接口来实现的\",{\"1\":{\"382\":1}}],[\"接口的类\",{\"1\":{\"388\":1}}],[\"接口的数据\",{\"1\":{\"300\":1}}],[\"接口的返回值变成了\",{\"1\":{\"229\":1}}],[\"接口\",{\"1\":{\"135\":1,\"227\":2,\"271\":1,\"387\":1,\"388\":1}}],[\"接口在\",{\"1\":{\"134\":1}}],[\"接口实现项目启动时获取所有继承我们抽象处理者的类并且按照\",{\"1\":{\"130\":1}}],[\"但无论采用何种存储方式\",{\"1\":{\"598\":1}}],[\"但不能由输入受限的双端队列得到的输出序列\",{\"1\":{\"560\":1}}],[\"但不能由输出受限的双端队列得到的输出序列\",{\"1\":{\"560\":1}}],[\"但操作灵活高效\",{\"1\":{\"526\":1}}],[\"但块间的元素是有序的\",{\"1\":{\"465\":1}}],[\"但却没有\",{\"1\":{\"453\":1}}],[\"但比较损耗性能\",{\"1\":{\"426\":1}}],[\"但它不能被子类继承\",{\"1\":{\"394\":1}}],[\"但一些全局样式还是需要有一个规范来整理\",{\"1\":{\"324\":1}}],[\"但应该避免冲突\",{\"1\":{\"294\":1}}],[\"但建议使用的\",{\"1\":{\"294\":1}}],[\"但都是对于项目上线流程的妥协\",{\"0\":{\"288\":1}}],[\"但线上同样无法\",{\"1\":{\"181\":1}}],[\"但大多数时候这并不是你自己的选择\",{\"1\":{\"147\":1}}],[\"但通常是由应用程序定义的业务对象或组件\",{\"1\":{\"135\":1}}],[\"但是先序序列和后续序列不能确定\",{\"1\":{\"595\":1}}],[\"但是存储空间是在程序执行过程中动态分配的\",{\"1\":{\"576\":1}}],[\"但是代码简单\",{\"1\":{\"564\":1}}],[\"但是效率并不会很高\",{\"1\":{\"564\":1}}],[\"但是并没有说做到输入输出限制和出入的前后顺序的限制\",{\"1\":{\"559\":1}}],[\"但是确定两个点之间是否有边\",{\"1\":{\"545\":1}}],[\"但是图不可以是空图\",{\"1\":{\"528\":1}}],[\"但是对连续存储空间要求高\",{\"1\":{\"526\":1}}],[\"但是也因为存储附加指针域倒是浪费存储空间\",{\"1\":{\"511\":1}}],[\"但是也失去了随机存取的特性\",{\"1\":{\"503\":1}}],[\"但是每个请求都必须携带包含了所有必要的用户身份信息和声明的令牌来进行身份验证\",{\"1\":{\"448\":1}}],[\"但是动态代理这个知识点必须该梳理梳理了\",{\"1\":{\"382\":1}}],[\"但是其他处理器缓存已经读取的值还是旧的\",{\"1\":{\"371\":1}}],[\"但是目前主流的方案都因为隔离性\",{\"1\":{\"364\":1}}],[\"但是计算机会认为是我们修改了左子节点\",{\"1\":{\"346\":1}}],[\"但是我们可以不断的进出来打乱顺序\",{\"1\":{\"560\":1}}],[\"但是我们可以拦截属性的\",{\"1\":{\"347\":1}}],[\"但是我们应该了解常见代码形式的复杂度\",{\"1\":{\"459\":1}}],[\"但是我们通常不会采用这种方法\",{\"1\":{\"455\":1}}],[\"但是我们只关注\",{\"1\":{\"332\":1}}],[\"但是我记得自己看过容器化投产的性能瓶颈和安全性的问题\",{\"1\":{\"179\":1}}],[\"但是他们自己都是已经在使用\",{\"1\":{\"331\":1}}],[\"但是\",{\"1\":{\"320\":1,\"444\":1,\"544\":1}}],[\"但是更易读\",{\"1\":{\"314\":1}}],[\"但是一个目标总会有多种实现方式\",{\"1\":{\"291\":1}}],[\"但是一定是你学习过程中能找到资源和解决问题方法最顺利的一种\",{\"1\":{\"95\":1}}],[\"但是现在的设计迟早会因为各种挑战和原因而使仓库变得越来越笨重和复杂\",{\"1\":{\"290\":1}}],[\"但是后合并的人可能就需要解决两个人冲突的代码部分\",{\"1\":{\"289\":1}}],[\"但是构造的结构也是大同小异\",{\"1\":{\"287\":1}}],[\"但是文件夹之间没有任何联系\",{\"1\":{\"282\":1}}],[\"但是从来不会出现使用分支的用法\",{\"1\":{\"282\":1}}],[\"但是思想和实现我感觉应该也是同样的基调\",{\"1\":{\"232\":1}}],[\"但是看完代码后\",{\"1\":{\"229\":1}}],[\"但是这些场景一般都是在框架开发\",{\"1\":{\"227\":1}}],[\"但是这并不影响我们用在这里方便理解其过程\",{\"1\":{\"134\":1}}],[\"但是体积过大和比较繁琐的标签和属性确实让人头大\",{\"1\":{\"217\":1}}],[\"但是只能说是符合当前公司的使用场景\",{\"1\":{\"215\":1}}],[\"但是好在并不会频繁更新\",{\"1\":{\"208\":1}}],[\"但是又不确定对方发送的产品价格是固定的\",{\"1\":{\"205\":1}}],[\"但是多多少少上线和联调的时候也都接触过\",{\"1\":{\"202\":1}}],[\"但是肯定不是长远之计\",{\"1\":{\"202\":1}}],[\"但是到了这个前后端分离的时代\",{\"1\":{\"147\":1}}],[\"但是大多数的场景下并不会去使用\",{\"1\":{\"133\":1}}],[\"但是值得一提的是在一些特定的场合下内网穿透工具还是十分好用的\",{\"1\":{\"111\":1}}],[\"但是面对更多人同时开发的场景来说\",{\"1\":{\"98\":1}}],[\"但是就目前的使用情况来看\",{\"1\":{\"96\":1}}],[\"但是在邻接表中求两点之间是否存在边对边执行删除等操作时\",{\"1\":{\"547\":1}}],[\"但是在选型上还是要根据项目规模和个人偏好进行选择\",{\"1\":{\"148\":1}}],[\"但是在苹果有了自家芯片之后\",{\"1\":{\"112\":1}}],[\"但是在面试或者一些表设计中\",{\"1\":{\"93\":1}}],[\"但是在不同人的手里能拿到不同的结果集\",{\"1\":{\"93\":1}}],[\"但是都是停在应用的水平\",{\"1\":{\"4\":1}}],[\"但是依然不能掩饰它们过去在某些领域作出的优秀贡献\",{\"1\":{\"2\":1}}],[\"观察者可以接收到事件通知\",{\"1\":{\"136\":1}}],[\"观察者\",{\"1\":{\"136\":1}}],[\"观察者模式适用于那些多个对象之间存在一对多关系的场景\",{\"1\":{\"136\":1}}],[\"观察者模式适用于以下场景\",{\"1\":{\"136\":1}}],[\"观察者模式可以用于实现日志记录和审计功能\",{\"1\":{\"136\":1}}],[\"观察者模式可以用于系统监测和通知的场景\",{\"1\":{\"136\":1}}],[\"观察者模式被广泛用于处理用户界面组件的事件\",{\"1\":{\"136\":1}}],[\"观察者模式被广泛应用\",{\"1\":{\"136\":1}}],[\"观察者模式能够实现一对多的通知机制\",{\"1\":{\"136\":1}}],[\"观察者模式也被称为发布\",{\"1\":{\"132\":1}}],[\"观察者模式\",{\"0\":{\"131\":1}}],[\"观察到只有一个订阅者收到了通知\",{\"1\":{\"134\":1}}],[\"收到消息\",{\"1\":{\"134\":1,\"135\":1}}],[\"收到行业内多位大佬推荐的一本数据结构与算法入门书\",{\"1\":{\"92\":1}}],[\"+1\",{\"1\":{\"587\":1}}],[\"+key\",{\"1\":{\"313\":2}}],[\"+\",{\"0\":{\"326\":1,\"447\":1,\"449\":1},\"1\":{\"134\":2,\"135\":1,\"153\":1,\"194\":1,\"236\":1,\"244\":1,\"308\":4,\"314\":1,\"315\":4,\"317\":1,\"319\":2,\"331\":1,\"388\":6,\"485\":3,\"498\":7,\"500\":2,\"501\":3,\"502\":3,\"590\":4}}],[\"ui端口到宿主机\",{\"1\":{\"364\":1}}],[\"ui\",{\"1\":{\"323\":2,\"324\":1,\"361\":1}}],[\"uddi\",{\"0\":{\"268\":1},\"1\":{\"267\":1,\"270\":1}}],[\"updating\",{\"1\":{\"388\":1}}],[\"updated\",{\"1\":{\"260\":1}}],[\"updateuser\",{\"1\":{\"260\":2,\"388\":2}}],[\"up\",{\"1\":{\"364\":1}}],[\"upstream\",{\"1\":{\"164\":1,\"175\":1}}],[\"utf\",{\"1\":{\"217\":1}}],[\"util\",{\"1\":{\"134\":2}}],[\"ubuntu16\",{\"1\":{\"183\":1}}],[\"ubuntu\",{\"1\":{\"183\":1}}],[\"uri\",{\"0\":{\"176\":1}}],[\"url\",{\"0\":{\"168\":1,\"171\":1},\"1\":{\"168\":1,\"171\":2,\"294\":1,\"414\":1,\"437\":1}}],[\"url重定向\",{\"1\":{\"154\":1}}],[\"union\",{\"1\":{\"311\":1}}],[\"unit\",{\"1\":{\"156\":1}}],[\"uno\",{\"1\":{\"309\":2}}],[\"undefined\",{\"1\":{\"300\":2,\"301\":1,\"302\":1,\"304\":1,\"319\":1,\"320\":1}}],[\"unzip\",{\"1\":{\"193\":1}}],[\"unsubscribe\",{\"1\":{\"134\":3}}],[\"usdchf\",{\"1\":{\"280\":1}}],[\"usr\",{\"1\":{\"155\":2,\"156\":9,\"364\":10}}],[\"usertoupdate\",{\"1\":{\"260\":3}}],[\"usernotfoundexception\",{\"1\":{\"259\":2}}],[\"username\",{\"1\":{\"130\":1,\"225\":3,\"253\":1,\"388\":12}}],[\"userserviceproxy\",{\"1\":{\"387\":1,\"388\":4}}],[\"userserviceimpl\",{\"1\":{\"387\":1,\"388\":2}}],[\"userservicemock\",{\"1\":{\"252\":1,\"253\":1,\"254\":1,\"255\":1,\"256\":1,\"257\":1,\"258\":2,\"259\":1,\"260\":1}}],[\"userservice\",{\"1\":{\"252\":2,\"387\":1,\"388\":10}}],[\"uservo\",{\"1\":{\"225\":7,\"253\":1}}],[\"userdeletionnum\",{\"1\":{\"130\":2}}],[\"userinfoservice\",{\"1\":{\"130\":3}}],[\"userloginservice\",{\"1\":{\"130\":3}}],[\"user\",{\"1\":{\"130\":3,\"153\":2,\"156\":1,\"253\":4,\"257\":1,\"260\":2,\"364\":2,\"388\":4}}],[\"userchainmarkenum\",{\"1\":{\"130\":2}}],[\"userregisterrespvo\",{\"1\":{\"130\":1}}],[\"userregisterreqvo\",{\"1\":{\"130\":4}}],[\"userregisterreqvo>\",{\"1\":{\"130\":1}}],[\"userregistercheckdeletionchainhandler\",{\"1\":{\"130\":1}}],[\"userregistercreatechainfilter<userregisterreqvo>\",{\"1\":{\"130\":3}}],[\"userregistercreatechainfilter\",{\"1\":{\"130\":1}}],[\"userregisterhasusernamechainhandler\",{\"1\":{\"130\":1}}],[\"userregistererrorcodeenum\",{\"1\":{\"130\":8}}],[\"userregisterparamnotnullchainhandler\",{\"1\":{\"130\":1}}],[\"拿到每个方法返回值判断\",{\"1\":{\"225\":1}}],[\"拿取价格到我们针对每个平台初始化的多个阻塞队列来区分价格\",{\"1\":{\"209\":1}}],[\"拿\",{\"1\":{\"133\":1}}],[\"中序遍历去除第一棵树之后剩余树构成的森林\",{\"1\":{\"603\":1}}],[\"中序遍历森里中第一棵子树的根结点的子树森林\",{\"1\":{\"603\":1}}],[\"中序遍历森林\",{\"1\":{\"603\":1}}],[\"中序和后序三种\",{\"1\":{\"594\":1}}],[\"中数位顺序不同\",{\"1\":{\"482\":1}}],[\"中数位顺序可以与\",{\"1\":{\"482\":1}}],[\"中所有数字出现的次数\",{\"1\":{\"481\":1}}],[\"中所有数字出现的次数之和等于\",{\"1\":{\"481\":1}}],[\"中每个对象都可以是一个锁\",{\"1\":{\"372\":1}}],[\"中被移除时调用\",{\"1\":{\"353\":2}}],[\"中时调用\",{\"1\":{\"353\":2}}],[\"中执行触发\",{\"1\":{\"347\":1}}],[\"中执行追踪\",{\"1\":{\"347\":1}}],[\"中我们值得关注的一些新特性\",{\"1\":{\"331\":1}}],[\"中想要的大部分内容\",{\"1\":{\"329\":1}}],[\"中是否有该字符串参数作为名称的\",{\"1\":{\"305\":1}}],[\"中指定的算法和一个秘钥\",{\"1\":{\"294\":1}}],[\"中国开发者最先想到的应该是阿里的\",{\"1\":{\"291\":1}}],[\"中心仓库应该只有master分支\",{\"1\":{\"286\":1}}],[\"中遇到的问题\",{\"0\":{\"279\":1}}],[\"中找到\",{\"1\":{\"272\":1,\"327\":1,\"331\":1,\"504\":1,\"553\":1,\"567\":1,\"584\":1}}],[\"中获取入参中的返回值项进行修改\",{\"1\":{\"225\":1}}],[\"中进行操作\",{\"1\":{\"225\":1}}],[\"中并不存在\",{\"1\":{\"220\":1}}],[\"中用\",{\"1\":{\"214\":1}}],[\"中的任意一个元素\",{\"1\":{\"502\":1}}],[\"中的任意一个元素都有\",{\"1\":{\"500\":1}}],[\"中的接口可以包含默认方法\",{\"1\":{\"394\":1}}],[\"中的样式命名规范\",{\"1\":{\"324\":1}}],[\"中的方法作为切点增加个切面\",{\"1\":{\"225\":1}}],[\"中的敏感信息过滤\",{\"1\":{\"225\":1}}],[\"中的变量添加到环境变量中后\",{\"1\":{\"214\":1}}],[\"中的配置读取都是在\",{\"1\":{\"214\":1}}],[\"中的配置迁移到环境变量读取\",{\"1\":{\"213\":1}}],[\"中的\",{\"1\":{\"207\":1}}],[\"中的发布订阅模式\",{\"1\":{\"132\":1}}],[\"中间件\",{\"0\":{\"195\":1}}],[\"中增加一行声明即可实现\",{\"1\":{\"175\":1}}],[\"中\",{\"1\":{\"145\":1,\"162\":1,\"208\":1,\"293\":1,\"347\":2,\"352\":1,\"379\":1,\"382\":1}}],[\"中23中设计模式结合后来的实践和发展又重新总结出来的更完善生动的作品\",{\"1\":{\"101\":1}}],[\"kubernetes\",{\"1\":{\"362\":1}}],[\"kvarray\",{\"1\":{\"309\":2}}],[\"kk\",{\"1\":{\"302\":1,\"304\":3}}],[\"k线查询币种对价格波动的时候\",{\"1\":{\"229\":1}}],[\"k线平台和日终价格三个后台项目\",{\"1\":{\"205\":1}}],[\"keep\",{\"1\":{\"236\":1}}],[\"keep=7\",{\"1\":{\"236\":1}}],[\"keepalived\",{\"1\":{\"173\":1}}],[\"key=\",{\"1\":{\"345\":1}}],[\"key2\",{\"1\":{\"309\":2}}],[\"keyfunc\",{\"1\":{\"307\":2}}],[\"keyfor\",{\"1\":{\"305\":2}}],[\"keyobj\",{\"1\":{\"307\":2}}],[\"keys\",{\"1\":{\"304\":1,\"308\":1}}],[\"key1\",{\"1\":{\"304\":7,\"309\":2}}],[\"keygen\",{\"1\":{\"188\":1}}],[\"key\",{\"0\":{\"188\":1},\"1\":{\"280\":2,\"305\":1,\"308\":6,\"313\":5,\"315\":6,\"346\":2,\"464\":1}}],[\"k8s\",{\"1\":{\"179\":1,\"182\":1}}],[\"k\",{\"1\":{\"130\":1,\"502\":3}}],[\">欢迎光临<\",{\"1\":{\"342\":1}}],[\">my\",{\"1\":{\"339\":1}}],[\">>\",{\"1\":{\"280\":1,\"503\":1}}],[\">out\",{\"1\":{\"190\":1}}],[\">\",{\"0\":{\"252\":1},\"1\":{\"130\":4,\"190\":1,\"214\":2,\"217\":18,\"219\":7,\"220\":3,\"229\":4,\"260\":1,\"280\":1,\"332\":1,\"338\":1,\"339\":1,\"340\":4,\"341\":3,\"342\":2,\"343\":2,\"344\":2,\"345\":3,\"391\":1,\"401\":1,\"402\":1,\"403\":1,\"404\":1,\"455\":2,\"502\":1,\"585\":2}}],[\">=\",{\"1\":{\"130\":1,\"498\":1,\"500\":1,\"501\":1,\"585\":1,\"590\":1}}],[\"rchild\",{\"1\":{\"593\":1}}],[\"rightchild\",{\"1\":{\"593\":1}}],[\"ribbon\",{\"1\":{\"382\":2}}],[\"rich\",{\"1\":{\"143\":1}}],[\"ratecodelist\",{\"1\":{\"280\":1}}],[\"ratecodeconfig\",{\"1\":{\"280\":1}}],[\"ratename\",{\"1\":{\"280\":2}}],[\"rate\",{\"1\":{\"280\":4}}],[\"rs\",{\"1\":{\"271\":2}}],[\"rsa\",{\"1\":{\"188\":1}}],[\"rh\",{\"1\":{\"191\":1}}],[\"r\",{\"1\":{\"187\":1,\"193\":1,\"236\":2,\"237\":3,\"364\":1,\"455\":3}}],[\"rf\",{\"1\":{\"179\":1,\"236\":1}}],[\"rmi\",{\"1\":{\"409\":1}}],[\"rm\",{\"1\":{\"179\":1,\"236\":2}}],[\"rollup\",{\"1\":{\"148\":1}}],[\"rollbackfor\",{\"1\":{\"130\":1}}],[\"root\",{\"1\":{\"143\":1,\"155\":1,\"183\":2,\"214\":1,\"364\":1}}],[\"runtime\",{\"1\":{\"224\":1,\"331\":1}}],[\"runtimeexception\",{\"1\":{\"130\":1,\"404\":1}}],[\"run\",{\"1\":{\"130\":1,\"207\":1,\"364\":4}}],[\"reject\",{\"1\":{\"319\":6}}],[\"rejected\",{\"1\":{\"319\":3}}],[\"red\",{\"1\":{\"305\":4,\"343\":1}}],[\"redirect\",{\"1\":{\"171\":1}}],[\"redisconfig\",{\"1\":{\"445\":1}}],[\"redistemplate\",{\"1\":{\"444\":2}}],[\"redis支持将数据持久化到磁盘\",{\"1\":{\"199\":1}}],[\"redis\",{\"0\":{\"198\":1,\"440\":1},\"1\":{\"132\":1,\"198\":1,\"441\":3,\"444\":1,\"446\":2}}],[\"release分支属于临时分支\",{\"1\":{\"284\":1}}],[\"release分支主要用于上线前的各种测试和部署\",{\"1\":{\"284\":1}}],[\"release\",{\"1\":{\"284\":2,\"287\":1,\"289\":15}}],[\"reload\",{\"1\":{\"156\":3,\"165\":1}}],[\"recipient\",{\"1\":{\"225\":1}}],[\"receivemessage\",{\"1\":{\"134\":3}}],[\"resolve状态的promise\",{\"1\":{\"319\":1}}],[\"resolve\",{\"1\":{\"319\":6}}],[\"resourcce\",{\"1\":{\"280\":1}}],[\"resource\",{\"1\":{\"280\":3,\"451\":2}}],[\"resources\",{\"1\":{\"280\":1}}],[\"restart\",{\"1\":{\"364\":1}}],[\"rest\",{\"1\":{\"301\":2}}],[\"restful\",{\"1\":{\"271\":4}}],[\"result\",{\"1\":{\"224\":4,\"225\":11,\"388\":2,\"391\":2}}],[\"responsibility\",{\"1\":{\"124\":1}}],[\"retentionpolicy\",{\"1\":{\"224\":1}}],[\"retention\",{\"1\":{\"224\":1}}],[\"returning\",{\"1\":{\"225\":1}}],[\"return\",{\"1\":{\"130\":4,\"135\":1,\"224\":5,\"225\":3,\"229\":2,\"260\":1,\"280\":3,\"313\":1,\"314\":1,\"315\":1,\"317\":2,\"319\":3,\"320\":1,\"334\":1,\"335\":1,\"388\":1,\"391\":1,\"485\":1}}],[\"ref等\",{\"1\":{\"332\":1}}],[\"reflect\",{\"0\":{\"312\":1,\"314\":1},\"1\":{\"304\":1,\"314\":1,\"315\":2,\"385\":1,\"388\":4,\"391\":1}}],[\"reflection\",{\"1\":{\"227\":1}}],[\"ref\",{\"0\":{\"348\":1},\"1\":{\"219\":1,\"332\":2,\"344\":2,\"347\":9,\"348\":5,\"349\":2,\"351\":2,\"364\":3}}],[\"referer\",{\"1\":{\"172\":1}}],[\"referers\",{\"1\":{\"172\":1}}],[\"rev\",{\"1\":{\"219\":1}}],[\"rewrite\",{\"0\":{\"171\":1},\"1\":{\"171\":1}}],[\"remote\",{\"1\":{\"156\":1,\"198\":1,\"384\":1}}],[\"removeedge\",{\"1\":{\"548\":1}}],[\"remove\",{\"1\":{\"134\":1}}],[\"repeatable\",{\"1\":{\"241\":2}}],[\"repository\",{\"1\":{\"143\":1,\"183\":1}}],[\"replaceall\",{\"1\":{\"130\":1}}],[\"request请求进行审核\",{\"1\":{\"289\":1}}],[\"request\",{\"1\":{\"289\":4}}],[\"requestcontextholder\",{\"1\":{\"224\":1}}],[\"requesturi\",{\"1\":{\"224\":3}}],[\"requestparam\",{\"1\":{\"130\":20}}],[\"requiredargsconstructor\",{\"1\":{\"130\":2}}],[\"rear\",{\"1\":{\"554\":1}}],[\"reavtive\",{\"1\":{\"349\":1}}],[\"reading\",{\"1\":{\"237\":1}}],[\"read\",{\"1\":{\"236\":2,\"237\":2}}],[\"readme\",{\"1\":{\"107\":1}}],[\"reactive\",{\"0\":{\"349\":1},\"1\":{\"347\":1,\"349\":1}}],[\"react\",{\"1\":{\"148\":1}}],[\"real\",{\"1\":{\"130\":1,\"200\":1}}],[\"registered\",{\"1\":{\"130\":1,\"294\":1}}],[\"register\",{\"1\":{\"130\":3}}],[\"证件号多次注销账号已被加入黑名单\",{\"1\":{\"130\":1}}],[\"59\",{\"1\":{\"483\":3}}],[\"50000\",{\"1\":{\"364\":2}}],[\"5\",{\"1\":{\"130\":1,\"301\":2,\"310\":7,\"329\":2,\"376\":1}}],[\"=o\",{\"1\":{\"458\":1,\"459\":1}}],[\"=>\",{\"1\":{\"307\":4,\"311\":2,\"316\":2,\"342\":2}}],[\"===\",{\"1\":{\"302\":1,\"305\":2,\"340\":3}}],[\"==\",{\"1\":{\"229\":2,\"237\":1,\"405\":1,\"485\":1,\"556\":1}}],[\"=\",{\"1\":{\"130\":5,\"134\":5,\"135\":3,\"202\":2,\"224\":22,\"225\":3,\"229\":6,\"237\":3,\"252\":1,\"253\":1,\"260\":1,\"280\":5,\"298\":3,\"300\":25,\"301\":25,\"302\":2,\"304\":10,\"305\":10,\"307\":3,\"308\":7,\"309\":8,\"310\":2,\"311\":11,\"313\":5,\"314\":1,\"315\":4,\"316\":4,\"317\":11,\"318\":2,\"319\":1,\"320\":1,\"332\":1,\"335\":1,\"336\":1,\"338\":1,\"339\":1,\"340\":1,\"341\":2,\"342\":2,\"343\":1,\"344\":1,\"345\":1,\"388\":5,\"391\":3,\"396\":3,\"397\":1,\"399\":2,\"400\":2,\"401\":2,\"402\":2,\"403\":2,\"404\":2,\"405\":4,\"483\":6,\"485\":6,\"498\":3,\"500\":1,\"502\":3,\"511\":2,\"519\":3,\"571\":1,\"573\":1,\"585\":1,\"593\":1}}],[\"n>0\",{\"1\":{\"590\":1}}],[\"n0=n2\",{\"1\":{\"590\":1}}],[\"n个不同元素进栈\",{\"1\":{\"568\":1}}],[\"n2\",{\"1\":{\"489\":1}}],[\"n+1\",{\"1\":{\"463\":1,\"464\":1,\"568\":1}}],[\"n^2\",{\"1\":{\"458\":1}}],[\"npe\",{\"1\":{\"407\":2}}],[\"npm\",{\"1\":{\"148\":6,\"332\":1}}],[\"nice\",{\"1\":{\"362\":1}}],[\"nfo\",{\"1\":{\"280\":1}}],[\"neighbors\",{\"1\":{\"548\":1}}],[\"net\",{\"1\":{\"391\":3}}],[\"nextneightbor\",{\"1\":{\"548\":1}}],[\"next\",{\"1\":{\"320\":5,\"463\":1,\"511\":2,\"519\":3}}],[\"never\",{\"0\":{\"257\":1},\"1\":{\"257\":1}}],[\"newproxyinstance\",{\"1\":{\"387\":1,\"388\":2}}],[\"newresource\",{\"1\":{\"280\":6}}],[\"new\",{\"1\":{\"130\":12,\"134\":4,\"135\":1,\"202\":2,\"224\":3,\"229\":1,\"245\":2,\"259\":1,\"280\":3,\"307\":1,\"308\":1,\"309\":6,\"310\":1,\"311\":10,\"313\":1,\"315\":1,\"317\":4,\"319\":1,\"388\":2,\"391\":2,\"404\":1}}],[\"nan\",{\"1\":{\"307\":3}}],[\"nacos\",{\"0\":{\"424\":1},\"1\":{\"213\":1,\"428\":7}}],[\"name=＄\",{\"1\":{\"236\":1}}],[\"name=\",{\"1\":{\"214\":1,\"217\":9,\"219\":2,\"220\":2}}],[\"name\",{\"1\":{\"130\":4,\"134\":5,\"160\":1,\"161\":1,\"236\":3,\"237\":1,\"260\":1,\"280\":2,\"294\":1,\"313\":2,\"314\":3,\"315\":3,\"318\":1,\"324\":3,\"334\":2,\"335\":3,\"336\":2,\"338\":1,\"339\":1,\"344\":3,\"364\":1}}],[\"num2\",{\"1\":{\"481\":5,\"482\":1,\"483\":2,\"484\":2,\"485\":4}}],[\"num1\",{\"1\":{\"481\":5,\"482\":1,\"483\":2,\"484\":2,\"485\":4}}],[\"num\",{\"1\":{\"481\":3,\"482\":2,\"483\":2,\"485\":2}}],[\"number\",{\"1\":{\"302\":1,\"307\":2}}],[\"nu\",{\"1\":{\"194\":1}}],[\"nullpointerexception\",{\"0\":{\"399\":1},\"1\":{\"395\":1}}],[\"null\",{\"0\":{\"402\":1},\"1\":{\"190\":1,\"224\":3,\"229\":1,\"280\":1,\"302\":1,\"395\":1,\"396\":2,\"400\":1,\"401\":1,\"404\":1,\"405\":5,\"511\":1,\"519\":2,\"523\":1}}],[\"n\",{\"0\":{\"255\":1,\"256\":1},\"1\":{\"191\":1,\"255\":1,\"458\":10,\"459\":3,\"463\":1,\"471\":1,\"498\":5,\"500\":2,\"501\":4,\"502\":2,\"505\":1,\"580\":1,\"581\":1,\"585\":5,\"587\":1,\"589\":1,\"590\":1,\"600\":2}}],[\"nss\",{\"1\":{\"156\":1}}],[\"ng\",{\"1\":{\"225\":3}}],[\"nginx在启动的时候会采用多进程的方式\",{\"1\":{\"158\":1}}],[\"nginx七大核心应用场景\",{\"1\":{\"154\":1}}],[\"nginx\",{\"0\":{\"154\":1,\"156\":1},\"1\":{\"155\":9,\"156\":35,\"157\":1,\"160\":1,\"162\":6,\"170\":2,\"172\":1,\"173\":2}}],[\"ngrok\",{\"1\":{\"111\":1}}],[\"nosql\",{\"1\":{\"441\":1}}],[\"none\",{\"1\":{\"341\":1}}],[\"nonu\",{\"1\":{\"194\":1}}],[\"normal模式下\",{\"1\":{\"194\":2}}],[\"nohup\",{\"1\":{\"190\":3}}],[\"now\",{\"1\":{\"187\":2,\"224\":3}}],[\"node\",{\"1\":{\"148\":3,\"332\":1,\"364\":3}}],[\"not\",{\"1\":{\"237\":1,\"307\":2,\"340\":1,\"397\":2}}],[\"notifysubscribers\",{\"1\":{\"134\":3}}],[\"notnull\",{\"1\":{\"130\":7}}],[\"首先观察结点k\",{\"1\":{\"586\":1}}],[\"首先访问起始顶点v\",{\"1\":{\"550\":1}}],[\"首先检查其插入路径上的结点是否因为此次操作而导致了不平衡\",{\"1\":{\"473\":1}}],[\"首先会停止偏向锁的线程\",{\"1\":{\"373\":1}}],[\"首先会在全局搜索被登记的\",{\"1\":{\"305\":1}}],[\"首先diff算法有三种比较\",{\"1\":{\"346\":1}}],[\"首先创建\",{\"1\":{\"289\":1}}],[\"首先定义打印信息\",{\"1\":{\"224\":1}}],[\"首先定于用户注册责任链的分类\",{\"1\":{\"130\":1}}],[\"首先我们严格意义上的队列应该严格遵循先进先出的规则\",{\"1\":{\"560\":1}}],[\"首先我们看到想要让和最小就必须让\",{\"1\":{\"484\":1}}],[\"首先我们需要知道大o表示法\",{\"1\":{\"458\":1}}],[\"首先我们需要使用\",{\"1\":{\"164\":1}}],[\"首先我们先准备好要测试的方法类\",{\"1\":{\"250\":1}}],[\"首先我们先看一下返回的价格梯度对象的样子\",{\"1\":{\"229\":1}}],[\"首先我们先模拟一个\",{\"1\":{\"225\":1}}],[\"首先我们要先知道几个常见的起停\",{\"1\":{\"156\":1}}],[\"首先你得需要一台\",{\"1\":{\"155\":1}}],[\"首先你需要选择一个喜欢的包管理器\",{\"1\":{\"148\":1}}],[\"首先说说前端最开始的接触的包管理器的问题\",{\"1\":{\"148\":1}}],[\"首先\",{\"1\":{\"134\":1,\"135\":1,\"209\":1,\"388\":1}}],[\"首次的图片加载将会变得缓慢\",{\"1\":{\"110\":1}}],[\"velue\",{\"1\":{\"548\":1}}],[\"ver\",{\"1\":{\"282\":1}}],[\"verifynomoreinteractions\",{\"0\":{\"258\":1},\"1\":{\"258\":1}}],[\"verify\",{\"0\":{\"254\":1,\"255\":1,\"256\":1,\"257\":1},\"1\":{\"254\":1,\"255\":1,\"256\":1,\"257\":1}}],[\"verigying\",{\"1\":{\"241\":1}}],[\"version>\",{\"1\":{\"391\":1}}],[\"version=\",{\"1\":{\"217\":1}}],[\"version\",{\"1\":{\"98\":1,\"219\":1,\"364\":1}}],[\"v\",{\"0\":{\"338\":1,\"339\":1,\"340\":1,\"341\":1,\"342\":1,\"343\":1,\"344\":1,\"345\":1},\"1\":{\"338\":1,\"339\":1,\"340\":9,\"341\":3,\"342\":2,\"344\":1,\"345\":1,\"528\":1,\"548\":1}}],[\"vant\",{\"1\":{\"361\":1}}],[\"var\",{\"1\":{\"298\":1,\"307\":3,\"308\":4,\"309\":8,\"310\":1,\"311\":11,\"316\":4,\"318\":1,\"364\":5}}],[\"variable\",{\"1\":{\"237\":2}}],[\"variable=$\",{\"1\":{\"237\":1}}],[\"variables\",{\"1\":{\"237\":1}}],[\"valid\",{\"1\":{\"172\":1}}],[\"value++\",{\"1\":{\"332\":1}}],[\"value2\",{\"1\":{\"309\":2}}],[\"value1\",{\"1\":{\"309\":2}}],[\"value=$\",{\"1\":{\"237\":2}}],[\"value=\",{\"1\":{\"214\":1,\"217\":5,\"219\":4,\"237\":1}}],[\"value\",{\"0\":{\"253\":1},\"1\":{\"143\":1,\"214\":1,\"225\":1,\"237\":6,\"280\":2,\"302\":2,\"304\":7,\"308\":6,\"313\":2,\"315\":3,\"319\":11,\"320\":4,\"324\":1,\"347\":3,\"348\":1,\"351\":1,\"399\":1,\"400\":3,\"401\":3,\"402\":1,\"403\":1,\"404\":2,\"405\":6,\"548\":1}}],[\"values\",{\"1\":{\"130\":1,\"308\":1}}],[\"volatile\",{\"0\":{\"371\":1},\"1\":{\"370\":1,\"371\":4,\"377\":1}}],[\"volumes\",{\"1\":{\"364\":1}}],[\"vo\",{\"1\":{\"225\":7,\"229\":3,\"242\":1}}],[\"void\",{\"1\":{\"130\":6,\"134\":10,\"135\":2,\"202\":1,\"224\":1,\"225\":2,\"244\":1,\"388\":9,\"391\":2,\"394\":6}}],[\"viewdesign\",{\"1\":{\"361\":1}}],[\"vim\",{\"0\":{\"194\":1}}],[\"vite\",{\"1\":{\"148\":1}}],[\"vue2\",{\"1\":{\"331\":3,\"333\":2,\"347\":1}}],[\"vue3\",{\"0\":{\"330\":1,\"331\":1},\"1\":{\"331\":3,\"333\":4}}],[\"vuex\",{\"0\":{\"329\":1},\"1\":{\"329\":4}}],[\"vue\",{\"0\":{\"331\":1},\"1\":{\"148\":4,\"324\":1,\"331\":1,\"332\":5,\"340\":1,\"341\":1,\"344\":1,\"346\":2,\"347\":4,\"353\":1}}],[\"责任链标识未定义\",{\"1\":{\"130\":1}}],[\"责任链组件执行\",{\"1\":{\"130\":1}}],[\"责任链组件标识\",{\"1\":{\"130\":2}}],[\"责任链执行入参\",{\"1\":{\"130\":1}}],[\"责任链模式在\",{\"1\":{\"128\":1}}],[\"责任链模式\",{\"0\":{\"123\":1},\"1\":{\"124\":1}}],[\"抽象数据类型\",{\"1\":{\"492\":1}}],[\"抽象责任链上下文\",{\"1\":{\"130\":1}}],[\"抽象业务责任链\",{\"1\":{\"130\":1}}],[\"抽象处理者\",{\"1\":{\"130\":1}}],[\"处理数据并生成结果\",{\"1\":{\"409\":1}}],[\"处理器可以改变语句对机器指令的执行顺序\",{\"1\":{\"380\":1}}],[\"处理器能保证从系统内存中读取和写入一个字节是原子的\",{\"1\":{\"376\":1}}],[\"处理所有\",{\"1\":{\"229\":1}}],[\"处理价格发生异常\",{\"1\":{\"229\":2}}],[\"处理抽象对象的字段数据\",{\"0\":{\"229\":1}}],[\"处理方法当然是我们责任链每个环节的的具体实现\",{\"1\":{\"130\":1}}],[\"处理者可以决定是否处理请求\",{\"1\":{\"125\":1}}],[\"处理者\",{\"1\":{\"125\":1}}],[\"维护起来十分困难\",{\"1\":{\"130\":1}}],[\"用邻接矩阵存储图\",{\"1\":{\"544\":1}}],[\"用一个二维数组存储图中边的信息\",{\"1\":{\"544\":1}}],[\"用命令行学习\",{\"1\":{\"444\":1}}],[\"用了也是白用\",{\"1\":{\"405\":1}}],[\"用以描述这个值\",{\"0\":{\"403\":1}}],[\"用本地代理对象来替代远程的服务对象\",{\"1\":{\"271\":1}}],[\"用\",{\"1\":{\"266\":1,\"324\":1}}],[\"用例建议要求\",{\"0\":{\"244\":1}}],[\"用例执行结果必须能根据代码变化而反映出变化\",{\"1\":{\"243\":1}}],[\"用例需要保持结果准确性校验\",{\"1\":{\"243\":1}}],[\"用例强制要求\",{\"0\":{\"243\":1}}],[\"用作数据库\",{\"1\":{\"198\":1}}],[\"用来创建自定义渲染函数\",{\"1\":{\"331\":1}}],[\"用来检测该字符串参数作为名称的\",{\"1\":{\"305\":1}}],[\"用来保存镜像\",{\"1\":{\"183\":1}}],[\"用来入门非常不错\",{\"1\":{\"94\":1}}],[\"用空格隔开区分\",{\"1\":{\"161\":1}}],[\"用于查找的数据集合称为查找表\",{\"1\":{\"462\":1}}],[\"用于允许用户授权第三方应用程序访问其在另一个应用程序\",{\"1\":{\"451\":1}}],[\"用于验证\",{\"1\":{\"294\":1}}],[\"用于存档和回滚\",{\"1\":{\"284\":1}}],[\"用于描述\",{\"1\":{\"269\":1}}],[\"用于描述事件的发生和上下文\",{\"1\":{\"135\":1}}],[\"用于代替真实对象的行为\",{\"1\":{\"252\":1}}],[\"用于解决横切关注点的模块化问题\",{\"1\":{\"222\":1}}],[\"用于实时统计和分析\",{\"1\":{\"200\":1}}],[\"用于精确记录项目的依赖关系和版本号\",{\"1\":{\"148\":1}}],[\"用于接收和处理事件\",{\"1\":{\"135\":1}}],[\"用户就会很容易受到跨站请求伪造\",{\"1\":{\"448\":1}}],[\"用户对应用程序的要求变得越来越高\",{\"1\":{\"420\":1}}],[\"用户和权限配置\",{\"1\":{\"364\":1}}],[\"用户可以通过\",{\"1\":{\"271\":1}}],[\"用户只需要通过\",{\"1\":{\"271\":1}}],[\"用户行为数据等\",{\"1\":{\"231\":1}}],[\"用户访问\",{\"1\":{\"162\":1}}],[\"用户注册检查证件号是否多次注销\",{\"1\":{\"130\":1}}],[\"用户注册用户名唯一检验\",{\"1\":{\"130\":1}}],[\"用户注册参数必填检验\",{\"1\":{\"130\":1}}],[\"用户注册的场景下\",{\"1\":{\"130\":1}}],[\"用户责任链处理者\",{\"1\":{\"130\":1}}],[\"用户黑名单校验等步骤\",{\"1\":{\"130\":1}}],[\"用户是否已注册\",{\"1\":{\"130\":1}}],[\"用责任链实现请求内容校验\",{\"0\":{\"130\":1}}],[\"业务流程就是在工作日时将所需要的产品价格从交易所获取并转发给报价平台\",{\"1\":{\"205\":1}}],[\"业务梳理\",{\"0\":{\"205\":1}}],[\"业务专家\",{\"1\":{\"141\":1}}],[\"业务逻辑异常等\",{\"1\":{\"128\":1}}],[\"业内流传着\",{\"1\":{\"96\":1}}],[\"业内的人嘴上说着计算机跌落神坛可是却在疯狂内卷\",{\"1\":{\"95\":1}}],[\"撤销等\",{\"1\":{\"128\":1}}],[\"粘贴\",{\"1\":{\"128\":1}}],[\"e都是k的祖先\",{\"1\":{\"586\":1}}],[\"edge\",{\"1\":{\"548\":2}}],[\"eureka\",{\"1\":{\"428\":1,\"430\":1}}],[\"eureka等\",{\"1\":{\"428\":1}}],[\"err\",{\"1\":{\"319\":3}}],[\"error\",{\"1\":{\"128\":1,\"229\":2,\"237\":4}}],[\"es5\",{\"1\":{\"305\":1}}],[\"es6+\",{\"0\":{\"326\":1}}],[\"es6\",{\"1\":{\"297\":1,\"317\":1,\"318\":1,\"320\":1}}],[\"ecmascript\",{\"0\":{\"295\":1},\"1\":{\"297\":1}}],[\"eclipse\",{\"1\":{\"277\":1}}],[\"echo\",{\"1\":{\"236\":2,\"237\":8}}],[\"easy\",{\"1\":{\"246\":2}}],[\"each\",{\"1\":{\"130\":2}}],[\"eq\",{\"1\":{\"237\":1}}],[\"equals\",{\"1\":{\"229\":2}}],[\"element\",{\"1\":{\"323\":2,\"324\":4,\"346\":3,\"361\":1}}],[\"elementtype\",{\"1\":{\"224\":2}}],[\"else>\",{\"1\":{\"340\":1}}],[\"else\",{\"1\":{\"130\":6,\"224\":2,\"237\":2,\"280\":1,\"340\":6,\"397\":1,\"405\":1,\"485\":1}}],[\"empty\",{\"1\":{\"396\":2,\"397\":3,\"506\":1}}],[\"emits\",{\"1\":{\"331\":1}}],[\"embed\",{\"1\":{\"202\":1}}],[\"email\",{\"1\":{\"188\":1,\"225\":3}}],[\"e\",{\"1\":{\"192\":1,\"229\":4,\"234\":2,\"236\":1,\"300\":1,\"345\":2,\"528\":2,\"593\":2}}],[\"enqueue\",{\"1\":{\"555\":1}}],[\"enhancer\",{\"1\":{\"391\":7}}],[\"enhancer类提供了一种方便的方式来生成代理类的子类\",{\"1\":{\"391\":1}}],[\"endpoints\",{\"1\":{\"437\":1}}],[\"endpoit\",{\"1\":{\"271\":1}}],[\"endswith\",{\"1\":{\"280\":2}}],[\"encodedresource\",{\"1\":{\"280\":1}}],[\"encoding=\",{\"1\":{\"217\":1}}],[\"environment\",{\"1\":{\"237\":1}}],[\"env\",{\"1\":{\"237\":1,\"364\":1}}],[\"engines\",{\"1\":{\"197\":1}}],[\"english\",{\"0\":{\"8\":1,\"72\":1}}],[\"enableadminserver注解\",{\"1\":{\"434\":1}}],[\"enable\",{\"1\":{\"156\":1}}],[\"entrance\",{\"1\":{\"153\":1}}],[\"entity\",{\"1\":{\"143\":1,\"242\":1}}],[\"eventpublisher\",{\"1\":{\"135\":2}}],[\"event\",{\"1\":{\"135\":8,\"139\":1,\"143\":1,\"209\":3}}],[\"excel\",{\"1\":{\"409\":1}}],[\"exception\",{\"0\":{\"259\":1},\"1\":{\"130\":1,\"181\":1,\"202\":1,\"224\":1,\"229\":1}}],[\"exam2\",{\"1\":{\"317\":1}}],[\"exam1\",{\"1\":{\"317\":1}}],[\"exam\",{\"1\":{\"314\":2,\"315\":2}}],[\"example\",{\"1\":{\"188\":1,\"217\":1,\"225\":4,\"317\":7}}],[\"exposure\",{\"1\":{\"437\":1}}],[\"exportname\",{\"1\":{\"318\":3}}],[\"export\",{\"1\":{\"237\":4,\"318\":5,\"334\":1,\"335\":1}}],[\"exp\",{\"1\":{\"294\":2}}],[\"exists\",{\"1\":{\"280\":1}}],[\"exec\",{\"1\":{\"364\":1}}],[\"exec>\",{\"1\":{\"219\":1}}],[\"execution\",{\"1\":{\"225\":1}}],[\"executable=\",{\"1\":{\"219\":1}}],[\"executetime\",{\"1\":{\"224\":1}}],[\"execute\",{\"1\":{\"207\":1}}],[\"execquit=\",{\"1\":{\"156\":1}}],[\"execstop=\",{\"1\":{\"156\":1}}],[\"execstart=\",{\"1\":{\"156\":1}}],[\"execstartpre=\",{\"1\":{\"156\":1}}],[\"execreload=\",{\"1\":{\"156\":1}}],[\"extends\",{\"1\":{\"130\":3,\"135\":1,\"280\":1,\"317\":2}}],[\"窗口等\",{\"1\":{\"128\":1}}],[\"例如网站用户或移动应用程序用户\",{\"1\":{\"451\":1}}],[\"例如用户名和密码\",{\"1\":{\"451\":2}}],[\"例如会话状态的同步和跨服务的会话管理\",{\"1\":{\"448\":1}}],[\"例如权限验证\",{\"1\":{\"384\":1}}],[\"例如日志记录\",{\"1\":{\"384\":1}}],[\"例如参数匹配\",{\"1\":{\"264\":1}}],[\"例如执行回调函数或返回动态计算的结果\",{\"1\":{\"260\":1}}],[\"例如数据库\",{\"1\":{\"145\":1}}],[\"例如订单创建\",{\"1\":{\"143\":1}}],[\"例如查询\",{\"1\":{\"143\":2}}],[\"例如更新相关的数据表\",{\"1\":{\"136\":1}}],[\"例如服务器负载监测\",{\"1\":{\"136\":1}}],[\"例如使用接口和回调机制来实现观察者模式\",{\"1\":{\"133\":1}}],[\"例如\",{\"1\":{\"128\":5,\"136\":1,\"142\":2,\"294\":2,\"409\":1}}],[\"场景\",{\"0\":{\"128\":1},\"1\":{\"200\":6,\"245\":1}}],[\"发版\",{\"1\":{\"297\":1}}],[\"发行方\",{\"1\":{\"294\":1}}],[\"发行人\",{\"1\":{\"294\":1}}],[\"发行于2007年\",{\"1\":{\"96\":1}}],[\"发现\",{\"1\":{\"268\":1}}],[\"发现项目从环境变量中读取的\",{\"1\":{\"214\":1}}],[\"发送隐式的\",{\"1\":{\"409\":1}}],[\"发送显式的数据\",{\"1\":{\"409\":1}}],[\"发送的隐式的\",{\"1\":{\"409\":1}}],[\"发送的显式的数据\",{\"1\":{\"409\":1}}],[\"发送的请求内容和结果内容都采用\",{\"1\":{\"270\":1}}],[\"发送\",{\"1\":{\"266\":1}}],[\"发送通知等\",{\"1\":{\"136\":1}}],[\"发送者不需要知道接收者的具体信息\",{\"1\":{\"126\":1}}],[\"发布\",{\"1\":{\"136\":1}}],[\"发布了一个自定义事件\",{\"1\":{\"135\":1}}],[\"发布者接口\",{\"1\":{\"134\":1}}],[\"发布者\",{\"1\":{\"132\":1,\"136\":1}}],[\"客户端使用访问令牌向受保护资源服务器发起请求\",{\"1\":{\"451\":1}}],[\"客户端向资源所有者请求授权\",{\"1\":{\"451\":1}}],[\"客户端是请求访问受保护资源的第三方应用程序\",{\"1\":{\"451\":1}}],[\"客户端服务详情\",{\"1\":{\"437\":1}}],[\"客户端服务注册\",{\"1\":{\"437\":1}}],[\"客户端程序的表单\",{\"1\":{\"409\":1}}],[\"客户端的请求和\",{\"1\":{\"409\":1}}],[\"客户端\",{\"0\":{\"435\":1},\"1\":{\"125\":1,\"451\":1}}],[\"否则一些性质则无法满足\",{\"1\":{\"592\":1}}],[\"否则为叶子结点\",{\"1\":{\"589\":1}}],[\"否则为不正确\",{\"1\":{\"562\":1}}],[\"否则称为无序树\",{\"1\":{\"586\":1}}],[\"否则称为非连通图\",{\"1\":{\"533\":1}}],[\"否则不合法\",{\"1\":{\"562\":1}}],[\"否则不能访问到所有顶点\",{\"1\":{\"552\":1}}],[\"否则插入到右子树\",{\"1\":{\"469\":1}}],[\"否则\",{\"1\":{\"469\":1}}],[\"否则在右子树寻找\",{\"1\":{\"468\":1}}],[\"否则返回一个空的\",{\"0\":{\"403\":1}}],[\"否则返回空\",{\"0\":{\"402\":1}}],[\"否则返回指定的默认值\",{\"0\":{\"400\":1}}],[\"否则调用指定的\",{\"0\":{\"401\":1}}],[\"否则抛出指定的异常\",{\"0\":{\"404\":1}}],[\"否则抛出\",{\"0\":{\"399\":1}}],[\"否则说明有竞争发生\",{\"1\":{\"374\":1}}],[\"否则会破坏响应式对象\",{\"1\":{\"349\":1}}],[\"否则就会报错\",{\"1\":{\"317\":1}}],[\"否则将请求传递给链中的下一个处理者\",{\"1\":{\"125\":1}}],[\"否定\",{\"0\":{\"41\":1}}],[\"通知\",{\"1\":{\"222\":1}}],[\"通知它们事件的发生\",{\"1\":{\"135\":1}}],[\"通信的\",{\"1\":{\"204\":1}}],[\"通配符匹配\",{\"1\":{\"161\":1}}],[\"通过后缀表达式表示计算过程为\",{\"1\":{\"563\":1}}],[\"通过时间换取空间或者用空间换取时间\",{\"1\":{\"459\":1}}],[\"通过与\",{\"1\":{\"430\":1}}],[\"通过定时轮询访问数据库来感知配置的变化\",{\"1\":{\"426\":1}}],[\"通过定义一个切面\",{\"1\":{\"222\":1}}],[\"通过拆分应用程序为一系列松耦合的服务来实现更高的灵活性和可伸缩性\",{\"1\":{\"420\":1}}],[\"通过动态代理\",{\"1\":{\"392\":3}}],[\"通过enhancer类创建了一个代理类\",{\"1\":{\"390\":1}}],[\"通过代理对象调用方法\",{\"1\":{\"388\":1}}],[\"通过代理对象在本地调用方法\",{\"1\":{\"384\":1}}],[\"通过在spring\",{\"1\":{\"430\":1}}],[\"通过在代理对象中添加日志记录逻辑\",{\"1\":{\"384\":1}}],[\"通过在代理对象中添加缓存逻辑\",{\"1\":{\"384\":1}}],[\"通过在目标方法执行前后插入额外的逻辑\",{\"1\":{\"384\":1}}],[\"通过写\",{\"1\":{\"378\":1}}],[\"通过锁和循环cas来实现原子操作\",{\"1\":{\"376\":1}}],[\"通过开发创建测试和版本的流水线后\",{\"1\":{\"362\":1}}],[\"通过脚本控制各个环境的配置打包并上传到介质库\",{\"1\":{\"362\":1}}],[\"通过每次打包后上传到\",{\"1\":{\"362\":1}}],[\"通过对象的代理对象进行操作\",{\"1\":{\"313\":1}}],[\"通过调用\",{\"1\":{\"271\":1}}],[\"通过uddi\",{\"1\":{\"268\":1}}],[\"通过mock能力控制代码路径\",{\"1\":{\"246\":1}}],[\"通过构造尽可能覆盖所有的单数范围的不同入参对其进行调用\",{\"1\":{\"245\":1}}],[\"通过反射获取所有字段\",{\"1\":{\"229\":1}}],[\"通过获取类的字段对象\",{\"1\":{\"227\":1}}],[\"通过获取类的方法对象\",{\"1\":{\"227\":1}}],[\"通过获取类的构造函数对象\",{\"1\":{\"227\":1}}],[\"通过这些概念我们也可以看出来\",{\"1\":{\"222\":1}}],[\"通过这种方式\",{\"1\":{\"139\":1}}],[\"通过新建线程来监听容器每个后台价格队列的变化\",{\"1\":{\"209\":1}}],[\"通过唯一的身份\",{\"1\":{\"208\":1}}],[\"通过实现\",{\"1\":{\"207\":1}}],[\"通过实现应用事件监听器接口\",{\"1\":{\"135\":1}}],[\"通过接口会一直受到价格\",{\"1\":{\"205\":1}}],[\"通过geo命令集快速实现地理位置的存储和半径查询\",{\"1\":{\"200\":1}}],[\"通过有序集合\",{\"1\":{\"200\":1}}],[\"通过内存操作实现快速数据处理和统计\",{\"1\":{\"200\":1}}],[\"通过redis\",{\"1\":{\"199\":2}}],[\"通过全局视角实时查看应用\",{\"1\":{\"181\":1}}],[\"通过正则表达式来匹配域名\",{\"1\":{\"161\":1}}],[\"通过并行下载和缓存等机制加快了依赖项的安装速度\",{\"1\":{\"148\":1}}],[\"通过事件风暴\",{\"1\":{\"142\":1}}],[\"通过团队讨论\",{\"1\":{\"142\":1}}],[\"通过快速生成和调整事件模型\",{\"1\":{\"141\":1}}],[\"通过\",{\"1\":{\"135\":1,\"227\":3,\"270\":1,\"317\":1}}],[\"通过应用事件发布器\",{\"1\":{\"135\":1}}],[\"通过自己实现业务逻辑对一些步骤进行审批和限制\",{\"1\":{\"103\":1}}],[\"通常用的搜索引擎\",{\"1\":{\"573\":1}}],[\"通常采用单链表实现并规定所有的操作都在表头进行\",{\"1\":{\"572\":1}}],[\"通常较稳定的线性表选择顺序存储\",{\"1\":{\"526\":1}}],[\"通常矩阵在计算机语言中借助数组进行存储\",{\"1\":{\"497\":1}}],[\"通常我们在用算法解决实际问题的过程中\",{\"1\":{\"459\":1}}],[\"通常含有标签名\",{\"1\":{\"346\":1}}],[\"通常是用户\",{\"1\":{\"294\":1}}],[\"通常总是\",{\"1\":{\"294\":1}}],[\"通常会使用四层架构来组织代码\",{\"1\":{\"145\":1}}],[\"通常包括开发人员\",{\"1\":{\"141\":1}}],[\"通常包含一个处理请求的方法\",{\"1\":{\"125\":1}}],[\"通常由spring框架提供的applicationlistener接口实现\",{\"1\":{\"135\":1}}],[\"通常由spring框架提供的applicationeventpublisher接口实现\",{\"1\":{\"135\":1}}],[\"角色或系统\",{\"1\":{\"142\":1}}],[\"角色\",{\"0\":{\"125\":1}}],[\"每条边都可以标上具有某种含义的数值\",{\"1\":{\"537\":1}}],[\"每种排序算法都有各自的优缺点\",{\"1\":{\"487\":1}}],[\"每日一题\",{\"0\":{\"479\":1}}],[\"每当在二叉排序树中插入或删除一个结点的时候\",{\"1\":{\"473\":1}}],[\"每当我们抽取一张未知的新牌后就会按照自己的规则放到指定的位置去\",{\"1\":{\"455\":1}}],[\"每块有s个记录\",{\"1\":{\"465\":1}}],[\"每执行一个方法就会往栈中插入一个栈帧\",{\"1\":{\"380\":1}}],[\"每一部分都是\",{\"1\":{\"294\":1}}],[\"每一个用户请求都会产生一个新的线程\",{\"1\":{\"412\":1}}],[\"每一个\",{\"1\":{\"165\":1}}],[\"每晚八点如果是今日获取价格文件的状态为\",{\"1\":{\"234\":1}}],[\"每份考生的材料同一时间只能被一位审核人审核\",{\"1\":{\"233\":1}}],[\"每次扫描叶子结点的时候总会将其父母结点重新计算一次\",{\"1\":{\"594\":1}}],[\"每次构造都选择两棵树作为新结点的孩子\",{\"1\":{\"581\":1}}],[\"每次把\",{\"1\":{\"566\":1}}],[\"每次服务器接收到一个\",{\"1\":{\"413\":1}}],[\"每次上线后都需要添加tag\",{\"1\":{\"284\":1}}],[\"每次上包只包含代码\",{\"1\":{\"213\":1}}],[\"每次开发完毕合并的时候需要使用\",{\"1\":{\"282\":1}}],[\"每次更新这个部分的文章我都头疼\",{\"1\":{\"4\":1}}],[\"每个结点左指针指向它的第一个孩子\",{\"1\":{\"602\":1}}],[\"每个结点都可以能有两个子树\",{\"1\":{\"594\":1}}],[\"每个结点或是红色或是黑色\",{\"1\":{\"476\":1}}],[\"每个初始结点最终都成了叶结点\",{\"1\":{\"581\":1}}],[\"每个链表结点可以存放一个字符\",{\"1\":{\"577\":1}}],[\"每个元素都是单个结构\",{\"1\":{\"505\":1}}],[\"每个元素有且仅有一个直接后继\",{\"1\":{\"505\":1}}],[\"每个元素有且仅有一个直接前驱\",{\"1\":{\"505\":1}}],[\"每个元素在\",{\"1\":{\"498\":1}}],[\"每个元素占用最小的存储空间\",{\"1\":{\"495\":1}}],[\"每个数据元素称为一个数组元素\",{\"1\":{\"498\":1}}],[\"每个微服务在启动时向注册中心注册自己的信息\",{\"1\":{\"427\":1}}],[\"每个服务都有自己的数据库和业务逻辑\",{\"1\":{\"420\":1}}],[\"每个处理器会嗅探总线上传播的数据检查自己的数据是否时最新的\",{\"1\":{\"371\":1}}],[\"每个处理者只负责处理特定类型的请求\",{\"1\":{\"126\":1}}],[\"每个环境的包因为配置的不同都要同时准备三份甚至更多\",{\"1\":{\"362\":1}}],[\"每个\",{\"1\":{\"353\":1}}],[\"每个人有每个人的思路\",{\"1\":{\"291\":1}}],[\"每个都需要发起到\",{\"1\":{\"289\":1}}],[\"每个审核人在审核时会从库里捞十个未审核的考生材料出来进行审核\",{\"1\":{\"233\":1}}],[\"每个模型都应该只有一个职责\",{\"1\":{\"144\":1}}],[\"每个事件用一张便利贴表示\",{\"1\":{\"142\":1}}],[\"每个步骤可以选择处理数据或将其传递到下一个处理器\",{\"1\":{\"128\":1}}],[\"每个步骤都是一个处理器\",{\"1\":{\"128\":1}}],[\"每个级别的审批者都有机会处理该请求\",{\"1\":{\"128\":1}}],[\"每个过滤器可以选择处理请求或将其传递到链中的下一个过滤器\",{\"1\":{\"128\":1}}],[\"每个过滤器都是一个处理器\",{\"1\":{\"128\":1}}],[\"每个对象在收到请求后\",{\"1\":{\"124\":1}}],[\"每个对象都持有对下一个对象的引用\",{\"1\":{\"124\":1}}],[\"owner\",{\"1\":{\"451\":1}}],[\"ownkeys\",{\"1\":{\"304\":1}}],[\"oauth\",{\"1\":{\"451\":7}}],[\"oauth2\",{\"0\":{\"449\":1,\"451\":1},\"1\":{\"453\":1}}],[\"open\",{\"0\":{\"605\":1}}],[\"openfeign\",{\"1\":{\"382\":2}}],[\"operations\",{\"1\":{\"380\":1}}],[\"opts=\",{\"1\":{\"364\":1}}],[\"optionl\",{\"1\":{\"407\":1}}],[\"option\",{\"0\":{\"334\":1},\"1\":{\"333\":1}}],[\"optional3\",{\"1\":{\"396\":1}}],[\"optional2\",{\"1\":{\"396\":1}}],[\"optional1\",{\"1\":{\"396\":1}}],[\"optional<string>\",{\"1\":{\"396\":3,\"397\":1,\"399\":1,\"400\":1,\"401\":1,\"402\":2,\"403\":2,\"404\":1,\"405\":2}}],[\"optional\",{\"0\":{\"395\":1,\"396\":1,\"397\":1,\"398\":1,\"399\":1,\"400\":1,\"401\":1,\"402\":2,\"403\":2,\"404\":1},\"1\":{\"224\":1,\"395\":5,\"396\":10,\"397\":6,\"399\":3,\"400\":3,\"401\":3,\"402\":3,\"403\":3,\"404\":3,\"405\":7,\"407\":1}}],[\"opt\",{\"1\":{\"152\":1}}],[\"o\",{\"1\":{\"310\":2,\"458\":7,\"471\":2,\"489\":2}}],[\"onserverprefetch\",{\"1\":{\"353\":1}}],[\"ondeactivated\",{\"1\":{\"353\":1}}],[\"onactivated\",{\"1\":{\"353\":1}}],[\"onapplicationevent\",{\"1\":{\"135\":1}}],[\"onrendertriggered\",{\"1\":{\"353\":2}}],[\"onrendertracked\",{\"1\":{\"353\":1}}],[\"onbeforeunmount\",{\"1\":{\"353\":1}}],[\"onbeforeupdate\",{\"1\":{\"353\":1}}],[\"onbeforemount\",{\"1\":{\"353\":1}}],[\"onunmounted\",{\"1\":{\"353\":1}}],[\"onupdated\",{\"1\":{\"353\":1}}],[\"onmounted\",{\"1\":{\"353\":1}}],[\"once\",{\"1\":{\"342\":1}}],[\"on也提供很多方法\",{\"1\":{\"342\":1}}],[\"on\",{\"0\":{\"342\":1},\"1\":{\"342\":1}}],[\"onerrorcaptured\",{\"1\":{\"353\":1}}],[\"one\",{\"1\":{\"308\":4,\"309\":1,\"320\":2,\"345\":1}}],[\"only\",{\"1\":{\"199\":1}}],[\"outarray\",{\"1\":{\"309\":1}}],[\"output\",{\"1\":{\"224\":2}}],[\"outputparams\",{\"1\":{\"224\":1}}],[\"outputproperty=\",{\"1\":{\"219\":1}}],[\"out输出\",{\"1\":{\"190\":1}}],[\"out\",{\"1\":{\"134\":1,\"135\":1,\"388\":6,\"391\":3,\"394\":5,\"397\":2,\"405\":3,\"554\":1,\"568\":1}}],[\"obj\",{\"1\":{\"229\":2,\"301\":6,\"307\":2,\"391\":2}}],[\"object\",{\"1\":{\"135\":1,\"143\":1,\"224\":8,\"225\":2,\"229\":3,\"302\":1,\"304\":3,\"314\":1,\"349\":1,\"388\":6,\"391\":4}}],[\"objects\",{\"1\":{\"130\":7}}],[\"observerpatternexample\",{\"1\":{\"134\":1}}],[\"observer\",{\"1\":{\"134\":1}}],[\"observable\",{\"1\":{\"134\":1}}],[\"override\",{\"1\":{\"130\":9,\"134\":4,\"135\":1,\"280\":1,\"388\":5,\"391\":1}}],[\"orelsethrow\",{\"0\":{\"404\":1},\"1\":{\"404\":1}}],[\"orelseget\",{\"0\":{\"401\":1},\"1\":{\"401\":1}}],[\"orelse\",{\"0\":{\"400\":1},\"1\":{\"224\":1,\"400\":1}}],[\"order\",{\"1\":{\"130\":1}}],[\"ordered\",{\"1\":{\"130\":5}}],[\"org\",{\"1\":{\"99\":1,\"130\":1,\"135\":5,\"214\":1}}],[\"ofnullable\",{\"1\":{\"224\":1,\"396\":2,\"400\":1,\"401\":1,\"404\":1,\"405\":2}}],[\"of\",{\"1\":{\"124\":1,\"308\":3,\"396\":2,\"397\":1,\"399\":1,\"402\":1,\"403\":1,\"407\":1}}],[\"如g和e\",{\"1\":{\"586\":1}}],[\"如结点b的度为2\",{\"1\":{\"586\":1}}],[\"如k和l都有共同的双亲e\",{\"1\":{\"586\":1}}],[\"如上图所示\",{\"1\":{\"568\":1}}],[\"如此重复直到找到为止\",{\"1\":{\"464\":1}}],[\"如授权码授权流程\",{\"1\":{\"451\":1}}],[\"如社交媒体\",{\"1\":{\"451\":1}}],[\"如远程\",{\"1\":{\"430\":1}}],[\"如基于角色的访问控制\",{\"1\":{\"430\":1}}],[\"如应用程序上线\",{\"1\":{\"430\":1}}],[\"如重启应用程序或发送警报通知\",{\"1\":{\"430\":1}}],[\"如内存使用\",{\"1\":{\"430\":1}}],[\"如docker\",{\"1\":{\"420\":1}}],[\"如何学习微服务\",{\"0\":{\"421\":1}}],[\"如何实现动态代理\",{\"0\":{\"385\":1}}],[\"如何判断一个程序员的等级呢\",{\"1\":{\"122\":1}}],[\"如有必要\",{\"1\":{\"364\":1}}],[\"如rsa\",{\"1\":{\"294\":1}}],[\"如hmac\",{\"1\":{\"294\":1}}],[\"如四月十三日\",{\"1\":{\"287\":1}}],[\"如今在甲方要求全面推行\",{\"1\":{\"282\":1}}],[\"如spring\",{\"1\":{\"250\":1}}],[\"如junit\",{\"1\":{\"250\":1}}],[\"如网络\",{\"1\":{\"241\":1}}],[\"如网站的访问量统计\",{\"1\":{\"200\":1}}],[\"如数据库连接\",{\"1\":{\"231\":1}}],[\"如数据库异常\",{\"1\":{\"128\":1}}],[\"如类的名称\",{\"1\":{\"227\":1}}],[\"如方法调用或异常处理器\",{\"1\":{\"222\":1}}],[\"如定位服务\",{\"1\":{\"200\":1}}],[\"如游戏排名\",{\"1\":{\"200\":1}}],[\"如登录状态\",{\"1\":{\"200\":1}}],[\"如用户信息\",{\"1\":{\"200\":1}}],[\"如字符串\",{\"1\":{\"198\":1}}],[\"如复制\",{\"1\":{\"128\":1}}],[\"如去重\",{\"1\":{\"128\":1}}],[\"如安全过滤器\",{\"1\":{\"128\":1}}],[\"如\",{\"1\":{\"128\":1,\"133\":1,\"231\":1,\"242\":1,\"284\":3,\"287\":1,\"294\":2,\"324\":1,\"349\":1,\"362\":1,\"439\":1}}],[\"如按钮本身\",{\"1\":{\"128\":1}}],[\"如果追求更高的时间复杂度\",{\"1\":{\"594\":1}}],[\"如果最坏的情况高度为h且之后h个结点的单枝树却要占据\",{\"1\":{\"592\":1}}],[\"如果一个图中的顶点集和边集是另一个图的子集\",{\"1\":{\"532\":1}}],[\"如果一件事会让你觉得机械无聊浪费时间的话\",{\"1\":{\"362\":1}}],[\"如果头指针为null\",{\"1\":{\"511\":1}}],[\"如果到另一端也没有找到关键字则查找失败\",{\"1\":{\"463\":1}}],[\"如果被截获\",{\"1\":{\"448\":1}}],[\"如果自行组建确实会出现版本兼容一致性的问题\",{\"1\":{\"421\":1}}],[\"如果值存在\",{\"0\":{\"403\":1}}],[\"如果返回值不为\",{\"0\":{\"402\":1}}],[\"如果该\",{\"0\":{\"399\":1,\"400\":1,\"401\":1,\"404\":1}}],[\"如果指定值为\",{\"1\":{\"396\":1}}],[\"如果缓存中存在结果\",{\"1\":{\"384\":1,\"392\":1}}],[\"如果线程a和线程b之间通讯需要线程a先将本地内存a中更新的变量刷新到主内存去\",{\"1\":{\"379\":1}}],[\"如果其他线程也尝试获取同一个对象的轻量级锁\",{\"1\":{\"374\":1}}],[\"如果活着则拥有偏向锁的栈会被执行\",{\"1\":{\"373\":1}}],[\"如果没有看到也可以执行\",{\"1\":{\"364\":1}}],[\"如果没有处理器处理该请求\",{\"1\":{\"128\":1}}],[\"如果没有处理者能够处理请求\",{\"1\":{\"127\":1}}],[\"如果成功则立即执行\",{\"1\":{\"364\":1}}],[\"如果要在jenkins中执行docker命令\",{\"1\":{\"364\":1}}],[\"如果相同则更新属性\",{\"1\":{\"346\":1}}],[\"如果节点是标签则进行\",{\"1\":{\"346\":1}}],[\"如果节点是组件则进行\",{\"1\":{\"346\":1}}],[\"如果重新改造得不偿失\",{\"1\":{\"331\":1}}],[\"如果使用的是对称算法\",{\"1\":{\"294\":1}}],[\"如果使用过程中因为网络问题导致包下载不能成功\",{\"1\":{\"148\":1}}],[\"如果不能成对消除则不合法\",{\"1\":{\"562\":1}}],[\"如果不存在数据依赖\",{\"1\":{\"380\":1}}],[\"如果不活动则将对象头设置成无锁状态\",{\"1\":{\"373\":1}}],[\"如果不知道准确的上线日期\",{\"1\":{\"287\":1}}],[\"如果不清楚一条数据如何从界面到服务器再到数据库的完整流程\",{\"1\":{\"147\":1}}],[\"如果目前处于维护阶段的项目\",{\"1\":{\"287\":1}}],[\"如果release分支测试出现问题\",{\"1\":{\"287\":1}}],[\"如果develop还有功能尚未完成\",{\"1\":{\"287\":1}}],[\"如果svn舍弃的代码中有未来准备上线的代码\",{\"1\":{\"286\":1}}],[\"如果在深层的改变则不会检测\",{\"1\":{\"348\":1}}],[\"如果在\",{\"1\":{\"240\":1}}],[\"如果用切点表达式力度太大或者不够灵活的时候\",{\"1\":{\"225\":1}}],[\"如果有一对顶点v和w\",{\"1\":{\"534\":1}}],[\"如果有一个类既实现了\",{\"1\":{\"394\":1}}],[\"如果有兴趣可以点击下面链接去深入了解\",{\"1\":{\"448\":1}}],[\"如果有值\",{\"0\":{\"402\":1}}],[\"如果有重复的键值\",{\"1\":{\"309\":1}}],[\"如果有即返回该\",{\"1\":{\"305\":1}}],[\"如果有明确的上线日期\",{\"1\":{\"287\":1}}],[\"如果有其他更复杂的操作\",{\"1\":{\"225\":1}}],[\"如果有些项目并不规范\",{\"1\":{\"214\":1}}],[\"如果我们把二叉树中的空指针结点存放指向其前驱或者后继的指针\",{\"1\":{\"596\":1}}],[\"如果我们知道了\",{\"1\":{\"502\":1}}],[\"如果我们需要找到\",{\"1\":{\"455\":1}}],[\"如果我们删除了一个左子节点\",{\"1\":{\"346\":1}}],[\"如果我们不声明\",{\"1\":{\"346\":1}}],[\"如果我们只是操作返回值\",{\"1\":{\"225\":1}}],[\"如果我们想通过不同的域名访问不同的资源\",{\"1\":{\"160\":1}}],[\"如果每个\",{\"1\":{\"225\":1}}],[\"如果每天的工作都只是在接需求实现需求\",{\"1\":{\"137\":1}}],[\"如果\",{\"1\":{\"214\":1,\"374\":1,\"463\":1}}],[\"如果发生断联则触发重连策略\",{\"1\":{\"205\":1}}],[\"如果说搞测试\",{\"1\":{\"179\":1}}],[\"如果想要更加深入的了解\",{\"1\":{\"453\":1}}],[\"如果想详细了解\",{\"1\":{\"325\":1}}],[\"如果想了解更多细节可以点击下面卡片跳转官网查看\",{\"1\":{\"439\":1}}],[\"如果想了解更多可以查阅下面的\",{\"1\":{\"264\":1}}],[\"如果想了解更详细的面板介绍可以点击下面链接跳转官网查看\",{\"1\":{\"150\":1}}],[\"如果想实现是否执行的步骤需要将逻辑抽离到一个\",{\"1\":{\"220\":1}}],[\"如果想理解反向代理我们必须结合正向代理一起理解\",{\"1\":{\"162\":1}}],[\"如果配置了多个\",{\"1\":{\"161\":1}}],[\"如果配置的是完整的域名\",{\"1\":{\"161\":1}}],[\"如果执行期间有其他缺少的依赖补充后重新执行脚本即可\",{\"1\":{\"155\":1}}],[\"如果需要\",{\"1\":{\"155\":1}}],[\"如果出现上面界面\",{\"1\":{\"153\":1}}],[\"如果以上都已经略有小成的哈\",{\"1\":{\"148\":1}}],[\"如果只是仅仅获取结果可以使用函数式的写法\",{\"1\":{\"351\":1}}],[\"如果只是将步骤分为不同的方法或者都写在同一个方法里难免会造成一个大类\",{\"1\":{\"130\":1}}],[\"如果只是想快速了解或复习语法的话\",{\"1\":{\"94\":1}}],[\"如果责任链过长或者处理者之间的调用关系复杂\",{\"1\":{\"127\":1}}],[\"如果可以处理则处理请求\",{\"1\":{\"125\":1}}],[\"如果你会它们\",{\"1\":{\"419\":1}}],[\"如果你不知道它们\",{\"1\":{\"419\":1}}],[\"如果你是本科毕业就开始找工作\",{\"1\":{\"419\":1}}],[\"如果你是想更深入和系统的了解设计模式的种种\",{\"1\":{\"122\":1}}],[\"如果你需要侦听一个嵌套数据结构中的几个属性\",{\"1\":{\"352\":1}}],[\"如果你需要用到\",{\"1\":{\"351\":1}}],[\"如果你手速够快或者一些特殊情况看不到了\",{\"1\":{\"153\":1}}],[\"如果你还没有用的惯的翻译软件可以尝试一下\",{\"1\":{\"113\":1}}],[\"如果你觉得文字和图片还不够直观\",{\"1\":{\"99\":1}}],[\"如果是1则代表是前驱或者后继\",{\"1\":{\"596\":1}}],[\"如果是一般的二叉树为了让数组下标反应二叉树中结点之间的逻辑关系\",{\"1\":{\"592\":1}}],[\"如果是一般线性表的顺序查找即通过\",{\"1\":{\"463\":1}}],[\"如果是操作数则压入栈中\",{\"1\":{\"563\":1}}],[\"如果是输入受限\",{\"1\":{\"560\":1}}],[\"如果是出度则需遍历整个表\",{\"1\":{\"545\":1}}],[\"如果是有向图则就是以顶点i为尾的弧\",{\"1\":{\"545\":1}}],[\"如果是有序的单枝树\",{\"1\":{\"471\":1}}],[\"如果是有序表的顺序查找\",{\"1\":{\"463\":1}}],[\"如果是则更改为新的值\",{\"1\":{\"380\":1}}],[\"如果是不同直接替换旧标签\",{\"1\":{\"346\":1}}],[\"如果是\",{\"1\":{\"340\":1,\"341\":1}}],[\"如果是非对称算法\",{\"1\":{\"294\":1}}],[\"如果是十人左右的小组并且项目处于有大量需求需要开发的起步阶段\",{\"1\":{\"287\":1}}],[\"如果是极少的人开发\",{\"1\":{\"287\":1}}],[\"如果是从svn迁移项目\",{\"1\":{\"286\":1}}],[\"如果是紧急问题\",{\"1\":{\"284\":1}}],[\"如果是协作开发\",{\"1\":{\"282\":1}}],[\"如果是其他错误状态则需要第二天人工排查问题\",{\"1\":{\"234\":1}}],[\"如果是获取不到文件则标记为\",{\"1\":{\"234\":1}}],[\"如果是放在微服务中来讲\",{\"1\":{\"213\":1}}],[\"如果是接收的价格并没有在我们的需求范围内则直接抛弃\",{\"1\":{\"208\":1}}],[\"如果是正向代理\",{\"1\":{\"162\":1}}],[\"如果是比较复杂的大型业务模式就显得非常不专业了\",{\"1\":{\"103\":1}}],[\"如果是平时使用和找工作大部分公司在用的话\",{\"1\":{\"94\":1}}],[\"如果放在十年前有人给你推荐这本书\",{\"1\":{\"96\":1}}],[\"基于这个条件\",{\"1\":{\"560\":1}}],[\"基于这五种特性\",{\"1\":{\"456\":1}}],[\"基于这种特性\",{\"1\":{\"448\":1}}],[\"基于类实现动态代理\",{\"0\":{\"389\":1}}],[\"基于类的动态代理\",{\"1\":{\"385\":1}}],[\"基于第三方库如cglib\",{\"1\":{\"385\":1}}],[\"基于接口实现动态代理\",{\"0\":{\"386\":1}}],[\"基于接口生成代理类\",{\"1\":{\"385\":1}}],[\"基于接口的动态代理适用于那些已经实现了接口的目标对象\",{\"1\":{\"385\":1}}],[\"基于接口的动态代理要求目标对象实现接口\",{\"1\":{\"385\":1}}],[\"基于接口的动态代理\",{\"1\":{\"385\":1}}],[\"基于接口的动态代理和基于类的动态代理\",{\"1\":{\"385\":1}}],[\"基于java的java\",{\"1\":{\"385\":1}}],[\"基于java开发\",{\"1\":{\"246\":1}}],[\"基于master分支新建develop分支\",{\"1\":{\"286\":1}}],[\"基于master分支创建\",{\"1\":{\"284\":1}}],[\"基于xml标准通用\",{\"1\":{\"270\":1}}],[\"基于\",{\"1\":{\"246\":1}}],[\"基本性质\",{\"0\":{\"587\":1}}],[\"基本术语\",{\"0\":{\"586\":1}}],[\"基本操作\",{\"0\":{\"506\":1,\"569\":1}}],[\"基本定义\",{\"0\":{\"505\":1}}],[\"基本思想是\",{\"1\":{\"550\":1}}],[\"基本思想是首先将给定\",{\"1\":{\"464\":1}}],[\"基本思想\",{\"1\":{\"473\":1}}],[\"基本语法是\",{\"1\":{\"316\":1}}],[\"基本\",{\"1\":{\"300\":1,\"301\":1}}],[\"基本原理就是先模拟对象\",{\"1\":{\"246\":1}}],[\"基本搜索\",{\"1\":{\"227\":1}}],[\"基本都是打\",{\"1\":{\"213\":1}}],[\"基本概念和术语\",{\"0\":{\"492\":1}}],[\"基本概念\",{\"0\":{\"183\":1,\"554\":1,\"568\":1}}],[\"基金会开发和维护\",{\"1\":{\"121\":1}}],[\"基础操作\",{\"0\":{\"555\":1}}],[\"基础不牢\",{\"1\":{\"419\":1}}],[\"基础配置\",{\"0\":{\"365\":1}}],[\"基础的人无缝衔接\",{\"1\":{\"333\":1}}],[\"基础设施层负责提供基础的服务和设施\",{\"1\":{\"145\":1}}],[\"基础设施层\",{\"1\":{\"145\":1}}],[\"基础\",{\"0\":{\"452\":1},\"1\":{\"96\":1}}],[\"由遍历序列构造二叉树\",{\"0\":{\"595\":1}}],[\"由哈夫曼树构成哈夫曼编码\",{\"1\":{\"582\":1}}],[\"由哈夫曼树得到哈夫曼编码是很自然的过程\",{\"1\":{\"582\":1}}],[\"由一个或者多个空格组成的串为空格串\",{\"1\":{\"573\":1}}],[\"由此可见栈的操作特性可以明显囊括为先进后出\",{\"1\":{\"568\":1}}],[\"由多个用户需要\",{\"1\":{\"566\":1}}],[\"由三部分组成\",{\"1\":{\"294\":1}}],[\"由于二叉树是一种非线性结构\",{\"1\":{\"594\":1}}],[\"由于顺序存储的空间利用率较低\",{\"1\":{\"593\":1}}],[\"由于串每个元素只有一个字符\",{\"1\":{\"577\":1}}],[\"由于每条边依附于两个顶点\",{\"1\":{\"547\":1}}],[\"由于第一个数据结点的位置被存放在头结点的指针域中\",{\"1\":{\"511\":1}}],[\"由于处理器使用缓存和读写缓冲区\",{\"1\":{\"380\":1}}],[\"由于我们项目的日志五花八门\",{\"1\":{\"225\":1}}],[\"由于最近上线总是出现问题\",{\"1\":{\"213\":1}}],[\"由于只是转发价格\",{\"1\":{\"204\":1}}],[\"由于使用cloudflare的网络\",{\"1\":{\"108\":1}}],[\"由\",{\"1\":{\"121\":1,\"324\":1,\"379\":1}}],[\"大致的技术栈\",{\"1\":{\"421\":1}}],[\"大家嘴上说着大学里的课程已经完全和社会脱节\",{\"1\":{\"419\":1}}],[\"大家的代码应该不会出现风格差别很大的情况\",{\"1\":{\"291\":1}}],[\"大家如果都在develop分支开发测试\",{\"1\":{\"287\":1}}],[\"大家可根据火热程度做学习计划参考\",{\"1\":{\"197\":1}}],[\"大大简化了虚拟对象的使用\",{\"1\":{\"246\":1}}],[\"大大提升线上问题排查效率\",{\"1\":{\"181\":1}}],[\"大概清楚这是个搭配起来简化开发的组合\",{\"1\":{\"227\":1}}],[\"大部分\",{\"1\":{\"214\":1}}],[\"大部分的容器和框架都是依赖\",{\"1\":{\"377\":1}}],[\"大部分的开发者还是因为容器的灵活和便捷性\",{\"1\":{\"179\":1}}],[\"大部分的学习资料都来自互联网\",{\"1\":{\"96\":1}}],[\"大多数编程语言都支持观察者模式的实现\",{\"1\":{\"133\":1}}],[\"大数据学习路线\",{\"0\":{\"119\":1}}],[\"大数据\",{\"0\":{\"118\":1}}],[\"代替\",{\"1\":{\"470\":1}}],[\"代替的内容和flag标记\",{\"1\":{\"171\":1}}],[\"代客利率掉期\",{\"1\":{\"368\":1}}],[\"代理类是通过继承目标类来生成的\",{\"1\":{\"385\":1}}],[\"代理类是在运行时动态生成的\",{\"1\":{\"385\":1}}],[\"代理对象通过继承目标类并重写方法来实现对被代理方法的调用\",{\"1\":{\"385\":1}}],[\"代理对象通过实现invocationhandler接口来处理被代理方法的调用\",{\"1\":{\"385\":1}}],[\"代理对象可以在调用目标方法之前进行权限检查\",{\"1\":{\"384\":1}}],[\"代理对象可以在真正需要对象时才创建\",{\"1\":{\"384\":1}}],[\"代理\",{\"1\":{\"162\":1}}],[\"代表着在应用程序中发生的特定事件\",{\"1\":{\"135\":1}}],[\"代码仓库和流水线的出现\",{\"1\":{\"362\":1}}],[\"代码的可读性也不高\",{\"1\":{\"324\":1}}],[\"代码的维护性很差\",{\"1\":{\"324\":1}}],[\"代码的健壮性\",{\"1\":{\"122\":1}}],[\"代码洁癖\",{\"1\":{\"291\":1}}],[\"代码量也较少\",{\"1\":{\"287\":1}}],[\"代码放到客户端项目中\",{\"1\":{\"278\":1}}],[\"代码进行测试\",{\"1\":{\"250\":1}}],[\"代码如下\",{\"1\":{\"229\":1}}],[\"代码实现\",{\"0\":{\"210\":1}}],[\"代码规范与技巧\",{\"0\":{\"116\":1}}],[\"代词\",{\"0\":{\"44\":1}}],[\"配合实现微服务的配置管理\",{\"1\":{\"428\":1}}],[\"配合插图演示版本变化的状态\",{\"1\":{\"99\":1}}],[\"配置类实现\",{\"0\":{\"445\":1}}],[\"配置存储和分发\",{\"1\":{\"428\":1}}],[\"配置中心和注册中心通常会一起使用\",{\"1\":{\"428\":1}}],[\"配置中心兼往往顾了集中管理\",{\"1\":{\"426\":1}}],[\"配置中心专门针对这个业务场景\",{\"1\":{\"426\":1}}],[\"配置中心\",{\"0\":{\"426\":1}}],[\"配置转存到环境变量\",{\"0\":{\"213\":1}}],[\"配置一个代理集\",{\"1\":{\"164\":1}}],[\"配置一台代理服务器访问海外的服务器\",{\"1\":{\"162\":1}}],[\"配置项后可以跟多个域名\",{\"1\":{\"161\":1}}],[\"配置文件详解\",{\"0\":{\"159\":1}}],[\"配置目录\",{\"1\":{\"157\":1}}],[\"配置完成后依次执行\",{\"1\":{\"155\":1}}],[\"配置插件少不了\",{\"1\":{\"115\":1}}],[\"意味着你需要按照订阅期限支付费用\",{\"1\":{\"115\":1}}],[\"狗头保命\",{\"1\":{\"115\":1}}],[\"做开发吧\",{\"1\":{\"115\":1}}],[\"吃饭的家伙\",{\"1\":{\"115\":1}}],[\"必须在排序过程中根据要求不断的在内外存之间移动的排序\",{\"1\":{\"487\":1}}],[\"必须在访问前对类进行定义\",{\"1\":{\"317\":1}}],[\"必须先把被删除结点从存储二叉树排序树的链表上摘下\",{\"1\":{\"470\":1}}],[\"必须有对应的\",{\"1\":{\"372\":1}}],[\"必须同级出现\",{\"1\":{\"317\":1}}],[\"必须掌握一些基础的ai知识\",{\"1\":{\"0\":1}}],[\"必先利其器\",{\"1\":{\"114\":1}}],[\"免费版也足够用了\",{\"1\":{\"113\":1}}],[\"系统为每一层的返回点\",{\"1\":{\"564\":1}}],[\"系统调用权限更直接\",{\"1\":{\"364\":1}}],[\"系统监控\",{\"1\":{\"231\":1}}],[\"系统状态监测和通知\",{\"1\":{\"136\":1}}],[\"系统信息\",{\"1\":{\"112\":1}}],[\"系列\",{\"0\":{\"95\":1},\"1\":{\"101\":1}}],[\"有孩子为\",{\"1\":{\"589\":1}}],[\"有n个结点的二叉树\",{\"1\":{\"589\":1}}],[\"有序树和无序树\",{\"1\":{\"586\":1}}],[\"有相同双亲结点称为兄弟\",{\"1\":{\"586\":1}}],[\"有且只有一个特定的称为根的结点\",{\"1\":{\"585\":1}}],[\"有向树\",{\"0\":{\"542\":1}}],[\"有向图中的极大强连通子图称为有向图的强连通分量\",{\"1\":{\"534\":1}}],[\"有向图和无向图\",{\"0\":{\"529\":1}}],[\"有向完全图是任意两个顶点之间都存在方向相反的两条弧的有向图\",{\"1\":{\"531\":1}}],[\"有时对循环单链表不设置头指针而设置尾指针\",{\"1\":{\"523\":1}}],[\"有时候会因为网络问题导致图片上传问题\",{\"1\":{\"108\":1}}],[\"有时候可能会遇到重构或者探索新技术的任务\",{\"1\":{\"4\":1}}],[\"有按行优先和按列优先两种映射方法\",{\"1\":{\"498\":1}}],[\"有点事检索速度快\",{\"1\":{\"495\":1}}],[\"有穷性\",{\"1\":{\"456\":1}}],[\"有两种常见的实现方式用于实现动态代理\",{\"1\":{\"385\":1}}],[\"有两个区分于普通函数的部分\",{\"1\":{\"320\":1}}],[\"有动态代理就有静态代理\",{\"1\":{\"384\":1}}],[\"有函数式写法和选项式写法两种\",{\"1\":{\"351\":1}}],[\"有什么作用呢\",{\"1\":{\"346\":1}}],[\"有什么办法可以监控到\",{\"1\":{\"181\":1}}],[\"有着不同寻常的关系\",{\"1\":{\"327\":1}}],[\"有很多样式来增加其规范性和可读性\",{\"1\":{\"323\":1}}],[\"有效载荷\",{\"1\":{\"294\":1}}],[\"有如下几种\",{\"1\":{\"246\":1}}],[\"有些命令可能在\",{\"1\":{\"235\":1}}],[\"有些配置是调用\",{\"1\":{\"214\":1}}],[\"有一说一\",{\"1\":{\"232\":1}}],[\"有\",{\"1\":{\"222\":1}}],[\"有基于硬件资源增加的单机垂直扩容\",{\"1\":{\"174\":1}}],[\"有了这两个指针的存在\",{\"1\":{\"519\":1}}],[\"有了语言的基础就可以开始框架的学习了\",{\"1\":{\"148\":1}}],[\"有了注册责任链接口后\",{\"1\":{\"130\":1}}],[\"有人说现在全栈并不是什么好的现象\",{\"1\":{\"147\":1}}],[\"有的时候甚至会出现发热或者疯狂占内存的情况\",{\"1\":{\"112\":1}}],[\"还要保证线性结构\",{\"1\":{\"560\":1}}],[\"还需要存放一个指向其后继的指针\",{\"1\":{\"511\":1}}],[\"还建立附加的索引表\",{\"1\":{\"495\":1}}],[\"还有对一些数据进行操作的工作单元和存储一些为实现计算所需的辅助空间\",{\"1\":{\"459\":1}}],[\"还可以利用\",{\"1\":{\"430\":1}}],[\"还支持动态路由\",{\"1\":{\"423\":1}}],[\"还记得上大学的时候学\",{\"1\":{\"419\":1}}],[\"还记得一开始上线的方式\",{\"1\":{\"362\":1}}],[\"还记得当时在第一家公司工作的时候\",{\"1\":{\"291\":1}}],[\"还在手动传包到服务器部署吗\",{\"1\":{\"362\":1}}],[\"还在自己手动打包介质吗\",{\"1\":{\"362\":1}}],[\"还提供了两个方法在我们创建\",{\"1\":{\"305\":1}}],[\"还提供了其他一些高级功能和方法\",{\"1\":{\"264\":1}}],[\"还得适配\",{\"1\":{\"266\":1}}],[\"还单元测试呢\",{\"1\":{\"239\":1}}],[\"还是自己打包扔上去重启服务来使用\",{\"1\":{\"179\":1}}],[\"还是\",{\"1\":{\"148\":2,\"214\":1}}],[\"还是比较消耗算力的\",{\"1\":{\"112\":1}}],[\"还说得过去\",{\"1\":{\"96\":1}}],[\"架构和\",{\"1\":{\"362\":1}}],[\"架构各种复杂的调用关系而难以下手\",{\"1\":{\"139\":1}}],[\"架构设计往往是在项目后期才逐渐完善起来的\",{\"1\":{\"139\":1}}],[\"架构\",{\"0\":{\"324\":1},\"1\":{\"112\":1,\"323\":1}}],[\"无向图邻接矩阵一定是唯一的对称矩阵\",{\"1\":{\"544\":1}}],[\"无向图的全部顶点的度的和等于边数的2倍\",{\"1\":{\"536\":1}}],[\"无向图中极大连通子图称为连通分量\",{\"1\":{\"533\":1}}],[\"无需判断表尾\",{\"1\":{\"523\":1}}],[\"无需在服务器端存储会话信息\",{\"1\":{\"448\":1}}],[\"无需实现任何接口\",{\"1\":{\"391\":1}}],[\"无需进行额外的处理\",{\"1\":{\"374\":1}}],[\"无需传入表达式\",{\"1\":{\"340\":1}}],[\"无状态锁\",{\"1\":{\"372\":1}}],[\"无论链表是否为空\",{\"1\":{\"511\":1}}],[\"无论何时何地\",{\"1\":{\"395\":1}}],[\"无论你通过什么选择器去操作样式\",{\"1\":{\"324\":1}}],[\"无论是顺序和链式存储皆可\",{\"1\":{\"463\":1}}],[\"无论是背面试题还是源码当中它都无处不在\",{\"1\":{\"382\":1}}],[\"无论是原始值或者是对象引用\",{\"1\":{\"310\":1}}],[\"无论是\",{\"1\":{\"214\":1}}],[\"无输出\",{\"1\":{\"304\":1}}],[\"无非是包含了关于用户的\",{\"1\":{\"250\":1}}],[\"无非是放在哪里用是了\",{\"1\":{\"232\":1}}],[\"无非也是商店和官网两个下载途径\",{\"1\":{\"112\":1}}],[\"无限空间\",{\"1\":{\"107\":1}}],[\"时是空串\",{\"1\":{\"573\":1}}],[\"时间复杂度\",{\"0\":{\"458\":1}}],[\"时间久了其实也觉得差不多\",{\"1\":{\"112\":1}}],[\"时被调用\",{\"1\":{\"412\":1}}],[\"时效性低\",{\"1\":{\"368\":1}}],[\"时可以用\",{\"1\":{\"352\":1}}],[\"时使用\",{\"1\":{\"305\":1}}],[\"时发现注解已经被弃用\",{\"1\":{\"272\":1}}],[\"时速度慢的问题\",{\"1\":{\"148\":1}}],[\"时\",{\"1\":{\"112\":1,\"253\":1,\"412\":1,\"502\":1,\"585\":1}}],[\"时态\",{\"0\":{\"17\":1}}],[\"版本里\",{\"1\":{\"372\":1}}],[\"版本中\",{\"1\":{\"280\":1}}],[\"版本中被移除\",{\"1\":{\"134\":1}}],[\"版本和性能服务器也算运维的话\",{\"1\":{\"179\":1}}],[\"版本之后被标记为过时\",{\"1\":{\"134\":1}}],[\"版本信息\",{\"1\":{\"112\":1}}],[\"版本的话需要编译一版再运行\",{\"1\":{\"112\":1}}],[\"版本控制\",{\"0\":{\"98\":1},\"1\":{\"428\":1}}],[\"版\",{\"0\":{\"112\":1}}],[\"日志地址\",{\"1\":{\"236\":1}}],[\"日志打印\",{\"1\":{\"224\":1}}],[\"日志\",{\"0\":{\"439\":1},\"1\":{\"157\":1,\"231\":1}}],[\"日志记录和审计\",{\"1\":{\"136\":1}}],[\"日志记录\",{\"1\":{\"136\":1,\"384\":1,\"392\":1}}],[\"日志记录系统可以使用责任链模式\",{\"1\":{\"128\":1}}],[\"日志记录系统\",{\"1\":{\"128\":1}}],[\"日志过滤器\",{\"1\":{\"128\":1}}],[\"日志请求沿着责任链传递\",{\"1\":{\"128\":1}}],[\"日常工具\",{\"0\":{\"112\":1}}],[\"日后慢慢润色\",{\"1\":{\"3\":1}}],[\"陆陆续续用了一些工具\",{\"1\":{\"111\":1}}],[\"之间\",{\"1\":{\"560\":1}}],[\"之间的关系类似于发布者发布事件\",{\"1\":{\"132\":1}}],[\"之后\",{\"1\":{\"455\":1}}],[\"之后更加贴合当前社会需求\",{\"1\":{\"453\":1}}],[\"之后经过第一轮的升级改造\",{\"1\":{\"362\":1}}],[\"之后也是再递归走子节点的\",{\"1\":{\"346\":1}}],[\"之后再递归走组件内的节点做\",{\"1\":{\"346\":1}}],[\"之后就和第一种情况相同\",{\"1\":{\"289\":1}}],[\"之后就与第一种情况相同\",{\"1\":{\"289\":1}}],[\"之后继续在\",{\"1\":{\"289\":1}}],[\"之后重新提交pull\",{\"1\":{\"289\":1}}],[\"之后master分支和develop分支大部分时间都将保持完全相同的状态\",{\"1\":{\"287\":1}}],[\"之后我们每次请求这个\",{\"1\":{\"164\":1}}],[\"之后的图片加载由于存在缓存\",{\"1\":{\"110\":1}}],[\"之前还是建议有一些\",{\"1\":{\"331\":1}}],[\"之前\",{\"1\":{\"293\":2,\"317\":1}}],[\"之前的\",{\"1\":{\"282\":1}}],[\"之前的前置项目大部分都都是\",{\"1\":{\"202\":1}}],[\"之前必须要学会的知识点\",{\"1\":{\"182\":1}}],[\"之前在服务器很火的运维工具就是宝塔了\",{\"1\":{\"179\":1}}],[\"之前听过的运维面板只有宝塔\",{\"1\":{\"150\":1}}],[\"之前可能觉得要和数据库交互的往往只有后端程序员\",{\"1\":{\"93\":1}}],[\"开头的单词\",{\"1\":{\"455\":1}}],[\"开头的行\",{\"1\":{\"237\":1}}],[\"开放授权\",{\"1\":{\"451\":1}}],[\"开始\",{\"1\":{\"376\":1}}],[\"开始着手实现自动化的线上代客利率掉期交易\",{\"1\":{\"368\":1}}],[\"开始做项目了\",{\"1\":{\"331\":1}}],[\"开始在master分支构建代码\",{\"1\":{\"286\":1}}],[\"开始搭建项目\",{\"1\":{\"286\":1}}],[\"开始时间\",{\"1\":{\"224\":1}}],[\"开始安装\",{\"1\":{\"155\":1}}],[\"开闭原则\",{\"1\":{\"144\":1}}],[\"开发人员只需要关心代码分支的规范和业务功能就可以了\",{\"1\":{\"362\":1}}],[\"开发完成后创建到\",{\"1\":{\"289\":1}}],[\"开发完成后提交到中心仓库并创建从\",{\"1\":{\"289\":1}}],[\"开发完成单独测试完成后\",{\"1\":{\"289\":1}}],[\"开发完毕后合并到release分支等待上线\",{\"1\":{\"287\":1}}],[\"开发测试完成后合并到develop分支\",{\"1\":{\"287\":1}}],[\"开发分支\",{\"1\":{\"284\":1}}],[\"开发规约\",{\"1\":{\"282\":1}}],[\"开发规范\",{\"0\":{\"281\":1,\"291\":1}}],[\"开发了\",{\"1\":{\"282\":1}}],[\"开发是一个需要不断学习的过程\",{\"1\":{\"137\":1}}],[\"开发是一个综合性的过程\",{\"1\":{\"137\":1}}],[\"开发相关知识\",{\"0\":{\"137\":1}}],[\"开发中还用得到\",{\"1\":{\"419\":1}}],[\"开发中\",{\"1\":{\"136\":1}}],[\"开发\",{\"1\":{\"121\":1,\"148\":1}}],[\"开发手册\",{\"1\":{\"117\":1,\"291\":1}}],[\"开发工具的迭代与产品的升级改造\",{\"1\":{\"362\":1}}],[\"开发工具\",{\"0\":{\"114\":1}}],[\"开启图片审查后\",{\"1\":{\"110\":1}}],[\"开源免费\",{\"1\":{\"107\":1}}],[\"mh\",{\"1\":{\"587\":1}}],[\"m>=0\",{\"1\":{\"586\":1}}],[\"md两个文件\",{\"1\":{\"286\":1}}],[\"md文件\",{\"1\":{\"286\":1}}],[\"mcok\",{\"1\":{\"246\":1}}],[\"monitor\",{\"1\":{\"372\":3}}],[\"monitorexit\",{\"1\":{\"372\":2}}],[\"monitorenter\",{\"1\":{\"372\":2}}],[\"modifier\",{\"1\":{\"324\":3}}],[\"model=\",{\"1\":{\"344\":1}}],[\"model\",{\"0\":{\"344\":1},\"1\":{\"143\":3}}],[\"moderatecontent\",{\"1\":{\"110\":1}}],[\"mocktio\",{\"1\":{\"246\":1}}],[\"mockito的官方文档\",{\"1\":{\"264\":1}}],[\"mockito增强版\",{\"1\":{\"246\":1}}],[\"mockito\",{\"0\":{\"248\":1},\"1\":{\"246\":2,\"250\":1,\"252\":1,\"253\":1,\"254\":1,\"255\":2,\"256\":2,\"257\":3,\"258\":1,\"259\":2,\"260\":2,\"264\":1}}],[\"mock\",{\"0\":{\"246\":1,\"247\":1,\"252\":1,\"253\":1,\"254\":1,\"255\":1,\"256\":1,\"257\":1,\"258\":1,\"259\":1,\"260\":1},\"1\":{\"239\":2,\"245\":2,\"246\":4,\"252\":1}}],[\"m\",{\"1\":{\"236\":1,\"455\":2,\"585\":2,\"587\":2}}],[\"multiply\",{\"1\":{\"229\":1}}],[\"multipartfile\",{\"1\":{\"224\":1}}],[\"mull\",{\"1\":{\"229\":1}}],[\"ms\",{\"1\":{\"224\":1}}],[\"memeory\",{\"1\":{\"380\":1}}],[\"memory\",{\"1\":{\"380\":1}}],[\"merged\",{\"1\":{\"309\":1}}],[\"merge合并到\",{\"1\":{\"289\":1}}],[\"methodproxy\",{\"1\":{\"391\":2}}],[\"methodinterceptor\",{\"1\":{\"391\":2}}],[\"methodtype\",{\"1\":{\"224\":3}}],[\"methodsignature\",{\"1\":{\"224\":6}}],[\"method\",{\"0\":{\"253\":1,\"254\":1,\"255\":1,\"256\":1,\"257\":1,\"259\":1,\"260\":1},\"1\":{\"224\":2,\"227\":2,\"229\":3,\"388\":8,\"391\":5,\"414\":1,\"415\":1}}],[\"message\",{\"1\":{\"134\":8,\"135\":9,\"200\":1,\"271\":1}}],[\"mf\",{\"1\":{\"219\":1}}],[\"mvc\",{\"1\":{\"139\":1,\"213\":1,\"214\":1,\"419\":1}}],[\"myinterceptor\",{\"1\":{\"391\":2}}],[\"myclass\",{\"1\":{\"391\":4}}],[\"my\",{\"1\":{\"318\":1,\"338\":1}}],[\"myname\",{\"1\":{\"318\":2}}],[\"myset\",{\"1\":{\"310\":7,\"311\":2}}],[\"mysql必知必会\",{\"1\":{\"94\":2}}],[\"mysql\",{\"0\":{\"94\":1},\"1\":{\"94\":1}}],[\"mymap2\",{\"1\":{\"309\":1}}],[\"mymap1\",{\"1\":{\"309\":2}}],[\"mymap\",{\"1\":{\"307\":6,\"308\":8,\"309\":2}}],[\"myapp\",{\"1\":{\"217\":2}}],[\"myproject\",{\"1\":{\"217\":1}}],[\"myeventlistener\",{\"1\":{\"135\":2}}],[\"myeventpublisher\",{\"1\":{\"135\":2}}],[\"myevent\",{\"1\":{\"135\":3}}],[\"mq\",{\"1\":{\"132\":1,\"204\":3,\"234\":1}}],[\"maxsize\",{\"1\":{\"557\":2,\"575\":1}}],[\"maxsize这个条件来作为队满的条件吗\",{\"1\":{\"556\":1}}],[\"management\",{\"1\":{\"437\":1}}],[\"manifest\",{\"1\":{\"219\":1}}],[\"manifest>\",{\"1\":{\"217\":1,\"219\":1}}],[\"match\",{\"1\":{\"237\":1}}],[\"maven\",{\"1\":{\"217\":1,\"364\":3}}],[\"master分支应该是保护分支\",{\"1\":{\"284\":1}}],[\"master分支上的代码应该和线上代码始终保持一致\",{\"1\":{\"284\":1}}],[\"master分支并不是一个特殊的分支\",{\"1\":{\"284\":1}}],[\"master\",{\"1\":{\"158\":2,\"284\":1,\"289\":4}}],[\"make\",{\"1\":{\"155\":2}}],[\"mapper\",{\"1\":{\"242\":1}}],[\"map\",{\"0\":{\"306\":1,\"307\":1,\"308\":1,\"309\":1,\"402\":2},\"1\":{\"214\":1,\"307\":3,\"308\":2,\"309\":13,\"349\":1,\"395\":1,\"402\":1}}],[\"map<string\",{\"1\":{\"130\":2}}],[\"mapreduce\",{\"1\":{\"121\":1}}],[\"mail\",{\"1\":{\"130\":1}}],[\"main\",{\"1\":{\"122\":1,\"134\":1,\"202\":3,\"217\":3,\"284\":1,\"323\":1,\"388\":2,\"391\":2}}],[\"market\",{\"1\":{\"280\":2}}],[\"mark\",{\"1\":{\"130\":9}}],[\"mac\",{\"0\":{\"112\":1},\"1\":{\"112\":1}}],[\"搭配使用的时候要遵守链式编程的规则\",{\"1\":{\"319\":1}}],[\"搭配\",{\"1\":{\"110\":1,\"239\":1,\"280\":1}}],[\"搭建和配置\",{\"1\":{\"99\":1}}],[\"项目需求\",{\"0\":{\"367\":1}}],[\"项目前言\",{\"0\":{\"366\":1}}],[\"项目架构升级也支持对接统一配置平台后\",{\"1\":{\"362\":1}}],[\"项目创建完成后\",{\"1\":{\"286\":1}}],[\"项目依然苟延残喘\",{\"1\":{\"217\":1}}],[\"项目一切用法都规范的话\",{\"1\":{\"214\":1}}],[\"项目中需要使用多个线程监听价格队列的变化\",{\"1\":{\"207\":1}}],[\"项目\",{\"1\":{\"202\":1}}],[\"项目功能\",{\"0\":{\"109\":1}}],[\"项目介绍\",{\"0\":{\"105\":1}}],[\"图的遍历算法可以用来判断图的连通性\",{\"1\":{\"552\":1}}],[\"图的遍历与连通性\",{\"0\":{\"552\":1}}],[\"图的遍历是指从图中的某一个顶点出发\",{\"1\":{\"549\":1}}],[\"图的遍历\",{\"0\":{\"549\":1}}],[\"图的基本操作\",{\"0\":{\"548\":1}}],[\"图的基本概念\",{\"0\":{\"528\":1}}],[\"图的邻接表不唯一\",{\"1\":{\"545\":1}}],[\"图的邻接表存储方法具有以下特点\",{\"1\":{\"545\":1}}],[\"图的邻接矩阵存储表示法具有以下特点\",{\"1\":{\"544\":1}}],[\"图的存储需要完整\",{\"1\":{\"543\":1}}],[\"图的存储及基本操作\",{\"0\":{\"543\":1}}],[\"图g由顶点集v和边集e组成\",{\"1\":{\"528\":1}}],[\"图\",{\"0\":{\"527\":1}}],[\"图状结构或网状结构\",{\"1\":{\"494\":1}}],[\"图像\",{\"1\":{\"409\":1}}],[\"图片审查\",{\"0\":{\"110\":1}}],[\"图片的加载速度在某些地区可能得不到保证\",{\"1\":{\"108\":1}}],[\"图片大小最大为5mb\",{\"1\":{\"108\":1}}],[\"图解系列还有\",{\"1\":{\"101\":1}}],[\"缺点是依赖散列函数\",{\"1\":{\"495\":1}}],[\"缺点是附加的索引表额外占用存储空间\",{\"1\":{\"495\":1}}],[\"缺点是每个元素因为指针而产生额外的空间\",{\"1\":{\"495\":1}}],[\"缺点是只能使用相邻的一整块存储单元导致产生较多的外部碎片\",{\"1\":{\"495\":1}}],[\"缺点就是如果\",{\"1\":{\"463\":1}}],[\"缺点\",{\"0\":{\"108\":1,\"127\":1},\"1\":{\"375\":1}}],[\"文用一组地址连续的存储单元存储串值的字符序列\",{\"1\":{\"575\":1}}],[\"文本编辑程序\",{\"1\":{\"573\":1}}],[\"文本框内容改变或窗口关闭时\",{\"1\":{\"136\":1}}],[\"文化之中\",{\"1\":{\"362\":1}}],[\"文档进行描述说明服务\",{\"1\":{\"270\":1}}],[\"文件到\",{\"1\":{\"370\":1}}],[\"文件到当前目录\",{\"1\":{\"193\":1}}],[\"文件中\",{\"1\":{\"280\":1}}],[\"文件中的变量值为$value\",{\"1\":{\"237\":1}}],[\"文件的\",{\"1\":{\"277\":1}}],[\"文件等数据\",{\"1\":{\"231\":1}}],[\"文件\",{\"0\":{\"274\":1},\"1\":{\"193\":2}}],[\"文件系统\",{\"1\":{\"183\":2}}],[\"文件后\",{\"1\":{\"160\":1}}],[\"文件几分钟就可以成功\",{\"1\":{\"107\":1}}],[\"文章不会向刚开始一样从\",{\"1\":{\"3\":1}}],[\"只不过指针全都聚集到了数组尾部\",{\"1\":{\"556\":1}}],[\"只允许在表的一端进行插入\",{\"1\":{\"554\":1}}],[\"只允许合并操作\",{\"1\":{\"286\":1}}],[\"只是说插入和删除这个节点的过程复杂度为o\",{\"1\":{\"519\":1}}],[\"只是默认创建后大多数人懒得去改动它\",{\"1\":{\"284\":1}}],[\"只需添加相应的依赖并进行简单的配置即可\",{\"1\":{\"430\":1}}],[\"只需要成对匹配即位正确\",{\"1\":{\"562\":1}}],[\"只需要配置以上三步\",{\"1\":{\"446\":1}}],[\"只需要保证每次提交前拉去代码在本地处理好冲突再push即可\",{\"1\":{\"287\":1}}],[\"只需要我们在\",{\"1\":{\"162\":1}}],[\"只需要将请求发送到链的第一个处理者即可\",{\"1\":{\"126\":1}}],[\"只需要根据\",{\"1\":{\"107\":1}}],[\"只能体现一种父子关系\",{\"1\":{\"596\":1}}],[\"只能添加一些并不存在空结点\",{\"1\":{\"592\":1}}],[\"只能从表头开始顺序存取\",{\"1\":{\"526\":1}}],[\"只能用\",{\"1\":{\"394\":1}}],[\"只能说语言之间相互取其精华\",{\"1\":{\"297\":1}}],[\"只能说现在肯定是基于\",{\"1\":{\"266\":1}}],[\"只能说明你什么都不精通\",{\"1\":{\"147\":1}}],[\"只有一颗左子树或者右子树\",{\"1\":{\"470\":1}}],[\"只有一个作用域\",{\"1\":{\"324\":1}}],[\"只有在经过授权的情况下才能访问\",{\"1\":{\"451\":1}}],[\"只有符合要求的用户才能访问目标方法\",{\"1\":{\"384\":1,\"392\":1}}],[\"只点击一次\",{\"1\":{\"342\":1}}],[\"只要给m颗树独立的树添加一个根结点\",{\"1\":{\"586\":1}}],[\"只要测试对象头中是否是存储着当前线程的偏向锁即可\",{\"1\":{\"373\":1}}],[\"只要处于\",{\"1\":{\"319\":1}}],[\"只要我们能保证代码上线的正常流转\",{\"0\":{\"288\":1}}],[\"只保留tag下与线上环境一致的代码作为新git仓库的开始\",{\"1\":{\"286\":1}}],[\"只会读取\",{\"1\":{\"280\":1}}],[\"只读了个大概就跑去b站\",{\"1\":{\"96\":1}}],[\"优雅\",{\"1\":{\"395\":1}}],[\"优雅停止\",{\"1\":{\"156\":1}}],[\"优雅起停\",{\"0\":{\"156\":1}}],[\"优先级进行排序\",{\"1\":{\"130\":1}}],[\"优点是便于多个栈共享存储空间提高效率\",{\"1\":{\"572\":1}}],[\"优点是检索\",{\"1\":{\"495\":1}}],[\"优点是不会出现碎片\",{\"1\":{\"495\":1}}],[\"优点是实现随机存取\",{\"1\":{\"495\":1}}],[\"优点\",{\"0\":{\"107\":1,\"126\":1},\"1\":{\"375\":1}}],[\"优缺点\",{\"0\":{\"106\":1}}],[\"feign\",{\"1\":{\"382\":1}}],[\"fence\",{\"1\":{\"380\":1}}],[\"feature分支属于临时分支\",{\"1\":{\"284\":1}}],[\"feature\",{\"1\":{\"284\":2,\"287\":1,\"289\":14}}],[\"fulfilled\",{\"1\":{\"319\":3}}],[\"func\",{\"1\":{\"307\":2,\"320\":2}}],[\"function\",{\"1\":{\"108\":1,\"298\":2,\"307\":1,\"308\":1,\"313\":2,\"315\":2,\"316\":3,\"317\":2,\"319\":7,\"320\":2,\"332\":1}}],[\"function免费版每日限制100\",{\"1\":{\"108\":1}}],[\"f2\",{\"1\":{\"237\":2}}],[\"front\",{\"1\":{\"554\":1}}],[\"from\",{\"1\":{\"237\":1,\"309\":2,\"318\":2,\"332\":1,\"344\":1,\"364\":1}}],[\"frame\",{\"1\":{\"380\":1}}],[\"framework\",{\"0\":{\"616\":1},\"1\":{\"133\":1,\"135\":1}}],[\"fragments\",{\"1\":{\"331\":1}}],[\"f1\",{\"1\":{\"236\":1,\"237\":1}}],[\"f\",{\"1\":{\"236\":1,\"237\":1,\"320\":5,\"394\":1,\"458\":2,\"586\":1}}],[\"four\",{\"1\":{\"345\":1}}],[\"font\",{\"1\":{\"339\":1}}],[\"footer\",{\"1\":{\"323\":1}}],[\"foo\",{\"1\":{\"301\":5}}],[\"folder\",{\"1\":{\"236\":2}}],[\"for=\",{\"1\":{\"345\":1}}],[\"format\",{\"1\":{\"130\":1}}],[\"foreach\",{\"1\":{\"130\":2,\"308\":1}}],[\"for\",{\"0\":{\"345\":1},\"1\":{\"122\":1,\"134\":1,\"224\":1,\"229\":1,\"271\":2,\"298\":2,\"304\":1,\"305\":4,\"308\":3,\"439\":1,\"485\":1}}],[\"ftp\",{\"1\":{\"234\":1}}],[\"flatmap\",{\"1\":{\"407\":1}}],[\"flag\",{\"1\":{\"171\":1,\"220\":1}}],[\"flickr\",{\"1\":{\"105\":1}}],[\"fallback\",{\"1\":{\"400\":1,\"401\":1,\"404\":1}}],[\"falseflag\",{\"1\":{\"341\":2}}],[\"false\",{\"1\":{\"302\":1,\"305\":1,\"320\":2,\"340\":1,\"341\":2}}],[\"father\",{\"1\":{\"317\":2}}],[\"fast\",{\"1\":{\"241\":1}}],[\"fair\",{\"0\":{\"169\":1}}],[\"facade\",{\"1\":{\"439\":1}}],[\"facebook\",{\"1\":{\"148\":1}}],[\"factory\",{\"1\":{\"135\":1,\"143\":1,\"214\":1,\"280\":1}}],[\"fs\",{\"1\":{\"156\":1}}],[\"fifo\",{\"1\":{\"554\":1}}],[\"fixqueuefull\",{\"1\":{\"284\":1}}],[\"fitst原则\",{\"1\":{\"241\":1}}],[\"fi\",{\"1\":{\"236\":2,\"237\":4}}],[\"find\",{\"1\":{\"236\":2,\"237\":1}}],[\"finally\",{\"1\":{\"224\":1}}],[\"final\",{\"1\":{\"130\":3,\"246\":1}}],[\"fields\",{\"1\":{\"229\":2}}],[\"field\",{\"1\":{\"227\":2,\"229\":7}}],[\"file=\",{\"1\":{\"219\":1}}],[\"file\",{\"1\":{\"199\":1,\"202\":1,\"224\":1,\"236\":2,\"237\":2}}],[\"filter\",{\"0\":{\"403\":1},\"1\":{\"130\":2,\"229\":1,\"311\":2,\"395\":1,\"403\":1}}],[\"firstneighbor\",{\"1\":{\"548\":1}}],[\"firstname\",{\"1\":{\"225\":3}}],[\"first设计模式\",{\"1\":{\"122\":1}}],[\"first\",{\"0\":{\"101\":1},\"1\":{\"101\":3,\"241\":1,\"309\":2,\"554\":2,\"568\":1}}],[\"i>=1\",{\"1\":{\"587\":1}}],[\"it\",{\"1\":{\"364\":1}}],[\"iterator\",{\"1\":{\"300\":1}}],[\"ioexception\",{\"1\":{\"280\":1}}],[\"ioc\",{\"1\":{\"222\":2}}],[\"ilp\",{\"1\":{\"380\":1}}],[\"illegalaccessexception\",{\"1\":{\"229\":1}}],[\"ilogprintaspect\",{\"1\":{\"224\":4}}],[\"ilogprintdto\",{\"1\":{\"224\":3}}],[\"ilog\",{\"1\":{\"224\":6}}],[\"i++\",{\"1\":{\"224\":1,\"298\":1,\"485\":1}}],[\"i\",{\"1\":{\"224\":10,\"298\":3,\"304\":2,\"485\":5,\"498\":3,\"500\":6,\"501\":7,\"502\":2,\"544\":1,\"586\":1,\"589\":2}}],[\"ignored\",{\"1\":{\"224\":1}}],[\"ibm\",{\"1\":{\"204\":1}}],[\"ip地址和端口\",{\"1\":{\"427\":1}}],[\"ip\",{\"0\":{\"166\":1,\"175\":1},\"1\":{\"153\":1,\"155\":1,\"166\":1,\"173\":2,\"175\":1}}],[\"ispresent\",{\"1\":{\"397\":1,\"405\":1}}],[\"is\",{\"1\":{\"318\":1,\"338\":1,\"339\":1,\"397\":3,\"405\":2}}],[\"iss\",{\"1\":{\"294\":2}}],[\"isolated\",{\"1\":{\"241\":1}}],[\"isempty\",{\"1\":{\"130\":1}}],[\"isnull\",{\"1\":{\"130\":7}}],[\"ide\",{\"0\":{\"277\":1},\"1\":{\"277\":1}}],[\"idea\",{\"0\":{\"115\":1},\"1\":{\"115\":1,\"277\":1,\"291\":1}}],[\"idutil\",{\"1\":{\"225\":2}}],[\"id\",{\"1\":{\"130\":2,\"225\":3,\"253\":1}}],[\"if=\",{\"1\":{\"340\":3}}],[\"if=$\",{\"1\":{\"220\":1}}],[\"if\",{\"0\":{\"340\":1},\"1\":{\"122\":1,\"130\":10,\"220\":2,\"224\":6,\"225\":2,\"229\":2,\"236\":2,\"237\":4,\"280\":2,\"340\":3,\"341\":1,\"397\":1,\"405\":2,\"485\":1}}],[\"immediate\",{\"1\":{\"352\":1}}],[\"implementation\",{\"1\":{\"391\":1}}],[\"implements\",{\"1\":{\"130\":4,\"134\":2,\"135\":1,\"388\":2,\"391\":1}}],[\"import\",{\"1\":{\"130\":1,\"135\":5,\"318\":3,\"332\":1,\"344\":1,\"388\":3,\"391\":4,\"593\":2}}],[\"imgur替代品\",{\"1\":{\"105\":1}}],[\"image\",{\"1\":{\"105\":1,\"183\":1}}],[\"insertvertex\",{\"1\":{\"548\":1}}],[\"instanceof\",{\"1\":{\"224\":4,\"225\":2}}],[\"install\",{\"1\":{\"155\":1,\"156\":1,\"364\":1}}],[\"include\",{\"1\":{\"437\":1}}],[\"increment\",{\"1\":{\"332\":2}}],[\"inject\",{\"1\":{\"357\":1}}],[\"initstack\",{\"1\":{\"569\":1}}],[\"initqueue\",{\"1\":{\"555\":1}}],[\"initlist\",{\"1\":{\"506\":1}}],[\"initialadminpassword\",{\"1\":{\"364\":1}}],[\"init\",{\"0\":{\"412\":1},\"1\":{\"332\":1,\"364\":1,\"411\":1,\"412\":2}}],[\"invocationhandler\",{\"1\":{\"387\":1,\"388\":6}}],[\"invocation\",{\"1\":{\"260\":2,\"391\":2}}],[\"invokesuper\",{\"1\":{\"391\":1}}],[\"invoke\",{\"1\":{\"229\":1,\"387\":1,\"388\":2}}],[\"independent\",{\"1\":{\"241\":1}}],[\"index\",{\"1\":{\"171\":1,\"345\":3,\"578\":1}}],[\"input\",{\"1\":{\"224\":2}}],[\"inputparams\",{\"1\":{\"224\":1}}],[\"infrastructure\",{\"1\":{\"145\":1}}],[\"information\",{\"1\":{\"200\":1}}],[\"info\",{\"1\":{\"128\":1,\"153\":2,\"224\":2,\"314\":1}}],[\"int\",{\"1\":{\"130\":3,\"224\":1,\"485\":4}}],[\"integration\",{\"1\":{\"362\":1}}],[\"integer\",{\"1\":{\"130\":1,\"485\":1}}],[\"intercept\",{\"1\":{\"391\":1}}],[\"intersect\",{\"1\":{\"311\":1}}],[\"interface提供的方式实现\",{\"1\":{\"394\":2}}],[\"interfacenew1接口没有继承关系的话\",{\"1\":{\"394\":1}}],[\"interfacenew1接口\",{\"1\":{\"394\":1}}],[\"interfacenew1\",{\"1\":{\"394\":2}}],[\"interfacenew\",{\"1\":{\"394\":3}}],[\"interface\",{\"0\":{\"394\":1},\"1\":{\"130\":2,\"134\":2,\"224\":1,\"271\":1,\"388\":1,\"394\":5}}],[\"intellij\",{\"0\":{\"115\":1},\"1\":{\"277\":1}}],[\"in\",{\"1\":{\"96\":2,\"304\":1,\"345\":1,\"554\":1,\"568\":1}}],[\"提高了程序的响应速度\",{\"1\":{\"375\":1}}],[\"提高了效率\",{\"1\":{\"374\":1}}],[\"提高系统健壮性\",{\"1\":{\"103\":1}}],[\"提到微服务就不得不提到单体地狱的问题\",{\"1\":{\"420\":1}}],[\"提到\",{\"1\":{\"370\":1}}],[\"提到布局最重要的当然是\",{\"1\":{\"323\":1}}],[\"提到版本控制\",{\"1\":{\"98\":1}}],[\"提升研发效率\",{\"1\":{\"241\":1}}],[\"提升软件质量\",{\"1\":{\"241\":1}}],[\"提取变量名和值\",{\"1\":{\"237\":1}}],[\"提供更简洁的调用方式\",{\"1\":{\"384\":1}}],[\"提供了一个集中管理和监控的用户界面\",{\"1\":{\"430\":1}}],[\"提供了一个更简单的\",{\"1\":{\"329\":1}}],[\"提供了监控和管理的基础功能\",{\"1\":{\"430\":1}}],[\"提供了\",{\"1\":{\"327\":1,\"329\":1}}],[\"提供了标准的rpc\",{\"1\":{\"270\":1}}],[\"提供了实现\",{\"1\":{\"222\":1}}],[\"提供的功能\",{\"1\":{\"430\":1}}],[\"提供的\",{\"1\":{\"130\":1,\"207\":1,\"333\":2,\"395\":1}}],[\"提供免费图片审查\",{\"1\":{\"110\":1}}],[\"2h\",{\"1\":{\"592\":1}}],[\"2k\",{\"1\":{\"590\":2}}],[\"2的结点只有左孩子\",{\"1\":{\"589\":1}}],[\"2i+1\",{\"1\":{\"589\":1}}],[\"2i\",{\"1\":{\"502\":1,\"589\":1}}],[\"2n\",{\"1\":{\"501\":1,\"581\":1}}],[\"2s\",{\"1\":{\"465\":1}}],[\"2^n\",{\"1\":{\"458\":1}}],[\"2578\",{\"0\":{\"480\":1}}],[\"25\",{\"1\":{\"313\":1}}],[\"24\",{\"1\":{\"313\":1,\"314\":1,\"315\":1,\"483\":1}}],[\"26\",{\"1\":{\"229\":4}}],[\"20\",{\"1\":{\"301\":2,\"316\":3,\"455\":1}}],[\"2020\",{\"1\":{\"291\":1}}],[\"20230427\",{\"1\":{\"289\":2}}],[\"20230413\",{\"1\":{\"284\":2,\"287\":1,\"289\":13}}],[\"2023\",{\"1\":{\"229\":4}}],[\"2015\",{\"1\":{\"297\":1}}],[\"2019\",{\"1\":{\"291\":1}}],[\"2018\",{\"1\":{\"291\":1}}],[\"2013\",{\"1\":{\"139\":1}}],[\"2>\",{\"1\":{\"190\":1}}],[\"2\",{\"0\":{\"274\":1,\"331\":1},\"1\":{\"103\":1,\"130\":1,\"171\":1,\"255\":1,\"280\":1,\"300\":9,\"309\":2,\"310\":4,\"311\":10,\"317\":3,\"319\":2,\"320\":2,\"373\":1,\"451\":7,\"463\":1,\"483\":1,\"485\":1,\"500\":2,\"501\":5,\"560\":10,\"589\":2}}],[\"b树和b+树\",{\"0\":{\"477\":1}}],[\"bst\",{\"0\":{\"467\":1}}],[\"bold\",{\"1\":{\"339\":1}}],[\"books\",{\"0\":{\"604\":1}}],[\"boolean\",{\"1\":{\"224\":2,\"302\":1,\"341\":2}}],[\"boot<\",{\"1\":{\"433\":1,\"436\":1}}],[\"boot应用程序中集成\",{\"1\":{\"430\":1}}],[\"boot应用程序中\",{\"1\":{\"430\":1}}],[\"boot应用程序的健康检查功能\",{\"1\":{\"430\":1}}],[\"boot\",{\"0\":{\"429\":1,\"438\":1},\"1\":{\"204\":1,\"250\":1,\"280\":2,\"419\":1,\"423\":1,\"430\":21,\"433\":2,\"434\":1,\"436\":2,\"437\":2,\"439\":2}}],[\"block\",{\"1\":{\"324\":2}}],[\"blue\",{\"1\":{\"305\":4}}],[\"bbb\",{\"1\":{\"301\":2}}],[\"bye\",{\"1\":{\"300\":1}}],[\"byte\",{\"1\":{\"224\":2}}],[\"bcopmare\",{\"1\":{\"282\":1}}],[\"b对象来源\",{\"1\":{\"245\":1}}],[\"bitree\",{\"1\":{\"593\":1}}],[\"bitree<e>\",{\"1\":{\"593\":3}}],[\"bitbucket\",{\"1\":{\"362\":1}}],[\"bind绑定样式\",{\"1\":{\"343\":1}}],[\"bind\",{\"0\":{\"343\":1}}],[\"bin\",{\"1\":{\"236\":1,\"237\":1,\"276\":1,\"364\":1}}],[\"bigdecimal\",{\"1\":{\"229\":8}}],[\"but\",{\"1\":{\"419\":1}}],[\"button>\",{\"1\":{\"332\":1,\"342\":1}}],[\"bug修复上线后可选删除\",{\"1\":{\"284\":1}}],[\"bugfix\",{\"1\":{\"284\":1}}],[\"buyprice\",{\"1\":{\"229\":4}}],[\"builder\",{\"1\":{\"225\":3,\"253\":1}}],[\"buildinput\",{\"1\":{\"224\":2}}],[\"build\",{\"1\":{\"217\":9,\"225\":2,\"253\":1,\"364\":1}}],[\"bem\",{\"0\":{\"324\":1},\"1\":{\"323\":1,\"324\":3}}],[\"bearer\",{\"1\":{\"293\":1}}],[\"bean>\",{\"1\":{\"214\":1}}],[\"beans\",{\"1\":{\"135\":1,\"214\":1}}],[\"bean\",{\"1\":{\"130\":3,\"207\":1,\"214\":1,\"224\":1}}],[\"begintime\",{\"1\":{\"224\":3}}],[\"before\",{\"1\":{\"222\":1,\"388\":1,\"391\":1}}],[\"backend\",{\"0\":{\"608\":1}}],[\"backup\",{\"1\":{\"165\":1}}],[\"baz\",{\"1\":{\"301\":2}}],[\"barriers\",{\"1\":{\"380\":1}}],[\"bar\",{\"1\":{\"301\":3}}],[\"basis\",{\"0\":{\"621\":1}}],[\"basic\",{\"0\":{\"615\":1,\"617\":1}}],[\"baseredisconfig\",{\"1\":{\"445\":1}}],[\"base64\",{\"1\":{\"294\":1}}],[\"based\",{\"1\":{\"271\":1}}],[\"basedir=\",{\"1\":{\"217\":1}}],[\"basename\",{\"1\":{\"236\":1}}],[\"bash\",{\"1\":{\"236\":1,\"237\":1}}],[\"ba\",{\"1\":{\"225\":2}}],[\"baicheng\",{\"1\":{\"225\":1}}],[\"break\",{\"1\":{\"171\":1}}],[\"browserify等等\",{\"1\":{\"148\":1}}],[\"branch\",{\"1\":{\"219\":3}}],[\"branching\",{\"1\":{\"99\":1}}],[\"brandolini\",{\"1\":{\"139\":1}}],[\"b\",{\"1\":{\"115\":2,\"300\":12,\"301\":5,\"310\":2,\"311\":6,\"317\":4,\"318\":1,\"340\":3,\"586\":1}}],[\"bpmn\",{\"1\":{\"103\":1}}],[\"人事管理流程等\",{\"1\":{\"103\":1}}],[\"行标\",{\"1\":{\"503\":1}}],[\"行号相等先存储列号较小的元素\",{\"1\":{\"498\":1}}],[\"行政审批流程\",{\"1\":{\"103\":1}}],[\"行书\",{\"0\":{\"6\":1}}],[\"特性是最早进队的也是最早出队的\",{\"1\":{\"554\":1}}],[\"特殊矩阵\",{\"0\":{\"499\":1}}],[\"特殊句式\",{\"0\":{\"68\":1}}],[\"特点\",{\"0\":{\"199\":1}}],[\"特别是大的企业集团公司\",{\"1\":{\"103\":1}}],[\"政府机构等\",{\"1\":{\"103\":1}}],[\"物业管理\",{\"1\":{\"103\":1}}],[\"物流服务业\",{\"1\":{\"103\":1}}],[\"电子邮件服务或云存储服务\",{\"1\":{\"451\":1}}],[\"电子书和技术文章成为圣经的绝对是传奇著作\",{\"1\":{\"96\":1}}],[\"电信服务业\",{\"1\":{\"103\":1}}],[\"制造业\",{\"1\":{\"103\":1}}],[\"它的子结点为第二层\",{\"1\":{\"586\":1}}],[\"它的方法与\",{\"1\":{\"314\":1}}],[\"它具有以下特点\",{\"1\":{\"467\":1}}],[\"它吸取了顺序查找和折半查找各自的优点\",{\"1\":{\"465\":1}}],[\"它对顺序表和链表都是适用的\",{\"1\":{\"463\":1}}],[\"它通过\",{\"1\":{\"451\":1}}],[\"它在计算机网络中指的是在不同网络之间进行连接\",{\"1\":{\"423\":1}}],[\"它在第一次创建\",{\"1\":{\"412\":1}}],[\"它由同一类型的数据元素组成\",{\"1\":{\"462\":1}}],[\"它由\",{\"1\":{\"414\":1,\"415\":1}}],[\"它确保在不同编译器和不同处理器平台上通过禁止重排序来提供一致的内存可见性保证\",{\"1\":{\"380\":1}}],[\"它确保在计算机系统关闭或断电后\",{\"1\":{\"197\":1}}],[\"它也会运行被称为生命周期钩子的函数\",{\"1\":{\"353\":1}}],[\"它也支持\",{\"1\":{\"113\":1}}],[\"它自动跟踪回调的响应式依赖\",{\"1\":{\"352\":1}}],[\"它只能检测到\",{\"1\":{\"348\":1}}],[\"它只负责组装场景而不提供实现\",{\"1\":{\"143\":1}}],[\"它会触发追踪它的组件的重新渲染\",{\"1\":{\"347\":1}}],[\"它会将事件发布给应用事件发布器\",{\"1\":{\"135\":1}}],[\"它取代了\",{\"1\":{\"331\":1}}],[\"它把\",{\"1\":{\"324\":1}}],[\"它就是全局的\",{\"1\":{\"324\":1}}],[\"它与\",{\"1\":{\"314\":1}}],[\"它不直接操作对象\",{\"1\":{\"313\":1}}],[\"它包含声明\",{\"1\":{\"294\":1}}],[\"它包含了领域中的业务逻辑和规则\",{\"1\":{\"145\":1}}],[\"它包含了软件系统所需要处理的业务逻辑和规则\",{\"1\":{\"143\":1}}],[\"它包含了与事件相关的数据和状态\",{\"1\":{\"135\":1}}],[\"它和其他分支完全没有区别\",{\"1\":{\"284\":1}}],[\"它是指令的有限序列\",{\"1\":{\"456\":1}}],[\"它是作为来自\",{\"1\":{\"409\":1}}],[\"它是一个能代表\",{\"1\":{\"346\":1}}],[\"它是一种跨编程语言和操作系统平台的远程调用技术\",{\"1\":{\"266\":1}}],[\"它是\",{\"1\":{\"268\":1}}],[\"它定义了应用程序如何在\",{\"1\":{\"267\":1}}],[\"它定义了一个或多个用于处理特定类型事件的方法\",{\"1\":{\"135\":1}}],[\"它提供接口的模拟\",{\"1\":{\"246\":1}}],[\"它提供了实时查看应用程序日志的功能\",{\"1\":{\"430\":1}}],[\"它提供了对spring\",{\"1\":{\"430\":1}}],[\"它提供了一些安全特性\",{\"1\":{\"430\":1}}],[\"它提供了一些通用的功能\",{\"1\":{\"143\":1}}],[\"它提供了一个用户界面\",{\"1\":{\"430\":1}}],[\"它提供了一种简单\",{\"1\":{\"423\":1}}],[\"它提供了一种更加简洁的函数书写方式\",{\"1\":{\"316\":1}}],[\"它提供了简洁的api\",{\"1\":{\"239\":1}}],[\"它提供了许多方法来获取关于类的信息\",{\"1\":{\"227\":1}}],[\"它搭配\",{\"1\":{\"239\":1}}],[\"它可以是一颗空树\",{\"1\":{\"467\":1}}],[\"它可以自动发现注册在服务注册中心中的\",{\"1\":{\"430\":1}}],[\"它可以看作一个语法糖\",{\"1\":{\"317\":1}}],[\"它可以用于访问和修改字段的值\",{\"1\":{\"227\":1}}],[\"它可以用于调用方法\",{\"1\":{\"227\":1}}],[\"它可以用于创建对象实例\",{\"1\":{\"227\":1}}],[\"它可以将业务中复杂的业务流程抽取出来\",{\"1\":{\"103\":1}}],[\"它支持多种数据结构\",{\"1\":{\"198\":1}}],[\"它根据综合指标来评估数据库的受欢迎程度来提供各种数据库的排名和比较\",{\"1\":{\"197\":1}}],[\"它表示领域中的一个聚合的根实体\",{\"1\":{\"143\":1}}],[\"它表示领域中的一个可变的数据对象\",{\"1\":{\"143\":1}}],[\"它表示领域中的一个不可变的数据对象\",{\"1\":{\"143\":1}}],[\"它表示领域中的一个事件\",{\"1\":{\"143\":1}}],[\"它负责将应用程序的输出展示给用户\",{\"1\":{\"145\":1}}],[\"它负责处理应用程序的输入和输出\",{\"1\":{\"145\":1}}],[\"它负责封装领域模型和外部系统之间的交互\",{\"1\":{\"143\":1}}],[\"它负责创建领域中的实体和值对象\",{\"1\":{\"143\":1}}],[\"它负责存储和检索领域中的实体和值对象\",{\"1\":{\"143\":1}}],[\"它负责监听和响应特定类型的事件\",{\"1\":{\"135\":1}}],[\"它们为微服务架构的可伸缩性\",{\"1\":{\"428\":1}}],[\"它们都有def\",{\"1\":{\"394\":1}}],[\"它们在编译时会插入到代码块的开始和异常或者结束位置\",{\"1\":{\"372\":1}}],[\"它们提供了一些通用的功能\",{\"1\":{\"143\":1}}],[\"它们定义了领域中的业务逻辑和规则\",{\"1\":{\"143\":1}}],[\"它们是领域中最重要的概念\",{\"1\":{\"143\":1}}],[\"它们也没有提供对并发编程的良好支持\",{\"1\":{\"133\":1}}],[\"它将用户信息加密到\",{\"1\":{\"293\":1}}],[\"它将领域中的业务逻辑和规则封装在领域模型中\",{\"1\":{\"143\":1}}],[\"它将领域中的业务逻辑和规则封装在在模型实体中\",{\"1\":{\"143\":1}}],[\"它将相关的实体和值对象组合在一起\",{\"1\":{\"143\":1}}],[\"它将软件系统拆分为不同的领域\",{\"1\":{\"139\":1}}],[\"它将作为观察者模式中的事件对象\",{\"1\":{\"135\":1}}],[\"它以领域为核心\",{\"1\":{\"139\":1}}],[\"它允许组件或类将事件发布给观察者\",{\"1\":{\"135\":1}}],[\"它允许你构建一个对象链\",{\"1\":{\"124\":1}}],[\"它允许使用简单的编程模型跨计算机群集分布式处理大型数据集\",{\"1\":{\"121\":1}}],[\"它主要结局的是多个参与者之间按照某种预定义的规则自动进行传递文档\",{\"1\":{\"103\":1}}],[\"它基于代码又高于代码\",{\"1\":{\"101\":1}}],[\"wpl\",{\"1\":{\"580\":1}}],[\"wsimport用法\",{\"1\":{\"276\":1}}],[\"wsimport\",{\"0\":{\"276\":1},\"1\":{\"276\":1}}],[\"wsimport命令来自动生成\",{\"1\":{\"271\":1}}],[\"ws\",{\"1\":{\"271\":5}}],[\"wsdl文件\",{\"1\":{\"274\":1}}],[\"wsdl\",{\"0\":{\"269\":1,\"274\":1},\"1\":{\"267\":1,\"276\":1,\"277\":2}}],[\"when\",{\"0\":{\"253\":1,\"259\":1,\"260\":1},\"1\":{\"253\":1,\"259\":1,\"260\":1}}],[\"whennew\",{\"1\":{\"245\":1}}],[\"while\",{\"1\":{\"209\":1,\"236\":2,\"237\":2}}],[\"weight\",{\"1\":{\"165\":1,\"339\":1}}],[\"webflux\",{\"1\":{\"423\":1}}],[\"webapp\",{\"1\":{\"202\":1}}],[\"webappdirlocation\",{\"1\":{\"202\":2}}],[\"webpack\",{\"1\":{\"148\":2}}],[\"web\",{\"0\":{\"265\":1,\"266\":1,\"267\":1,\"271\":1,\"273\":1,\"292\":1},\"1\":{\"128\":2,\"240\":1,\"241\":1,\"266\":5,\"267\":4,\"268\":2,\"269\":2,\"270\":3,\"271\":3,\"293\":3,\"294\":1,\"364\":1,\"409\":3,\"413\":1,\"437\":1,\"448\":2}}],[\"within\",{\"1\":{\"224\":1}}],[\"wight\",{\"1\":{\"165\":1}}],[\"windows\",{\"1\":{\"112\":1,\"214\":1}}],[\"watcheffect\",{\"1\":{\"352\":2}}],[\"watcheffect代替\",{\"1\":{\"352\":1}}],[\"watch\",{\"1\":{\"352\":1}}],[\"war\",{\"1\":{\"202\":1,\"213\":1}}],[\"warn\",{\"1\":{\"128\":1}}],[\"wantedby=multi\",{\"1\":{\"156\":1}}],[\"w\",{\"1\":{\"115\":1}}],[\"worker\",{\"1\":{\"158\":3}}],[\"workflow\",{\"1\":{\"103\":1}}],[\"world\",{\"1\":{\"122\":1,\"134\":1,\"301\":5}}],[\"word\",{\"1\":{\"113\":1}}],[\"writing\",{\"0\":{\"72\":1}}],[\"介质检查等步骤完善到流水线\",{\"1\":{\"362\":1}}],[\"介绍\",{\"0\":{\"103\":1,\"430\":1,\"450\":1,\"453\":1}}],[\"介词短语\",{\"0\":{\"57\":1}}],[\"将每个结点的孩子结点都用单链表链接起来形成一个线性结构\",{\"1\":{\"600\":1}}],[\"将两个栈的栈底分别设在共享空间的两端\",{\"1\":{\"571\":1}}],[\"将这样的二叉树成为平衡二叉树\",{\"1\":{\"472\":1}}],[\"将这个变量所存在的缓冲行\",{\"1\":{\"371\":1}}],[\"将因删除结点而断开的二叉链表重新链接起来\",{\"1\":{\"470\":1}}],[\"将长度为n的查找表均匀的分为b块\",{\"1\":{\"465\":1}}],[\"将查找表分为若干子块\",{\"1\":{\"465\":1}}],[\"将myinterceptor作为拦截器\",{\"1\":{\"390\":1}}],[\"将块名称和元素名称分开\",{\"1\":{\"324\":1}}],[\"将会显示两个\",{\"1\":{\"308\":2}}],[\"将会显示两个log\",{\"1\":{\"308\":2}}],[\"将工程从码云clone到本地\",{\"1\":{\"286\":1}}],[\"将生成的\",{\"1\":{\"278\":1}}],[\"将在每天的午夜\",{\"1\":{\"236\":1}}],[\"将切面应用到目标对象来创建新的代理对象的过程\",{\"1\":{\"222\":1}}],[\"将配置放在\",{\"1\":{\"213\":1}}],[\"将用户会话信息存储在redis中\",{\"1\":{\"200\":1}}],[\"将\",{\"1\":{\"148\":1,\"502\":1}}],[\"将事件按照时间顺序排列\",{\"1\":{\"142\":1}}],[\"将事件以可视化的方式展示出来\",{\"1\":{\"141\":1}}],[\"将软件系统拆分为不同的领域\",{\"1\":{\"139\":1}}],[\"将健壮性和可扩展性设为己任\",{\"1\":{\"101\":1}}],[\"将来完成进行时\",{\"0\":{\"35\":1}}],[\"将来完成时\",{\"0\":{\"31\":1}}],[\"将来进行时\",{\"0\":{\"26\":1}}],[\"对无向图而言\",{\"1\":{\"547\":1}}],[\"对角矩阵也叫袋状矩阵\",{\"1\":{\"502\":1}}],[\"对称矩阵\",{\"0\":{\"500\":1}}],[\"对称或非对称\",{\"1\":{\"294\":1}}],[\"对每个结点\",{\"1\":{\"476\":1}}],[\"对查找表的操作一般有四种\",{\"1\":{\"462\":1}}],[\"对数阶\",{\"1\":{\"459\":1}}],[\"对日志功能的支持\",{\"1\":{\"439\":1}}],[\"对方法的调用进行日志记录\",{\"1\":{\"392\":1}}],[\"对其方法进行增强或添加额外的逻辑\",{\"1\":{\"384\":1}}],[\"对应于每个顶点也有一个结点\",{\"1\":{\"546\":1}}],[\"对应于有向图中的每条弧有一个结点\",{\"1\":{\"546\":1}}],[\"对应静态查找表的查找方法有顺序查找\",{\"1\":{\"462\":1}}],[\"对应值即\",{\"1\":{\"309\":1}}],[\"对应类型的监听器将接收到事件\",{\"1\":{\"135\":1}}],[\"对比返回值是否到达预期\",{\"1\":{\"245\":1}}],[\"对于编号为i的结点\",{\"1\":{\"589\":1}}],[\"对于循环队列判空和满的方式有三种\",{\"1\":{\"557\":1}}],[\"对于有向图来说\",{\"1\":{\"552\":1}}],[\"对于有向图\",{\"1\":{\"544\":1}}],[\"对于有多个依赖项的侦听器来说\",{\"1\":{\"352\":1}}],[\"对于无向图来说\",{\"1\":{\"552\":1}}],[\"对于无向图\",{\"1\":{\"544\":1}}],[\"对于每个额链表的节点\",{\"1\":{\"511\":1}}],[\"对于\",{\"1\":{\"500\":1,\"502\":1}}],[\"对于多维数组\",{\"1\":{\"498\":1}}],[\"对于链表\",{\"1\":{\"463\":1}}],[\"对于顺序表\",{\"1\":{\"463\":1}}],[\"对于相同的输入只能得出相同的结果\",{\"1\":{\"456\":1}}],[\"对于同步方法块\",{\"1\":{\"372\":1}}],[\"对于静态同步方法\",{\"1\":{\"372\":1}}],[\"对于普通同步方法\",{\"1\":{\"372\":1}}],[\"对于声明环境变量的文件\",{\"1\":{\"237\":1}}],[\"对于这几种包管理器我自己是没有感觉出来有太多的区别\",{\"1\":{\"148\":1}}],[\"对\",{\"1\":{\"229\":1,\"371\":1}}],[\"对象被标记为垃圾回收\",{\"1\":{\"416\":1}}],[\"对象往往搭配\",{\"1\":{\"319\":1}}],[\"对象是异步编程的一种解决方案\",{\"1\":{\"319\":1}}],[\"对象允许你存储任何类型的唯一值\",{\"1\":{\"310\":1}}],[\"对象时\",{\"1\":{\"309\":1}}],[\"对象转换成一个二维键值对数组\",{\"1\":{\"309\":1}}],[\"对象或者原始值\",{\"1\":{\"307\":1}}],[\"对象保存键值对\",{\"1\":{\"307\":1}}],[\"对象模型的解构\",{\"0\":{\"301\":1}}],[\"对象\",{\"0\":{\"319\":1},\"1\":{\"253\":1,\"307\":1,\"309\":1,\"316\":1,\"372\":1,\"388\":2,\"396\":4}}],[\"对象的类库\",{\"1\":{\"246\":1}}],[\"对象中价格的字段\",{\"1\":{\"229\":1}}],[\"对象都要过滤那简直是天方夜谭\",{\"1\":{\"225\":1}}],[\"对象服务器\",{\"1\":{\"173\":1}}],[\"对我来说\",{\"1\":{\"217\":1}}],[\"对我个人而言\",{\"1\":{\"101\":1}}],[\"对ant的理解\",{\"0\":{\"217\":1}}],[\"对需要频繁访问的数据进行缓存\",{\"1\":{\"200\":1}}],[\"对业务问题进行诊断\",{\"1\":{\"181\":1}}],[\"对未知领域的知识充满好奇和尊敬\",{\"1\":{\"148\":1}}],[\"对请求进行处理\",{\"1\":{\"128\":1}}],[\"对新手非常友好\",{\"1\":{\"92\":1}}],[\"上三角区的的所有元素和下三角区的所有元素都是相同的\",{\"1\":{\"500\":1}}],[\"上半区域\",{\"1\":{\"500\":1}}],[\"上的受保护资源\",{\"1\":{\"451\":1}}],[\"上的所有方法已经被验证\",{\"1\":{\"258\":1}}],[\"上面只展示了最常用的一种\",{\"1\":{\"557\":1}}],[\"上面的写法其实并不能保证唯一性\",{\"1\":{\"305\":1}}],[\"上面配置的含义就是我们将\",{\"1\":{\"171\":1}}],[\"上必装的插件之一\",{\"1\":{\"291\":1}}],[\"上开发\",{\"1\":{\"289\":1}}],[\"上并删除\",{\"1\":{\"289\":1}}],[\"上线部署只需要从master创建tag发布即可\",{\"1\":{\"287\":1}}],[\"上线后master标记tag后可选删除\",{\"1\":{\"284\":1}}],[\"上线日期和bug内容决定\",{\"1\":{\"284\":1}}],[\"上线日期\",{\"1\":{\"284\":1}}],[\"上提供的软件服务\",{\"1\":{\"270\":1}}],[\"上实现互操作性\",{\"1\":{\"267\":1}}],[\"上是为了方便集中管理\",{\"1\":{\"213\":1}}],[\"上\",{\"1\":{\"170\":1}}],[\"上图中的是2022年发行的第二版\",{\"1\":{\"101\":1}}],[\"上还配套在线阅读网站\",{\"1\":{\"92\":1}}],[\"内部排序\",{\"1\":{\"487\":1}}],[\"内部原理等各个方面内容\",{\"1\":{\"99\":1}}],[\"内执行\",{\"1\":{\"370\":1}}],[\"内置的数据结构\",{\"1\":{\"348\":1}}],[\"内置\",{\"1\":{\"202\":1}}],[\"内查找某个类的实例\",{\"1\":{\"181\":1}}],[\"内存系统的重新排序\",{\"1\":{\"380\":1}}],[\"内存模型抽象结构图\",{\"1\":{\"379\":1}}],[\"内存模型的抽象结构\",{\"0\":{\"379\":1}}],[\"内存模型\",{\"0\":{\"378\":1},\"1\":{\"379\":1}}],[\"内存使用情况\",{\"1\":{\"231\":1}}],[\"内存等\",{\"1\":{\"231\":1}}],[\"内存存储\",{\"1\":{\"199\":1}}],[\"内存\",{\"1\":{\"181\":1}}],[\"内容格式就是\",{\"1\":{\"270\":1}}],[\"内容也是非常的简单\",{\"1\":{\"250\":1}}],[\"内容如下\",{\"1\":{\"156\":1}}],[\"内容上都是按照每一种设计模式作为一个章节并结合情景和图片进行讲解\",{\"1\":{\"101\":1}}],[\"内网穿透\",{\"0\":{\"111\":1}}],[\"d的度为3\",{\"1\":{\"586\":1}}],[\"dnode\",{\"1\":{\"519\":1}}],[\"dnode<t>\",{\"1\":{\"519\":3}}],[\"dto\",{\"1\":{\"242\":1}}],[\"days\",{\"1\":{\"236\":2}}],[\"date\",{\"1\":{\"236\":4}}],[\"date=$\",{\"1\":{\"236\":2}}],[\"dateutil\",{\"1\":{\"224\":1}}],[\"data\",{\"0\":{\"440\":1},\"1\":{\"224\":1,\"225\":1,\"334\":1,\"364\":1,\"446\":1,\"511\":5,\"519\":5,\"593\":6}}],[\"daemon\",{\"1\":{\"156\":1}}],[\"diff首先看组件类型\",{\"1\":{\"346\":1}}],[\"diff\",{\"0\":{\"346\":1},\"1\":{\"346\":11}}],[\"difference\",{\"1\":{\"311\":1}}],[\"div>\",{\"1\":{\"340\":4,\"342\":1,\"343\":1,\"345\":1}}],[\"directives\",{\"1\":{\"359\":1}}],[\"directory\",{\"1\":{\"236\":2}}],[\"directory=\",{\"1\":{\"236\":1}}],[\"dir=\",{\"1\":{\"217\":4}}],[\"dir\",{\"1\":{\"217\":11}}],[\"disconf\",{\"1\":{\"428\":1}}],[\"dist\",{\"1\":{\"217\":5}}],[\"distributed\",{\"1\":{\"200\":1}}],[\"disable\",{\"1\":{\"156\":1}}],[\"dictionary\",{\"1\":{\"198\":1}}],[\"db调用\",{\"1\":{\"245\":8}}],[\"db\",{\"1\":{\"197\":1}}],[\"d\",{\"1\":{\"193\":1,\"236\":4,\"237\":3,\"301\":2,\"364\":2}}],[\"du\",{\"1\":{\"191\":1}}],[\"df\",{\"1\":{\"191\":1}}],[\"dfs\",{\"1\":{\"121\":1}}],[\"driven\",{\"1\":{\"139\":1}}],[\"ddd\",{\"0\":{\"138\":1,\"139\":1},\"1\":{\"139\":2,\"144\":1,\"145\":1,\"301\":2}}],[\"dequeue\",{\"1\":{\"555\":1}}],[\"dependency>\",{\"1\":{\"391\":1,\"433\":2,\"436\":2}}],[\"dependencies>\",{\"1\":{\"391\":1}}],[\"dependencies\",{\"1\":{\"391\":1}}],[\"depends=\",{\"1\":{\"217\":2}}],[\"deployment\",{\"1\":{\"362\":1}}],[\"deleting\",{\"1\":{\"388\":1}}],[\"deletevertex\",{\"1\":{\"548\":1}}],[\"delete\",{\"1\":{\"413\":1}}],[\"deleteproduct\",{\"1\":{\"289\":3}}],[\"deleteuser\",{\"1\":{\"259\":2,\"388\":3}}],[\"delivery\",{\"1\":{\"362\":1}}],[\"def2\",{\"1\":{\"394\":1}}],[\"def\",{\"1\":{\"394\":2}}],[\"defineoptions\",{\"1\":{\"354\":1}}],[\"defineexpose\",{\"1\":{\"354\":1}}],[\"defineemits\",{\"1\":{\"354\":1}}],[\"defineprops\",{\"1\":{\"354\":1}}],[\"defineproperty\",{\"1\":{\"304\":1}}],[\"default2方法\",{\"1\":{\"394\":1}}],[\"default方法\",{\"1\":{\"394\":2}}],[\"defaultpropertysourcefactory\",{\"1\":{\"280\":1}}],[\"default=\",{\"1\":{\"217\":1}}],[\"default\",{\"1\":{\"130\":1,\"224\":2,\"318\":3,\"334\":1,\"335\":1,\"394\":5}}],[\"demo\",{\"1\":{\"225\":1,\"272\":1,\"327\":1,\"331\":1,\"332\":1,\"392\":1,\"504\":1,\"553\":1,\"567\":1,\"584\":1}}],[\"development\",{\"0\":{\"609\":1,\"611\":1}}],[\"develop\",{\"1\":{\"284\":1,\"289\":1}}],[\"devops\",{\"1\":{\"282\":1,\"362\":2}}],[\"dev\",{\"1\":{\"190\":1,\"282\":1}}],[\"destorylist\",{\"1\":{\"506\":1}}],[\"destroystring\",{\"1\":{\"578\":1}}],[\"destroystack\",{\"1\":{\"569\":1}}],[\"destroy\",{\"0\":{\"416\":1},\"1\":{\"411\":1,\"416\":3}}],[\"destfile=\",{\"1\":{\"217\":1}}],[\"destdir=\",{\"1\":{\"217\":1}}],[\"description=nginx\",{\"1\":{\"156\":1}}],[\"description\",{\"1\":{\"130\":6,\"593\":1}}],[\"design\",{\"0\":{\"101\":1,\"610\":1},\"1\":{\"101\":2,\"139\":1}}],[\"debug\",{\"1\":{\"128\":1,\"181\":2}}],[\"deepl\",{\"0\":{\"113\":1}}],[\"dodelete\",{\"1\":{\"413\":1}}],[\"doput\",{\"1\":{\"413\":1}}],[\"dopost\",{\"0\":{\"415\":1},\"1\":{\"412\":1,\"413\":1,\"415\":1}}],[\"doget\",{\"0\":{\"414\":1},\"1\":{\"412\":1,\"413\":1,\"414\":1}}],[\"dom\",{\"0\":{\"346\":2},\"1\":{\"346\":15,\"347\":1,\"353\":8}}],[\"domain\",{\"1\":{\"139\":1,\"143\":6,\"145\":1}}],[\"dosomething\",{\"1\":{\"391\":2}}],[\"dos\",{\"1\":{\"309\":2}}],[\"doe\",{\"1\":{\"294\":1,\"388\":2}}],[\"does\",{\"1\":{\"237\":1}}],[\"doanswer\",{\"0\":{\"260\":1},\"1\":{\"260\":1}}],[\"doafterreturning\",{\"1\":{\"225\":1}}],[\"dothrow\",{\"0\":{\"259\":1},\"1\":{\"259\":1}}],[\"done\",{\"1\":{\"236\":2,\"237\":2,\"320\":4}}],[\"dockerfile\",{\"1\":{\"364\":3}}],[\"docker\",{\"0\":{\"182\":1},\"1\":{\"179\":1,\"182\":1,\"183\":1,\"362\":1,\"364\":9}}],[\"down\",{\"1\":{\"165\":1}}],[\"do\",{\"0\":{\"47\":1},\"1\":{\"236\":1,\"237\":2}}],[\"doing\",{\"0\":{\"46\":1},\"1\":{\"391\":1}}],[\"h2\",{\"1\":{\"498\":2}}],[\"h1\",{\"1\":{\"498\":2}}],[\"h1>\",{\"1\":{\"339\":1}}],[\"hs256\",{\"1\":{\"294\":1}}],[\"home\",{\"1\":{\"364\":3}}],[\"hotfix分支属于临时分支\",{\"1\":{\"284\":1}}],[\"hotfix\",{\"1\":{\"284\":2}}],[\"how\",{\"1\":{\"134\":1}}],[\"hkdrmb\",{\"1\":{\"229\":1}}],[\"highprice\",{\"1\":{\"229\":4}}],[\"h\",{\"1\":{\"187\":1,\"586\":1,\"590\":1}}],[\"http\",{\"1\":{\"160\":1,\"266\":2,\"270\":5,\"276\":1,\"293\":1,\"409\":5,\"413\":1,\"437\":1}}],[\"https支持等\",{\"1\":{\"430\":1}}],[\"httpservletresponse\",{\"1\":{\"224\":1}}],[\"httpservletrequest\",{\"1\":{\"224\":1}}],[\"https\",{\"1\":{\"99\":1,\"154\":1}}],[\"html=\",{\"1\":{\"339\":1}}],[\"html\",{\"0\":{\"339\":1},\"1\":{\"148\":1,\"157\":1,\"171\":1,\"409\":3,\"414\":1,\"415\":1}}],[\"ha\",{\"0\":{\"173\":1}}],[\"has\",{\"1\":{\"311\":2}}],[\"hashes\",{\"1\":{\"198\":1}}],[\"hash\",{\"0\":{\"166\":1,\"167\":1,\"168\":1,\"175\":1},\"1\":{\"175\":1,\"495\":1}}],[\"hashmap<>\",{\"1\":{\"130\":1}}],[\"hasusername\",{\"1\":{\"130\":1}}],[\"handlers\",{\"1\":{\"130\":2}}],[\"handler\",{\"1\":{\"125\":1,\"130\":7,\"313\":4,\"315\":2,\"388\":2}}],[\"hadoop\",{\"0\":{\"120\":1},\"1\":{\"121\":4}}],[\"hdfs\",{\"1\":{\"121\":1}}],[\"he\",{\"1\":{\"403\":1}}],[\"heng\",{\"1\":{\"225\":1}}],[\"header和payload\",{\"1\":{\"294\":1}}],[\"header\",{\"1\":{\"294\":2,\"323\":1}}],[\"head\",{\"0\":{\"101\":1},\"1\":{\"101\":3,\"122\":1,\"191\":1,\"219\":1}}],[\"hellocontroller\",{\"1\":{\"225\":1}}],[\"hello\",{\"0\":{\"0\":1,\"92\":1},\"1\":{\"92\":2,\"122\":1,\"134\":1,\"301\":4,\"396\":1,\"397\":1,\"399\":1,\"402\":1,\"403\":1}}],[\"也称为最优二叉树\",{\"1\":{\"580\":1}}],[\"也称为网\",{\"1\":{\"537\":1}}],[\"也称为物理结构\",{\"1\":{\"495\":1}}],[\"也会出现\",{\"1\":{\"407\":1}}],[\"也会在模板中自动解包\",{\"1\":{\"351\":1}}],[\"也被称为卡特兰\",{\"1\":{\"568\":1}}],[\"也被称为\",{\"1\":{\"380\":1}}],[\"也不能由输出受限的双端队列得到的输出序列\",{\"1\":{\"560\":1}}],[\"也不会有可见性问题\",{\"1\":{\"379\":1}}],[\"也不一定是能作为找到工作的保证\",{\"1\":{\"95\":1}}],[\"也体现了安全性\",{\"1\":{\"293\":1}}],[\"也是一种操作受限的线性表\",{\"1\":{\"554\":1}}],[\"也是一个存储文件库的替代方法\",{\"1\":{\"282\":1}}],[\"也是支持跨平台\",{\"1\":{\"346\":1}}],[\"也是每个人\",{\"1\":{\"291\":1}}],[\"也是十分不方便的\",{\"1\":{\"165\":1}}],[\"也可以存放多个字符\",{\"1\":{\"577\":1}}],[\"也可以记录表长等信息\",{\"1\":{\"511\":1}}],[\"也可以省略\",{\"1\":{\"364\":1}}],[\"也可以将自己的web服务动态地发布到uddi注册中心\",{\"1\":{\"268\":1}}],[\"也可以在这里复习和加深一些命令的理解\",{\"1\":{\"99\":1}}],[\"也就是哈希\",{\"1\":{\"495\":1}}],[\"也就是\",{\"1\":{\"455\":1}}],[\"也就是一种命名规范\",{\"1\":{\"324\":1}}],[\"也就是说能用编程的方法通过\",{\"1\":{\"267\":1}}],[\"也就是观察者模式\",{\"1\":{\"209\":1}}],[\"也没有人提出重构的需求\",{\"1\":{\"233\":1}}],[\"也删除掉后启动\",{\"1\":{\"214\":1}}],[\"也有用\",{\"1\":{\"204\":1}}],[\"就应该反向推测输出前队内的顺序只能是4\",{\"1\":{\"560\":1}}],[\"就其全面性能而言\",{\"1\":{\"487\":1}}],[\"就该有拥抱新技术的激情\",{\"1\":{\"419\":1}}],[\"就在这短短两三年的时间里\",{\"1\":{\"419\":1}}],[\"就在这四五个月的时间里\",{\"1\":{\"366\":1}}],[\"就会创建一个\",{\"1\":{\"412\":1}}],[\"就会将当前缓存行状态设置为无效并重新从内存中读取到处理器缓存中来\",{\"1\":{\"371\":1}}],[\"就会自动轮流执行这个代理集中的地址\",{\"1\":{\"164\":1}}],[\"就可以push到中心仓库进行行下一步操作了\",{\"1\":{\"286\":1}}],[\"就可以了\",{\"1\":{\"229\":1}}],[\"就把它交给计算机\",{\"1\":{\"362\":1}}],[\"就把\",{\"1\":{\"282\":1}}],[\"就算有误差也是可以忽略不计的\",{\"1\":{\"233\":1}}],[\"就算你已经是\",{\"1\":{\"99\":1}}],[\"就只能在最后返回价格对象的时候写个方法统一处理对象的字段\",{\"1\":{\"229\":1}}],[\"就出现了这样一个问题\",{\"1\":{\"229\":1}}],[\"就告诉我们\",{\"1\":{\"222\":1}}],[\"就像是面向对象程序设计中的类和实例一样\",{\"1\":{\"183\":1}}],[\"就包含了完整的一套\",{\"1\":{\"183\":1}}],[\"就好像我们科学上网\",{\"1\":{\"162\":1}}],[\"就好了\",{\"1\":{\"122\":1}}],[\"就是\",{\"1\":{\"419\":1}}],[\"就是好的流程\",{\"0\":{\"288\":1}}],[\"就是用机器能阅读的方式提供的一个正式描述文档而基于xml\",{\"1\":{\"269\":1}}],[\"就是一个应用程序向外界暴露出一个能通过web进行调用的api\",{\"1\":{\"267\":1}}],[\"就是一个虚拟主机\",{\"1\":{\"160\":1}}],[\"就是指定时执行某些特定操作或任务的功能\",{\"1\":{\"231\":1}}],[\"就是使用了<jar><\",{\"1\":{\"217\":1}}],[\"就是是充当透传的作用\",{\"1\":{\"204\":1}}],[\"就是通过计算机对业务流程自动化执行管理\",{\"1\":{\"103\":1}}],[\"就开始逐渐退出神坛\",{\"1\":{\"98\":1}}],[\"简单路径和简单回路\",{\"0\":{\"540\":1}}],[\"简单图\",{\"0\":{\"530\":1}}],[\"简单配置\",{\"0\":{\"434\":1,\"437\":1}}],[\"简单来说就是它提供了一种灵活的方式来在不修改目标对象源代码的情况下\",{\"1\":{\"384\":1}}],[\"简单的\",{\"1\":{\"270\":1}}],[\"简单对象访问协议\",{\"1\":{\"270\":1}}],[\"简单\",{\"1\":{\"246\":2}}],[\"简单易用\",{\"1\":{\"200\":1,\"217\":1}}],[\"简单句的限定词\",{\"0\":{\"51\":1}}],[\"简单句\",{\"0\":{\"9\":1}}],[\"简化环境搭建\",{\"1\":{\"182\":1}}],[\"简直不要太方便\",{\"1\":{\"150\":1}}],[\"简直不要太友好\",{\"1\":{\"99\":1}}],[\"简介\",{\"0\":{\"121\":1,\"181\":1}}],[\"lchild\",{\"1\":{\"593\":1}}],[\"lnode\",{\"1\":{\"511\":1}}],[\"lnode<t>\",{\"1\":{\"511\":2}}],[\"l=\",{\"1\":{\"505\":1}}],[\"leftchild\",{\"1\":{\"593\":1}}],[\"leetcode\",{\"0\":{\"479\":1}}],[\"let\",{\"0\":{\"298\":1},\"1\":{\"298\":3,\"300\":7,\"301\":10,\"302\":2,\"304\":8,\"305\":4,\"310\":1,\"313\":3,\"314\":1,\"315\":3,\"317\":5,\"318\":1,\"320\":1,\"338\":1,\"339\":1,\"340\":1,\"341\":2,\"342\":2,\"343\":1,\"344\":1,\"345\":1}}],[\"length\",{\"1\":{\"224\":2,\"485\":1,\"506\":1}}],[\"leaderboard\",{\"1\":{\"200\":1}}],[\"least\",{\"0\":{\"167\":1}}],[\"learngitbranching\",{\"1\":{\"99\":1}}],[\"learning\",{\"1\":{\"99\":1}}],[\"lua脚本\",{\"1\":{\"199\":1}}],[\"l\",{\"1\":{\"192\":1,\"236\":1,\"498\":4}}],[\"ls\",{\"1\":{\"189\":1}}],[\"ll=\",{\"1\":{\"189\":1}}],[\"lang\",{\"1\":{\"385\":1,\"388\":4,\"391\":1}}],[\"lang=\",{\"1\":{\"340\":1,\"341\":1,\"342\":1,\"343\":1,\"344\":1,\"345\":1}}],[\"lazy\",{\"1\":{\"384\":1}}],[\"latest\",{\"1\":{\"332\":1}}],[\"layout\",{\"0\":{\"322\":1,\"323\":1},\"1\":{\"323\":1,\"324\":1}}],[\"layer\",{\"1\":{\"143\":1,\"145\":4}}],[\"lastprice\",{\"1\":{\"229\":4}}],[\"lastname\",{\"1\":{\"225\":3}}],[\"last\",{\"1\":{\"171\":1,\"568\":1}}],[\"lvs\",{\"1\":{\"162\":1}}],[\"lifo\",{\"1\":{\"568\":1}}],[\"line\",{\"1\":{\"237\":1,\"380\":1}}],[\"linux\",{\"0\":{\"186\":1,\"187\":1},\"1\":{\"150\":1,\"155\":2,\"179\":1,\"235\":1}}],[\"liunx\",{\"1\":{\"214\":1}}],[\"library\",{\"1\":{\"385\":1}}],[\"lib\",{\"1\":{\"156\":1}}],[\"listdelete\",{\"1\":{\"506\":1}}],[\"listinsert\",{\"1\":{\"506\":1}}],[\"list\",{\"1\":{\"200\":1,\"280\":1}}],[\"lists\",{\"1\":{\"198\":1}}],[\"listener\",{\"1\":{\"135\":3}}],[\"list<ratecodedto>\",{\"1\":{\"280\":1}}],[\"list<propertysource<\",{\"1\":{\"280\":1}}],[\"list<\",{\"1\":{\"229\":2}}],[\"list<subscriber>\",{\"1\":{\"134\":1}}],[\"list<abstractchainhandler>\",{\"1\":{\"130\":1}}],[\"list<abstractchainhandler>>\",{\"1\":{\"130\":1}}],[\"lombok\",{\"1\":{\"593\":2}}],[\"long\",{\"1\":{\"224\":1,\"225\":1}}],[\"log2\",{\"1\":{\"590\":1}}],[\"log2n\",{\"1\":{\"471\":1,\"590\":2}}],[\"logm\",{\"1\":{\"587\":1}}],[\"log4j2\",{\"1\":{\"439\":1}}],[\"logback\",{\"1\":{\"439\":2}}],[\"logging\",{\"0\":{\"438\":1},\"1\":{\"439\":2}}],[\"loggerfactory\",{\"1\":{\"224\":1}}],[\"logger\",{\"1\":{\"224\":1}}],[\"logautoconfiguration\",{\"1\":{\"224\":1}}],[\"logannotation\",{\"1\":{\"224\":4}}],[\"logprint\",{\"1\":{\"224\":5}}],[\"log\",{\"1\":{\"190\":1,\"224\":4,\"229\":2,\"236\":2,\"298\":2,\"302\":1,\"304\":5,\"308\":5,\"313\":2,\"315\":2,\"316\":2,\"317\":2,\"318\":1,\"319\":6,\"320\":3,\"342\":1,\"458\":2}}],[\"logs\",{\"1\":{\"156\":1,\"157\":1,\"236\":1,\"308\":1,\"364\":1}}],[\"loading\",{\"1\":{\"384\":1}}],[\"load\",{\"1\":{\"181\":1}}],[\"lowprice\",{\"1\":{\"229\":4}}],[\"low\",{\"1\":{\"179\":1,\"218\":2,\"405\":1,\"419\":1}}],[\"lookup\",{\"1\":{\"156\":1}}],[\"loc\",{\"1\":{\"498\":6}}],[\"locationelem\",{\"1\":{\"506\":1}}],[\"location\",{\"1\":{\"162\":1,\"214\":1}}],[\"localhost\",{\"1\":{\"276\":1,\"437\":1}}],[\"local\",{\"1\":{\"155\":2,\"156\":8,\"364\":7}}],[\"locale=zh\",{\"1\":{\"99\":1}}],[\"lock\",{\"1\":{\"148\":1,\"200\":1,\"371\":1}}],[\"love\",{\"1\":{\"2\":1}}],[\"后根遍历\",{\"1\":{\"603\":1}}],[\"后缀表达式的运算符在操作数后面\",{\"1\":{\"563\":1}}],[\"后缀代替成了\",{\"1\":{\"171\":1}}],[\"后端进的元素在队列前端进的后面\",{\"1\":{\"559\":1}}],[\"后继指针\",{\"1\":{\"519\":1}}],[\"后面\",{\"1\":{\"320\":1}}],[\"后面的的三个部分分别是正则\",{\"1\":{\"171\":1}}],[\"后来又出现了模块化拆分和服务化拆分的方案\",{\"1\":{\"420\":1}}],[\"后来又来了个安逸公司\",{\"1\":{\"4\":1}}],[\"后来搜索后发现\",{\"1\":{\"280\":1}}],[\"后来我才知道这个东西叫\",{\"1\":{\"266\":1}}],[\"后来到了正式一些的公司之后\",{\"1\":{\"239\":1}}],[\"后使用\",{\"1\":{\"220\":1}}],[\"后\",{\"1\":{\"208\":1,\"305\":1,\"405\":1}}],[\"后台运行\",{\"1\":{\"190\":3}}],[\"后台运行命令\",{\"0\":{\"190\":1}}],[\"后段开发者难免需要经常和服务器打交道\",{\"1\":{\"186\":1}}],[\"后还可以追加一些状态\",{\"1\":{\"165\":1}}],[\"后几章能够满足中高阶用户深入了解的需求\",{\"1\":{\"99\":1}}],[\"章的学习就已经可以应付日常的开发场景了\",{\"1\":{\"99\":1}}],[\"35\",{\"1\":{\"483\":1}}],[\"30\",{\"1\":{\"301\":2}}],[\"3m\",{\"1\":{\"280\":1}}],[\"37\",{\"1\":{\"229\":4}}],[\"3\",{\"0\":{\"275\":1},\"1\":{\"99\":1,\"256\":1,\"280\":1,\"298\":2,\"300\":8,\"301\":2,\"309\":1,\"310\":1,\"311\":10,\"317\":1,\"320\":2,\"331\":3,\"364\":1,\"373\":1,\"391\":3,\"502\":2,\"560\":9}}],[\"零基础的初学者可以通过前\",{\"1\":{\"99\":1}}],[\"最多只和上一层的一个结点有直接关系\",{\"1\":{\"585\":1}}],[\"最简单直观的直接插入排序就是假设从第一位开始已经排好顺序\",{\"1\":{\"489\":1}}],[\"最小\",{\"1\":{\"481\":1}}],[\"最小和分割\",{\"0\":{\"480\":1}}],[\"最小系统的\",{\"1\":{\"183\":1}}],[\"最常用的写法就像下面这样\",{\"1\":{\"405\":1}}],[\"最重要的是\",{\"1\":{\"329\":1}}],[\"最终\",{\"1\":{\"329\":1}}],[\"最终导致软件系统的可维护性和可扩展性越来越差\",{\"1\":{\"139\":1}}],[\"最初是为了探索\",{\"1\":{\"329\":1}}],[\"最强大的专业级css扩展语言\",{\"1\":{\"325\":1}}],[\"最稳定\",{\"1\":{\"325\":1}}],[\"最大的用法是用来定义对象的唯一属性名\",{\"1\":{\"302\":1}}],[\"最大线程数\",{\"1\":{\"207\":1}}],[\"最近公司开始要求对客户信息的保密性进行加强\",{\"1\":{\"225\":1}}],[\"最经典的切面应用场景\",{\"1\":{\"224\":1}}],[\"最根本的原因还是为了多环境和多实例的支持\",{\"1\":{\"213\":1}}],[\"最少连接数访问\",{\"1\":{\"167\":1}}],[\"最后找到需要的单词\",{\"1\":{\"455\":1}}],[\"最后唤醒暂停的线程\",{\"1\":{\"373\":1}}],[\"最后一次更新还是在2015年10月\",{\"1\":{\"266\":1}}],[\"最后执行验证\",{\"1\":{\"246\":1}}],[\"最后\",{\"1\":{\"135\":1,\"387\":1,\"459\":1}}],[\"最后还附带了\",{\"1\":{\"99\":1}}],[\"最好用的还是\",{\"1\":{\"111\":1}}],[\"最好的学习方式就是在平时阅读和开发的时候\",{\"1\":{\"101\":1}}],[\"最高级\",{\"0\":{\"56\":1}}],[\"分配给新的队首请求的用户使用\",{\"1\":{\"566\":1}}],[\"分配给队首请求的用户使用\",{\"1\":{\"566\":1}}],[\"分别指向了前驱和后继结点\",{\"1\":{\"519\":1}}],[\"分别是块层\",{\"1\":{\"324\":1}}],[\"分别是2017\",{\"1\":{\"291\":1}}],[\"分别是在\",{\"1\":{\"225\":1}}],[\"分为上三角矩阵和下三角矩阵\",{\"1\":{\"501\":1}}],[\"分为导出\",{\"1\":{\"318\":1}}],[\"分割成\",{\"1\":{\"483\":2}}],[\"分块查找的过程分为两步\",{\"1\":{\"465\":1}}],[\"分块查找的基本思想\",{\"1\":{\"465\":1}}],[\"分块查找又称为索引顺序查找\",{\"1\":{\"465\":1}}],[\"分块查找\",{\"0\":{\"465\":1}}],[\"分隔元素名称和修饰符\",{\"1\":{\"324\":1}}],[\"分隔\",{\"1\":{\"294\":1}}],[\"分享出来和大家一起探讨和交流\",{\"1\":{\"291\":1}}],[\"分支源头都develop分支创建\",{\"1\":{\"289\":1}}],[\"分支的\",{\"1\":{\"289\":1}}],[\"分支的pull\",{\"1\":{\"289\":2}}],[\"分支开发\",{\"1\":{\"289\":1}}],[\"分支上准备上线介质\",{\"1\":{\"289\":1}}],[\"分支上更改\",{\"1\":{\"289\":1}}],[\"分支到\",{\"1\":{\"289\":1}}],[\"分支进行开发\",{\"1\":{\"289\":2}}],[\"分支创建的\",{\"1\":{\"289\":1}}],[\"分支创建\",{\"1\":{\"289\":1}}],[\"分支\",{\"1\":{\"287\":1,\"289\":8}}],[\"分支搞错了\",{\"1\":{\"181\":1}}],[\"分支特性\",{\"1\":{\"99\":1}}],[\"分类和\",{\"1\":{\"130\":1}}],[\"分布式系统和跨服务的场景变得更加常见\",{\"1\":{\"448\":1}}],[\"分布式系统的管理和监控等\",{\"1\":{\"420\":1}}],[\"分布式的认证机制\",{\"1\":{\"293\":1}}],[\"分布式锁\",{\"1\":{\"200\":1}}],[\"分布式计算框架\",{\"1\":{\"121\":1}}],[\"分布式工作流程\",{\"1\":{\"99\":1}}],[\"分布式风格的\",{\"1\":{\"98\":1}}],[\"ps\",{\"1\":{\"364\":1}}],[\"plugins\",{\"1\":{\"364\":4}}],[\"pc\",{\"1\":{\"361\":1}}],[\"p\",{\"1\":{\"301\":6,\"319\":1}}],[\"pinia\",{\"0\":{\"328\":1,\"329\":1},\"1\":{\"329\":3}}],[\"pi\",{\"1\":{\"298\":2}}],[\"pid\",{\"1\":{\"156\":1}}],[\"pidfile=\",{\"1\":{\"156\":1}}],[\"push\",{\"1\":{\"569\":1}}],[\"put\",{\"1\":{\"413\":1}}],[\"pull\",{\"1\":{\"289\":2}}],[\"pub\",{\"1\":{\"200\":1}}],[\"publishevent\",{\"1\":{\"135\":2}}],[\"publisher\",{\"1\":{\"134\":8,\"135\":1}}],[\"publish\",{\"1\":{\"134\":3,\"135\":1}}],[\"public方法\",{\"1\":{\"245\":2}}],[\"public\",{\"1\":{\"130\":15,\"134\":9,\"135\":7,\"202\":2,\"224\":7,\"225\":6,\"244\":1,\"245\":1,\"280\":3,\"294\":1,\"388\":11,\"391\":6,\"394\":2,\"485\":1,\"511\":3,\"519\":4,\"593\":2}}],[\"pending\",{\"1\":{\"319\":3}}],[\"person1\",{\"1\":{\"316\":2}}],[\"person\",{\"1\":{\"316\":2}}],[\"permanent\",{\"1\":{\"171\":1}}],[\"peek\",{\"1\":{\"229\":1}}],[\"pjp\",{\"1\":{\"224\":8,\"225\":2}}],[\"pop\",{\"1\":{\"569\":1}}],[\"post\",{\"1\":{\"413\":1,\"415\":2}}],[\"postman\",{\"1\":{\"266\":1}}],[\"powermock\",{\"0\":{\"261\":1},\"1\":{\"246\":2}}],[\"pointcut\",{\"1\":{\"224\":3,\"225\":2}}],[\"ports\",{\"1\":{\"364\":1}}],[\"port\",{\"1\":{\"153\":1}}],[\"pnpm\",{\"1\":{\"148\":3}}],[\"prd\",{\"1\":{\"282\":1}}],[\"prefix=\",{\"1\":{\"155\":1}}],[\"presentation\",{\"1\":{\"145\":1}}],[\"prior\",{\"1\":{\"519\":3}}],[\"pricevalue\",{\"1\":{\"229\":4}}],[\"price\",{\"1\":{\"229\":8,\"236\":1}}],[\"pricelist\",{\"1\":{\"229\":2}}],[\"pricemultiply100\",{\"1\":{\"229\":1}}],[\"printlist\",{\"1\":{\"506\":1}}],[\"println\",{\"1\":{\"134\":1,\"135\":1,\"388\":6,\"391\":3,\"394\":5,\"397\":2,\"405\":3}}],[\"printargs\",{\"1\":{\"224\":5}}],[\"privatetmp=true\",{\"1\":{\"156\":1}}],[\"private\",{\"1\":{\"130\":3,\"134\":2,\"135\":2,\"224\":4,\"225\":6,\"229\":1,\"280\":1,\"294\":1,\"388\":1}}],[\"problems\",{\"0\":{\"612\":1}}],[\"project\",{\"0\":{\"605\":1}}],[\"project>\",{\"1\":{\"217\":1}}],[\"provide\",{\"1\":{\"357\":1}}],[\"promise\",{\"0\":{\"319\":1},\"1\":{\"319\":9}}],[\"profile\",{\"1\":{\"237\":1}}],[\"profile结尾的环境变量文件\",{\"1\":{\"237\":1}}],[\"proceed\",{\"1\":{\"224\":1,\"225\":1}}],[\"proceedingjoinpoint\",{\"1\":{\"224\":2,\"225\":2}}],[\"propertysource<\",{\"1\":{\"280\":1}}],[\"propertysource\",{\"1\":{\"280\":2}}],[\"propertyplaceholderconfigurer\",{\"1\":{\"214\":1}}],[\"propertiespropertysource\",{\"1\":{\"280\":1}}],[\"properties\",{\"1\":{\"213\":1,\"214\":5,\"280\":1}}],[\"proxy类实现\",{\"1\":{\"385\":1}}],[\"proxy\",{\"0\":{\"312\":1,\"313\":1},\"1\":{\"162\":1,\"164\":1,\"313\":4,\"314\":1,\"315\":4,\"384\":1,\"387\":1,\"388\":7,\"391\":7}}],[\"pro\",{\"0\":{\"99\":1},\"1\":{\"99\":1}}],[\"phonenumber\",{\"1\":{\"225\":3}}],[\"phone\",{\"1\":{\"130\":1}}],[\"ppt\",{\"1\":{\"113\":1}}],[\"pdf\",{\"1\":{\"113\":1}}],[\"path\",{\"1\":{\"364\":1}}],[\"pattern\",{\"1\":{\"124\":1}}],[\"patterns\",{\"0\":{\"101\":1},\"1\":{\"101\":2}}],[\"payload\",{\"1\":{\"294\":2}}],[\"pagenum=2\",{\"1\":{\"171\":1}}],[\"pages\",{\"1\":{\"105\":1}}],[\"pass\",{\"1\":{\"162\":1,\"164\":1}}],[\"password\",{\"1\":{\"130\":1}}],[\"parent\",{\"1\":{\"280\":1}}],[\"parse\",{\"1\":{\"219\":1}}],[\"parcel\",{\"1\":{\"148\":1}}],[\"param\",{\"1\":{\"130\":4,\"511\":1,\"519\":1,\"593\":1}}],[\"python\",{\"1\":{\"95\":1}}],[\"更多的是一种逻辑思想\",{\"1\":{\"455\":1}}],[\"更多的细节详见官网\",{\"1\":{\"327\":1}}],[\"更是如鱼得水\",{\"1\":{\"453\":1}}],[\"更是如虎添翼\",{\"1\":{\"362\":1}}],[\"更可扩展的解决方案\",{\"1\":{\"420\":1}}],[\"更稳定\",{\"1\":{\"420\":1}}],[\"更像面向对象编程的语法\",{\"1\":{\"317\":1}}],[\"更像\",{\"1\":{\"297\":1}}],[\"更像是建立在可互操作的分布式应用程序的新平台\",{\"1\":{\"267\":1}}],[\"更不允许被删除\",{\"1\":{\"284\":1}}],[\"更新和维护\",{\"1\":{\"241\":1}}],[\"更胜一筹\",{\"1\":{\"148\":1}}],[\"更适合多人协作开发使用\",{\"1\":{\"98\":1}}],[\"更能在一些函数和表的组合方面体现你对数据管理的天赋\",{\"1\":{\"93\":1}}],[\"五年前推荐\",{\"1\":{\"96\":1}}],[\"你会做的更好\",{\"1\":{\"419\":1}}],[\"你会慢慢发现\",{\"1\":{\"419\":1}}],[\"你也能做\",{\"1\":{\"419\":1}}],[\"你要是不会\",{\"1\":{\"419\":1}}],[\"你要是没有个\",{\"1\":{\"419\":1}}],[\"你要是还去看这本\",{\"1\":{\"96\":1}}],[\"你可以避免在代码中使用\",{\"1\":{\"395\":1}}],[\"你可以在方法调用前后测量和监控方法的性能指标\",{\"1\":{\"392\":1}}],[\"你可以在该方法中添加适当的逻辑来丰富目标功能\",{\"1\":{\"390\":1}}],[\"你可以添加安全控制的逻辑\",{\"1\":{\"392\":1}}],[\"你可以添加事务管理的逻辑\",{\"1\":{\"392\":1}}],[\"你可以添加缓存管理的逻辑\",{\"1\":{\"392\":1}}],[\"你可以添加性能监控的逻辑\",{\"1\":{\"392\":1}}],[\"你可以添加日志记录的逻辑\",{\"1\":{\"392\":1}}],[\"你可以定义在目标方法执行前后需要执行的逻辑\",{\"1\":{\"388\":1}}],[\"你可以通过同时提供\",{\"1\":{\"351\":1}}],[\"你可以将\",{\"1\":{\"347\":1}}],[\"你好\",{\"1\":{\"342\":1}}],[\"你和其他人一起开发四月十三日上线的任务\",{\"1\":{\"289\":1}}],[\"你的测试类还是很难保证你的代码所有逻辑分支都可以覆盖的到\",{\"1\":{\"239\":1}}],[\"你发任你发\",{\"1\":{\"96\":1}}],[\"历史典籍\",{\"1\":{\"96\":1}}],[\"都要求能唯一的反应树中各个节点之间的逻辑关系\",{\"1\":{\"598\":1}}],[\"都有直接关系\",{\"1\":{\"585\":1}}],[\"都是在保证了所有元素都入队的情况下再出队的\",{\"1\":{\"560\":1}}],[\"都是最实用的语法\",{\"1\":{\"94\":1}}],[\"都做到尽量小的相同\",{\"1\":{\"484\":1}}],[\"都做到尽量的小\",{\"1\":{\"484\":1}}],[\"都起不来\",{\"1\":{\"419\":1}}],[\"都说\",{\"1\":{\"371\":1}}],[\"都可以作为一个键或一个值\",{\"1\":{\"307\":1}}],[\"都带有解析\",{\"1\":{\"277\":1}}],[\"都不一样\",{\"1\":{\"229\":1}}],[\"都已经问世了\",{\"1\":{\"96\":1}}],[\"j互为堂兄弟\",{\"1\":{\"586\":1}}],[\"j|\",{\"1\":{\"502\":1}}],[\"jmm\",{\"1\":{\"379\":2,\"380\":2}}],[\"jmock\",{\"1\":{\"246\":2}}],[\"j++\",{\"1\":{\"298\":1}}],[\"j\",{\"1\":{\"298\":3,\"498\":5,\"500\":6,\"501\":8,\"502\":5,\"544\":1}}],[\"john\",{\"1\":{\"294\":1,\"388\":2}}],[\"joinpoint\",{\"1\":{\"225\":2}}],[\"jwt\",{\"0\":{\"447\":1},\"1\":{\"293\":1,\"294\":6,\"448\":2}}],[\"junit\",{\"1\":{\"239\":2}}],[\"jpyrmb\",{\"1\":{\"229\":1}}],[\"jpmrmb\",{\"1\":{\"229\":2}}],[\"jvm\",{\"1\":{\"181\":2,\"370\":1,\"371\":1,\"372\":1,\"374\":2,\"411\":1}}],[\"jaxm\",{\"1\":{\"271\":1}}],[\"jax\",{\"1\":{\"271\":7}}],[\"jacoco\",{\"1\":{\"239\":1}}],[\"jar>标签来实现的\",{\"1\":{\"217\":1}}],[\"jar>\",{\"1\":{\"217\":1}}],[\"jar\",{\"1\":{\"181\":1,\"202\":1,\"217\":3,\"225\":1}}],[\"java也有deque来实现双端队列\",{\"1\":{\"559\":1}}],[\"javabean\",{\"1\":{\"419\":1}}],[\"javaweb\",{\"1\":{\"419\":1}}],[\"java语言中\",{\"1\":{\"238\":1}}],[\"javascript\",{\"1\":{\"148\":5,\"297\":1,\"327\":2,\"347\":1,\"348\":1}}],[\"java举例\",{\"1\":{\"133\":1}}],[\"java8\",{\"1\":{\"96\":1}}],[\"java基础\",{\"0\":{\"96\":1}}],[\"java\",{\"0\":{\"95\":1,\"291\":1,\"370\":1,\"378\":1,\"393\":1,\"618\":1},\"1\":{\"95\":5,\"96\":6,\"117\":1,\"121\":1,\"133\":1,\"134\":5,\"202\":2,\"204\":1,\"207\":1,\"217\":2,\"222\":1,\"227\":1,\"238\":1,\"271\":3,\"272\":1,\"278\":1,\"291\":3,\"297\":1,\"364\":4,\"370\":3,\"371\":3,\"372\":1,\"376\":1,\"377\":1,\"378\":1,\"379\":4,\"380\":1,\"384\":1,\"388\":4,\"391\":1,\"394\":1,\"395\":1,\"409\":1,\"439\":1,\"504\":1,\"553\":1,\"567\":1,\"584\":1}}],[\"jerry\",{\"1\":{\"315\":2}}],[\"jenkins\",{\"0\":{\"363\":1},\"1\":{\"179\":1,\"362\":3,\"364\":19}}],[\"jessionid\",{\"0\":{\"177\":1}}],[\"jetbrains\",{\"1\":{\"115\":1}}],[\"json\",{\"0\":{\"292\":1},\"1\":{\"224\":1,\"266\":2,\"271\":1,\"293\":1,\"294\":1,\"448\":2}}],[\"jsp\",{\"1\":{\"171\":1}}],[\"js\",{\"1\":{\"99\":1,\"148\":4,\"297\":1,\"318\":2,\"327\":1,\"332\":1,\"346\":2}}],[\"jdk1\",{\"1\":{\"376\":1}}],[\"jdk17\",{\"1\":{\"96\":1}}],[\"jdk\",{\"0\":{\"276\":1},\"1\":{\"271\":1,\"272\":2,\"364\":1,\"372\":1,\"382\":1}}],[\"jdk版\",{\"0\":{\"134\":1}}],[\"jdk20\",{\"1\":{\"96\":1}}],[\"jdk6\",{\"1\":{\"96\":1}}],[\"据现在已经过去16个年头了\",{\"1\":{\"96\":1}}],[\"了解锁我们得先知道什么是锁\",{\"1\":{\"372\":1}}],[\"了解了这三个元素是什么我们就可以知道\",{\"1\":{\"270\":1}}],[\"了\",{\"1\":{\"96\":1,\"297\":1,\"372\":1,\"419\":1}}],[\"是串名\",{\"1\":{\"573\":1}}],[\"是只允许在一端进行插入或删除操作的线性表\",{\"1\":{\"568\":1}}],[\"是指用一个一维数组存储图中顶点的信息\",{\"1\":{\"544\":1}}],[\"是指在排序期间元素无法全部同时存放在内存中\",{\"1\":{\"487\":1}}],[\"是指在排序期间元素全部存放在内存中的排序\",{\"1\":{\"487\":1}}],[\"是每个数组元素所占的存储单元\",{\"1\":{\"498\":1}}],[\"是描述客观事物属性的数\",{\"1\":{\"492\":1}}],[\"是叶结点\",{\"1\":{\"470\":1}}],[\"是更好的选择\",{\"1\":{\"428\":1}}],[\"是基于\",{\"1\":{\"423\":1}}],[\"是啊\",{\"1\":{\"419\":1}}],[\"是运行在\",{\"1\":{\"409\":1}}],[\"是什么\",{\"0\":{\"409\":1},\"1\":{\"448\":2}}],[\"是普通实例方法\",{\"1\":{\"394\":1}}],[\"是轻量的\",{\"1\":{\"371\":1}}],[\"是虚拟\",{\"1\":{\"346\":1}}],[\"是定义函数时的对象\",{\"1\":{\"316\":1}}],[\"是对应的\",{\"1\":{\"314\":1}}],[\"是对类中每个方法提供一个或多个测试的一种实践\",{\"1\":{\"238\":1}}],[\"是非字符串类型\",{\"1\":{\"304\":1}}],[\"是\",{\"1\":{\"297\":1,\"327\":1,\"362\":1}}],[\"是我们最经常交互的分支\",{\"1\":{\"284\":1}}],[\"是支持分支的\",{\"1\":{\"282\":1}}],[\"是用于构建\",{\"1\":{\"271\":2}}],[\"是交换数据的一种协议规范\",{\"1\":{\"270\":1}}],[\"是先执行\",{\"1\":{\"225\":1}}],[\"是否为空\",{\"0\":{\"397\":1}}],[\"是否需要mock函数\",{\"1\":{\"245\":1}}],[\"是否需要打印出参\",{\"1\":{\"224\":1}}],[\"是否需要打印入参\",{\"1\":{\"224\":1}}],[\"是否有一个全局视角来查看系统的运行状况\",{\"1\":{\"181\":1}}],[\"是相对简单的\",{\"1\":{\"222\":1}}],[\"是作为运维工程师及后端开发人员都应该了解的技术\",{\"1\":{\"182\":1}}],[\"是阿里提供的一款线上监控诊断产品\",{\"1\":{\"181\":1}}],[\"是在测试过程中对于一些不容易构造获取的对象\",{\"1\":{\"246\":1}}],[\"是在\",{\"1\":{\"175\":1}}],[\"是因为它在多线程处理中过程中保证了共享变量的可见性\",{\"1\":{\"371\":1}}],[\"是因为新版本增加了一个安全入口登录的限制\",{\"1\":{\"153\":1}}],[\"是因为这本书确实细\",{\"1\":{\"96\":1}}],[\"是最小和\",{\"1\":{\"483\":1}}],[\"是最广泛的mock框架\",{\"1\":{\"246\":1}}],[\"是最流行的打包工具\",{\"1\":{\"148\":1}}],[\"是最早也是使用最为广泛的包管理工具\",{\"1\":{\"148\":1}}],[\"是由\",{\"1\":{\"148\":1,\"411\":1}}],[\"是一套标准\",{\"1\":{\"267\":1}}],[\"是一个同时带有队头指针和队尾指针的单链表\",{\"1\":{\"558\":1}}],[\"是一个平台\",{\"1\":{\"267\":1}}],[\"是一个开源的内存数据结构存储\",{\"1\":{\"198\":1}}],[\"是一个开源的分布式计算和存储框架\",{\"1\":{\"121\":1}}],[\"是一种授权框架\",{\"1\":{\"451\":1}}],[\"是一种轻量的\",{\"1\":{\"270\":1}}],[\"是一种规范\",{\"1\":{\"267\":1}}],[\"是一种编程范式\",{\"1\":{\"222\":1}}],[\"是一种由\",{\"1\":{\"139\":1}}],[\"是一种思想\",{\"1\":{\"139\":1,\"222\":1}}],[\"是一种软件设计方法\",{\"1\":{\"139\":1}}],[\"是事件的接收者和处理者\",{\"1\":{\"135\":1}}],[\"是第一次使用设计模式就好了\",{\"1\":{\"122\":1}}],[\"是第一次使用多线程就好了\",{\"1\":{\"122\":1}}],[\"是第一次写强逻辑的代码就好了\",{\"1\":{\"122\":1}}],[\"是第一次写\",{\"1\":{\"122\":1}}],[\"是第一次执行\",{\"1\":{\"122\":1}}],[\"是第一次控制台输入输出就好了\",{\"1\":{\"122\":1}}],[\"是写下第一行\",{\"1\":{\"122\":1}}],[\"是这个系列有一本重量级作品\",{\"1\":{\"92\":1}}],[\"tm\",{\"1\":{\"585\":1}}],[\"t3\",{\"1\":{\"585\":1}}],[\"t2\",{\"1\":{\"585\":1}}],[\"t1\",{\"1\":{\"585\":1}}],[\"txt\",{\"1\":{\"364\":3}}],[\"ts\",{\"1\":{\"327\":1,\"340\":1,\"341\":1,\"342\":1,\"343\":1,\"344\":1,\"345\":1}}],[\"two\",{\"1\":{\"309\":1,\"320\":2,\"345\":1}}],[\"typ\",{\"1\":{\"294\":2}}],[\"type=\",{\"1\":{\"344\":1}}],[\"type=forking\",{\"1\":{\"156\":1}}],[\"typeflag\",{\"1\":{\"340\":4}}],[\"typeof\",{\"1\":{\"302\":1}}],[\"typescript\",{\"0\":{\"326\":1},\"1\":{\"148\":3,\"327\":4,\"329\":1}}],[\"type\",{\"1\":{\"130\":1,\"224\":1,\"236\":2,\"237\":1}}],[\"techniques\",{\"0\":{\"606\":1}}],[\"template>\",{\"1\":{\"332\":1,\"334\":1,\"335\":1,\"336\":1,\"338\":1,\"339\":1,\"340\":1,\"341\":1,\"342\":1,\"343\":1,\"344\":1,\"345\":1}}],[\"teleport\",{\"1\":{\"331\":1}}],[\"telegraph\",{\"1\":{\"105\":2}}],[\"text=\",{\"1\":{\"338\":1}}],[\"text\",{\"0\":{\"338\":1},\"1\":{\"310\":3,\"344\":1}}],[\"tenor\",{\"1\":{\"280\":2}}],[\"test1\",{\"1\":{\"317\":3}}],[\"testng\",{\"1\":{\"250\":1}}],[\"testreturnvoaspect\",{\"1\":{\"225\":1}}],[\"testreturnvo\",{\"1\":{\"225\":2}}],[\"test\",{\"1\":{\"225\":1,\"244\":1,\"318\":1}}],[\"tag\",{\"1\":{\"557\":1}}],[\"task\",{\"1\":{\"217\":1}}],[\"take\",{\"1\":{\"209\":1}}],[\"tare\",{\"1\":{\"280\":1}}],[\"tar\",{\"1\":{\"193\":9}}],[\"targetmethod\",{\"1\":{\"224\":2}}],[\"target=\",{\"1\":{\"220\":1}}],[\"target>标签中的任务\",{\"1\":{\"217\":1}}],[\"target>\",{\"1\":{\"217\":3,\"219\":1,\"220\":2}}],[\"target\",{\"1\":{\"156\":4,\"217\":1,\"220\":2,\"224\":1,\"236\":1,\"313\":6,\"315\":4,\"388\":5}}],[\"times\",{\"0\":{\"255\":1},\"1\":{\"255\":1}}],[\"timely\",{\"1\":{\"241\":1}}],[\"time\",{\"1\":{\"200\":1}}],[\"transition\",{\"1\":{\"356\":1}}],[\"transactional\",{\"1\":{\"130\":1}}],[\"tree\",{\"1\":{\"346\":4}}],[\"try\",{\"1\":{\"224\":2,\"229\":2}}],[\"trueflag\",{\"1\":{\"341\":2}}],[\"true\",{\"1\":{\"224\":2,\"229\":1,\"294\":1,\"305\":1,\"320\":2,\"341\":1,\"352\":1}}],[\"triggerref\",{\"1\":{\"348\":2}}],[\"trigger\",{\"1\":{\"136\":1}}],[\"thenreturn\",{\"0\":{\"253\":1},\"1\":{\"253\":1}}],[\"then\",{\"1\":{\"236\":2,\"237\":4,\"319\":7}}],[\"three\",{\"1\":{\"309\":2,\"320\":2,\"345\":1}}],[\"threadpooltaskexecutor\",{\"1\":{\"207\":1}}],[\"thread\",{\"1\":{\"202\":1}}],[\"throwable\",{\"1\":{\"224\":1,\"225\":1,\"388\":1,\"391\":1}}],[\"throws\",{\"1\":{\"202\":1,\"224\":1,\"225\":1,\"280\":1,\"388\":1,\"391\":1}}],[\"throw\",{\"1\":{\"130\":10}}],[\"this\",{\"1\":{\"134\":1,\"135\":2,\"314\":2,\"316\":3,\"317\":9,\"388\":1,\"511\":2,\"519\":3,\"593\":1}}],[\"thinking\",{\"1\":{\"96\":2}}],[\"t\",{\"0\":{\"252\":1},\"1\":{\"130\":2,\"156\":1,\"188\":1,\"458\":3,\"503\":2,\"511\":2,\"519\":2}}],[\"top1\",{\"1\":{\"571\":1}}],[\"topic\",{\"1\":{\"284\":1}}],[\"tochararray\",{\"1\":{\"485\":1}}],[\"touppercase\",{\"1\":{\"402\":1}}],[\"toref\",{\"0\":{\"350\":1}}],[\"tom\",{\"1\":{\"313\":1,\"314\":2,\"315\":1,\"318\":3}}],[\"tomcat\",{\"1\":{\"202\":11,\"419\":1}}],[\"tostring\",{\"1\":{\"280\":1,\"485\":1}}],[\"tools\",{\"0\":{\"607\":1,\"614\":1},\"1\":{\"277\":1}}],[\"todir\",{\"1\":{\"276\":1}}],[\"tojsonstring\",{\"1\":{\"224\":1}}],[\"tolist\",{\"1\":{\"130\":1,\"229\":1}}],[\"token作为一种更轻量级\",{\"1\":{\"293\":1}}],[\"tokens\",{\"0\":{\"292\":1}}],[\"token\",{\"1\":{\"111\":1,\"293\":4,\"294\":1,\"448\":7,\"451\":1}}],[\"to\",{\"0\":{\"47\":1},\"1\":{\"236\":2,\"315\":1,\"364\":1}}],[\"要确定图中有多少条边\",{\"1\":{\"544\":1}}],[\"要保证任意结点的左右子树高度差的绝对值不超过\",{\"1\":{\"472\":1}}],[\"要实现动态性\",{\"1\":{\"426\":1}}],[\"要求目标对象实现一个或多个接口\",{\"1\":{\"385\":1}}],[\"要做的就是新旧两棵\",{\"1\":{\"346\":1}}],[\"要注意\",{\"1\":{\"317\":1,\"348\":1}}],[\"要是用方括号获取其对应的属性值\",{\"1\":{\"304\":1}}],[\"要是现在推荐\",{\"1\":{\"96\":1}}],[\"要说\",{\"1\":{\"291\":1}}],[\"要知道计算机不比其他行业\",{\"1\":{\"96\":1}}],[\"要不然也不会到现在才后悔莫及\",{\"1\":{\"91\":1}}],[\"社区的活跃程度和所包含的业务领域依然是领先的地位\",{\"1\":{\"95\":1}}],[\"和右指针域\",{\"1\":{\"593\":1}}],[\"和为最优值\",{\"1\":{\"483\":1}}],[\"和为\",{\"1\":{\"483\":1}}],[\"和自动化部署工具的出现\",{\"1\":{\"420\":1}}],[\"和缓存参数\",{\"1\":{\"409\":1}}],[\"和静态方法\",{\"1\":{\"394\":1}}],[\"和原子操作\",{\"1\":{\"377\":1}}],[\"和defineslots\",{\"1\":{\"354\":1}}],[\"和从\",{\"1\":{\"319\":1}}],[\"和其他数据的声明\",{\"1\":{\"294\":1}}],[\"和其对应的网址是否正确\",{\"1\":{\"172\":1}}],[\"和所使用的签名算法\",{\"1\":{\"294\":1}}],[\"和依赖注入框架\",{\"1\":{\"250\":1}}],[\"和反射\",{\"1\":{\"227\":1}}],[\"和一些日志\",{\"1\":{\"222\":1}}],[\"和计数器\",{\"1\":{\"200\":1}}],[\"和aof\",{\"1\":{\"199\":1}}],[\"和观察者对象\",{\"1\":{\"132\":1}}],[\"和我们平时使用本地文件的习惯非常相近\",{\"1\":{\"98\":1}}],[\"和\",{\"0\":{\"329\":1,\"331\":1,\"346\":1},\"1\":{\"95\":1,\"105\":1,\"113\":1,\"121\":1,\"148\":3,\"155\":1,\"158\":1,\"165\":1,\"217\":1,\"222\":2,\"225\":1,\"289\":1,\"302\":1,\"319\":2,\"323\":1,\"324\":1,\"340\":1,\"346\":1,\"347\":2,\"348\":1,\"351\":1,\"362\":1,\"364\":1,\"370\":1,\"372\":2,\"388\":1,\"423\":1,\"428\":1,\"430\":2,\"453\":1,\"481\":5,\"482\":1,\"483\":2,\"484\":2,\"519\":1,\"560\":2}}],[\"和数据库进行交互也是程序员必备的技能\",{\"1\":{\"93\":1}}],[\"当且仅当每个结点都与高度为h的满二叉树中编号为1～n的结点一一对应称为完全二叉树\",{\"1\":{\"589\":1}}],[\"当两个串的长度相等且每个对应对应位置的元素都相等时\",{\"1\":{\"573\":1}}],[\"当对应的程序运行结束或用完规定的时间间隔\",{\"1\":{\"566\":1}}],[\"当算法结束时\",{\"1\":{\"562\":1}}],[\"当队首或队尾指针到\",{\"1\":{\"557\":1}}],[\"当e是有向边\",{\"1\":{\"529\":1}}],[\"当前节点的值\",{\"1\":{\"511\":1,\"519\":1}}],[\"当前看到的却是\",{\"1\":{\"455\":1}}],[\"当\",{\"1\":{\"502\":1,\"585\":2}}],[\"当在下三角区\",{\"1\":{\"500\":1}}],[\"当树中不存在关键字值等于给定值时在进行插入的\",{\"1\":{\"469\":1}}],[\"当与服务注册中心配合使用时\",{\"1\":{\"430\":1}}],[\"当用户调用一个\",{\"1\":{\"412\":1}}],[\"当调用代理对象的方法时\",{\"1\":{\"390\":1}}],[\"当需要访问对象时才进行实例化\",{\"1\":{\"384\":1}}],[\"当锁处于这个状态下\",{\"1\":{\"374\":1}}],[\"当竞争出现的时候\",{\"1\":{\"373\":1}}],[\"当发现自己的缓存行地址被修改的时候\",{\"1\":{\"371\":1}}],[\"当组件从\",{\"1\":{\"353\":2}}],[\"当组件被插入到\",{\"1\":{\"353\":2}}],[\"当组件渲染过程中追踪到响应式依赖时调用\",{\"1\":{\"353\":1}}],[\"当响应式依赖的变更触发了组件渲染时调用\",{\"1\":{\"353\":1}}],[\"当将复杂的逻辑重构为可重用的代码时\",{\"1\":{\"347\":1}}],[\"当数据发生改变时\",{\"1\":{\"346\":1}}],[\"当数据库中的数据发生变化时\",{\"1\":{\"136\":1}}],[\"当问题修复完成后\",{\"1\":{\"284\":1}}],[\"当一个图是稀疏图的时候\",{\"1\":{\"545\":1}}],[\"当一个线程获取轻量级锁时\",{\"1\":{\"374\":1}}],[\"当一个线程访问同步块并获取锁的时候\",{\"1\":{\"373\":1}}],[\"当一个线程试图访问同步代码块的时候\",{\"1\":{\"372\":1}}],[\"当一个\",{\"1\":{\"347\":1}}],[\"当一个组件首次渲染时\",{\"1\":{\"347\":1}}],[\"当一个对象的状态发生变化时\",{\"1\":{\"136\":1}}],[\"当一份材料被审核人抽取到转为审核中的时候\",{\"1\":{\"233\":1}}],[\"当他在和我讨论这个实现的时候和我说了一下他的思路\",{\"1\":{\"225\":1}}],[\"当我第二份工作的时候\",{\"1\":{\"419\":1}}],[\"当我第一次接触spring框架的时候\",{\"1\":{\"222\":1}}],[\"当我入职当前公司的时候\",{\"1\":{\"362\":1}}],[\"当我步入开发的第一个项目就已经用上了\",{\"1\":{\"293\":1}}],[\"当我们遇到以上这些情况的时候怎么知道这是在使用动态代理呢\",{\"1\":{\"384\":1}}],[\"当我们使用\",{\"1\":{\"352\":1}}],[\"当我们决定迁移到\",{\"1\":{\"282\":1}}],[\"当我们用读取配置文件的方式\",{\"1\":{\"280\":1}}],[\"当我们全部将\",{\"1\":{\"214\":1}}],[\"当我了解到这本书的时候就已经是第二版了\",{\"1\":{\"99\":1}}],[\"当总价格队列根据价格类型和币种存储将价格分发到后台队列中时\",{\"1\":{\"209\":1}}],[\"当每条价格发送线程启动后执行计数器减一的操作\",{\"1\":{\"207\":1}}],[\"当你需要对一个可能为空的值进行操作时\",{\"1\":{\"395\":1}}],[\"当你需要返回一个可能为空的值时\",{\"1\":{\"395\":1}}],[\"当你不确定一个值是否存在时\",{\"1\":{\"395\":1}}],[\"当你在模板中使用了一个\",{\"1\":{\"347\":1}}],[\"当你一些端口一类的变量需要其他类型的时候\",{\"1\":{\"214\":1}}],[\"当你遇到以下类似问题而束手无策时\",{\"1\":{\"181\":1}}],[\"当你脱离了你目前的项目之后你会发现你并不会有自己的对项目的整体把握和领悟\",{\"1\":{\"137\":1}}],[\"当系统中发生重要事件时\",{\"1\":{\"136\":1}}],[\"当系统中的某些关键状态发生变化时\",{\"1\":{\"136\":1}}],[\"当按钮被点击\",{\"1\":{\"136\":1}}],[\"当事件发生时\",{\"1\":{\"135\":1}}],[\"当事件源触发事件时\",{\"1\":{\"135\":1}}],[\"当事件被发布时\",{\"1\":{\"135\":1}}],[\"当然可能在只接触过定义之后我们并不知道双端队列甚至是队列的进出顺序\",{\"1\":{\"560\":1}}],[\"当然可以选择启动容器后手动安装\",{\"1\":{\"364\":1}}],[\"当然这些结果是这么出来的呢\",{\"1\":{\"560\":1}}],[\"当然这些都是我自己的理解\",{\"1\":{\"148\":1}}],[\"当然对标的是真实\",{\"1\":{\"346\":1}}],[\"当然很多人觉得\",{\"1\":{\"324\":1}}],[\"当然新版本的出现就是为了解决旧版本的一些问题\",{\"1\":{\"297\":1}}],[\"当然仅仅是基于个人目前技术水平的理解\",{\"1\":{\"291\":1}}],[\"当然每个公司和团队的git流程多少都会存在区别\",{\"0\":{\"288\":1}}],[\"当然构建仓库的方式有很多种\",{\"1\":{\"287\":1}}],[\"当然是不多\",{\"1\":{\"266\":1}}],[\"当然存在被测试类a调用其他类b的函数\",{\"1\":{\"245\":1}}],[\"当然就算是延后50分钟也不能保证每次都可以成功获取到每日价格文件\",{\"1\":{\"234\":1}}],[\"当然现在的时间轮算法估计已经足够精确\",{\"1\":{\"233\":1}}],[\"当然也可以从服务上进行数据异构化或者服务异步化\",{\"1\":{\"174\":1}}],[\"当然在除了\",{\"1\":{\"165\":1}}],[\"当然还是推荐设计模式的一些书籍和更为优秀的帖子\",{\"1\":{\"122\":1}}],[\"当然并不会涵盖所有的设计模式\",{\"1\":{\"122\":1}}],[\"当然身边的人也有从\",{\"1\":{\"95\":1}}],[\"当时连个\",{\"1\":{\"419\":1}}],[\"当时面对那个老旧版本的工具和我个人非常嫌弃的\",{\"1\":{\"266\":1}}],[\"当时这样设计的初衷想想大概就是为了能加快审核进度\",{\"1\":{\"233\":1}}],[\"当时在学完内置注解\",{\"1\":{\"227\":1}}],[\"当时目前公司也是有\",{\"1\":{\"179\":1}}],[\"当时我也是走马观花\",{\"1\":{\"96\":1}}],[\"当时我刚起步的时候总结学习路线的文章视频还是很多的\",{\"1\":{\"3\":1}}],[\"当时可能学习完微服务之后\",{\"1\":{\"95\":1}}],[\"当时根本不知道这几本书的分量\",{\"1\":{\"91\":1}}],[\"尔康\",{\"1\":{\"95\":1}}],[\"各自运行自己的程序\",{\"1\":{\"566\":1}}],[\"各数位的一个排列\",{\"1\":{\"481\":1}}],[\"各个业务线程\",{\"1\":{\"207\":1}}],[\"各个行业的人疯狂涌入计算机\",{\"1\":{\"95\":1}}],[\"各种\",{\"1\":{\"202\":1}}],[\"各种降薪裁员的浪潮开始愈展愈烈\",{\"1\":{\"2\":1}}],[\"赛道处于一个爆满的时代\",{\"1\":{\"95\":1}}],[\"定位串出现的位置\",{\"1\":{\"578\":1}}],[\"定位和\",{\"1\":{\"94\":1}}],[\"定长顺序存储\",{\"0\":{\"575\":1}}],[\"定期获取价格文件\",{\"0\":{\"234\":1}}],[\"定期清理审批单\",{\"0\":{\"233\":1}}],[\"定时删除过期日志\",{\"0\":{\"236\":1}}],[\"定时检查系统运行状况\",{\"1\":{\"231\":1}}],[\"定时检查并释放资源\",{\"1\":{\"231\":1}}],[\"定时执行自动化测试\",{\"1\":{\"231\":1}}],[\"定时清理缓存\",{\"1\":{\"231\":1}}],[\"定时统计业务数据\",{\"1\":{\"231\":1}}],[\"定时备份数据库\",{\"1\":{\"231\":1}}],[\"定时任务\",{\"0\":{\"230\":1},\"1\":{\"231\":2}}],[\"定义接口和实现类\",{\"1\":{\"388\":1}}],[\"定义拦截方法\",{\"1\":{\"315\":1}}],[\"定义一个对象\",{\"1\":{\"315\":1}}],[\"定义一个\",{\"1\":{\"308\":1}}],[\"定义一个处理请求的接口\",{\"1\":{\"125\":1}}],[\"定义字符串常量的时候\",{\"1\":{\"305\":1}}],[\"定义常量\",{\"0\":{\"305\":1}}],[\"定义对象\",{\"1\":{\"304\":2,\"314\":1}}],[\"定义对象唯一属性名的时候\",{\"1\":{\"304\":1}}],[\"定义当调用\",{\"1\":{\"253\":1,\"260\":1}}],[\"定义模拟对象方法的行为\",{\"1\":{\"253\":1}}],[\"定义模拟对象的行为以及验证方法的调用变得非常容易\",{\"1\":{\"239\":1}}],[\"定义切面\",{\"1\":{\"224\":1}}],[\"定义日志注解\",{\"1\":{\"224\":1}}],[\"定义任务\",{\"1\":{\"217\":1}}],[\"定义属性\",{\"1\":{\"217\":2}}],[\"定向访问\",{\"1\":{\"168\":1}}],[\"定语从句\",{\"0\":{\"66\":1}}],[\"薄薄一本\",{\"1\":{\"94\":1}}],[\"cv\",{\"1\":{\"444\":1}}],[\"cglib\",{\"1\":{\"391\":6}}],[\"cjlib\",{\"1\":{\"382\":1}}],[\"cd\",{\"0\":{\"362\":1},\"1\":{\"362\":4}}],[\"circleci\",{\"1\":{\"362\":1}}],[\"ci\",{\"0\":{\"362\":1},\"1\":{\"362\":4}}],[\"csrf\",{\"1\":{\"448\":1}}],[\"csrf攻击等问题也促使开发者寻找新的解决方案\",{\"1\":{\"293\":1}}],[\"css\",{\"1\":{\"148\":1,\"323\":3,\"324\":6,\"331\":1}}],[\"chars\",{\"1\":{\"485\":5}}],[\"char\",{\"1\":{\"485\":1}}],[\"chainfiltermap\",{\"1\":{\"130\":2}}],[\"chain\",{\"1\":{\"124\":1}}],[\"chown\",{\"1\":{\"364\":1}}],[\"child\",{\"1\":{\"317\":2}}],[\"chf9mnfo=cfhb\",{\"1\":{\"280\":1}}],[\"cut\",{\"1\":{\"236\":1,\"237\":3}}],[\"customannotation\",{\"1\":{\"225\":1}}],[\"customevent\",{\"1\":{\"135\":5}}],[\"cpu\",{\"1\":{\"231\":1,\"370\":2,\"375\":2,\"566\":6}}],[\"cfg文件与交易所建立\",{\"1\":{\"208\":1}}],[\"cache\",{\"1\":{\"380\":1}}],[\"caching\",{\"1\":{\"200\":1}}],[\"cas\",{\"1\":{\"373\":1,\"374\":2,\"376\":1,\"380\":1}}],[\"catalan\",{\"1\":{\"568\":1}}],[\"cat\",{\"1\":{\"364\":2}}],[\"catch\",{\"1\":{\"224\":1,\"229\":2}}],[\"cadcny\",{\"1\":{\"280\":1}}],[\"cadcny3m=cfhb\",{\"1\":{\"280\":1}}],[\"calculator\",{\"1\":{\"276\":1}}],[\"call\",{\"1\":{\"220\":1}}],[\"card\",{\"1\":{\"130\":1}}],[\"c\",{\"1\":{\"156\":2,\"188\":1,\"193\":1,\"236\":1,\"300\":7,\"301\":2,\"340\":3}}],[\"cookie\",{\"1\":{\"416\":1,\"448\":1}}],[\"cookies\",{\"1\":{\"409\":2}}],[\"copy\",{\"1\":{\"364\":1}}],[\"color\",{\"1\":{\"305\":6,\"343\":1}}],[\"collectionutils\",{\"1\":{\"130\":1}}],[\"collectors\",{\"1\":{\"130\":1,\"229\":1}}],[\"collect\",{\"1\":{\"130\":1,\"229\":1}}],[\"codecentric<\",{\"1\":{\"433\":1,\"436\":1}}],[\"code\",{\"1\":{\"280\":5,\"385\":1}}],[\"count个不同\",{\"1\":{\"237\":1}}],[\"count++\",{\"1\":{\"237\":1}}],[\"count\",{\"1\":{\"237\":3,\"332\":3}}],[\"count=0\",{\"1\":{\"237\":1}}],[\"countdownlatch\",{\"1\":{\"207\":1}}],[\"counting\",{\"1\":{\"200\":1}}],[\"corba\",{\"1\":{\"409\":1}}],[\"corruption\",{\"1\":{\"143\":1}}],[\"core\",{\"1\":{\"130\":1,\"331\":1}}],[\"com\",{\"1\":{\"188\":1,\"217\":1,\"224\":2,\"225\":5}}],[\"common\",{\"1\":{\"441\":1}}],[\"commons\",{\"1\":{\"439\":1}}],[\"commit\",{\"1\":{\"181\":1}}],[\"commandlinerunner\",{\"1\":{\"130\":2}}],[\"computer\",{\"0\":{\"621\":1}}],[\"computed\",{\"1\":{\"351\":1}}],[\"computeifabsent\",{\"1\":{\"130\":1}}],[\"compose\",{\"1\":{\"364\":4}}],[\"composition\",{\"1\":{\"329\":1}}],[\"component\",{\"1\":{\"130\":3,\"135\":5,\"225\":1,\"346\":3}}],[\"compile\",{\"1\":{\"217\":2}}],[\"compare\",{\"1\":{\"380\":1}}],[\"comparing\",{\"1\":{\"130\":1}}],[\"comparator\",{\"1\":{\"130\":1}}],[\"concat\",{\"1\":{\"578\":1}}],[\"concretesubscriber\",{\"1\":{\"134\":6}}],[\"concretepublisher\",{\"1\":{\"134\":4}}],[\"concretehandler\",{\"1\":{\"125\":1}}],[\"console\",{\"1\":{\"298\":2,\"302\":1,\"304\":5,\"308\":4,\"313\":2,\"315\":2,\"316\":2,\"317\":2,\"318\":1,\"319\":6,\"320\":3,\"342\":1}}],[\"const\",{\"0\":{\"298\":1},\"1\":{\"298\":2,\"305\":6,\"319\":1,\"332\":1,\"335\":1,\"336\":1}}],[\"constructor\",{\"1\":{\"227\":2,\"317\":6}}],[\"configurationproperties\",{\"1\":{\"280\":2}}],[\"configuration\",{\"1\":{\"224\":1,\"280\":1,\"445\":1}}],[\"configure\",{\"1\":{\"155\":2}}],[\"config\",{\"1\":{\"213\":1,\"214\":2,\"364\":1,\"428\":2}}],[\"conf\",{\"1\":{\"156\":4,\"157\":1,\"160\":1}}],[\"continuous\",{\"1\":{\"362\":2}}],[\"continue\",{\"1\":{\"224\":1}}],[\"content\",{\"1\":{\"323\":1}}],[\"context\",{\"1\":{\"135\":3,\"338\":2,\"339\":2,\"364\":1}}],[\"container\",{\"1\":{\"183\":1,\"364\":1}}],[\"controller\",{\"1\":{\"225\":3}}],[\"control\",{\"1\":{\"98\":1}}],[\"clearstring\",{\"1\":{\"578\":1}}],[\"cleanup\",{\"1\":{\"236\":1}}],[\"clean\",{\"1\":{\"217\":2}}],[\"click\",{\"1\":{\"342\":3}}],[\"click=\",{\"1\":{\"332\":1,\"342\":1}}],[\"client<\",{\"1\":{\"436\":1}}],[\"clientexception\",{\"1\":{\"130\":9}}],[\"client\",{\"1\":{\"125\":1,\"382\":1,\"437\":1,\"451\":1}}],[\"claims\",{\"1\":{\"294\":5}}],[\"classtomock\",{\"0\":{\"252\":1}}],[\"class<\",{\"0\":{\"252\":1}}],[\"classloader\",{\"1\":{\"214\":1}}],[\"classpath\",{\"1\":{\"214\":1,\"280\":1}}],[\"class=\",{\"1\":{\"214\":1}}],[\"class\",{\"0\":{\"317\":1},\"1\":{\"130\":6,\"134\":3,\"135\":3,\"202\":1,\"217\":3,\"224\":5,\"225\":2,\"227\":5,\"229\":1,\"252\":1,\"257\":1,\"260\":1,\"280\":3,\"317\":8,\"370\":1,\"372\":1,\"388\":3,\"391\":4,\"511\":1,\"519\":1,\"593\":1}}],[\"clssspath\",{\"1\":{\"280\":1}}],[\"cloud\",{\"1\":{\"213\":1,\"419\":1,\"421\":2,\"423\":3,\"428\":2}}],[\"cloudflare\",{\"1\":{\"105\":1,\"108\":2}}],[\"cluster实现数据分布和负载均衡\",{\"1\":{\"199\":1}}],[\"cnpm\",{\"1\":{\"148\":3}}],[\"cn\",{\"1\":{\"94\":1,\"99\":1}}],[\"create\",{\"1\":{\"391\":1}}],[\"createrenderer\",{\"1\":{\"331\":1}}],[\"createpropertysource\",{\"1\":{\"280\":2}}],[\"crnm\",{\"1\":{\"229\":7}}],[\"crontab\",{\"1\":{\"192\":2,\"236\":2}}],[\"cron\",{\"1\":{\"93\":1,\"236\":2}}],[\"crud\",{\"1\":{\"4\":1,\"250\":1}}],[\"在先序遍历序列中\",{\"1\":{\"595\":1}}],[\"在二叉树中结点通常包含数据域和指针域\",{\"1\":{\"593\":1}}],[\"在任何一个非空树中应该满足\",{\"1\":{\"585\":1}}],[\"在含有\",{\"1\":{\"580\":1}}],[\"在许多应用中\",{\"1\":{\"580\":1}}],[\"在具体的实现\",{\"1\":{\"577\":1}}],[\"在信息处理中有一大类问题需要逐层或逐行进行处理\",{\"1\":{\"565\":1}}],[\"在递归调用的过程中\",{\"1\":{\"564\":1}}],[\"在后缀表达式中已经考虑了运算符的优先级\",{\"1\":{\"563\":1}}],[\"在后续每次用户请求时不再调用\",{\"1\":{\"412\":1}}],[\"在另一端只允许插入\",{\"1\":{\"559\":1}}],[\"在双端队列的基础上\",{\"1\":{\"559\":1}}],[\"在双端队列进队时\",{\"1\":{\"559\":1}}],[\"在循环队列中\",{\"1\":{\"557\":1}}],[\"在图g中删除顶点x\",{\"1\":{\"548\":1}}],[\"在图g中插入顶点x\",{\"1\":{\"548\":1}}],[\"在图形用户界面\",{\"1\":{\"136\":1}}],[\"在邻接多重表中\",{\"1\":{\"547\":1}}],[\"在邻接表中\",{\"1\":{\"547\":1}}],[\"在十字链表中\",{\"1\":{\"546\":1}}],[\"在实际存储邻接矩阵时只需存储上或下三角矩阵即可\",{\"1\":{\"544\":1}}],[\"在路径序列中\",{\"1\":{\"540\":1}}],[\"在非连通图中\",{\"1\":{\"535\":1}}],[\"在无向图中\",{\"1\":{\"533\":1,\"536\":1}}],[\"在下三角矩阵中\",{\"1\":{\"501\":1}}],[\"在下面的学习里再缓缓道来\",{\"1\":{\"332\":1}}],[\"在上三角矩阵中\",{\"1\":{\"501\":1}}],[\"在上三角区\",{\"1\":{\"500\":1}}],[\"在上线成功之后再将release分支合并到devlop和master并标记tag\",{\"1\":{\"287\":1}}],[\"在存储元素信息的同时\",{\"1\":{\"495\":1}}],[\"在排序的过程中\",{\"1\":{\"487\":1}}],[\"在查找过程中\",{\"1\":{\"462\":1}}],[\"在擦杭州啊表中插入一个数据元素\",{\"1\":{\"462\":1}}],[\"在需要找零31块的时候\",{\"1\":{\"455\":1}}],[\"在抓牌的过程中\",{\"1\":{\"455\":1}}],[\"在你真正调用的模块中配置你的\",{\"1\":{\"446\":1}}],[\"在解决包括缓存\",{\"1\":{\"441\":1}}],[\"在底层使用\",{\"1\":{\"439\":1}}],[\"在跨区域部署和大规模集群上可能面临一些性能和可扩展性方面的挑战\",{\"1\":{\"428\":1}}],[\"在注册中心上来看\",{\"1\":{\"428\":1}}],[\"在对性能要求比较高的大规模场景更适合\",{\"1\":{\"428\":1}}],[\"在对使用了\",{\"1\":{\"371\":1}}],[\"在配置管理做的更加全面\",{\"1\":{\"428\":1}}],[\"在配置管理流程上做的更好\",{\"1\":{\"428\":1}}],[\"在调用\",{\"1\":{\"416\":1}}],[\"在调用被代理类方法后执行一些操作\",{\"1\":{\"391\":1}}],[\"在调用被代理类方法前执行一些操作\",{\"1\":{\"391\":1}}],[\"在各个场景中做延伸\",{\"1\":{\"392\":1}}],[\"在各种新语言层出不穷的年代\",{\"1\":{\"95\":1}}],[\"在该方法中定义了代理类的行为\",{\"1\":{\"391\":1}}],[\"在该类中\",{\"1\":{\"388\":1}}],[\"在方法执行后提交或回滚事务\",{\"1\":{\"392\":1}}],[\"在方法执行后添加额外逻辑\",{\"1\":{\"388\":1}}],[\"在方法执行前添加额外逻辑\",{\"1\":{\"388\":1}}],[\"在java中\",{\"1\":{\"385\":1}}],[\"在灵活性上肯定就是略逊一筹了\",{\"1\":{\"384\":1}}],[\"在灵活性和逻辑的复用性上有了很大的提升\",{\"1\":{\"331\":1}}],[\"在编译的时候就已经确定的\",{\"1\":{\"384\":1}}],[\"在当前线程中\",{\"1\":{\"380\":1}}],[\"在执行程序的过程中\",{\"1\":{\"380\":1}}],[\"在并发编程中有两个重要的问题\",{\"1\":{\"378\":1}}],[\"在有向图的邻接表表示中\",{\"1\":{\"545\":1}}],[\"在有向图中\",{\"1\":{\"534\":1,\"536\":1}}],[\"在有竞争的情况下\",{\"1\":{\"374\":1}}],[\"在有知识面广度的情况下向自己感兴趣的方向深耕才是正解\",{\"1\":{\"147\":1}}],[\"在大多数情况下\",{\"1\":{\"373\":1}}],[\"在被持有后将处于锁定状态\",{\"1\":{\"372\":1}}],[\"在未来的一定期限内\",{\"1\":{\"368\":1}}],[\"在生产环境中通常希望容器崩溃后自动重启\",{\"1\":{\"364\":1}}],[\"在捕获了后代组件传递的错误时调用\",{\"1\":{\"353\":1}}],[\"在组件实例被卸载之前调用\",{\"1\":{\"353\":1}}],[\"在组件实例被卸载之后调用\",{\"1\":{\"353\":1}}],[\"在组件即将因为响应式状态变更而更新其\",{\"1\":{\"353\":1}}],[\"在组件被挂载之前被调用\",{\"1\":{\"353\":1}}],[\"在组件因为响应式状态变更而更新其\",{\"1\":{\"353\":1}}],[\"在组件挂载完成后执行\",{\"1\":{\"353\":1}}],[\"在组合式\",{\"1\":{\"347\":1,\"352\":1}}],[\"在此过程中\",{\"1\":{\"353\":1}}],[\"在它的\",{\"1\":{\"347\":2}}],[\"在其内部\",{\"1\":{\"347\":1}}],[\"在标准的\",{\"1\":{\"347\":1}}],[\"在与\",{\"1\":{\"329\":1}}],[\"在目前\",{\"1\":{\"323\":1}}],[\"在真正落地布局之前我们还应该需要很多基础知识来支撑\",{\"1\":{\"323\":1}}],[\"在函数名后面加上\",{\"1\":{\"320\":1}}],[\"在es6中\",{\"1\":{\"317\":1}}],[\"在进行这些操作时\",{\"1\":{\"313\":1}}],[\"在之前\",{\"1\":{\"305\":1}}],[\"在没有\",{\"1\":{\"293\":1}}],[\"在早期的\",{\"1\":{\"293\":1}}],[\"在走进\",{\"1\":{\"293\":1}}],[\"在develop分支上重新解决后问题后再创建新的release分支测试即可\",{\"1\":{\"287\":1}}],[\"在保证了develop分支稳定可用的基础上遇到上线\",{\"1\":{\"287\":1}}],[\"在master分支构建到可以胜任开发运行和各环境打包上线的基础上\",{\"1\":{\"286\":1}}],[\"在码云中在对应模块中创建工程仓库\",{\"1\":{\"286\":1}}],[\"在使用\",{\"1\":{\"271\":1}}],[\"在使用观察者模式时\",{\"1\":{\"136\":1}}],[\"在客户端\",{\"1\":{\"271\":1}}],[\"在服务端\",{\"1\":{\"271\":1}}],[\"在公司项目中更容易维护\",{\"1\":{\"217\":1}}],[\"在我第一次快速通关微服务的时候\",{\"1\":{\"421\":1}}],[\"在我看来称他为时代弃子也不为过\",{\"1\":{\"217\":1}}],[\"在我们就近的\",{\"1\":{\"372\":1}}],[\"在我们简单了解了\",{\"1\":{\"160\":1}}],[\"在我们以前的后端项目的开发过程当中\",{\"1\":{\"139\":1}}],[\"在转换的时候会出现问题\",{\"1\":{\"214\":1}}],[\"在计数器为零再放行价格接收线程开启\",{\"1\":{\"207\":1}}],[\"在分布式系统中实现锁机制\",{\"1\":{\"200\":1}}],[\"在web应用中\",{\"1\":{\"200\":1}}],[\"在云计算的推动下\",{\"1\":{\"182\":1}}],[\"在过去几年以\",{\"1\":{\"179\":1}}],[\"在轮训的基础上配置每个代理服务的\",{\"1\":{\"165\":1}}],[\"在很多内网的服务器中\",{\"1\":{\"150\":1}}],[\"在依赖项管理上的一些问题\",{\"1\":{\"148\":1}}],[\"在选择走后端这条路的时候\",{\"1\":{\"147\":1}}],[\"在领域模型中\",{\"1\":{\"144\":3}}],[\"在理解的基础上\",{\"1\":{\"143\":1}}],[\"在详细讨论中\",{\"1\":{\"142\":1}}],[\"在白板上记录领域中的关键业务事件\",{\"1\":{\"142\":1}}],[\"在接触到一个新的项目后仍然是像拿到一个全新的东西而不是一个模型的另一个版本\",{\"1\":{\"137\":1}}],[\"在数据通讯中\",{\"1\":{\"582\":1}}],[\"在数据集合中寻找满足某各种条件的数据元素的过程称为查找\",{\"1\":{\"462\":1}}],[\"在数据库系统中\",{\"1\":{\"136\":1}}],[\"在数据清洗过程中\",{\"1\":{\"128\":1}}],[\"在发布\",{\"1\":{\"136\":1}}],[\"在这种情况下\",{\"1\":{\"448\":1}}],[\"在这个示例中\",{\"1\":{\"135\":1}}],[\"在这里还是选择前者进行展开\",{\"1\":{\"271\":1}}],[\"在这里处理事件\",{\"1\":{\"135\":1}}],[\"在这里我会总结出我对设计模式的理解和实现\",{\"1\":{\"122\":1}}],[\"在事件中传递给监听器进行处理\",{\"1\":{\"135\":1}}],[\"在spring框架的观察者模式中\",{\"1\":{\"135\":1}}],[\"在spring框架的观察者模式中我们首先要了解一些核心概念\",{\"1\":{\"135\":1}}],[\"在观察者模式中\",{\"1\":{\"135\":1}}],[\"在异常处理系统中\",{\"1\":{\"128\":1}}],[\"在命令处理系统中\",{\"1\":{\"128\":1}}],[\"在权限管理系统中\",{\"1\":{\"128\":1}}],[\"在审批工作流系统中\",{\"1\":{\"128\":1}}],[\"在一些特殊情况中非常浪费性能\",{\"1\":{\"594\":1}}],[\"在一些常见的方面都给予了我们开发出高质量\",{\"1\":{\"122\":1}}],[\"在一个带有多终端的计算机系统上\",{\"1\":{\"566\":1}}],[\"在一个图中\",{\"1\":{\"537\":1}}],[\"在一个图形用户界面中\",{\"1\":{\"128\":1}}],[\"在一个\",{\"1\":{\"128\":1}}],[\"在一个文本编辑器中\",{\"1\":{\"128\":1}}],[\"在收到请求时判断自己是否能够处理\",{\"1\":{\"125\":1}}],[\"在规范的第一章就列举了各个场景命名的规范\",{\"1\":{\"117\":1}}],[\"在\",{\"1\":{\"94\":1,\"99\":1,\"128\":1,\"134\":1,\"139\":1,\"145\":1,\"280\":1,\"320\":1,\"333\":1,\"364\":1,\"372\":1,\"379\":1,\"382\":1,\"387\":1,\"416\":1,\"439\":1,\"453\":1,\"455\":1,\"501\":2,\"560\":1}}],[\"这时的判空条件为头结点的prior和next都为本身\",{\"1\":{\"524\":1}}],[\"这时就必须重写def\",{\"1\":{\"394\":1}}],[\"这提供了更好的安全性和用户隐私保护\",{\"1\":{\"451\":1}}],[\"这可以通过重定向资源所有者到身份和授权服务器的授权页面来实现\",{\"1\":{\"451\":1}}],[\"这包括告诉浏览器或其他客户端被返回的文档类型\",{\"1\":{\"409\":1}}],[\"这包括\",{\"1\":{\"409\":1}}],[\"这包括网页上的\",{\"1\":{\"409\":1}}],[\"这两种实现方式的区别在于代理对象的生成方式和代理的范围\",{\"1\":{\"385\":1}}],[\"这两个关键字来配合理解一下并发的原理\",{\"1\":{\"370\":1}}],[\"这两个最核心的知识点\",{\"1\":{\"222\":1}}],[\"这对展开并发编程很有帮助\",{\"1\":{\"377\":1}}],[\"这对于每次考试数十万考生的审批量无疑是个大问题\",{\"1\":{\"233\":1}}],[\"这几个方法\",{\"1\":{\"407\":1}}],[\"这几个状态会随着竞争情况而升级\",{\"1\":{\"372\":1}}],[\"这几份考生的材料就会无法被其他审核人获取到从而导致无人审批\",{\"1\":{\"233\":1}}],[\"这将是我程序员职业生涯中重要的一次经历和经验\",{\"1\":{\"366\":1}}],[\"这将非常有用\",{\"1\":{\"347\":1}}],[\"这将由我们未来一起努力\",{\"1\":{\"290\":1}}],[\"这意味着每个元素所占相同大小的空间\",{\"1\":{\"505\":1}}],[\"这意味着\",{\"1\":{\"317\":1}}],[\"这三部分分别是\",{\"1\":{\"294\":1}}],[\"这三个元素\",{\"1\":{\"267\":1}}],[\"这也就是二叉排序树\",{\"1\":{\"596\":1}}],[\"这也就是循环队列的精髓\",{\"1\":{\"557\":1}}],[\"这也就是后面我们要学的插入排序\",{\"1\":{\"455\":1}}],[\"这也就是微服务的前身了\",{\"1\":{\"420\":1}}],[\"这也给我们带来了全新的挑战\",{\"1\":{\"420\":1}}],[\"这也充分印证了那句话\",{\"1\":{\"419\":1}}],[\"这也是比较推荐和以后常用的方式\",{\"1\":{\"333\":1}}],[\"这也导致我们很少在工作中接触到它\",{\"1\":{\"222\":1}}],[\"这也注定了它逐渐被\",{\"1\":{\"217\":1}}],[\"这也只是和之前几年相比吧\",{\"1\":{\"95\":1}}],[\"这样既能最大可能的节省存储空间\",{\"1\":{\"592\":1}}],[\"这样既保证了每个用户的请求\",{\"1\":{\"566\":1}}],[\"这样每个结点就可以被称为块\",{\"1\":{\"577\":1}}],[\"这样做既保证了打印的数量正确\",{\"1\":{\"566\":1}}],[\"这样极大的保证了安全性的同时也解决了跨域支持的问题\",{\"1\":{\"448\":1}}],[\"这样\",{\"1\":{\"395\":1}}],[\"这样可以减轻服务器的负担\",{\"1\":{\"448\":1}}],[\"这样可以实现动态管理多个应用程序\",{\"1\":{\"430\":1}}],[\"这样可以实现在不修改目标对象的代码的情况下\",{\"1\":{\"392\":1}}],[\"这样可以提高模型的可扩展性和可\",{\"1\":{\"144\":1}}],[\"这样可以提高模型的可扩展性和可维护\",{\"1\":{\"144\":1}}],[\"这样会导致一些\",{\"1\":{\"348\":1}}],[\"这样就转换成了第一或第二种情况\",{\"1\":{\"470\":1}}],[\"这样就减少了释放锁的开销\",{\"1\":{\"374\":1}}],[\"这样就避免了误判的情况发生\",{\"1\":{\"346\":1}}],[\"这样就会破坏\",{\"1\":{\"324\":1}}],[\"这样比较下来很显然可以减少操作\",{\"1\":{\"346\":1}}],[\"这样我们就得到了一个最简单的自增按钮的界面\",{\"1\":{\"332\":1}}],[\"这样配置抽离存放就有两种方案\",{\"1\":{\"213\":1}}],[\"这一部分主要介绍使用过的数据库相关的知识点\",{\"1\":{\"197\":1}}],[\"这是我开始金融项目中第一次完整的跟进一个比较大的项目\",{\"1\":{\"366\":1}}],[\"这是我们面向云原生的怀抱\",{\"1\":{\"182\":1}}],[\"这是通过一个基于依赖追踪的响应式系统实现的\",{\"1\":{\"347\":1}}],[\"这是一个接收交易所价格并转发给多个后台的纯后台项目\",{\"1\":{\"204\":1}}],[\"这是学习前端的基石\",{\"1\":{\"148\":1}}],[\"这功能是为了掩饰访问后台服务器真正的\",{\"1\":{\"171\":1}}],[\"这就导致最后数组上溢是一种假溢出\",{\"1\":{\"556\":1}}],[\"这就导致如果上线包出错会导致重新准备包将重新走一遍上线流程\",{\"1\":{\"213\":1}}],[\"这就得提到锁的状态了\",{\"1\":{\"372\":1}}],[\"这就是后面我们要学的贪心算法\",{\"1\":{\"455\":1}}],[\"这就是后面要学到的二分查找\",{\"1\":{\"455\":1}}],[\"这就是单体地狱\",{\"1\":{\"420\":1}}],[\"这就是所谓的隧道式的含义\",{\"1\":{\"162\":1}}],[\"这就是正向\",{\"1\":{\"162\":1}}],[\"这就为前端开发者带来了代码共享\",{\"1\":{\"148\":1}}],[\"这四层架构分别是\",{\"1\":{\"145\":1}}],[\"这往往是因为项目初期对业务的理解不足\",{\"1\":{\"139\":1}}],[\"这让我们很容易联想到\",{\"1\":{\"132\":1}}],[\"这里不得不提一下栈的进出顺序\",{\"1\":{\"560\":1}}],[\"这里不会打印\",{\"1\":{\"319\":1}}],[\"这里说的\",{\"1\":{\"519\":1}}],[\"这里是根据命令封装好的\",{\"1\":{\"444\":1}}],[\"这里就得用得到缓存一致性协议了\",{\"1\":{\"371\":1}}],[\"这里体现了类型的多样性\",{\"1\":{\"310\":1}}],[\"这里其实我一直就有个问题\",{\"1\":{\"282\":1}}],[\"这里定时任务的需求就很明确了\",{\"1\":{\"234\":1}}],[\"这里好在\",{\"1\":{\"229\":1}}],[\"这里有两种方式\",{\"1\":{\"225\":1}}],[\"这里的\",{\"1\":{\"217\":1}}],[\"这里采用伪代码的方式进行展示\",{\"1\":{\"210\":1}}],[\"这里拿\",{\"1\":{\"155\":1}}],[\"这里我也是基于这种思想来演示一个\",{\"1\":{\"441\":1}}],[\"这里我以我自己工作和日常开发用到的\",{\"1\":{\"362\":1}}],[\"这里我准备了一台阿里云的服务器\",{\"1\":{\"152\":1}}],[\"这里我们直接结合这个问题来给大家简单理理头绪\",{\"1\":{\"560\":1}}],[\"这里我们要谈的\",{\"1\":{\"423\":1}}],[\"这里我们选择\",{\"1\":{\"324\":1}}],[\"这里我们需要借助一些\",{\"1\":{\"324\":1}}],[\"这里我们结合\",{\"1\":{\"323\":1}}],[\"这里我们主要介绍一下箭头函数\",{\"1\":{\"316\":1}}],[\"这里我们只能使用公司在用的\",{\"1\":{\"204\":1}}],[\"这里我们模拟一个新的虚拟主机通过不同端口访问不同的资源\",{\"1\":{\"160\":1}}],[\"这里我们分别实现校验注册字段的三个具体实现类\",{\"1\":{\"130\":1}}],[\"这里我们还继承\",{\"1\":{\"130\":1}}],[\"这里我们抽象处理者需要有处理方法和分类标识\",{\"1\":{\"130\":1}}],[\"这里使用责任链的模式进行拆分\",{\"1\":{\"130\":1}}],[\"这里你可以通过闯关的形式学习一些\",{\"1\":{\"99\":1}}],[\"这种问题往往是在处理当前层或行时就对下一层或下一行进行预处理\",{\"1\":{\"565\":1}}],[\"这种先进先出的规则被打破\",{\"1\":{\"560\":1}}],[\"这种边上带有权值的图称为带权图\",{\"1\":{\"537\":1}}],[\"这种线性有序的表被称为线性表\",{\"1\":{\"505\":1}}],[\"这种方式可以隐藏远程调用的细节\",{\"1\":{\"384\":1}}],[\"这种方式确实有些\",{\"1\":{\"179\":1}}],[\"这种做法是为了提高获得锁和释放锁的效率\",{\"1\":{\"372\":1}}],[\"这种可以让有\",{\"1\":{\"333\":1}}],[\"这种特性使得它在微服务架构中特别有用\",{\"1\":{\"293\":1}}],[\"这种情况就需要每个人根据功能从develop分支中拉去一条属于自己的分支\",{\"1\":{\"287\":1}}],[\"这种情况你就算只使用master一个主分支开发都可以\",{\"1\":{\"287\":1}}],[\"这种实际的\",{\"1\":{\"171\":1}}],[\"这种观点确实应该被改观了\",{\"1\":{\"147\":1}}],[\"这种模式常用于异步消息处理\",{\"1\":{\"136\":1}}],[\"这种模式的核心思想是解耦发送者和接收者\",{\"1\":{\"124\":1}}],[\"这种集中式的版本控制系统\",{\"1\":{\"98\":1}}],[\"这都2023年了还有人在用\",{\"1\":{\"115\":1}}],[\"这些数据将被用于\",{\"1\":{\"412\":1}}],[\"这些声明是关于实体\",{\"1\":{\"294\":1}}],[\"这些部分通过点\",{\"1\":{\"294\":1}}],[\"这些特定的\",{\"1\":{\"270\":1}}],[\"这些场景确实主要在项目搭建阶段就已经搭建完毕了\",{\"1\":{\"222\":1}}],[\"这些就要用到\",{\"1\":{\"214\":1}}],[\"这些书都是基于设计模式开山之作\",{\"1\":{\"101\":1}}],[\"这些我们也需要在空余时间了解一些\",{\"1\":{\"93\":1}}],[\"这个规矩也叫左孩子右兄弟\",{\"1\":{\"602\":1}}],[\"这个知识点最重要的是要理解下面这个经典问题即可\",{\"1\":{\"559\":1}}],[\"这个单链表就称为顶点i的边表\",{\"1\":{\"545\":1}}],[\"这个时候的判空操作就是头结点的指针是否为头结点\",{\"1\":{\"523\":1}}],[\"这个时候我们就应该想到排序了\",{\"1\":{\"484\":1}}],[\"这个时候如果使用运维面板就可以一件安装\",{\"1\":{\"150\":1}}],[\"这个过程就可以使用队列保存下一步的处理顺序\",{\"1\":{\"565\":1}}],[\"这个过程可能需要访问数据库\",{\"1\":{\"409\":1}}],[\"这个过程是原子操作\",{\"1\":{\"380\":1}}],[\"这个博客的实现就是基于\",{\"1\":{\"362\":1}}],[\"这个开源的单元测试引擎就发挥作用了\",{\"1\":{\"239\":1}}],[\"这个定时任务的场景其实也正好能暴露时间轮的问题\",{\"1\":{\"233\":1}}],[\"这个关注点可能会横切多个对象\",{\"1\":{\"222\":1}}],[\"这个方法只能获取到全局\",{\"1\":{\"214\":1}}],[\"这个类帮我们做类型转换即可\",{\"1\":{\"214\":1}}],[\"这个类从哪个\",{\"1\":{\"181\":1}}],[\"这个问题的解决方法就是加一个空的上面占位符所读取的类\",{\"1\":{\"214\":1}}],[\"这个问题其实在\",{\"1\":{\"148\":1}}],[\"这个请求以后只能请求到一台固定的地址\",{\"1\":{\"175\":1}}],[\"这个配置之外\",{\"1\":{\"165\":1}}],[\"这个文件上\",{\"1\":{\"332\":1}}],[\"这个文件\",{\"1\":{\"156\":1}}],[\"这个属性跟在端口后才能进行访问\",{\"1\":{\"153\":1}}],[\"这个命令查看\",{\"1\":{\"153\":1}}],[\"这个就需要用\",{\"1\":{\"153\":1}}],[\"这个模块里我会把我工作和学习中接触到的设计模式结合场景记录下来\",{\"1\":{\"122\":1}}],[\"这个自带的软件上查看\",{\"1\":{\"112\":1}}],[\"这个长期维护版本才是新宠\",{\"1\":{\"96\":1}}],[\"这个部分的文章都是遇到值得写写的部分就记录一下\",{\"1\":{\"3\":1}}],[\"这本书涵盖了\",{\"1\":{\"99\":1}}],[\"这本书的作者是\",{\"1\":{\"99\":1}}],[\"这本书最新是到第四版\",{\"1\":{\"96\":1}}],[\"这本书我大学期间看过大半\",{\"1\":{\"96\":1}}],[\"虽然减少了程序代码量\",{\"1\":{\"564\":1}}],[\"虽然单链表解决了顺序表需要大量连续存储单元的缺点\",{\"1\":{\"511\":1}}],[\"虽然我们在实际使用和设计算法的过程中不会每次都先考虑其大o表示法的复杂度\",{\"1\":{\"459\":1}}],[\"虽然我也没用上\",{\"1\":{\"179\":1}}],[\"虽然看似流程上十分相似\",{\"1\":{\"448\":1}}],[\"虽然感觉行业的趋势下\",{\"1\":{\"419\":1}}],[\"虽然在日后的优化中可能已经没有那么\",{\"1\":{\"372\":1}}],[\"虽然在测试一些局域网联机的方式重新用到了内网穿透的工具\",{\"1\":{\"111\":1}}],[\"虽然被写回到内存\",{\"1\":{\"371\":1}}],[\"虽然很多东西都是依赖了行里已经成熟可靠的项目经验\",{\"1\":{\"366\":1}}],[\"虽然目前的前端框架像\",{\"1\":{\"324\":1}}],[\"虽然长远存在的分支只有master和develop分支\",{\"1\":{\"290\":1}}],[\"虽然成功把配置和代码从包中分离出来了\",{\"1\":{\"215\":1}}],[\"虽然这些前置项目平时都不是我负责\",{\"1\":{\"202\":1}}],[\"虽然这些状态并不常用\",{\"1\":{\"165\":1}}],[\"虽然这样可以脱离\",{\"1\":{\"202\":1}}],[\"虽然大家嘴上天天\",{\"1\":{\"179\":1}}],[\"虽然现在很多人会疑惑到底是学习\",{\"1\":{\"148\":1}}],[\"虽然\",{\"1\":{\"96\":1,\"98\":1,\"217\":1}}],[\"虽然工作中能用到的数据库的知识点都只是停留在对数据的操作\",{\"1\":{\"93\":1}}],[\"虽然相比于\",{\"1\":{\"2\":1}}],[\"相反\",{\"1\":{\"586\":1}}],[\"相反如果是输出受限\",{\"1\":{\"560\":1}}],[\"相互之间存在一种或多种特定关系的数据元素的集合\",{\"1\":{\"492\":1}}],[\"相同性质的数据元素的集合\",{\"1\":{\"492\":1}}],[\"相同分为客户端和服务端相同\",{\"1\":{\"430\":1}}],[\"相对矩阵总元素\",{\"1\":{\"503\":1}}],[\"相对的比较后的元素也逐步往后移动为新元素提供插入空间\",{\"1\":{\"489\":1}}],[\"相对于容易出现存储不合分配不合理或者溢出情况的顺序存储队列\",{\"1\":{\"558\":1}}],[\"相对于\",{\"1\":{\"98\":1,\"239\":1,\"428\":2}}],[\"相应时间慢\",{\"1\":{\"375\":1}}],[\"相比之下\",{\"1\":{\"458\":1}}],[\"相比的双向绑定不同的是\",{\"1\":{\"347\":1}}],[\"相比于一些传统的关系型数据库\",{\"1\":{\"441\":1}}],[\"相比于\",{\"1\":{\"341\":1,\"371\":1}}],[\"相比于其他各种出现的\",{\"1\":{\"93\":1}}],[\"相比\",{\"1\":{\"329\":1}}],[\"相比书而言阿里的代码规范插件更是收到了所有人的追捧\",{\"1\":{\"291\":1}}],[\"相当于是一个\",{\"1\":{\"183\":1}}],[\"相关的观察者会收到相应的事件通知并执行相应的操作\",{\"1\":{\"136\":1}}],[\"相信在容器化火热的今天\",{\"1\":{\"179\":1}}],[\"相信一个合格的程序员是必须对数据库这项技术要达到熟练的地步吧\",{\"1\":{\"93\":1}}],[\"相信其中循序渐进的经典算法例题会让你在算法方面鼓足干劲和勇气\",{\"1\":{\"92\":1}}],[\"相信大家在求职冲刺阶段都会认识一本叫做\",{\"1\":{\"92\":1}}],[\"尽管有了这些\",{\"1\":{\"291\":1}}],[\"尽管\",{\"1\":{\"282\":1}}],[\"尽管如此\",{\"1\":{\"239\":1}}],[\"尽管大家都是在用\",{\"1\":{\"93\":1}}],[\"尽早规范统一起来才是正途\",{\"1\":{\"202\":1}}],[\"尽力而为吧\",{\"1\":{\"3\":1}}],[\"而二叉树无论孩子个数是否为2\",{\"1\":{\"588\":1}}],[\"而二叉树可以为空\",{\"1\":{\"588\":1}}],[\"而路径长度是路径上所经过的边的个数\",{\"1\":{\"586\":1}}],[\"而k是e的孩子\",{\"1\":{\"586\":1}}],[\"而e是路径上最接近k的祖先\",{\"1\":{\"586\":1}}],[\"而两个指针相邻\",{\"1\":{\"571\":1}}],[\"而出栈依次为a5\",{\"1\":{\"568\":1}}],[\"而出度是以顶点v为起点的有向边的数目\",{\"1\":{\"536\":1}}],[\"而因为两端都可以出队\",{\"1\":{\"560\":1}}],[\"而队列先进只能先出\",{\"1\":{\"560\":1}}],[\"而在中序遍历中\",{\"1\":{\"595\":1}}],[\"而在表的另一端进行删除\",{\"1\":{\"554\":1}}],[\"而在非生产服务器上\",{\"1\":{\"179\":1}}],[\"而对于途中其他连通分量的顶点\",{\"1\":{\"552\":1}}],[\"而对于数据库中数据的处理来说\",{\"1\":{\"93\":1}}],[\"而使用邻接表是指对图g中的每一个顶点vi建立一个单链表\",{\"1\":{\"545\":1}}],[\"而频繁进行插入删除操作的线性表宜选择链式存储\",{\"1\":{\"526\":1}}],[\"而并不包括找到这个节点的过程\",{\"1\":{\"519\":1}}],[\"而指针域则必须指向线性表的第一个元素结点\",{\"1\":{\"511\":1}}],[\"而算法的实现则依赖多采用的存储结构\",{\"1\":{\"493\":1}}],[\"而时间上需要逐个对比元素进行操作和移动元素\",{\"1\":{\"489\":1}}],[\"而查找不成功时的查找长度为从根结点到对应失败结点的父结点的路径上的结点数\",{\"1\":{\"464\":1}}],[\"而平均查找长度则是所有查找过程中惊醒关键字的比较次数的平均值\",{\"1\":{\"462\":1}}],[\"而平时我们真正生产上使用服务器启动和关闭\",{\"1\":{\"156\":1}}],[\"而最差时间复杂度更为实用\",{\"1\":{\"458\":1}}],[\"而无需共享其凭据\",{\"1\":{\"451\":1}}],[\"而无需向第三方应用程序共享其凭据\",{\"1\":{\"451\":1}}],[\"而微服务网关我们通用的理解是统一对外暴露可共享的服务\",{\"1\":{\"423\":1}}],[\"而目前的组件框架会同时兼顾以上多个功能并且基本已经涵盖到了\",{\"1\":{\"421\":1}}],[\"而基于类的动态代理适用于那些没有实现接口的目标对象\",{\"1\":{\"385\":1}}],[\"而基于类的动态代理不要求目标对象实现接口\",{\"1\":{\"385\":1}}],[\"而每个线程都有本地内存\",{\"1\":{\"379\":1}}],[\"而局部变量\",{\"1\":{\"379\":1}}],[\"而复杂的内存操作需要搭配处理器提供的总线锁定和缓存锁来保证其原子性\",{\"1\":{\"376\":1}}],[\"而具体的得到和释放锁的过程需要依赖\",{\"1\":{\"372\":1}}],[\"而具体的测试方法也根据\",{\"1\":{\"250\":1}}],[\"而大部分的责任就这样落在了我的肩膀上\",{\"1\":{\"362\":1}}],[\"而其中的节点比较就是交给其他两个\",{\"1\":{\"346\":1}}],[\"而其底层也是使用了\",{\"1\":{\"148\":1}}],[\"而我们不能够在\",{\"1\":{\"560\":1}}],[\"而我们又知道我们在样式中嵌套会自动追加上父选择器的类名\",{\"1\":{\"324\":1}}],[\"而我们开启代理非常简单\",{\"1\":{\"162\":1}}],[\"而第四个than返回的是reject状态的promise\",{\"1\":{\"319\":1}}],[\"而现在有了\",{\"1\":{\"305\":1}}],[\"而现在可能微服务也只能是你找到工作的门槛\",{\"1\":{\"95\":1}}],[\"而为了解决这个问题\",{\"1\":{\"280\":1}}],[\"而实现这项技术离不开下面介绍的\",{\"1\":{\"267\":1}}],[\"而把提供的应用程序叫做服务端\",{\"1\":{\"267\":1}}],[\"而是改为指向头指针\",{\"1\":{\"523\":1}}],[\"而是在查找的过程中\",{\"1\":{\"469\":1}}],[\"而是与输入数据的分布有关\",{\"1\":{\"458\":1}}],[\"而是随即从比较中间的位置打开\",{\"1\":{\"455\":1}}],[\"而是使用\",{\"1\":{\"439\":1}}],[\"而是返回一个指向内部状态对象的指针\",{\"1\":{\"320\":1}}],[\"而是像代理模式\",{\"1\":{\"313\":1}}],[\"而是一些项目上一些功能的最佳实践\",{\"1\":{\"291\":1}}],[\"而是用\",{\"1\":{\"266\":1}}],[\"而是要求大家真的要遵守\",{\"1\":{\"117\":1}}],[\"而一聊到\",{\"1\":{\"222\":1}}],[\"而仅仅是修改配置的话这样反而显得得不偿失\",{\"1\":{\"213\":1}}],[\"而上线规范还要求\",{\"1\":{\"213\":1}}],[\"而所需数据的后台项目有新有旧\",{\"1\":{\"205\":1}}],[\"而所收到的价格并不是随时并且全部都发送\",{\"1\":{\"205\":1}}],[\"而发送则接入外围网管直接和请求方通讯这种方式\",{\"1\":{\"162\":1}}],[\"而如果是一些下载的请求\",{\"1\":{\"162\":1}}],[\"而真正工作的都是一个个的\",{\"1\":{\"158\":1}}],[\"而面向一些云服务器来说\",{\"1\":{\"150\":1}}],[\"而且仅被访问一次\",{\"1\":{\"594\":2}}],[\"而且二叉树是有序树\",{\"1\":{\"588\":1}}],[\"而且每个结点与其下一层的零个或多个结点\",{\"1\":{\"585\":1}}],[\"而且每次操作无需寻找表头\",{\"1\":{\"523\":1}}],[\"而且还要处理括号\",{\"1\":{\"563\":1}}],[\"而且我们手里的牌序是在我们自己的规则下是有序的\",{\"1\":{\"455\":1}}],[\"而且令牌可以通过签名和加密机制来保护身份信息的完整性和真实性\",{\"1\":{\"448\":1}}],[\"而且如果\",{\"1\":{\"448\":1}}],[\"而且这个通信过程必须经过主内存\",{\"1\":{\"379\":1}}],[\"而且这今年国产化的浪潮翻涌\",{\"1\":{\"148\":1}}],[\"而且总是由同一线程多次获得\",{\"1\":{\"373\":1}}],[\"而且因为虚拟\",{\"1\":{\"346\":1}}],[\"而且\",{\"1\":{\"324\":1,\"340\":1}}],[\"而且只有从\",{\"1\":{\"319\":1}}],[\"而且形似的地方可以直接简单改改就用\",{\"1\":{\"291\":1}}],[\"而且实现\",{\"1\":{\"266\":1}}],[\"而且值得注意的是如果这里同时使用两个方法的话\",{\"1\":{\"225\":1}}],[\"而且使用反射还会还会在一定程度上降低性能\",{\"1\":{\"227\":1}}],[\"而且使用的架构也不尽相同\",{\"1\":{\"225\":1}}],[\"而且使用这种框架也可以动态更新配置\",{\"1\":{\"213\":1}}],[\"而且并没有这种云配置的框架支持\",{\"1\":{\"213\":1}}],[\"而且由于我们只需要工作日接收价格并且只关心我们在意的币种\",{\"1\":{\"208\":1}}],[\"而且业务也不负责\",{\"1\":{\"202\":1}}],[\"而且像很多这种下载脚本执行的安装方式在下载安装的时候会产生文件\",{\"1\":{\"152\":1}}],[\"而且它还引入了锁文件\",{\"1\":{\"148\":1}}],[\"而且其内容也是略显晦涩\",{\"1\":{\"96\":1}}],[\"而非技术实现细节\",{\"1\":{\"141\":1}}],[\"而这样的带来的好处别人写了什么一目了然\",{\"1\":{\"291\":1}}],[\"而这次需要四月十三日上线\",{\"1\":{\"289\":1}}],[\"而这个时期再开始考虑项目拆分的时候就会因为\",{\"1\":{\"139\":1}}],[\"而这本\",{\"1\":{\"92\":1}}],[\"而不是递归地跟踪所有的属性\",{\"1\":{\"352\":1}}],[\"而不是使用函数时的对象\",{\"1\":{\"316\":1}}],[\"而不是完全的废弃重构\",{\"1\":{\"290\":1}}],[\"而不是具体的实现\",{\"1\":{\"144\":2}}],[\"而不是在模型实体中\",{\"1\":{\"143\":1}}],[\"而不是在开发\",{\"1\":{\"137\":1}}],[\"而不需要显式指定接收者\",{\"1\":{\"124\":1}}],[\"而订阅者\",{\"1\":{\"136\":1}}],[\"而观察者监听并响应该事件的方式\",{\"1\":{\"132\":1}}],[\"而分类标识则用来分类处理者种类从而实现多种处理者并存\",{\"1\":{\"130\":1}}],[\"而设计模式作为前辈们的最佳实践总结\",{\"1\":{\"122\":1}}],[\"而\",{\"1\":{\"96\":1,\"271\":1,\"304\":1,\"346\":1,\"347\":1,\"349\":1,\"362\":1,\"370\":1,\"394\":1,\"430\":1}}],[\"而能靠其内容质量击败视频\",{\"1\":{\"96\":1}}],[\"s^2+2s+n\",{\"1\":{\"465\":1}}],[\"slack等方式发送事件通知\",{\"1\":{\"430\":1}}],[\"slf4j\",{\"1\":{\"225\":1,\"439\":1}}],[\"ssm\",{\"1\":{\"419\":1}}],[\"ssh\",{\"0\":{\"188\":1},\"1\":{\"188\":1,\"419\":1}}],[\"sm2\",{\"1\":{\"394\":1}}],[\"sm\",{\"1\":{\"394\":1}}],[\"sf\",{\"1\":{\"391\":3}}],[\"sfc\",{\"1\":{\"331\":1}}],[\"swap\",{\"1\":{\"380\":1}}],[\"script>\",{\"1\":{\"332\":1,\"334\":1,\"335\":1,\"336\":1,\"338\":1,\"339\":1,\"340\":1,\"341\":1,\"342\":1,\"343\":1,\"344\":1,\"345\":1}}],[\"scoped\",{\"1\":{\"324\":1}}],[\"sass\",{\"0\":{\"325\":1},\"1\":{\"324\":1,\"325\":2}}],[\"sayhello\",{\"1\":{\"316\":4}}],[\"simple\",{\"1\":{\"439\":1}}],[\"sider\",{\"1\":{\"323\":1}}],[\"signature\",{\"1\":{\"294\":1}}],[\"synchronized\",{\"0\":{\"372\":1},\"1\":{\"370\":1,\"371\":2,\"372\":2}}],[\"syobject\",{\"1\":{\"304\":19}}],[\"sy1\",{\"1\":{\"302\":2}}],[\"sy\",{\"1\":{\"302\":4,\"304\":11}}],[\"symbol\",{\"0\":{\"302\":1},\"1\":{\"302\":7,\"304\":11,\"305\":19}}],[\"systemclock\",{\"1\":{\"224\":2}}],[\"systemctl\",{\"1\":{\"156\":8}}],[\"systemd\",{\"1\":{\"156\":1}}],[\"system\",{\"1\":{\"134\":1,\"135\":1,\"156\":1,\"214\":1,\"388\":6,\"391\":3,\"394\":5,\"397\":2,\"405\":3}}],[\"svn\",{\"0\":{\"282\":1},\"1\":{\"282\":7}}],[\"splitnum\",{\"1\":{\"485\":1}}],[\"span>\",{\"1\":{\"341\":2,\"344\":1}}],[\"spirng\",{\"1\":{\"280\":2}}],[\"spring的\",{\"1\":{\"428\":1}}],[\"springboottest\",{\"1\":{\"250\":1}}],[\"springboot依赖\",{\"1\":{\"246\":1}}],[\"springbootmoudle\",{\"1\":{\"225\":1}}],[\"spring注解\",{\"1\":{\"245\":2}}],[\"spring版\",{\"0\":{\"135\":1}}],[\"springframework\",{\"1\":{\"130\":1,\"135\":5,\"214\":1,\"433\":1,\"436\":1}}],[\"spring\",{\"0\":{\"279\":1,\"429\":1,\"438\":1,\"439\":1,\"440\":1,\"447\":1,\"449\":1,\"452\":1,\"619\":1},\"1\":{\"130\":3,\"133\":1,\"135\":2,\"204\":1,\"207\":2,\"209\":2,\"213\":2,\"214\":2,\"244\":1,\"250\":2,\"280\":1,\"419\":2,\"421\":2,\"423\":5,\"428\":2,\"430\":21,\"434\":1,\"437\":2,\"439\":4,\"446\":1,\"453\":6}}],[\"sbc\",{\"1\":{\"224\":2,\"225\":1,\"284\":2,\"287\":1,\"289\":14}}],[\"sbin\",{\"1\":{\"155\":1,\"156\":5,\"157\":1}}],[\"sdk\",{\"1\":{\"208\":1}}],[\"srcdir=\",{\"1\":{\"217\":1}}],[\"src\",{\"1\":{\"202\":1,\"217\":3,\"332\":1}}],[\"snapshot\",{\"1\":{\"199\":1}}],[\"shiro\",{\"1\":{\"453\":2}}],[\"shift\",{\"1\":{\"194\":1}}],[\"show=\",{\"1\":{\"341\":2}}],[\"show\",{\"0\":{\"341\":1}}],[\"shallowref\",{\"1\":{\"348\":4}}],[\"sha256\",{\"1\":{\"294\":1}}],[\"share\",{\"1\":{\"2\":1,\"364\":3}}],[\"sh\",{\"1\":{\"236\":1,\"364\":1}}],[\"shells\",{\"1\":{\"236\":1}}],[\"shell\",{\"0\":{\"235\":1},\"1\":{\"430\":1}}],[\"shutdown\",{\"1\":{\"187\":2}}],[\"security\",{\"0\":{\"447\":1,\"449\":1,\"452\":1},\"1\":{\"453\":5}}],[\"secrets\",{\"1\":{\"364\":1}}],[\"second\",{\"1\":{\"309\":2}}],[\"sei\",{\"1\":{\"271\":1}}],[\"self\",{\"1\":{\"241\":1}}],[\"sellprice\",{\"1\":{\"229\":4}}],[\"session\",{\"1\":{\"200\":1,\"293\":4,\"448\":3}}],[\"sessionid\",{\"1\":{\"177\":1}}],[\"sentinel实现高可用\",{\"1\":{\"199\":1}}],[\"setcallback\",{\"1\":{\"391\":1}}],[\"set等\",{\"1\":{\"349\":1}}],[\"setup\",{\"0\":{\"335\":1},\"1\":{\"333\":4,\"335\":1,\"340\":1,\"341\":1,\"342\":1,\"343\":1,\"344\":1,\"345\":1}}],[\"setup>\",{\"0\":{\"336\":1},\"1\":{\"332\":1,\"333\":1,\"336\":1,\"338\":1,\"339\":1}}],[\"setusername\",{\"1\":{\"225\":1}}],[\"setting\",{\"1\":{\"313\":1,\"315\":1}}],[\"settimeout\",{\"1\":{\"298\":2,\"316\":2}}],[\"setter\",{\"1\":{\"280\":1,\"317\":1,\"347\":1,\"351\":1,\"593\":2}}],[\"setname\",{\"1\":{\"260\":1}}],[\"setaccessible\",{\"1\":{\"229\":1}}],[\"setphonenumber\",{\"1\":{\"225\":1}}],[\"setport\",{\"1\":{\"202\":1}}],[\"setlastname\",{\"1\":{\"225\":1}}],[\"setfirstname\",{\"1\":{\"225\":1}}],[\"setemail\",{\"1\":{\"225\":1}}],[\"setoutputparams\",{\"1\":{\"224\":1}}],[\"setinputparams\",{\"1\":{\"224\":1}}],[\"setbegintime\",{\"1\":{\"224\":1}}],[\"setsuperclass\",{\"1\":{\"391\":1}}],[\"sets\",{\"1\":{\"198\":2}}],[\"set\",{\"0\":{\"306\":1,\"310\":1,\"311\":1},\"1\":{\"194\":2,\"200\":1,\"219\":1,\"229\":1,\"307\":4,\"308\":2,\"310\":7,\"311\":10,\"313\":2,\"315\":2,\"317\":1,\"347\":1,\"548\":1}}],[\"servlet\",{\"0\":{\"408\":1,\"409\":1,\"411\":1,\"417\":1},\"1\":{\"409\":2,\"411\":6,\"412\":4,\"413\":2,\"416\":3,\"419\":1}}],[\"servletrequestattributes\",{\"1\":{\"224\":6}}],[\"server<\",{\"1\":{\"433\":1}}],[\"server\",{\"1\":{\"160\":2,\"161\":1,\"162\":1,\"164\":1,\"165\":1,\"198\":1,\"437\":1,\"451\":2}}],[\"services\",{\"1\":{\"364\":1}}],[\"servicepointcut\",{\"1\":{\"225\":3}}],[\"service\",{\"0\":{\"265\":1,\"266\":1,\"267\":1,\"271\":1,\"413\":1},\"1\":{\"143\":2,\"156\":7,\"241\":1,\"266\":5,\"267\":2,\"268\":2,\"269\":1,\"270\":3,\"271\":3,\"411\":1,\"413\":3}}],[\"supplier\",{\"0\":{\"401\":1}}],[\"super\",{\"1\":{\"135\":1,\"280\":1,\"317\":2}}],[\"suspense\",{\"1\":{\"331\":1}}],[\"sum\",{\"1\":{\"317\":1}}],[\"substring\",{\"1\":{\"578\":1}}],[\"subscriber2\",{\"1\":{\"134\":3}}],[\"subscriber1\",{\"1\":{\"134\":2}}],[\"subscribers\",{\"1\":{\"134\":5}}],[\"subscriber\",{\"1\":{\"134\":15}}],[\"subscribe\",{\"1\":{\"134\":4}}],[\"sub\",{\"1\":{\"200\":1,\"294\":2}}],[\"subversion\",{\"1\":{\"98\":3}}],[\"sock\",{\"1\":{\"364\":2}}],[\"socket\",{\"1\":{\"204\":3,\"208\":1}}],[\"sout\",{\"1\":{\"342\":2}}],[\"sources\",{\"1\":{\"280\":2}}],[\"source\",{\"0\":{\"605\":1},\"1\":{\"135\":3,\"237\":1}}],[\"something\",{\"1\":{\"391\":1}}],[\"some\",{\"1\":{\"310\":3}}],[\"soap\",{\"0\":{\"270\":1},\"1\":{\"266\":1,\"267\":1,\"270\":3,\"271\":1}}],[\"soapui\",{\"1\":{\"266\":1}}],[\"so\",{\"1\":{\"225\":1}}],[\"sonar\",{\"1\":{\"239\":1}}],[\"son\",{\"1\":{\"225\":1}}],[\"songbaicheng<\",{\"1\":{\"339\":1}}],[\"songbaicheng\",{\"1\":{\"225\":1,\"334\":1,\"335\":1,\"336\":1,\"338\":1,\"344\":1}}],[\"song\",{\"1\":{\"225\":1}}],[\"sort\",{\"1\":{\"191\":1,\"485\":1}}],[\"sorted\",{\"1\":{\"130\":1,\"198\":1,\"200\":1}}],[\"style\",{\"1\":{\"343\":2}}],[\"style=\",{\"1\":{\"339\":1,\"343\":1}}],[\"study\",{\"1\":{\"272\":1,\"327\":1,\"331\":1,\"504\":1,\"553\":1,\"567\":1,\"584\":1}}],[\"step2\",{\"1\":{\"220\":2}}],[\"step1\",{\"1\":{\"220\":1}}],[\"stereotype\",{\"1\":{\"135\":2}}],[\"sticky\",{\"0\":{\"178\":1}}],[\"standard\",{\"0\":{\"613\":1}}],[\"stackempty\",{\"1\":{\"569\":1}}],[\"stack\",{\"1\":{\"380\":1,\"568\":1}}],[\"stateless\",{\"1\":{\"448\":1}}],[\"stat\",{\"1\":{\"236\":1}}],[\"status\",{\"1\":{\"156\":1}}],[\"static\",{\"1\":{\"134\":1,\"202\":1,\"388\":1,\"391\":1,\"394\":4}}],[\"startswith\",{\"1\":{\"403\":1}}],[\"starter\",{\"1\":{\"280\":1,\"433\":2,\"436\":2}}],[\"starttime\",{\"1\":{\"224\":2}}],[\"start\",{\"1\":{\"156\":1,\"202\":1}}],[\"storage\",{\"1\":{\"200\":1}}],[\"store\",{\"1\":{\"200\":1}}],[\"storming\",{\"1\":{\"139\":1}}],[\"stop=\",{\"1\":{\"342\":1}}],[\"stop\",{\"1\":{\"155\":1,\"156\":3,\"342\":1}}],[\"strlength\",{\"1\":{\"578\":1}}],[\"strcompare\",{\"1\":{\"578\":1}}],[\"strcopy\",{\"1\":{\"578\":1}}],[\"strempty\",{\"1\":{\"578\":1}}],[\"stream\",{\"1\":{\"130\":1,\"229\":1}}],[\"strassign\",{\"1\":{\"578\":1}}],[\"str\",{\"1\":{\"402\":2,\"403\":2}}],[\"strings\",{\"1\":{\"198\":1}}],[\"string\",{\"1\":{\"130\":5,\"134\":8,\"135\":5,\"202\":2,\"214\":1,\"224\":3,\"225\":5,\"229\":2,\"280\":1,\"302\":1,\"307\":2,\"340\":1,\"345\":1,\"388\":9,\"391\":1,\"399\":1,\"400\":1,\"401\":1,\"404\":1,\"405\":2}}],[\"s\",{\"1\":{\"130\":1,\"155\":1,\"156\":6,\"194\":1,\"225\":2,\"276\":1,\"459\":2,\"503\":2,\"573\":2}}],[\"sql\",{\"1\":{\"93\":3}}],[\"所谓邻接矩阵\",{\"1\":{\"544\":1}}],[\"所含黑结点的数量相同\",{\"1\":{\"476\":1}}],[\"所得\",{\"1\":{\"245\":2}}],[\"所取代\",{\"1\":{\"217\":1}}],[\"所取代了\",{\"1\":{\"217\":1}}],[\"所有n个结点的树有\",{\"1\":{\"585\":1}}],[\"所有依附于同一顶点的边串联在同一个链表中\",{\"1\":{\"547\":1}}],[\"所有的实例域\",{\"1\":{\"379\":1}}],[\"所有的测试代码都在博客首页中的\",{\"1\":{\"272\":1,\"327\":1,\"331\":1,\"504\":1,\"553\":1,\"567\":1,\"584\":1}}],[\"所有的脚本没有特殊标注都以\",{\"1\":{\"235\":1}}],[\"所有的查询价格的请求都走了同一个接口\",{\"1\":{\"229\":1}}],[\"所有数据都保存在内存中\",{\"1\":{\"199\":1}}],[\"所有掌握\",{\"1\":{\"93\":1}}],[\"所以称e为k的双亲\",{\"1\":{\"586\":1}}],[\"所以没有括号只有操作数和运算符\",{\"1\":{\"563\":1}}],[\"所以可以用右左右左的顺序得到\",{\"1\":{\"560\":1}}],[\"所以可以在多种不同硬件平台的计算机上部署和使用\",{\"1\":{\"121\":1}}],[\"所以四个元素在队内的相对位置就是顺序的\",{\"1\":{\"560\":1}}],[\"所以回到这个经典问题之所以能有这种答案\",{\"1\":{\"560\":1}}],[\"所以空表和非空表得到了统一\",{\"1\":{\"511\":1}}],[\"所以空间复杂度为\",{\"1\":{\"489\":1}}],[\"所以单链表是非随机存取的存储结构\",{\"1\":{\"511\":1}}],[\"所以要找出特殊矩阵中值相同的矩阵元素的分布规律\",{\"1\":{\"499\":1}}],[\"所以要调用遍历器对象iterator\",{\"1\":{\"320\":1}}],[\"所以直接插入排序是一个稳定的排序方法\",{\"1\":{\"489\":1}}],[\"所以直接先将\",{\"1\":{\"289\":1}}],[\"所以不会出现相对位置的移动\",{\"1\":{\"489\":1}}],[\"所以不能直接对对象进行赋值\",{\"1\":{\"349\":1}}],[\"所以平均下来复杂度为\",{\"1\":{\"489\":1}}],[\"所以它要求线性表必须具有随机存取的特性\",{\"1\":{\"464\":1}}],[\"所以二分查找的平均查找长度为asl=log2\",{\"1\":{\"464\":1}}],[\"所以其\",{\"1\":{\"463\":1}}],[\"所以算法的频度\",{\"1\":{\"458\":1}}],[\"所以目前几乎所有的项目都会有依赖它的需求\",{\"1\":{\"441\":1}}],[\"所以为了统一操作一般都会使用带头结点的链表存储\",{\"1\":{\"558\":1}}],[\"所以为了避免这种情况的发生\",{\"1\":{\"407\":1}}],[\"所以为了解耦\",{\"1\":{\"209\":1}}],[\"所以就引入偏向锁的概念\",{\"1\":{\"373\":1}}],[\"所以就有了更高性能的\",{\"1\":{\"162\":1}}],[\"所以线程对锁的获取和释放就是对\",{\"1\":{\"372\":1}}],[\"所以在保证入队顺序的情况下就只会有一种出队顺序\",{\"1\":{\"560\":1}}],[\"所以在项目中使用非常推荐放在\",{\"1\":{\"441\":1}}],[\"所以在\",{\"1\":{\"371\":1}}],[\"所以在移动环境变量的时候尽量配置到全局变量中去\",{\"1\":{\"214\":1}}],[\"所以应该是安装在宿主机上的\",{\"1\":{\"364\":1}}],[\"所以虚拟\",{\"1\":{\"346\":1}}],[\"所以是在一些情况下比操作真实\",{\"1\":{\"346\":1}}],[\"所以很多人都说\",{\"1\":{\"327\":1}}],[\"所以基础的\",{\"1\":{\"324\":1}}],[\"所以会被本行\",{\"1\":{\"319\":1}}],[\"所以获取的并不是\",{\"1\":{\"304\":1}}],[\"所以取到的是字符串\",{\"1\":{\"304\":1}}],[\"所以只要在规范插件的帮助下\",{\"1\":{\"291\":1}}],[\"所以当串的实际长度长过了\",{\"1\":{\"575\":1}}],[\"所以当时组里十几个人代码风格出奇的相同\",{\"1\":{\"291\":1}}],[\"所以当主队列价格超过20条时清空队列\",{\"1\":{\"208\":1}}],[\"所以规范存在的意义是当新的问题出现的时候\",{\"1\":{\"290\":1}}],[\"所以无论流程是如何的\",{\"0\":{\"288\":1}}],[\"所以希望读者都够清晰理解每个分支的作用和意义\",{\"1\":{\"287\":1}}],[\"所以这里也借助栈来实现二叉树的中序遍历\",{\"1\":{\"594\":1}}],[\"所以这输出序列是唯一正确的\",{\"1\":{\"560\":1}}],[\"所以这一次我选择的是号称微服务一站式解决方案的\",{\"1\":{\"421\":1}}],[\"所以这个步骤的实质就是线程a向线程b发送消息\",{\"1\":{\"379\":1}}],[\"所以这篇文章想强调的并不是大家的代码风格\",{\"1\":{\"291\":1}}],[\"所以这份规约里面包含了分支开发的定义\",{\"1\":{\"282\":1}}],[\"所以这让我一度认为\",{\"1\":{\"282\":1}}],[\"所以每次开发上线简直是地狱体验\",{\"1\":{\"282\":1}}],[\"所以需要自己添加一些读取规则\",{\"1\":{\"280\":1}}],[\"所以负责这个任务的工作就落到了我另一个同事头上\",{\"1\":{\"225\":1}}],[\"所以日志脱敏的解决办法就是开发一个脱敏工具类\",{\"1\":{\"225\":1}}],[\"所以日常个人使用还是十分推荐的\",{\"1\":{\"179\":1}}],[\"所以相比于maven和gradle来说\",{\"1\":{\"217\":1}}],[\"所以整个脚本最重要的就是其中的一个个<target><\",{\"1\":{\"217\":1}}],[\"所以沟通后决定将生产包中的配置和代码分离开来\",{\"1\":{\"213\":1}}],[\"所以对接价格的接口实现还需要和后台一致\",{\"1\":{\"205\":1}}],[\"所以我们根据这个特性可以找到其对应规律\",{\"1\":{\"500\":1}}],[\"所以我们应该把精力放在如何将矩阵更有效的存储在内存中\",{\"1\":{\"497\":1}}],[\"所以我们就会默认排除字典当前的前半部分继续重复上面的操作来找到我们的目标\",{\"1\":{\"455\":1}}],[\"所以我们就用最常用的\",{\"1\":{\"250\":1}}],[\"所以我们为了让计算机知道我们删除的究竟是哪个节点\",{\"1\":{\"346\":1}}],[\"所以我们也遵循此道来进行\",{\"1\":{\"331\":1}}],[\"所以我们结合\",{\"1\":{\"250\":1}}],[\"所以我们选择使用\",{\"1\":{\"239\":1}}],[\"所以我们在每日的流水表中增加价格处理状态的字段\",{\"1\":{\"234\":1}}],[\"所以我们决定把\",{\"1\":{\"213\":1}}],[\"所以我们将工作日和需求币种维护到\",{\"1\":{\"208\":1}}],[\"所以我们将自己定义的工作日和所需产品价格\",{\"1\":{\"205\":1}}],[\"所以我们统一使用\",{\"1\":{\"207\":1}}],[\"所以我们并不会牵扯到数据持久化的问题\",{\"1\":{\"204\":1}}],[\"所以我们采用双活的\",{\"1\":{\"204\":1}}],[\"所以我们需要把起停命令添加到\",{\"1\":{\"156\":1}}],[\"所以重构的任务就落到了我的身上\",{\"1\":{\"202\":1}}],[\"所以自己在服务器上摸爬滚打的时候没少删错东西\",{\"1\":{\"179\":1}}],[\"所以个人还是推荐创建一个新文件夹再进行下载\",{\"1\":{\"152\":1}}],[\"所以拥抱\",{\"1\":{\"148\":1}}],[\"所以选择了灵活和性能并重的\",{\"1\":{\"148\":1}}],[\"所以说如果你关注包的安装速度和依赖项管理的性能\",{\"1\":{\"148\":1}}],[\"所以说就互联网的发展速度\",{\"1\":{\"96\":1}}],[\"所以程序员的工作就是保持学习\",{\"1\":{\"147\":1}}],[\"所以\",{\"1\":{\"137\":1,\"162\":1,\"239\":1,\"421\":1}}],[\"所以观察者模常用于实现对象之间的一对多依赖关系\",{\"1\":{\"132\":1}}],[\"所以下载的时候除非不得已还是要下载苹果芯片的版本\",{\"1\":{\"112\":1}}],[\"所以学习\",{\"1\":{\"95\":1}}],[\"所以先把知识点都覆盖罗列一下\",{\"1\":{\"3\":1}}],[\"可凭借个人主观因素判断\",{\"1\":{\"503\":1}}],[\"可再分解为若干类型\",{\"1\":{\"492\":1}}],[\"可将排序排序算法分为两类\",{\"1\":{\"487\":1}}],[\"可通过指针\",{\"1\":{\"463\":1}}],[\"可通过数组下标递增来顺序扫描每个元素\",{\"1\":{\"463\":1}}],[\"可读性\",{\"1\":{\"456\":1}}],[\"可读性强\",{\"1\":{\"246\":1}}],[\"可行性\",{\"1\":{\"456\":1}}],[\"可确实是从无到有\",{\"1\":{\"366\":1}}],[\"可移植性\",{\"1\":{\"364\":1}}],[\"可写\",{\"1\":{\"351\":1}}],[\"可嵌套可忽略\",{\"1\":{\"301\":1}}],[\"可扩展性和用户体验之间平衡的不断优化\",{\"1\":{\"293\":1}}],[\"可扩展性和效率都是十分重要的标杆\",{\"1\":{\"122\":1}}],[\"可当时并不清楚这个在请求头添加的\",{\"1\":{\"293\":1}}],[\"可重复\",{\"1\":{\"241\":2}}],[\"可现在像一些\",{\"1\":{\"213\":1}}],[\"可执行文件\",{\"1\":{\"155\":1}}],[\"可视化\",{\"1\":{\"141\":1}}],[\"可是在我们享受这种便利的时候\",{\"1\":{\"594\":1}}],[\"可是在实际的项目开发当中\",{\"1\":{\"139\":1}}],[\"可是现在浪潮退去\",{\"1\":{\"419\":1}}],[\"可是随着自己的进步和发展\",{\"1\":{\"419\":1}}],[\"可是当你毕业开始找工作的时候\",{\"1\":{\"419\":1}}],[\"可是结果非常出乎意料\",{\"1\":{\"382\":1}}],[\"可是这样也有弊端\",{\"1\":{\"233\":1}}],[\"可是陈旧的设计注定它不能拥有依赖管理\",{\"1\":{\"217\":1}}],[\"可是身体还是很乖的\",{\"1\":{\"179\":1}}],[\"可是后来随着各类数据库的发展\",{\"1\":{\"93\":1}}],[\"可能那个作者单纯是想延伸一下动态代理这一块的知识\",{\"1\":{\"382\":1}}],[\"可能会比深度侦听器更有效\",{\"1\":{\"352\":1}}],[\"可能会引发运行时异常\",{\"1\":{\"227\":1}}],[\"可能会在未来的\",{\"1\":{\"134\":1}}],[\"可能会影响性能\",{\"1\":{\"127\":1}}],[\"可能并不适合作为第一门语言\",{\"1\":{\"95\":1}}],[\"可以像遍历单链表那样方便的遍历二叉树\",{\"1\":{\"596\":1}}],[\"可以是字母\",{\"1\":{\"573\":1}}],[\"可以是一个数组或链表等数据结构\",{\"1\":{\"462\":1}}],[\"可以让两个顺序栈共享一个一维数组空间\",{\"1\":{\"571\":1}}],[\"可以为初学者提供解题思路\",{\"1\":{\"564\":1}}],[\"可以从任意结点开始遍历\",{\"1\":{\"523\":1}}],[\"可以得到的和的\",{\"1\":{\"481\":1}}],[\"可以包含前导\",{\"1\":{\"481\":1}}],[\"可以顺序查找或折半查找索引表\",{\"1\":{\"465\":1}}],[\"可以直接\",{\"1\":{\"444\":1}}],[\"可以使\",{\"1\":{\"430\":1}}],[\"可以使用不同的技术栈进行开发\",{\"1\":{\"420\":1}}],[\"可以使用\",{\"1\":{\"236\":2,\"395\":3}}],[\"可以使用自定义注解的方式代替切点表达\",{\"1\":{\"225\":1}}],[\"可以使用淘宝团队改造的\",{\"1\":{\"148\":1}}],[\"可以使用责任链模式来处理不同类型的异常\",{\"1\":{\"128\":1}}],[\"可以使用责任链模式来处理命令\",{\"1\":{\"128\":1}}],[\"可以使用责任链模式来检查用户权限\",{\"1\":{\"128\":1}}],[\"可以很好地配合使用\",{\"1\":{\"430\":1}}],[\"可以帮助开发人员快速定位和解决问题\",{\"1\":{\"430\":1}}],[\"可以监控和展示每个\",{\"1\":{\"430\":1}}],[\"可以集中管理多个\",{\"1\":{\"430\":1}}],[\"可以选择和服务注册中心搭配使用\",{\"1\":{\"430\":1}}],[\"可以选择使用数据库\",{\"1\":{\"426\":1}}],[\"可以选择处理请求或将请求传递给链中的下一个对象\",{\"1\":{\"124\":1}}],[\"可以被子类继承\",{\"1\":{\"394\":1}}],[\"可以代理普通的类\",{\"1\":{\"385\":1}}],[\"可以记录方法的调用信息\",{\"1\":{\"384\":1}}],[\"可以提高系统的性能和资源利用率\",{\"1\":{\"384\":1}}],[\"可以提高软件系统的可维护性和可扩展性\",{\"1\":{\"139\":1}}],[\"可以继续执行\",{\"1\":{\"374\":1}}],[\"可以消除手动维护依赖列表的负担\",{\"1\":{\"352\":1}}],[\"可以接受所有类型的参数\",{\"1\":{\"349\":1}}],[\"可以接收和处理相应类型的事件\",{\"1\":{\"135\":1}}],[\"可以点击下面卡片去官网学习\",{\"1\":{\"325\":1}}],[\"可以添加一些需要的额外操作\",{\"1\":{\"313\":1}}],[\"可以添加任何不违反\",{\"1\":{\"294\":1}}],[\"可以对目标对象的读取\",{\"1\":{\"313\":1}}],[\"可以写成\",{\"1\":{\"305\":1}}],[\"可以在方法调用前对用户进行权限检查\",{\"1\":{\"392\":1}}],[\"可以在访问某个方法时先检查缓存\",{\"1\":{\"384\":1}}],[\"可以在类的外部访问\",{\"1\":{\"304\":1}}],[\"可以在运行时动态地访问和修改字段的值\",{\"1\":{\"227\":1}}],[\"可以在运行时动态地调用方法\",{\"1\":{\"227\":1}}],[\"可以分为三种类型\",{\"1\":{\"294\":1}}],[\"可以减少服务间通信的成本\",{\"1\":{\"293\":1}}],[\"可以只存在于本地仓库\",{\"1\":{\"284\":1}}],[\"可以与junit无缝结合\",{\"1\":{\"246\":1}}],[\"可以令mock对象返回指定的值或者抛出指定异常\",{\"1\":{\"246\":1}}],[\"可以根据如下考虑\",{\"1\":{\"245\":1}}],[\"可以精确定位问题\",{\"1\":{\"243\":1}}],[\"可以进行人工评审环节\",{\"1\":{\"240\":1}}],[\"可以用this调用\",{\"1\":{\"394\":1}}],[\"可以用于获取目标对象的行为\",{\"1\":{\"314\":1}}],[\"可以用\",{\"1\":{\"237\":1,\"364\":1}}],[\"可以用作观察者模式的实现\",{\"1\":{\"136\":1}}],[\"可以获取类的名称\",{\"1\":{\"227\":1}}],[\"可以动态地创建类的实例\",{\"1\":{\"227\":1}}],[\"可以动态地添加\",{\"1\":{\"126\":1}}],[\"可以实现对方法的事务控制\",{\"1\":{\"392\":1}}],[\"可以实现对目标方法的增强\",{\"1\":{\"384\":1}}],[\"可以实现分布式会话管理\",{\"1\":{\"200\":1}}],[\"可以实现复杂的原子操作\",{\"1\":{\"199\":1}}],[\"可以通过快照\",{\"1\":{\"199\":1}}],[\"可以通过\",{\"1\":{\"155\":1,\"161\":1,\"317\":1,\"320\":1}}],[\"可以执行\",{\"1\":{\"153\":1,\"155\":1}}],[\"可以考虑使用\",{\"1\":{\"148\":1}}],[\"可以找到大量的开源包和资源\",{\"1\":{\"148\":1}}],[\"可以简单的聊聊它们\",{\"1\":{\"148\":1}}],[\"可以借鉴以下原则\",{\"1\":{\"144\":1}}],[\"可以将事件发布给所有注册的监听器\",{\"1\":{\"135\":1}}],[\"可以由不同的处理器处理\",{\"1\":{\"128\":1}}],[\"可以有一系列的异常处理器来处理不同类型的异常\",{\"1\":{\"128\":1}}],[\"可以有多个步骤\",{\"1\":{\"128\":1}}],[\"可以有不同的处理器\",{\"1\":{\"128\":1}}],[\"可以运用到自己的工作中\",{\"1\":{\"0\":1}}],[\"可伸缩的应用层计算和存储支持\",{\"1\":{\"121\":1}}],[\"可见其重要性\",{\"1\":{\"117\":1}}],[\"可复用面向对象软件的基础\",{\"1\":{\"101\":1}}],[\"可一键运行\",{\"1\":{\"92\":1}}],[\"并成为根的子树\",{\"1\":{\"585\":1}}],[\"并能更方便的提取矩阵中的元素\",{\"1\":{\"497\":1}}],[\"并能在不修改应用代码的情况下\",{\"1\":{\"181\":1}}],[\"并查集\",{\"0\":{\"460\":1,\"583\":1}}],[\"并根据访问令牌决定是否授权客户端访问受保护资源\",{\"1\":{\"451\":1}}],[\"并根据资源所有者的授权向客户端颁发访问令牌\",{\"1\":{\"451\":1}}],[\"并生成一个访问令牌\",{\"1\":{\"451\":1}}],[\"并授权客户端访问受保护资源\",{\"1\":{\"451\":1}}],[\"并告诉我们什么情况下可以去使用它\",{\"1\":{\"448\":1}}],[\"并添加\",{\"1\":{\"445\":1}}],[\"并没有自己的日志框架实现\",{\"1\":{\"439\":1}}],[\"并可以根据应用程序的健康状况采取相应的管理措施\",{\"1\":{\"430\":1}}],[\"并提供有关这些应用程序的详细信息和指标\",{\"1\":{\"430\":1}}],[\"并定期发送心跳以保持活动状态\",{\"1\":{\"427\":1}}],[\"并与\",{\"1\":{\"423\":1}}],[\"并执行其他类似的清理活动\",{\"1\":{\"416\":1}}],[\"并执行相应的逻辑处理\",{\"1\":{\"135\":1}}],[\"并把格式化的响应写回给客户端\",{\"1\":{\"413\":1}}],[\"并实现了\",{\"1\":{\"387\":1}}],[\"并发包中就出现了\",{\"1\":{\"376\":1}}],[\"并发机制基础\",{\"0\":{\"370\":1}}],[\"并发\",{\"0\":{\"369\":1}}],[\"并决定实现它\",{\"1\":{\"329\":1}}],[\"并集\",{\"1\":{\"311\":1}}],[\"并登记在全局环境中供搜索\",{\"1\":{\"305\":1}}],[\"并对其提供相关的实现\",{\"1\":{\"271\":1}}],[\"并通过\",{\"1\":{\"270\":1}}],[\"并通过泛型指定要监听的事件类型\",{\"1\":{\"135\":1}}],[\"并增加了一些特定的\",{\"1\":{\"270\":1}}],[\"并处理它们\",{\"1\":{\"237\":1}}],[\"并处理相应的逻辑\",{\"1\":{\"135\":1}}],[\"并进行过滤\",{\"1\":{\"225\":1}}],[\"并逐渐被视为过时的技术\",{\"1\":{\"217\":1}}],[\"并说不上陌生\",{\"1\":{\"202\":1}}],[\"并将其添加到管理界面中进行监控和管理\",{\"1\":{\"430\":1}}],[\"并将其添加到模型中\",{\"1\":{\"142\":2}}],[\"并将拦截逻辑应用到被代理类的方法上\",{\"1\":{\"391\":1}}],[\"并将他们都设为保护分支\",{\"1\":{\"286\":1}}],[\"并将这些队列注册到\",{\"1\":{\"209\":1}}],[\"并将错误信息做标准输出到日志中\",{\"1\":{\"190\":1}}],[\"并将相关信息记录到日志文件或进行审计处理\",{\"1\":{\"136\":1}}],[\"并减少软件系统中的错误\",{\"1\":{\"139\":2}}],[\"并在请求中提供访问令牌作为身份验证凭据\",{\"1\":{\"451\":1}}],[\"并在适当的时候调用\",{\"1\":{\"413\":1}}],[\"并在方法执行前后执行了额外的逻辑\",{\"1\":{\"392\":1}}],[\"并在这些功能之上添加了一层\",{\"1\":{\"327\":1}}],[\"并在\",{\"1\":{\"289\":1}}],[\"并在运行时生效\",{\"1\":{\"224\":1}}],[\"并在不同的领域中建立模型和规则\",{\"1\":{\"139\":2}}],[\"并在事件发生时接收通知\",{\"1\":{\"136\":1}}],[\"并注册到应用事件发布器中\",{\"1\":{\"135\":1}}],[\"并再次发布消息\",{\"1\":{\"134\":1}}],[\"并向链的第一个处理者发送请求\",{\"1\":{\"125\":1}}],[\"并持有对下一个处理者的引用\",{\"1\":{\"125\":1}}],[\"并不会被后面入队元素所影响\",{\"1\":{\"560\":1}}],[\"并不会受到影响\",{\"1\":{\"110\":1}}],[\"并不可以直接获取属性\",{\"1\":{\"347\":1}}],[\"并不支持读取\",{\"1\":{\"280\":1}}],[\"并不是只是运维人员掌握\",{\"1\":{\"362\":1}}],[\"并不是每份材料到了30分钟就会被重新标记为未审核\",{\"1\":{\"233\":1}}],[\"并不是国内搜索到的无\",{\"1\":{\"111\":1}}],[\"并不作存储作用\",{\"1\":{\"204\":1}}],[\"并且需要增加两个标识域标识指针域\",{\"1\":{\"596\":1}}],[\"并且最大层出现的叶子结点应该依次排列在该层的最左边的位置\",{\"1\":{\"589\":1}}],[\"并且不存在栈满的情况\",{\"1\":{\"572\":1}}],[\"并且不太符合规范\",{\"1\":{\"179\":1}}],[\"并且有大于n\",{\"1\":{\"539\":1}}],[\"并且有nohup\",{\"1\":{\"190\":1}}],[\"并且数组一点定义\",{\"1\":{\"498\":1}}],[\"并且增删改也会修改索引表而导致花费更多的时间\",{\"1\":{\"495\":1}}],[\"并且每一步都在有穷时间内完成\",{\"1\":{\"456\":1}}],[\"并且每个不同请求所需要的\",{\"1\":{\"229\":1}}],[\"并且每个后台对价格的格式\",{\"1\":{\"209\":1}}],[\"并且每个命令的执行还会有实时的动图演示\",{\"1\":{\"99\":1}}],[\"并且是重中之重\",{\"1\":{\"453\":1}}],[\"并且我们如果使用\",{\"1\":{\"453\":1}}],[\"并且适用于分布式环境和跨服务的场景\",{\"1\":{\"448\":1}}],[\"并且随着应用程序的启动和关闭\",{\"1\":{\"430\":1}}],[\"并且这个值匹配给定的条件\",{\"0\":{\"403\":1}}],[\"并且可以更加优雅地处理可能为空的情况\",{\"1\":{\"395\":1}}],[\"并且锁只能升级不能降级\",{\"1\":{\"372\":1}}],[\"并且一个\",{\"1\":{\"372\":1}}],[\"并且一次性加载十份材料也可以提升审批下一位时的体验\",{\"1\":{\"233\":1}}],[\"并且操作风险性高\",{\"1\":{\"368\":1}}],[\"并且为之后结合\",{\"1\":{\"362\":1}}],[\"并且\",{\"1\":{\"349\":1,\"394\":1,\"453\":1}}],[\"并且相应地更新\",{\"1\":{\"347\":1}}],[\"并且相对于枯燥的纸质书籍\",{\"1\":{\"92\":1}}],[\"并且能直接在模版中直接使用\",{\"1\":{\"333\":1}}],[\"并且你的当前工作目录正是打算创建项目的目录下执行下面命令\",{\"1\":{\"332\":1}}],[\"并且箭头函数体中的\",{\"1\":{\"316\":1}}],[\"并且只能声明一次\",{\"1\":{\"298\":1}}],[\"并且沟通便利\",{\"1\":{\"287\":1}}],[\"并且没有其他未验证的方法调用\",{\"1\":{\"258\":2}}],[\"并且结果是相等的\",{\"1\":{\"241\":1}}],[\"并且单元测试成功率不得低于\",{\"1\":{\"240\":1}}],[\"并且了解哪些代码已经被测试覆盖\",{\"1\":{\"239\":1}}],[\"并且连接建立之后并不会主动断开\",{\"1\":{\"205\":1}}],[\"并且修改状态后还需要\",{\"1\":{\"165\":1}}],[\"并且在广泛的生态上来看\",{\"1\":{\"428\":1}}],[\"并且在同业具备自动化代客利率掉期交易的功能基础上\",{\"1\":{\"368\":1}}],[\"并且在编译时无法进行类型检查\",{\"1\":{\"227\":1}}],[\"并且在微服务的项目中我们所开发的项目也都已经部署在容器\",{\"1\":{\"182\":1}}],[\"并且在性能上进行了优化\",{\"1\":{\"148\":1}}],[\"并且在发布者发布消息时接收到通知\",{\"1\":{\"134\":1}}],[\"并且支持在单台计算机到几千台计算机之间进行扩展\",{\"1\":{\"121\":1}}],[\"并且仓库源代码附有测试样例\",{\"1\":{\"92\":1}}],[\"并列句\",{\"0\":{\"59\":1}}],[\"并列多个\",{\"0\":{\"48\":1}}],[\"的顺序\",{\"1\":{\"560\":1}}],[\"的位置时\",{\"1\":{\"557\":1}}],[\"的位置即可\",{\"1\":{\"470\":1}}],[\"的有限集合时\",{\"1\":{\"529\":1}}],[\"的矩阵被称为稀疏矩阵\",{\"1\":{\"503\":1}}],[\"的结点\",{\"1\":{\"473\":1,\"581\":1}}],[\"的直接后继\",{\"1\":{\"470\":1}}],[\"的子树成为\",{\"1\":{\"470\":1}}],[\"的优势在于它根据受保护资源服务器验证访问令牌的有效性\",{\"1\":{\"451\":1}}],[\"的优点是可以减少\",{\"1\":{\"346\":1}}],[\"的工作流程如下\",{\"1\":{\"451\":1}}],[\"的工具发送\",{\"1\":{\"266\":1}}],[\"的登录过程如下所示\",{\"1\":{\"448\":1}}],[\"的特性\",{\"1\":{\"448\":1}}],[\"的攻击\",{\"1\":{\"448\":1}}],[\"的方法直接用起来还是不太顺手\",{\"1\":{\"444\":1}}],[\"的方式\",{\"1\":{\"331\":1}}],[\"的方式就可以直接跳转登录界面了\",{\"1\":{\"153\":1}}],[\"的配置更加简单容易\",{\"1\":{\"441\":1}}],[\"的官方文档的核心功能部分介绍了\",{\"1\":{\"439\":1}}],[\"的生态支持更广\",{\"1\":{\"428\":1}}],[\"的功能\",{\"1\":{\"423\":1}}],[\"的正常请求\",{\"1\":{\"414\":1}}],[\"的请求\",{\"1\":{\"413\":1,\"566\":1}}],[\"的整个生命周期\",{\"1\":{\"412\":1}}],[\"的垃圾回收器进行垃圾回收的\",{\"1\":{\"411\":1}}],[\"的值\",{\"0\":{\"398\":1},\"1\":{\"502\":1}}],[\"的值时\",{\"1\":{\"347\":1}}],[\"的动态代理是一种运行时生成代理对象的机制\",{\"1\":{\"384\":1}}],[\"的集成是通过使用\",{\"1\":{\"382\":1}}],[\"的的处理器重排规则会要求\",{\"1\":{\"380\":1}}],[\"的并发采用的是共享内存模型\",{\"1\":{\"378\":1}}],[\"的并发机制正是依赖了\",{\"1\":{\"370\":1}}],[\"的锁记录里存储偏向锁的线程id\",{\"1\":{\"373\":1}}],[\"的所有权的获取和释放\",{\"1\":{\"372\":1}}],[\"的所有功能\",{\"1\":{\"327\":1}}],[\"的数据写回到系统内存\",{\"1\":{\"371\":1}}],[\"的定义\",{\"1\":{\"371\":1}}],[\"的指令\",{\"1\":{\"370\":1}}],[\"的编译过程\",{\"1\":{\"370\":1}}],[\"的容器编排方式创建\",{\"1\":{\"364\":1}}],[\"的容器夹在组件的方式创建责任链\",{\"1\":{\"130\":1}}],[\"的缩写\",{\"1\":{\"362\":1}}],[\"的世界\",{\"0\":{\"362\":1}}],[\"的选项式写法来创建\",{\"1\":{\"351\":1}}],[\"的属性\",{\"1\":{\"351\":1}}],[\"的底层是用代理去拦截对响应式对象所有属性的访问和修改\",{\"1\":{\"349\":1}}],[\"的底层会调用\",{\"1\":{\"348\":1}}],[\"的好处是\",{\"1\":{\"347\":1}}],[\"的次数\",{\"1\":{\"346\":1}}],[\"的对比算法\",{\"1\":{\"346\":1}}],[\"的上一个兄弟元素必须有\",{\"1\":{\"340\":1}}],[\"的开发\",{\"1\":{\"333\":1}}],[\"的全局入口文件\",{\"1\":{\"332\":1}}],[\"的学习\",{\"1\":{\"331\":1}}],[\"的风格\",{\"1\":{\"331\":1}}],[\"的下一次迭代会是什么样子\",{\"1\":{\"329\":1}}],[\"的下一个版本标准\",{\"1\":{\"297\":1}}],[\"的超集\",{\"1\":{\"327\":1}}],[\"的类型系统\",{\"1\":{\"327\":1}}],[\"的类也有类似封装和继承的概念\",{\"1\":{\"317\":1}}],[\"的命名规范\",{\"1\":{\"324\":1}}],[\"的命令\",{\"1\":{\"156\":1}}],[\"的实现和\",{\"1\":{\"370\":1}}],[\"的实现\",{\"1\":{\"323\":1}}],[\"的实时运行状态\",{\"1\":{\"181\":1}}],[\"的组件中看到这几个部分的排列演示\",{\"1\":{\"323\":1}}],[\"的状态改变\",{\"1\":{\"319\":1}}],[\"的本质是\",{\"1\":{\"317\":1}}],[\"的合并\",{\"1\":{\"309\":1}}],[\"的克隆\",{\"1\":{\"309\":1}}],[\"的迭代\",{\"0\":{\"308\":1}}],[\"的完整性和确保它没有被篡改\",{\"1\":{\"294\":1}}],[\"的加密\",{\"1\":{\"294\":1}}],[\"的核心概念包括以下角色\",{\"1\":{\"451\":1}}],[\"的核心原因就是不想代码出现\",{\"1\":{\"407\":1}}],[\"的核心\",{\"1\":{\"294\":1}}],[\"的转变反映了\",{\"1\":{\"293\":1}}],[\"的兴起\",{\"1\":{\"293\":1}}],[\"的分布式多分支更适合团队协作\",{\"1\":{\"282\":1}}],[\"的效果\",{\"1\":{\"282\":1}}],[\"的日子里\",{\"1\":{\"282\":1}}],[\"的文件\",{\"1\":{\"332\":1}}],[\"的文件后解析\",{\"1\":{\"277\":1}}],[\"的文件夹\",{\"1\":{\"191\":1}}],[\"的服务来发布接口就可以发布为web\",{\"1\":{\"271\":1}}],[\"的怀抱了\",{\"1\":{\"271\":1}}],[\"的协议\",{\"1\":{\"270\":1}}],[\"的语言\",{\"1\":{\"269\":1}}],[\"的技术\",{\"1\":{\"268\":1}}],[\"的天下\",{\"1\":{\"266\":1}}],[\"的还多吗\",{\"1\":{\"266\":1}}],[\"的异常\",{\"1\":{\"259\":1}}],[\"的重新执行一次获取价格文件\",{\"1\":{\"234\":1}}],[\"的例子\",{\"0\":{\"223\":1}}],[\"的基本思想是将这些横切关注点与系统的核心业务逻辑分离开来\",{\"1\":{\"222\":1}}],[\"的基础\",{\"1\":{\"331\":1}}],[\"的基础命令\",{\"1\":{\"99\":1}}],[\"的基础用法\",{\"1\":{\"99\":1}}],[\"的原因只有优雅二字而已\",{\"1\":{\"217\":1}}],[\"的我那时候还没有认识到问题的严重性\",{\"1\":{\"217\":1}}],[\"的变量进行写操作的时候\",{\"1\":{\"371\":1}}],[\"的变量\",{\"1\":{\"214\":1}}],[\"的老项目完全没有这种需求\",{\"1\":{\"213\":1}}],[\"的老手\",{\"1\":{\"99\":1}}],[\"的观察者收到参数后对报文进行封装并发送\",{\"1\":{\"209\":1}}],[\"的参数传递发布出去\",{\"1\":{\"209\":1}}],[\"的项目经验\",{\"1\":{\"419\":1}}],[\"的项目\",{\"1\":{\"179\":1}}],[\"的时候得心应手\",{\"1\":{\"444\":1}}],[\"的时候\",{\"1\":{\"179\":1,\"500\":2,\"501\":4,\"585\":1}}],[\"的高可用是基于硬件的一种模拟集群\",{\"1\":{\"173\":1}}],[\"的代理实现是反向的\",{\"1\":{\"162\":1}}],[\"的起停了\",{\"1\":{\"156\":1}}],[\"的机制来解决\",{\"1\":{\"148\":1}}],[\"的一些性能和稳定性问题\",{\"1\":{\"148\":1}}],[\"的包从国外的镜像源切换到国内的镜像源\",{\"1\":{\"148\":1}}],[\"的事件机制重写这个例子\",{\"1\":{\"135\":1}}],[\"的事件机制或\",{\"1\":{\"133\":1}}],[\"的事件总线\",{\"1\":{\"133\":1}}],[\"的许可证\",{\"1\":{\"115\":1}}],[\"的版本\",{\"1\":{\"111\":1}}],[\"的付费套餐\",{\"1\":{\"108\":1}}],[\"的使用方法\",{\"1\":{\"99\":1}}],[\"的使用率肯定是名列前茅\",{\"1\":{\"94\":1}}],[\"的口号\",{\"1\":{\"96\":1}}],[\"的圣经绝对就是下面这本\",{\"1\":{\"96\":1}}],[\"的就业地位不知道还能撑多久\",{\"1\":{\"95\":1}}],[\"的\",{\"1\":{\"95\":1,\"130\":1,\"207\":1,\"209\":1,\"217\":1,\"222\":1,\"225\":1,\"253\":1,\"266\":1,\"271\":1,\"282\":1,\"289\":1,\"304\":1,\"320\":1,\"323\":1,\"331\":2,\"333\":1,\"382\":1,\"414\":1,\"415\":1}}],[\"的书籍\",{\"1\":{\"92\":1}}],[\"的出现\",{\"1\":{\"331\":1}}],[\"的出现终于让\",{\"1\":{\"148\":1}}],[\"的出现就是为了解决这个问题\",{\"1\":{\"139\":1}}],[\"的出现不亚于互联网的诞生\",{\"1\":{\"2\":1}}],[\"的出现会不会成为第四次工业革命的契机\",{\"1\":{\"2\":1}}],[\"剑指offer\",{\"1\":{\"92\":1,\"94\":1}}],[\"其规则也正如上面的孩子兄弟表示法图所示\",{\"1\":{\"602\":1}}],[\"其尾指针域为\",{\"1\":{\"599\":1}}],[\"其特点就是每个结点至多只有两颗子树\",{\"1\":{\"588\":1}}],[\"其特点是对频率高的字符覆以短编码\",{\"1\":{\"582\":1}}],[\"其特点是树的结构通常不是一次生成的\",{\"1\":{\"469\":1}}],[\"其余结点可以分为\",{\"1\":{\"585\":1}}],[\"其余顶点的入度均为1的有向图称为有向树\",{\"1\":{\"542\":1}}],[\"其余顶点不重复出现的回路称为简单回路\",{\"1\":{\"540\":1}}],[\"其权值正好对应它出现的次数\",{\"1\":{\"582\":1}}],[\"其长度为串中空格字符的个数\",{\"1\":{\"573\":1}}],[\"其嵌套的顺序任意\",{\"1\":{\"562\":1}}],[\"其邻接多重表和邻接表的区别在于\",{\"1\":{\"547\":1}}],[\"其头指针都是只想头结点的非空指针\",{\"1\":{\"511\":1}}],[\"其基本思想是\",{\"1\":{\"498\":1}}],[\"其基本思想是每次将一个带排序的记录按照其关键字大小插入到前面已排好序的子序列\",{\"1\":{\"488\":1}}],[\"其存储的结构关系为\",{\"1\":{\"498\":1}}],[\"其维数和维界就不会改变\",{\"1\":{\"498\":1}}],[\"其主要职责就是实现一个三方互信的功能\",{\"1\":{\"451\":1}}],[\"其模式也和\",{\"1\":{\"430\":1}}],[\"其过程听起来就让人头皮发麻\",{\"1\":{\"362\":1}}],[\"其书写原则就是使用\",{\"1\":{\"324\":1}}],[\"其设计思想是在编译时就能确定模块的依赖关系\",{\"1\":{\"318\":1}}],[\"其目的是为了有规律的测试一个类的各个部分是否具备正确的行为\",{\"1\":{\"238\":1}}],[\"其次到了双端队列\",{\"1\":{\"560\":1}}],[\"其次想让\",{\"1\":{\"484\":1}}],[\"其次是前台界面客户信息脱敏\",{\"1\":{\"225\":1}}],[\"其次就是打包工具的选择了\",{\"1\":{\"148\":1}}],[\"其中每个结合本身又是一棵树\",{\"1\":{\"585\":1}}],[\"其中每个模块的相对位置又可以分流式布局\",{\"1\":{\"323\":1}}],[\"其中带权路径长度最小的二叉树称为哈夫曼树\",{\"1\":{\"580\":1}}],[\"其中中缀表达式不仅依赖算符的优先级\",{\"1\":{\"563\":1}}],[\"其中v\",{\"1\":{\"528\":1}}],[\"其中a1是唯一的第一个元素\",{\"1\":{\"505\":1}}],[\"其中n为表长\",{\"1\":{\"505\":1}}],[\"其中另外一半的元素全部都是一个元素\",{\"1\":{\"501\":1}}],[\"其中的序是指根结点在何时被访问\",{\"1\":{\"594\":1}}],[\"其中的元素可以分为三个部分\",{\"1\":{\"500\":1}}],[\"其中的每条指令有一个或多个操作\",{\"1\":{\"456\":1}}],[\"其中最直观也是最重要的就是\",{\"1\":{\"331\":1}}],[\"其中包含\",{\"1\":{\"286\":1}}],[\"其中编写项目启动和部署信息和项目简介\",{\"1\":{\"286\":1}}],[\"其中有个环节是要求考生提交个人信息进行审核\",{\"1\":{\"233\":1}}],[\"其中\",{\"1\":{\"171\":2,\"498\":1,\"573\":2}}],[\"其中观察者和被观察者之间的依赖关系是动态的\",{\"1\":{\"136\":1}}],[\"其拥有庞大的包仓库和活跃的社区支持\",{\"1\":{\"148\":1}}],[\"其核心部件包括分布式文件系统\",{\"1\":{\"121\":1}}],[\"其他和树转化二叉树的规则相同\",{\"1\":{\"602\":1}}],[\"其他两种是通过增加标识位来区别队空和队满\",{\"1\":{\"557\":1}}],[\"其他微服务可以通过查询注册中心获取所需服务的信息\",{\"1\":{\"427\":1}}],[\"其他依赖项\",{\"1\":{\"391\":2}}],[\"其他线程获取锁就会处于阻塞状态\",{\"1\":{\"374\":1}}],[\"其他的根本见不着它们的影子\",{\"1\":{\"419\":1}}],[\"其他的\",{\"1\":{\"280\":1}}],[\"其他的汇率要\",{\"1\":{\"229\":1}}],[\"其他的打包工具还有像\",{\"1\":{\"148\":1}}],[\"其他逻辑省略\",{\"1\":{\"130\":1}}],[\"其他技能\",{\"0\":{\"97\":1}}],[\"其他细节\",{\"0\":{\"90\":1}}],[\"其实算法并不是必须牵扯数学的复杂东西\",{\"1\":{\"455\":1}}],[\"其实开发规范这个事情在协作的时候是个非常让人高血压的事情\",{\"1\":{\"291\":1}}],[\"其实\",{\"1\":{\"282\":1}}],[\"其实在生活中我们已经不知不觉学会了很多算法\",{\"1\":{\"455\":1}}],[\"其实在\",{\"1\":{\"282\":1}}],[\"其实在我看来这些老项目还是应该尽早维护\",{\"1\":{\"202\":1}}],[\"其实现在想想这个逻辑还是存在不少问题的\",{\"1\":{\"233\":1}}],[\"其实学习使用\",{\"1\":{\"222\":1}}],[\"其实这个脚本的内容就挺\",{\"1\":{\"217\":1}}],[\"其实相对于我这个年龄段的程序员来说\",{\"1\":{\"217\":1}}],[\"其实不然\",{\"1\":{\"137\":1}}],[\"其实好用的工具从来不用推荐\",{\"1\":{\"114\":1}}],[\"其实程序员很大一份就是在和数据打交道\",{\"1\":{\"93\":1}}],[\"其实每次提到数据结构和算法它们都是共同出现的\",{\"1\":{\"91\":1}}],[\"其实还是很想写一些关于源码或者底层的东西\",{\"1\":{\"3\":1}}],[\"乒乓球\",{\"0\":{\"82\":1}}],[\"体育是一种生活方式\",{\"0\":{\"81\":1}}],[\"形成一个完整的业务单元\",{\"1\":{\"143\":1}}],[\"形而上\",{\"0\":{\"79\":1}}],[\"形容词和副词\",{\"0\":{\"53\":1}}],[\"告示\",{\"0\":{\"78\":1}}],[\"署名\",{\"0\":{\"77\":1}}],[\"致辞\",{\"0\":{\"76\":1}}],[\"书中提供了大量的应用案例\",{\"1\":{\"99\":1}}],[\"书信\",{\"0\":{\"73\":1}}],[\"书法是一门艺术\",{\"0\":{\"5\":1}}],[\"虚拟化技术是大势所趋\",{\"1\":{\"182\":1}}],[\"虚拟主机域名匹配规则\",{\"0\":{\"161\":1}}],[\"虚拟主机\",{\"1\":{\"154\":1}}],[\"虚拟\",{\"0\":{\"69\":1,\"346\":1},\"1\":{\"346\":2}}],[\"宾语从句\",{\"0\":{\"63\":1}}],[\"表中的元素具有抽象性\",{\"1\":{\"505\":1}}],[\"表中的元素类型数据都相同\",{\"1\":{\"505\":1}}],[\"表中元素都是数据结构\",{\"1\":{\"505\":1}}],[\"表中元素有先后顺序\",{\"1\":{\"505\":1}}],[\"表中元素具有逻辑上的顺序性\",{\"1\":{\"505\":1}}],[\"表中元素个数有限\",{\"1\":{\"505\":1}}],[\"表单\",{\"1\":{\"409\":1,\"414\":1,\"415\":1}}],[\"表示转向右孩子\",{\"1\":{\"582\":1}}],[\"表示转向左孩子\",{\"1\":{\"582\":1}}],[\"表示图g中顶点关系的集合\",{\"1\":{\"528\":1}}],[\"表示图g中顶点的有限非空集\",{\"1\":{\"528\":1}}],[\"表示当前线程获取了锁\",{\"1\":{\"374\":1}}],[\"表示独一无二的值\",{\"1\":{\"302\":1}}],[\"表示层负责处理用户界面和用户交互\",{\"1\":{\"145\":1}}],[\"表示层\",{\"1\":{\"145\":1}}],[\"表语从句\",{\"0\":{\"61\":1}}],[\"表达式求值可以结合二叉树进行理解\",{\"1\":{\"563\":1}}],[\"表达式\",{\"1\":{\"93\":1,\"320\":1}}],[\"表达推测的含义\",{\"0\":{\"38\":1}}],[\"表达说话的语气\",{\"0\":{\"37\":1}}],[\"9m\",{\"1\":{\"280\":1}}],[\"912\",{\"1\":{\"225\":2}}],[\"9\",{\"0\":{\"50\":1},\"1\":{\"134\":1}}],[\"8110\",{\"1\":{\"437\":1}}],[\"8中的\",{\"1\":{\"395\":1}}],[\"8080\",{\"1\":{\"202\":1,\"276\":1,\"364\":2}}],[\"80\",{\"1\":{\"165\":1,\"240\":1}}],[\"88\",{\"1\":{\"165\":1}}],[\"8\",{\"0\":{\"49\":1,\"393\":1},\"1\":{\"217\":1,\"272\":1,\"394\":1}}],[\"75\",{\"1\":{\"483\":2}}],[\"7\",{\"0\":{\"45\":1},\"1\":{\"115\":1,\"280\":1,\"483\":1}}],[\"名词性从句\",{\"0\":{\"62\":1}}],[\"名词\",{\"0\":{\"44\":1}}],[\"情态\",{\"0\":{\"36\":1}}],[\"现在让我做项目\",{\"1\":{\"419\":1}}],[\"现在大环境处在敏捷开发和\",{\"1\":{\"362\":1}}],[\"现在认识到的布局更多的是指嵌套\",{\"1\":{\"323\":1}}],[\"现在数据类型有\",{\"1\":{\"302\":1}}],[\"现在想想当时确实是激情澎湃\",{\"1\":{\"282\":1}}],[\"现在用\",{\"1\":{\"266\":1}}],[\"现在我们就可以使用\",{\"1\":{\"156\":1}}],[\"现在工作了之后才明白这种趋势在内卷的环境下越来越明显了\",{\"1\":{\"147\":1}}],[\"现在完成进行时\",{\"0\":{\"34\":1}}],[\"现在完成时和一般过去时的区别\",{\"0\":{\"30\":1}}],[\"现在完成时\",{\"0\":{\"29\":1}}],[\"现在进行时\",{\"0\":{\"25\":1}}],[\"主对角线和下半区域\",{\"1\":{\"500\":1}}],[\"主打的是简单\",{\"1\":{\"453\":1}}],[\"主打一本工具书的定位\",{\"1\":{\"96\":1}}],[\"主页\",{\"1\":{\"434\":1}}],[\"主题内容\",{\"1\":{\"294\":1}}],[\"主题\",{\"1\":{\"294\":1}}],[\"主要有先根遍历和后根遍历两种方式\",{\"1\":{\"603\":1}}],[\"主要功能如下\",{\"1\":{\"430\":1}}],[\"主要是公司的框架都是2\",{\"1\":{\"331\":1}}],[\"主要是通过\",{\"1\":{\"270\":1}}],[\"主要组成由\",{\"1\":{\"270\":1}}],[\"主进程文件\",{\"1\":{\"157\":1}}],[\"主机接到请求后再向缓冲区写入打印数据\",{\"1\":{\"566\":1}}],[\"主机把要打印的数据写入这个缓冲区\",{\"1\":{\"566\":1}}],[\"主机把数据输送给打印机\",{\"1\":{\"566\":1}}],[\"主机\",{\"1\":{\"155\":1}}],[\"主语从句\",{\"0\":{\"64\":1}}],[\"主语的变化\",{\"0\":{\"43\":1}}],[\"主系表结构\",{\"0\":{\"15\":1}}],[\"主谓宾补结构\",{\"0\":{\"14\":1}}],[\"主谓宾结构\",{\"0\":{\"12\":1}}],[\"主谓双宾结构\",{\"0\":{\"13\":1}}],[\"主谓结构\",{\"0\":{\"11\":1}}],[\"句子结构\",{\"0\":{\"10\":1}}],[\"gateway\",{\"0\":{\"422\":1},\"1\":{\"423\":2}}],[\"gif\",{\"1\":{\"409\":1}}],[\"gitlab\",{\"1\":{\"362\":1}}],[\"git存在快照记录这两条分支前后文件变动\",{\"1\":{\"289\":1}}],[\"gitignore和readme\",{\"1\":{\"286\":1}}],[\"gitignore文件并根据项目开发中ide或编译过程中产生的杂余文件作对应的筛除\",{\"1\":{\"286\":1}}],[\"git仓库的创建和使用\",{\"0\":{\"285\":1}}],[\"git分支含义\",{\"0\":{\"284\":1}}],[\"git分支开发规约\",{\"0\":{\"283\":1}}],[\"git\",{\"0\":{\"99\":1,\"281\":1},\"1\":{\"98\":3,\"99\":11,\"219\":4,\"282\":7}}],[\"github\",{\"1\":{\"92\":1,\"99\":2,\"362\":2,\"421\":2}}],[\"groupid>\",{\"1\":{\"391\":1,\"433\":2,\"436\":2}}],[\"groovy\",{\"1\":{\"364\":1}}],[\"gradle\",{\"1\":{\"217\":2}}],[\"grammer\",{\"0\":{\"8\":1}}],[\"globalproperties\",{\"1\":{\"360\":1}}],[\"gbprmb\",{\"1\":{\"229\":1}}],[\"generation\",{\"1\":{\"385\":1}}],[\"generator\",{\"0\":{\"320\":1},\"1\":{\"320\":4}}],[\"geospatial\",{\"1\":{\"200\":1}}],[\"gethead\",{\"1\":{\"555\":1}}],[\"getelem\",{\"1\":{\"506\":1}}],[\"getenv\",{\"1\":{\"214\":1}}],[\"getinterfaces\",{\"1\":{\"388\":1}}],[\"getidcard\",{\"1\":{\"130\":2}}],[\"getidtype\",{\"1\":{\"130\":2}}],[\"getownpropertysymbols\",{\"1\":{\"304\":1}}],[\"getorder\",{\"1\":{\"130\":4}}],[\"getfilename\",{\"1\":{\"280\":3}}],[\"getfield\",{\"1\":{\"227\":1}}],[\"getfields\",{\"1\":{\"227\":1}}],[\"getrsource\",{\"1\":{\"280\":1}}],[\"getrequesturi\",{\"1\":{\"224\":1}}],[\"getrequest\",{\"1\":{\"224\":2}}],[\"getrequestattributes\",{\"1\":{\"224\":1}}],[\"getrealname\",{\"1\":{\"130\":1}}],[\"getuser\",{\"1\":{\"388\":2}}],[\"getuserbyid\",{\"1\":{\"253\":2,\"254\":2,\"255\":2,\"256\":2}}],[\"getusername\",{\"1\":{\"130\":2}}],[\"getcrnm\",{\"1\":{\"229\":1}}],[\"getconstructor\",{\"1\":{\"227\":1}}],[\"getconstructors\",{\"1\":{\"227\":1}}],[\"getclassloader\",{\"1\":{\"388\":1}}],[\"getclass\",{\"1\":{\"224\":2,\"229\":2,\"388\":2}}],[\"getargument\",{\"1\":{\"260\":1}}],[\"getargs\",{\"1\":{\"224\":1}}],[\"getannotation\",{\"1\":{\"224\":2}}],[\"getabsolutepath\",{\"1\":{\"202\":1}}],[\"getparametertypes\",{\"1\":{\"224\":1}}],[\"getpassword\",{\"1\":{\"130\":1}}],[\"getname\",{\"1\":{\"224\":1,\"388\":2}}],[\"getdeclaredfields\",{\"1\":{\"229\":1}}],[\"getdeclaredmethod\",{\"1\":{\"224\":1}}],[\"getdeclaringtype\",{\"1\":{\"224\":1}}],[\"gettop\",{\"1\":{\"569\":1}}],[\"getting\",{\"1\":{\"313\":1,\"315\":1,\"388\":1}}],[\"getter\",{\"1\":{\"280\":1,\"317\":1,\"347\":1,\"351\":2,\"593\":2}}],[\"gettelephone\",{\"1\":{\"130\":1}}],[\"gettype\",{\"1\":{\"229\":1}}],[\"gettarget\",{\"1\":{\"224\":2}}],[\"getlogger\",{\"1\":{\"224\":1}}],[\"getsnowflakenextid\",{\"1\":{\"225\":2}}],[\"getsignature\",{\"1\":{\"224\":1}}],[\"getserver\",{\"1\":{\"202\":1}}],[\"getmapping\",{\"1\":{\"225\":1}}],[\"getmail\",{\"1\":{\"130\":1}}],[\"getmethods\",{\"1\":{\"227\":1}}],[\"getmethod\",{\"1\":{\"224\":2,\"227\":1,\"229\":1}}],[\"getmessage\",{\"1\":{\"135\":2}}],[\"get\",{\"0\":{\"399\":1},\"1\":{\"130\":1,\"229\":1,\"280\":1,\"313\":2,\"314\":2,\"315\":2,\"317\":1,\"347\":1,\"399\":1,\"405\":2,\"407\":1,\"413\":1,\"414\":1,\"548\":1}}],[\"getbeansoftype\",{\"1\":{\"130\":1}}],[\"gg\",{\"1\":{\"194\":1}}],[\"g\",{\"1\":{\"194\":2,\"225\":2,\"459\":1,\"528\":2,\"548\":10}}],[\"g表示全局\",{\"1\":{\"194\":1}}],[\"gc\",{\"1\":{\"181\":1}}],[\"gcc\",{\"1\":{\"155\":1}}],[\"guava\",{\"1\":{\"133\":1}}],[\"gui事件处理\",{\"1\":{\"136\":1}}],[\"gui\",{\"1\":{\"128\":1,\"136\":1}}],[\"google\",{\"1\":{\"133\":1}}],[\"golang\",{\"1\":{\"95\":1}}],[\"gpt\",{\"1\":{\"2\":1}}],[\"学技术也是有鄙视链的\",{\"1\":{\"147\":1}}],[\"学习它可以让我们更好的理解\",{\"1\":{\"362\":1}}],[\"学习路线\",{\"1\":{\"227\":1}}],[\"学习后我们再也不用受各种安装环境时提示安装失败的折磨\",{\"1\":{\"182\":1}}],[\"学习\",{\"1\":{\"148\":1,\"182\":1,\"331\":1,\"453\":1}}],[\"学习的时候一边阅读一边自己实现还是挺容易理解的\",{\"1\":{\"101\":1}}],[\"学习网站\",{\"1\":{\"99\":1}}],[\"学习之路\",{\"0\":{\"3\":1}}],[\"学一门外语\",{\"0\":{\"7\":1}}],[\"谁知道未来会不会有什么高大上的工作做做\",{\"1\":{\"4\":1}}],[\"搞一些缝缝补补的工作\",{\"1\":{\"4\":1}}],[\"天天就是维护\",{\"1\":{\"4\":1}}],[\"不含任何元素空表\",{\"1\":{\"568\":1}}],[\"不难看出在不带头结点链队列操作比较麻烦\",{\"1\":{\"558\":1}}],[\"不带头结点的链式队列\",{\"1\":{\"558\":1}}],[\"不包含任何元素的空表\",{\"1\":{\"554\":1}}],[\"不包含逻辑处理的代码可屏蔽\",{\"1\":{\"242\":1}}],[\"不存在顶点到自身的边\",{\"1\":{\"530\":1}}],[\"不存在两个相邻的红结点\",{\"1\":{\"476\":1}}],[\"不适合于链式存储结构\",{\"1\":{\"464\":1}}],[\"不为空则返回对象\",{\"0\":{\"404\":1}}],[\"不为空则返回该对象\",{\"0\":{\"399\":1,\"400\":1,\"401\":1}}],[\"不然的话\",{\"1\":{\"394\":1}}],[\"不要求逻辑上相邻的元素在物理位置上也相邻\",{\"1\":{\"495\":1}}],[\"不要求目标对象实现接口\",{\"1\":{\"385\":1}}],[\"不要轻易\",{\"1\":{\"407\":1}}],[\"不要嵌套\",{\"1\":{\"319\":1}}],[\"不可中断的一个或者一系列指令\",{\"1\":{\"380\":1}}],[\"不可直接push\",{\"1\":{\"284\":1}}],[\"不交换名义本金的方式\",{\"1\":{\"368\":1}}],[\"不能直接得到结点在遍历中的前驱和后继\",{\"1\":{\"596\":1}}],[\"不能互换被称为有序树\",{\"1\":{\"586\":1}}],[\"不能把以该结点为根的子树上的结点全部删除\",{\"1\":{\"470\":1}}],[\"不能同时使用\",{\"1\":{\"348\":1}}],[\"不能读取的文件\",{\"1\":{\"237\":1}}],[\"不完全解构\",{\"1\":{\"300\":1,\"301\":1}}],[\"不公开也不建议第三方使用\",{\"1\":{\"294\":1}}],[\"不允许进行插入和删除的那一端\",{\"1\":{\"568\":1}}],[\"不允许push代码\",{\"1\":{\"286\":1}}],[\"不允许直接在该分支做功能开发\",{\"1\":{\"284\":1}}],[\"不是target\",{\"1\":{\"313\":1}}],[\"不是强制性的\",{\"1\":{\"294\":1}}],[\"不是一种技术\",{\"1\":{\"267\":1}}],[\"不是更香\",{\"1\":{\"266\":1}}],[\"不是吧不是吧\",{\"1\":{\"115\":1}}],[\"不支持变量提升\",{\"1\":{\"298\":1}}],[\"不支持分支\",{\"1\":{\"282\":1}}],[\"不支持\",{\"1\":{\"246\":8}}],[\"不需要加\",{\"1\":{\"318\":1}}],[\"不需要\",{\"1\":{\"245\":4}}],[\"不涉及\",{\"1\":{\"245\":5}}],[\"不依赖环境信息\",{\"1\":{\"245\":4}}],[\"不依赖人工验证\",{\"1\":{\"241\":1}}],[\"不建议启动\",{\"1\":{\"244\":1}}],[\"不建议调用数据库\",{\"1\":{\"244\":1}}],[\"不通过质量门禁则不能上线\",{\"1\":{\"239\":1}}],[\"不会破坏二叉树的性质\",{\"1\":{\"470\":1}}],[\"不会消耗\",{\"1\":{\"375\":1}}],[\"不会用到数据库\",{\"1\":{\"204\":1}}],[\"不会总是每次都找到此执行文件执行的\",{\"1\":{\"156\":1}}],[\"不输出任何日志\",{\"1\":{\"190\":1}}],[\"不常用\",{\"0\":{\"166\":1,\"167\":1,\"168\":1,\"169\":1}}],[\"不再仅仅运行在浏览器\",{\"1\":{\"148\":1}}],[\"不符合现代java语言的设计原则和最佳实践\",{\"1\":{\"133\":1}}],[\"不同的是\",{\"1\":{\"349\":1}}],[\"不同的命令\",{\"1\":{\"128\":1}}],[\"不同的处理器可以处理不同类型的命令\",{\"1\":{\"128\":1}}],[\"不同的日志级别\",{\"1\":{\"128\":1}}],[\"不同级别的审批者可以形成一个责任链\",{\"1\":{\"128\":1}}],[\"不同级别的日志可以由不同的处理器处理\",{\"1\":{\"128\":1}}],[\"不同开发工作模式有不同的用法\",{\"1\":{\"99\":1}}],[\"不过这里的指针用数组的下标来代替\",{\"1\":{\"525\":1}}],[\"不过这个方法有个弊端\",{\"1\":{\"214\":1}}],[\"不过使用起来也要麻烦一些\",{\"1\":{\"428\":1}}],[\"不过用\",{\"1\":{\"376\":1}}],[\"不过在这些比较过程中\",{\"1\":{\"346\":1}}],[\"不过在一些特殊情况下合理利用反射可以为我们带来灵活性和扩展性\",{\"1\":{\"227\":1}}],[\"不过类中的\",{\"1\":{\"317\":1}}],[\"不过更新之后感觉\",{\"1\":{\"297\":1}}],[\"不过当时那已经是一个老项目了\",{\"1\":{\"233\":1}}],[\"不过对我来说\",{\"1\":{\"217\":1}}],[\"不过我个人是没用过\",{\"1\":{\"179\":1}}],[\"不过最近一款开源并且号称新一代的\",{\"1\":{\"150\":1}}],[\"不过就目前而言\",{\"1\":{\"95\":1}}],[\"不过说实话之前天天\",{\"1\":{\"4\":1}}],[\"不知道现在还有没有人总结学历路线这个东西\",{\"1\":{\"3\":1}}],[\"工厂是领域中的一个概念\",{\"1\":{\"143\":1}}],[\"工厂\",{\"1\":{\"143\":1}}],[\"工欲善其事\",{\"1\":{\"114\":1}}],[\"工作场景等部分\",{\"1\":{\"282\":1}}],[\"工作中遇到的定时任务场景\",{\"0\":{\"232\":1}}],[\"工作中遇到的ant打包需求\",{\"0\":{\"218\":1}}],[\"工作中的业务难免要定时任务打交道\",{\"1\":{\"231\":1}}],[\"工作中使用反射的例子\",{\"0\":{\"228\":1}}],[\"工作中使用到\",{\"0\":{\"223\":1}}],[\"工作模式\",{\"0\":{\"158\":1}}],[\"工作流基于业务流\",{\"1\":{\"103\":1}}],[\"工作流\",{\"1\":{\"103\":1}}],[\"工作流引擎\",{\"0\":{\"102\":1}}],[\"工作实战\",{\"0\":{\"4\":1}}],[\"工具方法服务类和具体实现类\",{\"0\":{\"444\":1}}],[\"工具对比合并到上一层文件夹中\",{\"1\":{\"282\":1}}],[\"工具生成客户端\",{\"0\":{\"277\":1}}],[\"工具要想用的好\",{\"1\":{\"115\":1}}],[\"工具的下载量就证明了它可以胜任好自己的本职工作\",{\"1\":{\"114\":1}}],[\"工具\",{\"1\":{\"99\":1,\"362\":1}}],[\"工具很多事情变得异常简单轻松\",{\"1\":{\"2\":1}}],[\"毕竟使用\",{\"1\":{\"271\":1}}],[\"毕竟现在毕竟热门框架的官网都会把常用的命令给列举出来\",{\"1\":{\"148\":1}}],[\"毕竟现在博客还属于前期\",{\"1\":{\"3\":1}}],[\"毕竟自己现在不是刚毕业了\",{\"1\":{\"3\":1}}],[\"一方面是解决由多用户引起的资源竞争问题\",{\"1\":{\"566\":1}}],[\"一方面是解决主机与外部设备之间速度不匹配的问题\",{\"1\":{\"566\":1}}],[\"一维数组可视为一个线性表\",{\"1\":{\"498\":1}}],[\"一次遍历只能访问到该顶点在连通分量的所有顶点\",{\"1\":{\"552\":1}}],[\"一次查找的长度是指需要比较的关键字次数\",{\"1\":{\"462\":1}}],[\"一次上线流程就此完成\",{\"1\":{\"287\":1}}],[\"一片红海\",{\"1\":{\"419\":1}}],[\"一塌糊涂\",{\"1\":{\"419\":1}}],[\"一开始我在知道这些\",{\"1\":{\"405\":1}}],[\"一开始订阅者订阅了两个发布者\",{\"1\":{\"134\":1}}],[\"一键部署上线已经不是问题\",{\"1\":{\"362\":1}}],[\"一年多的时间里每次的上线窗口的规范和方式一直在变化\",{\"1\":{\"362\":1}}],[\"一起使用时具有可靠的类型推断支持\",{\"1\":{\"329\":1}}],[\"一不小心可能就会影响到其他元素\",{\"1\":{\"324\":1}}],[\"一旦出现结点为叶子结点或者只有左孩子\",{\"1\":{\"589\":1}}],[\"一旦你声明一个选择器\",{\"1\":{\"324\":1}}],[\"一旦声明常量的值就不能改变\",{\"1\":{\"298\":1}}],[\"一定要创建\",{\"1\":{\"286\":1}}],[\"一天就整出了一份我们自己使用的\",{\"1\":{\"282\":1}}],[\"一种是延续\",{\"1\":{\"333\":1}}],[\"一种是放在云平台读取\",{\"1\":{\"213\":1}}],[\"一种非字符串的新数据类型\",{\"1\":{\"302\":1}}],[\"一种用于描述\",{\"1\":{\"268\":1}}],[\"一套通过简单方法对于给定的接口生成\",{\"1\":{\"246\":1}}],[\"一些项目并没有配置平台\",{\"1\":{\"362\":1}}],[\"一些高端的场景我倒是没有遇到过\",{\"1\":{\"232\":1}}],[\"一些传统的工具的地位已经不保\",{\"1\":{\"2\":1}}],[\"一包到底\",{\"1\":{\"213\":1}}],[\"一直等到只有锁的线程释放锁再唤醒这些阻塞线程进行新一轮争夺锁之战\",{\"1\":{\"374\":1}}],[\"一直从总价格队列中\",{\"1\":{\"209\":1}}],[\"一直到最新的匹配结果\",{\"1\":{\"171\":1}}],[\"一直浮于表面可不行\",{\"1\":{\"3\":1}}],[\"一句话来说就是站在用户角度对后台服务器是否可见\",{\"1\":{\"162\":1}}],[\"一步一步完成即可\",{\"1\":{\"153\":1}}],[\"一对多的依赖关系\",{\"1\":{\"136\":1}}],[\"一书中的一句话\",{\"1\":{\"122\":1}}],[\"一个高度为h\",{\"1\":{\"589\":1}}],[\"一个顶点的入度为0\",{\"1\":{\"542\":1}}],[\"一个图g如果满足不存在重复边\",{\"1\":{\"530\":1}}],[\"一个值的集合和定义在此集合上的一组操作的总称\",{\"1\":{\"492\":1}}],[\"一个数据元素可以由若干数据项组成\",{\"1\":{\"492\":1}}],[\"一个好的算法应该达到正确性\",{\"1\":{\"456\":1}}],[\"一个算法的设计取决于所选的逻辑结构\",{\"1\":{\"493\":1}}],[\"一个算法的时间复杂度和空间复杂度中较大的一个决定了算法的时间效率\",{\"1\":{\"459\":1}}],[\"一个算法所需要的空间包括存放本身所用的指令\",{\"1\":{\"459\":1}}],[\"一个算法必须有一个或多个输出\",{\"1\":{\"456\":1}}],[\"一个算法必须在执行有穷步骤后结束\",{\"1\":{\"456\":1}}],[\"一个算法可以有零个或多个输入\",{\"1\":{\"456\":1}}],[\"一个机会来检测\",{\"1\":{\"347\":1}}],[\"一个是增设表示元素个数的单位成员和\",{\"1\":{\"557\":1}}],[\"一个是\",{\"1\":{\"308\":4}}],[\"一个项目只能有一个develop分支\",{\"1\":{\"284\":1}}],[\"一个项目只能有一个master分支\",{\"1\":{\"284\":1}}],[\"一个古老的价格处理程序\",{\"1\":{\"229\":1}}],[\"一个关注点的模块化\",{\"1\":{\"222\":1}}],[\"一个模块化的保持会话方式\",{\"1\":{\"178\":1}}],[\"一个请假申请可以从部门经理传递到人力资源经理\",{\"1\":{\"128\":1}}],[\"一个按钮点击事件可以被多个处理器处理\",{\"1\":{\"128\":1}}],[\"一个号称全世界最准确的翻译软件\",{\"1\":{\"113\":1}}],[\"一个免费图片托管解决方案\",{\"1\":{\"105\":1}}],[\"一提到\",{\"1\":{\"96\":1,\"115\":1}}],[\"一提到数据结构和算法就不的不让我想到上学时计算机的四大天书\",{\"1\":{\"91\":1}}],[\"一样的\",{\"1\":{\"160\":1}}],[\"一样\",{\"1\":{\"94\":1}}],[\"一般记为\",{\"1\":{\"573\":1}}],[\"一般标识为\",{\"1\":{\"505\":1}}],[\"一般这些微服务网关都与服务注册中心相配合使用\",{\"1\":{\"423\":1}}],[\"一般平时我都是使用\",{\"1\":{\"342\":1}}],[\"一般动静分离都用在中小型网站\",{\"1\":{\"170\":1}}],[\"一般用于二级域名来使用\",{\"1\":{\"161\":1}}],[\"一般\",{\"0\":{\"22\":1},\"1\":{\"277\":1}}],[\"一般将来时\",{\"0\":{\"21\":1}}],[\"一般现在时\",{\"0\":{\"20\":1}}],[\"一般过去时\",{\"0\":{\"19\":1}}],[\"一般状态\",{\"0\":{\"18\":1}}],[\"1个结点的二叉树称为满二叉树\",{\"1\":{\"589\":1}}],[\"1个结点\",{\"1\":{\"587\":1}}],[\"1的时候为栈满\",{\"1\":{\"571\":1}}],[\"1一个为maxsize时各自为空\",{\"1\":{\"571\":1}}],[\"1条边\",{\"1\":{\"535\":1}}],[\"17\",{\"1\":{\"272\":1}}],[\"1og\",{\"1\":{\"236\":2}}],[\"1415926\",{\"1\":{\"298\":2}}],[\"14\",{\"1\":{\"229\":4}}],[\"18\",{\"1\":{\"229\":4,\"316\":3}}],[\"1234\",{\"1\":{\"229\":20}}],[\"12345678912\",{\"1\":{\"225\":1}}],[\"123\",{\"1\":{\"225\":2,\"229\":20}}],[\"1516239022\",{\"1\":{\"294\":1}}],[\"15\",{\"1\":{\"191\":2}}],[\"16\",{\"1\":{\"183\":1}}],[\"1pctl\",{\"1\":{\"153\":2}}],[\"1panel\",{\"0\":{\"149\":1},\"1\":{\"150\":1}}],[\"100\",{\"1\":{\"229\":5,\"240\":3}}],[\"10\",{\"0\":{\"52\":1},\"1\":{\"298\":3,\"301\":3,\"455\":1,\"485\":2}}],[\"1\",{\"0\":{\"117\":1,\"273\":1},\"1\":{\"3\":1,\"130\":1,\"165\":1,\"190\":1,\"217\":1,\"253\":3,\"254\":1,\"255\":1,\"256\":1,\"300\":10,\"308\":4,\"309\":2,\"310\":9,\"311\":7,\"317\":2,\"319\":2,\"320\":2,\"368\":1,\"371\":1,\"455\":1,\"458\":1,\"464\":1,\"472\":1,\"473\":1,\"483\":1,\"489\":1,\"498\":5,\"500\":4,\"501\":5,\"502\":5,\"519\":3,\"539\":1,\"557\":1,\"560\":9,\"568\":1,\"571\":1,\"581\":3,\"582\":1,\"585\":2,\"587\":3,\"590\":7,\"592\":1,\"599\":1}}],[\"到客户端\",{\"1\":{\"409\":1}}],[\"到现在慢慢的将静态代码分析\",{\"1\":{\"362\":1}}],[\"到现在网页项目逐渐趋于模块化后\",{\"1\":{\"323\":1}}],[\"到token\",{\"1\":{\"293\":1}}],[\"到这里git仓库就已经迁移完成了\",{\"1\":{\"287\":1}}],[\"到底是干什么的呢\",{\"1\":{\"266\":1}}],[\"到底什么才是代码的顶峰呢\",{\"1\":{\"122\":1}}],[\"到指定目录\",{\"1\":{\"193\":1}}],[\"到指定文件夹\",{\"1\":{\"193\":1}}],[\"到\",{\"1\":{\"3\":1,\"240\":1,\"289\":1}}],[\"0<=\",{\"1\":{\"498\":1}}],[\"0<\",{\"1\":{\"391\":1}}],[\"0123456789\",{\"1\":{\"298\":1}}],[\"06\",{\"1\":{\"297\":1}}],[\"00\",{\"1\":{\"236\":2}}],[\"000个请求\",{\"1\":{\"108\":1}}],[\"05\",{\"1\":{\"229\":4}}],[\"04\",{\"1\":{\"183\":2}}],[\"0\",{\"1\":{\"3\":1,\"103\":1,\"130\":1,\"194\":1,\"217\":1,\"224\":1,\"236\":2,\"237\":1,\"260\":1,\"280\":1,\"297\":1,\"298\":2,\"308\":4,\"332\":1,\"391\":1,\"451\":7,\"481\":1,\"482\":1,\"485\":6,\"498\":4,\"502\":1,\"505\":1,\"557\":1,\"573\":1,\"582\":1,\"585\":3}}],[\"a5\",{\"1\":{\"568\":1}}],[\"a5为栈顶元素\",{\"1\":{\"568\":1}}],[\"a4\",{\"1\":{\"568\":2}}],[\"a3\",{\"1\":{\"505\":1,\"568\":2}}],[\"a2\",{\"1\":{\"505\":1,\"568\":2}}],[\"a1a2a3\",{\"1\":{\"573\":1}}],[\"a1为栈底元素\",{\"1\":{\"568\":1}}],[\"a1\",{\"1\":{\"502\":1,\"505\":1,\"568\":1}}],[\"aj\",{\"1\":{\"500\":1}}],[\"a0\",{\"1\":{\"498\":3}}],[\"avl\",{\"0\":{\"472\":1},\"1\":{\"476\":1}}],[\"access\",{\"1\":{\"451\":1}}],[\"actuator<\",{\"1\":{\"433\":1,\"436\":1}}],[\"actuator是相互配合使用的\",{\"1\":{\"430\":1}}],[\"actuator\",{\"1\":{\"430\":5}}],[\"actions\",{\"1\":{\"362\":2}}],[\"activiti\",{\"1\":{\"103\":1}}],[\"authorization\",{\"1\":{\"451\":1}}],[\"automatic\",{\"1\":{\"241\":1}}],[\"autowired\",{\"1\":{\"135\":2}}],[\"atomic\",{\"1\":{\"380\":1}}],[\"atomicinteger\",{\"1\":{\"376\":1}}],[\"atomicboolean\",{\"1\":{\"376\":1}}],[\"atleast\",{\"0\":{\"256\":1},\"1\":{\"256\":1}}],[\"aaa\",{\"1\":{\"301\":2}}],[\"a\",{\"1\":{\"300\":14,\"301\":6,\"307\":2,\"310\":2,\"311\":6,\"317\":18,\"318\":2,\"340\":4,\"473\":2,\"498\":1,\"500\":1,\"502\":1}}],[\"ads\",{\"0\":{\"620\":1}}],[\"adjacent\",{\"1\":{\"548\":1}}],[\"admin可以轻松集成到现有的spring\",{\"1\":{\"430\":1}}],[\"admin是一个用于管理和监控\",{\"1\":{\"430\":1}}],[\"admin\",{\"0\":{\"429\":1},\"1\":{\"294\":1,\"430\":8,\"433\":1,\"434\":1,\"436\":1,\"437\":2}}],[\"addedge\",{\"1\":{\"548\":1}}],[\"adding\",{\"1\":{\"388\":1}}],[\"addfunction\",{\"1\":{\"289\":11}}],[\"addmqtranfer\",{\"1\":{\"284\":1,\"287\":1}}],[\"adduser\",{\"1\":{\"257\":2,\"388\":3}}],[\"addwebapp\",{\"1\":{\"202\":1}}],[\"add\",{\"1\":{\"130\":1,\"134\":1,\"310\":6}}],[\"a的public方法传入\",{\"1\":{\"245\":2}}],[\"a对象是否需哟啊提前给b赋值\",{\"1\":{\"245\":1}}],[\"agent端口\",{\"1\":{\"364\":1}}],[\"age\",{\"1\":{\"313\":2,\"314\":2,\"315\":1,\"316\":6}}],[\"ago\",{\"1\":{\"236\":1}}],[\"aggregate\",{\"1\":{\"143\":2}}],[\"asl\",{\"1\":{\"463\":1}}],[\"async\",{\"0\":{\"321\":1}}],[\"as\",{\"1\":{\"318\":1}}],[\"assert\",{\"1\":{\"224\":1}}],[\"aspectj\",{\"1\":{\"222\":1}}],[\"aspect\",{\"1\":{\"222\":1,\"224\":1,\"225\":1}}],[\"afterreturning\",{\"1\":{\"222\":1,\"225\":4}}],[\"afterthrowing\",{\"1\":{\"222\":1}}],[\"after\",{\"1\":{\"222\":1,\"388\":1,\"391\":1}}],[\"after=network\",{\"1\":{\"156\":1}}],[\"aop\",{\"0\":{\"223\":1},\"1\":{\"222\":7,\"224\":1,\"384\":1}}],[\"aba\",{\"1\":{\"376\":1}}],[\"abbrev\",{\"1\":{\"219\":1}}],[\"abstractchaincontext\",{\"1\":{\"130\":1}}],[\"abstractchaincontext<t>\",{\"1\":{\"130\":1}}],[\"abstractchainhandlers\",{\"1\":{\"130\":3}}],[\"abstractchainhandler\",{\"1\":{\"130\":1}}],[\"abstractchainhandler>\",{\"1\":{\"130\":1}}],[\"abstractchainhandlercontainer\",{\"1\":{\"130\":4}}],[\"abstractchainhandler<userregisterreqvo>\",{\"1\":{\"130\":1}}],[\"abstractchainhandler<t>\",{\"1\":{\"130\":1}}],[\"await\",{\"1\":{\"202\":1}}],[\"ahx\",{\"1\":{\"191\":1}}],[\"alibaba\",{\"1\":{\"421\":1}}],[\"alias\",{\"1\":{\"189\":1}}],[\"always\",{\"1\":{\"364\":1}}],[\"alert\",{\"1\":{\"342\":1}}],[\"alg\",{\"1\":{\"294\":2}}],[\"alf\",{\"1\":{\"189\":1}}],[\"alberto\",{\"1\":{\"139\":1}}],[\"an是唯一一个最后一个元素\",{\"1\":{\"505\":1}}],[\"an\",{\"1\":{\"505\":1,\"544\":1,\"573\":1}}],[\"answer\",{\"0\":{\"260\":1}}],[\"anyint\",{\"1\":{\"259\":1}}],[\"any\",{\"1\":{\"257\":1,\"260\":1}}],[\"antdesign\",{\"1\":{\"361\":1}}],[\"antcall\",{\"1\":{\"220\":1}}],[\"ant并不是一无是处\",{\"1\":{\"217\":1}}],[\"ant\",{\"0\":{\"216\":1},\"1\":{\"217\":2,\"220\":1}}],[\"anti\",{\"1\":{\"143\":1}}],[\"analytics\",{\"1\":{\"200\":1}}],[\"angular\",{\"1\":{\"148\":1}}],[\"anemic\",{\"1\":{\"143\":1}}],[\"annotations\",{\"1\":{\"227\":1}}],[\"annotation\",{\"1\":{\"135\":1,\"224\":3,\"225\":1}}],[\"and\",{\"1\":{\"2\":1,\"200\":1,\"380\":1}}],[\"apollo\",{\"1\":{\"428\":3}}],[\"apssa\",{\"1\":{\"362\":1}}],[\"api\",{\"0\":{\"334\":1},\"1\":{\"271\":3,\"329\":3,\"331\":3,\"333\":1,\"347\":1,\"352\":1,\"405\":1,\"423\":1}}],[\"api风格\",{\"1\":{\"246\":1}}],[\"api调用\",{\"1\":{\"245\":8}}],[\"applet\",{\"1\":{\"409\":1}}],[\"applicationrunner\",{\"1\":{\"207\":1}}],[\"applicationlistener<myevent>\",{\"1\":{\"135\":1}}],[\"applicationlistener\",{\"1\":{\"135\":1}}],[\"applicationeventpublisher\",{\"1\":{\"135\":2}}],[\"applicationevent\",{\"1\":{\"135\":1}}],[\"application\",{\"1\":{\"135\":2,\"145\":1,\"280\":1}}],[\"applicationcontextholder\",{\"1\":{\"130\":1}}],[\"app\",{\"1\":{\"332\":1}}],[\"append\",{\"1\":{\"199\":1}}],[\"apache\",{\"0\":{\"120\":1},\"1\":{\"121\":1,\"217\":1,\"266\":1}}],[\"artifactid>\",{\"1\":{\"391\":1,\"433\":2,\"436\":2}}],[\"arthas可以帮助你解决\",{\"1\":{\"181\":1}}],[\"arthas\",{\"0\":{\"180\":1},\"1\":{\"181\":1}}],[\"arr\",{\"1\":{\"311\":2,\"345\":2}}],[\"arrays\",{\"1\":{\"485\":1}}],[\"array的转换\",{\"1\":{\"309\":1}}],[\"array\",{\"1\":{\"224\":1,\"309\":2,\"349\":1}}],[\"arraylist<>\",{\"1\":{\"130\":1,\"134\":1}}],[\"aroundadvice\",{\"1\":{\"225\":1}}],[\"around\",{\"1\":{\"222\":1,\"224\":2,\"225\":4}}],[\"are\",{\"1\":{\"134\":1}}],[\"args\",{\"1\":{\"130\":1,\"134\":1,\"202\":1,\"224\":8,\"388\":3,\"391\":3}}],[\"arm\",{\"1\":{\"112\":1}}],[\"ai+1\",{\"1\":{\"505\":1}}],[\"air\",{\"1\":{\"241\":2}}],[\"aix\",{\"1\":{\"235\":1}}],[\"ai\",{\"0\":{\"0\":1},\"1\":{\"2\":4,\"498\":3,\"500\":1,\"502\":2,\"505\":1,\"573\":1}}],[\"正是是由于过于分散的存储\",{\"1\":{\"511\":1}}],[\"正例\",{\"0\":{\"406\":1}}],[\"正常运行\",{\"1\":{\"566\":1}}],[\"正常导入导出\",{\"1\":{\"318\":1}}],[\"正常\",{\"1\":{\"316\":1}}],[\"正因如此\",{\"1\":{\"233\":1}}],[\"正如这里的打\",{\"1\":{\"217\":1}}],[\"正则匹配\",{\"1\":{\"161\":1}}],[\"正则表达式\",{\"1\":{\"93\":1}}],[\"正好手头也有服务器就看看面板工具是不是真的那么好用\",{\"1\":{\"150\":1}}],[\"正手拉球\",{\"0\":{\"88\":1}}],[\"正手攻球\",{\"0\":{\"86\":1}}],[\"正文\",{\"0\":{\"75\":1}}],[\"正像我现在坐在这里写开始写这一部分的序言一样\",{\"1\":{\"2\":1}}],[\"正值公司进行产品\",{\"1\":{\"362\":1}}],[\"正值\",{\"1\":{\"2\":1}}],[\"纸质书籍逐渐成为小众选择\",{\"1\":{\"2\":1}}],[\"我并没有遇到实际的场景来使用双端队列这种结构\",{\"1\":{\"559\":1}}],[\"我可以先打开字典\",{\"1\":{\"455\":1}}],[\"我乐意就够了\",{\"1\":{\"419\":1}}],[\"我喜欢\",{\"1\":{\"419\":1}}],[\"我就要上微服务\",{\"1\":{\"419\":1}}],[\"我就不得不说一个事情\",{\"1\":{\"115\":1}}],[\"我会借着这个机会把握认为有价值的知识点都记录下来\",{\"1\":{\"366\":1}}],[\"我是父级\",{\"1\":{\"342\":1}}],[\"我自己学习我可不管什么该不该\",{\"1\":{\"419\":1}}],[\"我自己学习看的是第一版的\",{\"1\":{\"101\":1}}],[\"我自然是义不容辞\",{\"1\":{\"282\":1}}],[\"我接触的两家公司都是用过\",{\"1\":{\"282\":1}}],[\"我直接从头到脚就是抵触\",{\"1\":{\"266\":1}}],[\"我已经和它打了两年的交道了\",{\"1\":{\"217\":1}}],[\"我才发现不知不觉\",{\"1\":{\"217\":1}}],[\"我现在都还依稀记得当时学习ant时看到的一篇文章里有那么一句话\",{\"1\":{\"217\":1}}],[\"我现在还记得在\",{\"1\":{\"122\":1}}],[\"我改的代码为什么没有执行到\",{\"1\":{\"181\":1}}],[\"我目前还没做过运维的工作\",{\"1\":{\"179\":1}}],[\"我只是需要安装一些数据库或者运行环境\",{\"1\":{\"150\":1}}],[\"我只能说一个6\",{\"1\":{\"96\":1}}],[\"我感觉应该能够成为一名合格的前端工程师了\",{\"1\":{\"148\":1}}],[\"我与前端\",{\"0\":{\"148\":1}}],[\"我们先由二叉树的先序序列和中序序列来唯一确定一颗二叉树\",{\"1\":{\"595\":1}}],[\"我们会采取非递归的方式新增一个标记记录每一次计算出的值来减少多次计算的消耗\",{\"1\":{\"594\":1}}],[\"我们会在四点五十去ftp获取价格文件\",{\"1\":{\"234\":1}}],[\"我们根据二叉树的定义\",{\"1\":{\"594\":1}}],[\"我们能在一端入队\",{\"1\":{\"560\":1}}],[\"我们能以一个相对规范的状态转换到下一个规范中来\",{\"1\":{\"290\":1}}],[\"我们拿第一个问题的\",{\"1\":{\"560\":1}}],[\"我们才可以根据输入输出限制来找到不可能得到的序列\",{\"1\":{\"560\":1}}],[\"我们常问的一组入栈顺序为什么会有多种出栈顺序\",{\"1\":{\"560\":1}}],[\"我们常用的\",{\"1\":{\"222\":1}}],[\"我们最好使用链式队列\",{\"1\":{\"558\":1}}],[\"我们刚才提到的是头指针\",{\"1\":{\"511\":1}}],[\"我们通常用头指针来标识一个单链表\",{\"1\":{\"511\":1}}],[\"我们首先认识一下数组的存储\",{\"1\":{\"497\":1}}],[\"我们首先要知道\",{\"1\":{\"448\":1}}],[\"我们采取的方案一般是先找到能找零的最大面值的再依次减少\",{\"1\":{\"455\":1}}],[\"我们抽取的下一张牌的大小是未知的\",{\"1\":{\"455\":1}}],[\"我们就得先谈一下早期\",{\"1\":{\"448\":1}}],[\"我们就继续原来使用了\",{\"1\":{\"204\":1}}],[\"我们接下来就跟着组件一步一步完成就可以了\",{\"1\":{\"421\":1}}],[\"我们发现就算使用\",{\"1\":{\"407\":1}}],[\"我们定义了一个\",{\"1\":{\"387\":1}}],[\"我们定义一个事件类\",{\"1\":{\"135\":1}}],[\"我们都会想到\",{\"1\":{\"370\":1}}],[\"我们在对称矩阵的基础上\",{\"1\":{\"501\":1}}],[\"我们在实际中很少使用最佳实践复杂度\",{\"1\":{\"458\":1}}],[\"我们在工作目录中创建下列\",{\"1\":{\"364\":1}}],[\"我们在创建新用户之前需要经过对字段合法性\",{\"1\":{\"130\":1}}],[\"我们不需要关心环境和上传介质的问题了\",{\"1\":{\"362\":1}}],[\"我们需要在状态变化时执行一些异步操作的结果去修改另一处的状态\",{\"1\":{\"352\":1}}],[\"我们需要先知道以下几个核心概念\",{\"1\":{\"222\":1}}],[\"我们要给每个节点绑定唯一的key标记\",{\"1\":{\"346\":1}}],[\"我们以为的是这棵树的右子节点会变成左子节点\",{\"1\":{\"346\":1}}],[\"我们将字符的编码解释为从根至该字符路径上边界的标记的序列\",{\"1\":{\"582\":1}}],[\"我们将顺序队列臆想为一个环状空间\",{\"1\":{\"557\":1}}],[\"我们将\",{\"1\":{\"346\":1}}],[\"我们大概说一下其比较逻辑\",{\"1\":{\"346\":1}}],[\"我们只关注根目录中\",{\"1\":{\"332\":1}}],[\"我们只需要从所需功能完善的develop分上创建对应的release分支进行部署测试\",{\"1\":{\"287\":1}}],[\"我们只需要通过反射拿到\",{\"1\":{\"229\":1}}],[\"我们只需要继承这个接口实现具体的校验逻辑和顺序即可\",{\"1\":{\"130\":1}}],[\"我们意识到\",{\"1\":{\"329\":1}}],[\"我们直接开始准备工作\",{\"1\":{\"327\":1}}],[\"我们知道\",{\"1\":{\"324\":1,\"455\":1}}],[\"我们应该从它的前身\",{\"1\":{\"293\":1}}],[\"我们并不着急将release分支合并到develop和master分支上\",{\"1\":{\"287\":1}}],[\"我们把将目光聚集在\",{\"1\":{\"332\":1}}],[\"我们把界面模块化后借助结构将样式进行规整\",{\"1\":{\"324\":1}}],[\"我们把常见的几种流程都过一遍\",{\"1\":{\"287\":1}}],[\"我们把调用的应用程序叫做客户端\",{\"1\":{\"267\":1}}],[\"我们判断环境变量是否已经生效可以先按行遍历拿到\",{\"1\":{\"237\":1}}],[\"我们和彭博约定在每天的四点请求获取每日的币种价格\",{\"1\":{\"234\":1}}],[\"我们后台需要做的就是把传递给前台的\",{\"1\":{\"225\":1}}],[\"我们用\",{\"1\":{\"209\":1}}],[\"我们借助\",{\"1\":{\"209\":1}}],[\"我们这里需要依赖\",{\"1\":{\"250\":1}}],[\"我们这里采用\",{\"1\":{\"207\":1,\"364\":1}}],[\"我们这里引入一个开源的工作流引擎\",{\"1\":{\"103\":1}}],[\"我们引用\",{\"1\":{\"202\":1}}],[\"我们平时接触最多的应该就是其在数据库管理系统方面的应用了\",{\"1\":{\"197\":1}}],[\"我们是知道海外服务器ip地址的\",{\"1\":{\"162\":1}}],[\"我们可以将\",{\"1\":{\"483\":2}}],[\"我们可以根据这两个\",{\"1\":{\"392\":1}}],[\"我们可以使用\",{\"1\":{\"352\":1}}],[\"我们可以使用自定义注解的方式指定需要打印的方法或者类\",{\"1\":{\"224\":1}}],[\"我们可以通过使用单文件组件搭配\",{\"1\":{\"333\":1}}],[\"我们可以先把其他扰乱视线的东西删除\",{\"1\":{\"332\":1}}],[\"我们可以先从develop创建\",{\"1\":{\"287\":1}}],[\"我们可以保证master和develop与生产一致保持一致\",{\"1\":{\"287\":1}}],[\"我们可以修改\",{\"1\":{\"160\":1}}],[\"我们可以看到其中每个\",{\"1\":{\"160\":1}}],[\"我们可以在方法执行前后添加额外的逻辑\",{\"1\":{\"387\":1}}],[\"我们可以在\",{\"1\":{\"156\":1,\"323\":1}}],[\"我们可以把它看作是一种边界\",{\"1\":{\"143\":1}}],[\"我们往往发现\",{\"1\":{\"139\":1}}],[\"我们取消了一个订阅者的订阅\",{\"1\":{\"134\":1}}],[\"我们使用\",{\"1\":{\"130\":2,\"304\":1,\"407\":1}}],[\"我把我认为平时好用的和最常用的配置贴出来\",{\"1\":{\"115\":1}}],[\"我最种草的还是因为他可以实现离线翻译\",{\"1\":{\"113\":1}}],[\"我觉得学习设计模式更行之有效的方法是在阅读过后有初步的理解的情况下的亲身实践\",{\"1\":{\"101\":1}}],[\"我用\",{\"1\":{\"96\":1}}],[\"我这里也只是简单粗略把有印象的记录一下\",{\"1\":{\"3\":1}}],[\"我还在这里敲键盘码字呢\",{\"1\":{\"2\":1}}],[\"我要变强\",{\"0\":{\"1\":1}}],[\"作用域为方法或类\",{\"1\":{\"224\":1}}],[\"作为基于内存的\",{\"1\":{\"441\":1}}],[\"作为日志框架并支持我们在配置文件通过简单的配置就可以开箱即用\",{\"1\":{\"439\":1}}],[\"作为日志门面\",{\"1\":{\"439\":1}}],[\"作为抽象层去识别和对接一些常见的日志框架\",{\"1\":{\"439\":1}}],[\"作为配置中心的话\",{\"1\":{\"428\":1}}],[\"作为配置中心应该要求支持集中化管理\",{\"1\":{\"428\":1}}],[\"作为注册中心要做到服务注册和注销\",{\"1\":{\"428\":1}}],[\"作为新时代的青年\",{\"1\":{\"419\":1}}],[\"作为新功能或新特性开发分支\",{\"1\":{\"284\":1}}],[\"作为多线程并发中的元老级角色也被称作重量级锁\",{\"1\":{\"372\":1}}],[\"作为行业最主流的\",{\"1\":{\"362\":1}}],[\"作为深层响应式\",{\"1\":{\"348\":1}}],[\"作为自称世界上最成熟\",{\"1\":{\"325\":1}}],[\"作为对象的模板被引入\",{\"1\":{\"317\":1}}],[\"作为属性名\",{\"0\":{\"304\":1}}],[\"作为主开发分支\",{\"1\":{\"284\":1}}],[\"作为最佳解决方案\",{\"1\":{\"239\":1}}],[\"作为我们工作中最经常使用的知识点大家肯定是烂熟于心\",{\"1\":{\"222\":1}}],[\"作为构建工具对程序员来说是一种挑战\",{\"1\":{\"217\":1}}],[\"作为\",{\"0\":{\"402\":1},\"1\":{\"207\":1,\"332\":1}}],[\"作为反向代理服务器的时候\",{\"1\":{\"162\":1}}],[\"作为网关入口\",{\"1\":{\"162\":1}}],[\"作为受众群体来说\",{\"1\":{\"2\":1}}],[\"作品来瓜分着新时代的蛋糕\",{\"1\":{\"2\":1}}],[\"短短一夜之间各家厂商都拿出了自己的\",{\"1\":{\"2\":1}}],[\"盖茨都表示gpt\",{\"1\":{\"2\":1}}],[\"以指向左右孩子或者前驱后继\",{\"1\":{\"596\":1}}],[\"以二维数组为例\",{\"1\":{\"498\":1}}],[\"以一维数组\",{\"1\":{\"498\":1}}],[\"以此类推\",{\"1\":{\"465\":1,\"498\":1,\"586\":1}}],[\"以满足不同应用场景的需求\",{\"1\":{\"451\":1}}],[\"以满足不同的需求\",{\"1\":{\"126\":1,\"420\":1}}],[\"以访问其受保护资源\",{\"1\":{\"451\":1}}],[\"以后搭建项目可以直接开箱即用\",{\"1\":{\"441\":1}}],[\"以后该线程在进入和退出同步块的时候不需要进行\",{\"1\":{\"373\":1}}],[\"以确保管理界面的安全性\",{\"1\":{\"430\":1}}],[\"以确保在不同环境中安装的包的一致性\",{\"1\":{\"148\":1}}],[\"以实现对目标对象的代理操作\",{\"1\":{\"384\":1}}],[\"以便进行依赖追踪和触发更新\",{\"1\":{\"349\":1}}],[\"以便自动注册和管理\",{\"1\":{\"135\":1}}],[\"以master分支为基线\",{\"1\":{\"284\":1}}],[\"以说明\",{\"1\":{\"270\":1}}],[\"以目标类或类中的某一个函数为单元体\",{\"1\":{\"245\":1}}],[\"以保证测试用例可以随着业务代码的变化动态保证质量\",{\"1\":{\"241\":1}}],[\"以及指向结点在一个兄弟结点的指针\",{\"1\":{\"601\":1}}],[\"以及其他元数据\",{\"1\":{\"427\":1}}],[\"以及其他类似的任务\",{\"1\":{\"409\":1}}],[\"以及在数据改变时更新\",{\"1\":{\"353\":1}}],[\"以及输入和输出的变量\",{\"1\":{\"318\":1}}],[\"以及哪些代码尚未被测试覆盖\",{\"1\":{\"239\":1}}],[\"以及有序集合\",{\"1\":{\"198\":1}}],[\"以下是\",{\"1\":{\"411\":1}}],[\"以下是工作中我遇到的定时任务场景\",{\"1\":{\"232\":1}}],[\"以下是事件风暴的一些关键特点和步骤\",{\"1\":{\"140\":1}}],[\"以防数据丢失或损坏\",{\"1\":{\"231\":1}}],[\"以摧枯拉朽之势崛起的一年\",{\"1\":{\"2\":1}}],[\"以期在未来的某个时刻\",{\"1\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
