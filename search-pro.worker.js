const nt="ENTRIES",T="KEYS",V="VALUES",F="";class D{constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case V:return this.value();case T:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return W(e,t,s,n,i,1,o,""),n},W=(e,t,s,n,o,u,i,r)=>{const h=u*i;t:for(const c of e.keys())if(c===F){const a=o[h-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let l=0;l<c.length;++l,++a){const p=c[l],f=i*a,g=f-i;let d=o[f];const m=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let _=m;_<y;++_){const b=p!==t[_],z=o[g+_]+ +b,A=o[g+_+1]+1,w=o[f+_]+1,L=o[f+_+1]=Math.min(z,A,w);L<d&&(d=L)}if(d>s)continue t}W(e.get(c),t,s,n,o,a,i,r+c)}};class C{constructor(t=new Map,s=""){this._size=void 0,this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=I(n);for(const i of o.keys())if(i!==F&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=O(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=O(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,T)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,M(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);let o=n.get(F);return o===void 0&&n.set(F,o=s()),o}values(){return new D(this,V)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},O=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return O(e.get(s),t.slice(s.length))},M=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==F&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const h=e.get(u);if(r===u.length)e=h;else{const c=new Map;c.set(u.slice(r),h),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)R(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},R=e=>{if(e.length===0)return;const[t,s]=I(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=I(e);n.set(o+t,s),n.delete(o)},I=e=>e[e.length-1],it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",P="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},q=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,lt=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),q(n.terms,u)}}return e},[P]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);q(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d:h}=u;return Math.log(1+(s-t+.5)/(t+.5))*(h+e*(i+1)/(e+i*(1-r+r*n/o)))},dt=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},ft={k:1.2,b:.7,d:.5},gt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},H={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:ft},mt={combineWith:P,prefix:(e,t,s)=>t===s.length-1},pt={batchSize:1e3,batchWait:10},J={minDirtFactor:.1,minDirtCount:20},Ft={...pt,...J};class _t{constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?Ft:t.autoVacuum;this._options={...gt,...t,autoVacuum:s,searchOptions:{...H,...t.searchOptions||{}},autoSuggestOptions:{...mt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=J,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const yt=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},U=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},At=(e,t,s,n)=>{if(!e._index.has(n)){U(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?U(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(ht[s])||new Map},B=(e,t,s,n,o,u,i,r,h=new Map)=>{if(o==null)return h;for(const c of Object.keys(u)){const a=u[c],l=e._fieldIds[c],p=o.get(l);if(p==null)continue;let f=p.size;const g=e._avgFieldLength[l];for(const d of p.keys()){if(!e._documentIds.has(d)){At(e,l,d,s),f-=1;continue}const m=i?i(e._documentIds.get(d),s,e._storedFields.get(d)):1;if(!m)continue;const y=p.get(d),_=e._fieldLength.get(d)[l],b=at(y,f,e._documentCount,_,g,r),z=n*a*m*b,A=h.get(d);if(A){A.score+=z,ct(A.terms,t);const w=N(A.match,s);w?w.push(c):A.match[s]=[c]}else h.set(d,{score:z,terms:[t],match:{[s]:[c]}})}}return h},Ct=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((d,m)=>({...d,[m]:N(n.boost,m)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:h}=n,{fuzzy:c,prefix:a}={...H.weights,...i},l=e._index.get(t.term),p=B(e,t.term,t.term,1,l,o,u,h);let f,g;if(t.prefix&&(f=e._index.atPrefix(t.term)),t.fuzzy){const d=t.fuzzy===!0?.2:t.fuzzy,m=d<1?Math.min(r,Math.round(t.term.length*d)):d;m&&(g=e._index.fuzzyGet(t.term,m))}if(f)for(const[d,m]of f){const y=d.length-t.term.length;if(!y)continue;g==null||g.delete(d);const _=a*d.length/(d.length+.3*y);B(e,t.term,d,_,m,o,u,h,p)}if(g)for(const d of g.keys()){const[m,y]=g.get(d);if(!y)continue;const _=c*d.length/(d.length+y);B(e,t.term,d,_,m,o,u,h,p)}return p},K=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},l=t.queries.map(p=>K(e,p,a));return Y(l,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:h}=i,c=r(t).flatMap(a=>h(a)).filter(a=>!!a).map(dt(i)).map(a=>Ct(e,a,i));return Y(c,i.combineWith)},X=(e,t,s={})=>{const n=K(e,t,s),o=[];for(const[u,{score:i,terms:r,match:h}]of n){const c=r.length,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(h),match:h};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return o.sort(G),o},Et=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of X(e,t,s)){const r=i.join(" "),h=n.get(r);h!=null?(h.score+=u,h.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:h}]of n)o.push({suggestion:u,terms:r,score:i/h});return o.sort(G),o},zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:h,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const l=new _t(a);l._documentCount=t,l._nextId=s,l._documentIds=k(n),l._idToShortId=new Map,l._fieldIds=o,l._fieldLength=k(u),l._avgFieldLength=i,l._storedFields=k(r),l._dirtCount=h||0,l._index=new C;for(const[p,f]of l._documentIds)l._idToShortId.set(f,p);for(const[p,f]of e){const g=new Map;for(const d of Object.keys(f)){let m=f[d];c===1&&(m=m.ds),g.set(parseInt(d,10),k(m))}l._index.set(p,g)}return l},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let l="";i===0?l=c.length>20?`… ${c.slice(-20)}`:c:a?l=c.length+i>100?`${c.slice(0,100-i)}… `:c:l=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,l&&o.push(l),i+=l.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let h=s.indexOf(n,u);if(h===-1)return null;for(;h>=0;){const c=h+n.length;if(r(e.slice(u,h)),u=c,i>100)break;h=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return X(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,h=u.includes("@"),c=u.includes("#"),[a,l]=u.split(/[#@]/),{contents:p}=n[a]??={title:"",contents:[]};if(h)p.push([{type:"customField",key:a,index:l,display:i.map(f=>o.c.map(g=>j(g,f))).flat().filter(f=>f!==null)},r]);else{const f=i.map(g=>j(o.h,g)).filter(g=>g!==null);if(f.length&&p.push([{type:c?"heading":"title",key:a,...c&&{anchor:l},display:f},r]),"t"in o)for(const g of o.t){const d=i.map(m=>j(g,m)).filter(m=>m!==null);d.length&&p.push([{type:"text",key:a,...c&&{anchor:l},display:d},r])}}}),Q(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):kt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=yt(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Et(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":226,\"nextId\":226,\"documentIds\":{\"0\":\"v-b26ff390\",\"1\":\"v-ef7dd9f0\",\"2\":\"v-d7188082\",\"3\":\"v-59c15547\",\"4\":\"v-15fa55da\",\"5\":\"v-7b4f6de1\",\"6\":\"v-5f4d0e14\",\"7\":\"v-5f4d0e14#数据结构\",\"8\":\"v-5f4d0e14#算法\",\"9\":\"v-3d204cde\",\"10\":\"v-3d204cde#mysql\",\"11\":\"v-2c1d32ca\",\"12\":\"v-2c1d32ca#java基础\",\"13\":\"v-4f15266d\",\"14\":\"v-4f15266d#版本控制\",\"15\":\"v-4f15266d#《pro-git》\",\"16\":\"v-4f15266d#设计模式\",\"17\":\"v-4f15266d#《head-first-design-patterns》\",\"18\":\"v-f55afa64\",\"19\":\"v-f55afa64#deepl\",\"20\":\"v-6cfd4528\",\"21\":\"v-6cfd4528#intellij-idea\",\"22\":\"v-7458482f\",\"23\":\"v-5ff6fff4\",\"24\":\"v-5ff6fff4#什么是观察者模式\",\"25\":\"v-5ff6fff4#实现\",\"26\":\"v-5ff6fff4#jdk版\",\"27\":\"v-5ff6fff4#spring版\",\"28\":\"v-5ff6fff4#总结\",\"29\":\"v-37af7db9\",\"30\":\"v-5a788904\",\"31\":\"v-5a788904#碎谈\",\"32\":\"v-5a788904#我与前端\",\"33\":\"v-a45d56aa\",\"34\":\"v-a45d56aa#聊聊运维面板\",\"35\":\"v-a45d56aa#快速开始\",\"36\":\"v-a45d56aa#环境准备和下载\",\"37\":\"v-a45d56aa#启动展示\",\"38\":\"v-ff02ee8a\",\"39\":\"v-411daaa2\",\"40\":\"v-411daaa2#引言\",\"41\":\"v-1fbb484d\",\"42\":\"v-46f59636\",\"43\":\"v-46f59636#引言\",\"44\":\"v-46f59636#重构思路\",\"45\":\"v-46f59636#框架选型\",\"46\":\"v-46f59636#业务梳理\",\"47\":\"v-46f59636#具体实现\",\"48\":\"v-46f59636#_1-配置\",\"49\":\"v-5e0a1ce0\",\"50\":\"v-5e0a1ce0#实操\",\"51\":\"v-5e0a1ce0#总结\",\"52\":\"v-1b7ae35a\",\"53\":\"v-1b7ae35a#糟糕的-svn-仓库\",\"54\":\"v-1b7ae35a#git分支开发规约\",\"55\":\"v-1b7ae35a#git分支含义\",\"56\":\"v-1b7ae35a#git仓库的创建和使用\",\"57\":\"v-1b7ae35a#常见场景处理步骤\",\"58\":\"v-1b7ae35a#讲在最后\",\"59\":\"v-deff7d26\",\"60\":\"v-deff7d26#对ant的理解\",\"61\":\"v-deff7d26#工作中遇到的ant打包需求\",\"62\":\"v-deff7d26#构建war包和jar包中的manifest文件添加打包git分支明细\",\"63\":\"v-29368c3c\",\"64\":\"v-29368c3c#浅聊aop\",\"65\":\"v-29368c3c#工作中使用到-aop-的例子\",\"66\":\"v-29368c3c#返回对象脱敏\",\"67\":\"v-5f305ada\",\"68\":\"v-5f305ada#引言\",\"69\":\"v-5f305ada#快速开始\",\"70\":\"v-5f305ada#导入依赖\",\"71\":\"v-5f305ada#测试代码\",\"72\":\"v-5f305ada#常用方法\",\"73\":\"v-5f305ada#mock-class-t-classtomock\",\"74\":\"v-5f305ada#when-mock-method-thenreturn-value\",\"75\":\"v-5f305ada#verify-mock-method\",\"76\":\"v-5f305ada#verify-mock-times-n-method\",\"77\":\"v-5f305ada#verify-mock-atleast-n-method\",\"78\":\"v-5f305ada#verify-mock-never-method\",\"79\":\"v-5f305ada#verifynomoreinteractions-mock\",\"80\":\"v-5f305ada#dothrow-exception-when-mock-method\",\"81\":\"v-5f305ada#doanswer-answer-when-mock-method\",\"82\":\"v-5f305ada#总结\",\"83\":\"v-a7555dda\",\"84\":\"v-a7555dda#聊聊反射\",\"85\":\"v-a7555dda#工作中使用反射的例子\",\"86\":\"v-a7555dda#处理抽象对象的字段数据\",\"87\":\"v-04a80627\",\"88\":\"v-04a80627#关于定时任务的使用场景\",\"89\":\"v-04a80627#工作中遇到的定时任务场景\",\"90\":\"v-04a80627#定期清理审批单\",\"91\":\"v-04a80627#定期获取价格文件\",\"92\":\"v-209960d8\",\"93\":\"v-cc79568a\",\"94\":\"v-1ebfa306\",\"95\":\"v-1ebfa306#vue3-和-vue-2\",\"96\":\"v-1ebfa306#快速开始\",\"97\":\"v-f82974ac\",\"98\":\"v-f82974ac#知识总览\",\"99\":\"v-f82974ac#快速开始\",\"100\":\"v-f82974ac#let-与-const\",\"101\":\"v-f82974ac#解构赋值\",\"102\":\"v-f82974ac#数组模型的解构\",\"103\":\"v-f82974ac#对象模型的解构\",\"104\":\"v-f82974ac#symbol\",\"105\":\"v-f82974ac#使用场景\",\"106\":\"v-f82974ac#作为属性名\",\"107\":\"v-f82974ac#定义常量\",\"108\":\"v-f82974ac#map-与-set\",\"109\":\"v-f82974ac#map\",\"110\":\"v-f82974ac#map-的迭代\",\"111\":\"v-f82974ac#map-小技巧\",\"112\":\"v-f82974ac#set\",\"113\":\"v-f82974ac#set-小技巧\",\"114\":\"v-f82974ac#reflect-与-proxy\",\"115\":\"v-f82974ac#proxy\",\"116\":\"v-f82974ac#reflect\",\"117\":\"v-f82974ac#组合使用\",\"118\":\"v-f82974ac#函数\",\"119\":\"v-f82974ac#class-类\",\"120\":\"v-f82974ac#模块\",\"121\":\"v-f82974ac#promise-对象\",\"122\":\"v-f82974ac#generator-函数\",\"123\":\"v-f82974ac#async-函数\",\"124\":\"v-0248003b\",\"125\":\"v-0248003b#前言\",\"126\":\"v-c0d83b4c\",\"127\":\"v-c0d83b4c#java-并发机制基础\",\"128\":\"v-c0d83b4c#volatile\",\"129\":\"v-c0d83b4c#synchronized\",\"130\":\"v-c0d83b4c#偏向锁\",\"131\":\"v-c0d83b4c#轻量级锁\",\"132\":\"v-c0d83b4c#总结\",\"133\":\"v-c0d83b4c#原子操作\",\"134\":\"v-c0d83b4c#总结-1\",\"135\":\"v-c0d83b4c#java-内存模型\",\"136\":\"v-c0d83b4c#内存模型的抽象结构\",\"137\":\"v-8fb48ca6\",\"138\":\"v-8fb48ca6#引言\",\"139\":\"v-8fb48ca6#走进动态代理\",\"140\":\"v-8fb48ca6#什么是动态代理\",\"141\":\"v-8fb48ca6#如何实现动态代理\",\"142\":\"v-8fb48ca6#基于接口实现动态代理\",\"143\":\"v-8fb48ca6#示例思路\",\"144\":\"v-8fb48ca6#实例代码\",\"145\":\"v-8fb48ca6#基于类实现动态代理\",\"146\":\"v-8fb48ca6#示例思路-1\",\"147\":\"v-8fb48ca6#实例代码-1\",\"148\":\"v-8fb48ca6#总结和延伸\",\"149\":\"v-21e0c5b5\",\"150\":\"v-21e0c5b5#碎谈\",\"151\":\"v-21e0c5b5#微服务的出现\",\"152\":\"v-21e0c5b5#如何学习微服务\",\"153\":\"v-bbedb96c\",\"154\":\"v-bbedb96c#浅聊微服务网关\",\"155\":\"v-d507a44c\",\"156\":\"v-d507a44c#浅聊微服务配置和注册中心\",\"157\":\"v-d507a44c#配置中心\",\"158\":\"v-d507a44c#注册中心\",\"159\":\"v-d507a44c#微服务中的使用\",\"160\":\"v-a716364c\",\"161\":\"v-a716364c#介绍\",\"162\":\"v-a716364c#快速开始\",\"163\":\"v-a716364c#服务端\",\"164\":\"v-a716364c#引入依赖\",\"165\":\"v-a716364c#简单配置\",\"166\":\"v-a716364c#客户端\",\"167\":\"v-a716364c#引入依赖-1\",\"168\":\"v-a716364c#简单配置-1\",\"169\":\"v-7a2221c4\",\"170\":\"v-7a2221c4#关于-spring-日志\",\"171\":\"v-2a29d3f0\",\"172\":\"v-2a29d3f0#引言\",\"173\":\"v-2a29d3f0#快速开始\",\"174\":\"v-2a29d3f0#添加依赖\",\"175\":\"v-2a29d3f0#工具方法服务类和具体实现类\",\"176\":\"v-2a29d3f0#配置类实现\",\"177\":\"v-2a29d3f0#总结\",\"178\":\"v-885f3b64\",\"179\":\"v-885f3b64#前言\",\"180\":\"v-de72cc3c\",\"181\":\"v-de72cc3c#介绍\",\"182\":\"v-de72cc3c#oauth2\",\"183\":\"v-df1d71f0\",\"184\":\"v-df1d71f0#介绍\",\"185\":\"v-057dbb30\",\"186\":\"v-057dbb30#算法基础\",\"187\":\"v-057dbb30#算法的效率\",\"188\":\"v-057dbb30#时间负责度\",\"189\":\"v-057dbb30#空间负责度\",\"190\":\"v-5d3a0abc\",\"191\":\"v-6b82183c\",\"192\":\"v-6b82183c#知识框架\",\"193\":\"v-6b82183c#基本概念和术语\",\"194\":\"v-6b82183c#数据结构三要素\",\"195\":\"v-6b82183c#逻辑结构\",\"196\":\"v-6b82183c#存储结构\",\"197\":\"v-6b82183c#数据的运算\",\"198\":\"v-050aea8f\",\"199\":\"v-050aea8f#基本定义\",\"200\":\"v-050aea8f#基本操作\",\"201\":\"v-050aea8f#线性表的顺序表示\",\"202\":\"v-050aea8f#顺序表的定义\",\"203\":\"v-050aea8f#顺序表的实现\",\"204\":\"v-050aea8f#线性表的链式表示\",\"205\":\"v-050aea8f#单链表\",\"206\":\"v-050aea8f#头插法\",\"207\":\"v-050aea8f#尾插法\",\"208\":\"v-050aea8f#查找第i个结点\",\"209\":\"v-050aea8f#插入结点\",\"210\":\"v-050aea8f#删除结点\",\"211\":\"v-050aea8f#求表长\",\"212\":\"v-050aea8f#双链表\",\"213\":\"v-02b84066\",\"214\":\"v-1d5b1ebc\",\"215\":\"v-d3adb8da\",\"216\":\"v-4b46f30a\",\"217\":\"v-6f4aa5ca\",\"218\":\"v-79537822\",\"219\":\"v-5637abce\",\"220\":\"v-46c2d598\",\"221\":\"v-f451949a\",\"222\":\"v-c473464c\",\"223\":\"v-5408caaf\",\"224\":\"v-efe03efa\",\"225\":\"v-6b3735f8\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,28],\"2\":[1,18],\"3\":[1,13],\"4\":[1],\"5\":[1],\"6\":[1,11],\"7\":[1],\"8\":[1],\"9\":[1,23],\"10\":[1,14],\"11\":[2,27],\"12\":[1,52],\"13\":[1],\"14\":[1,18],\"15\":[3,45],\"16\":[1],\"17\":[5,24],\"18\":[4,22],\"19\":[1,12],\"20\":[1,6],\"21\":[2,22],\"22\":[1,35],\"23\":[1],\"24\":[1,15],\"25\":[1,20],\"26\":[1,78],\"27\":[1,121],\"28\":[1,57],\"29\":[1],\"30\":[1],\"31\":[1,21],\"32\":[1,100],\"33\":[1],\"34\":[1,17],\"35\":[1],\"36\":[1,9],\"37\":[1,23],\"38\":[1,38],\"39\":[1],\"40\":[1,13],\"41\":[1],\"42\":[1],\"43\":[1,64],\"44\":[1],\"45\":[1,26],\"46\":[1,14],\"47\":[1],\"48\":[2],\"49\":[1,32],\"50\":[1,64],\"51\":[1,5],\"52\":[1],\"53\":[3,52],\"54\":[1],\"55\":[1,60],\"56\":[1,97],\"57\":[1,62],\"58\":[1,7],\"59\":[2],\"60\":[1,114],\"61\":[1,5],\"62\":[1,30],\"63\":[1],\"64\":[1,60],\"65\":[3],\"66\":[1,132],\"67\":[2],\"68\":[1,25],\"69\":[1],\"70\":[1],\"71\":[1,23],\"72\":[1],\"73\":[6,9],\"74\":[6,24],\"75\":[4,9],\"76\":[6,12],\"77\":[6,11],\"78\":[5,12],\"79\":[3,8],\"80\":[6,14],\"81\":[6,25],\"82\":[1,8],\"83\":[1],\"84\":[1,66],\"85\":[1],\"86\":[1,113],\"87\":[1],\"88\":[1,31],\"89\":[1,6],\"90\":[1,33],\"91\":[1,20],\"92\":[1],\"93\":[1],\"94\":[1],\"95\":[4,56],\"96\":[1,35],\"97\":[2],\"98\":[1],\"99\":[1,22],\"100\":[3,30],\"101\":[1,4],\"102\":[1,25],\"103\":[1,33],\"104\":[1,27],\"105\":[1],\"106\":[1,41],\"107\":[1,40],\"108\":[3],\"109\":[1,28],\"110\":[2,28],\"111\":[2,43],\"112\":[1,20],\"113\":[2,24],\"114\":[3],\"115\":[1,34],\"116\":[1,24],\"117\":[1,29],\"118\":[1,26],\"119\":[2,63],\"120\":[1,35],\"121\":[2,59],\"122\":[2,48],\"123\":[2,2],\"124\":[3],\"125\":[1,22],\"126\":[1],\"127\":[2,21],\"128\":[1,36],\"129\":[1,56],\"130\":[1,21],\"131\":[1,23],\"132\":[1,21],\"133\":[3,19],\"134\":[1,6],\"135\":[2,8],\"136\":[1,48],\"137\":[1],\"138\":[1,26],\"139\":[1],\"140\":[1,60],\"141\":[1,35],\"142\":[1],\"143\":[1,22],\"144\":[1,89],\"145\":[1],\"146\":[1,6],\"147\":[1,86],\"148\":[1,38],\"149\":[1],\"150\":[1,73],\"151\":[1,30],\"152\":[1,33],\"153\":[1],\"154\":[1,26],\"155\":[1],\"156\":[1],\"157\":[1,14],\"158\":[1,9],\"159\":[1,48],\"160\":[3],\"161\":[1,76],\"162\":[1],\"163\":[1],\"164\":[1,17],\"165\":[1,7],\"166\":[1],\"167\":[1,17],\"168\":[1,18],\"169\":[3],\"170\":[3,25],\"171\":[3],\"172\":[1,19],\"173\":[1],\"174\":[1],\"175\":[1,11],\"176\":[1,8],\"177\":[1,8],\"178\":[4],\"179\":[1,45],\"180\":[4],\"181\":[1],\"182\":[1,58],\"183\":[3],\"184\":[1,23],\"185\":[1],\"186\":[1,21],\"187\":[1],\"188\":[1,20],\"189\":[1,12],\"190\":[2],\"191\":[1],\"192\":[1],\"193\":[1,22],\"194\":[1,4],\"195\":[1,12],\"196\":[1,31],\"197\":[1,6],\"198\":[1,6],\"199\":[1,34],\"200\":[1,21],\"201\":[1],\"202\":[1,4],\"203\":[1],\"204\":[1],\"205\":[1,42],\"206\":[1],\"207\":[1],\"208\":[1],\"209\":[1],\"210\":[1],\"211\":[1],\"212\":[1],\"213\":[1],\"214\":[1],\"215\":[1],\"216\":[1],\"217\":[1],\"218\":[1],\"219\":[1],\"220\":[1],\"221\":[1],\"222\":[1],\"223\":[1],\"224\":[1],\"225\":[2]},\"averageFieldLength\":[1.4336283185840708,30.88542529878086],\"storedFields\":{\"0\":{\"h\":\"我要变强\"},\"1\":{\"h\":\"资源分享\",\"t\":[\"正值 AI 以摧枯拉朽之势崛起的一年，已经有人开始推测 GPT 的出现会不会成为第四次工业革命的契机，连比尔·盖茨都表示GPT 的出现不亚于互联网的诞生。短短一夜之间各家厂商都拿出了自己的 AI 作品来瓜分着新时代的蛋糕，作为受众群体来说，借助 AI 工具很多事情变得异常简单轻松，与此伴随的各行各业要被替代的恐慌也开始蔓延，各种降薪裁员的浪潮开始愈展愈烈，我还在这里敲键盘码字呢。\",\"虽然相比于 AI 一些传统的工具的地位已经不保，纸质书籍逐渐成为小众选择，搜索引擎也引来了巨大革新，但是依然不能掩饰它们过去在某些领域作出的优秀贡献，正像我现在坐在这里写开始写这一部分的序言一样，love and share，把我觉得还不错的资源分享出来让更多的人看到。\"]},\"2\":{\"h\":\"学习之路\",\"t\":[\"不知道现在还有没有人总结学历路线这个东西，当时我刚起步的时候总结学习路线的文章视频还是很多的，我这里也只是简单粗略把有印象的记录一下。毕竟自己现在不是刚毕业了，文章不会向刚开始一样从 0 到 1，这个部分的文章都是遇到值得写写的部分就记录一下，其实还是很想写一些关于源码或者底层的东西，一直浮于表面可不行，尽力而为吧，毕竟现在博客还属于前期，很多结构或者框架以后难免要升级，所以先把知识点都覆盖罗列一下，日后慢慢润色，路虽远行则将至。\"]},\"3\":{\"h\":\"工作实战\",\"t\":[\"整理一下工作中遇到的实际开发任务，不过说实话之前天天 crud ，后来又来了个安逸公司，天天就是维护，搞一些缝缝补补的工作，有时候可能会遇到重构或者探索新技术的任务，但是都是停在应用的水平，每次更新这个部分的文章我都头疼，起码现在还觉得没有什么值得学习借鉴的部分，看看以后吧，谁知道未来会不会有什么高大上的工作做做。\"]},\"4\":{\"h\":\"书法是一门艺术\"},\"5\":{\"h\":\"行书\"},\"6\":{\"h\":\"数据结构和算法\",\"t\":[\"一提到数据结构和算法就不的不让我想到上学时计算机的四大天书：《数据结构》、《计算机组成与设计》、《计算机操作系统》、《计算机网络》。当时根本不知道这几本书的分量，要不然也不会到现在才后悔莫及。其实每次提到数据结构和算法它们都是共同出现的，因为算法大部分都是基于大量的数据结构组合而成的，想要掌握好算法就必须在数据结构上下好功夫。\"]},\"7\":{\"h\":\"数据结构\"},\"8\":{\"h\":\"算法\"},\"9\":{\"h\":\"数据库\",\"t\":[\"相信一个合格的程序员是必须对数据库这项技术要达到熟练的地步吧，之前可能觉得要和数据库交互的往往只有后端程序员，可是后来随着各类数据库的发展，很多数据库也可以配合前端直接使用，所有掌握 SQL 和数据库进行交互也是程序员必备的技能。\",\"听我一个朋友谈起，其实程序员很大一份就是在和数据打交道，而对于数据库中数据的处理来说，尽管大家都是在用 SQL ，但是在不同人的手里能拿到不同的结果集，相比于其他各种出现的 cron 表达式、正则表达式，SQL 更能在一些函数和表的组合方面体现你对数据管理的天赋。\",\"虽然工作中能用到的数据库的知识点都只是停留在对数据的操作，但是在面试或者一些表设计中，数据库的底层结构和高级用法显得尤为重要，这些我们也需要在空余时间了解一些。下面我会分享一些我觉得值得一读的和数据库有关的书。\"]},\"10\":{\"h\":\"MySQL\",\"t\":[\"如果是平时使用和找工作大部分公司在用的话，MySQL 在 CN 的使用率肯定是名列前茅，如果只是想快速了解或复习语法的话，推荐这本 《MySQL必知必会》，薄薄一本，定位和 《剑指Offer》 一样，都是最实用的语法，用来入门非常不错。\",\"MySQL必知必会\"]},\"11\":{\"h\":\"Java 系列\",\"t\":[\"目前 Java 赛道处于一个爆满的时代，况且计算机这个行业在当下这个社会也是充满了功利的气息，各个行业的人疯狂涌入计算机，业内的人嘴上说着计算机跌落神坛可是却在疯狂内卷，确实目前看来就算计算机行业身处寒冬，这也只是和之前几年相比吧，当时可能学习完微服务之后，找的工作可能直奔“尔康”，而现在可能微服务也只能是你找到工作的门槛，当然身边的人也有从 Java 转行到 Python 和 Golang 的。在各种新语言层出不穷的年代，Java 的就业地位不知道还能撑多久，不过就目前而言，Java 社区的活跃程度和所包含的业务领域依然是领先的地位，所以学习 Java 可能并不适合作为第一门语言，也不一定是能作为找到工作的保证，但是一定是你学习过程中能找到资源和解决问题方法最顺利的一种。\"]},\"12\":{\"h\":\"Java基础\",\"t\":[\"一提到 Java 基础，难免绕不开每个语言的圣经，要知道计算机不比其他行业，大部分的学习资料都来自互联网，而能靠其内容质量击败视频、电子书和技术文章成为圣经的绝对是传奇著作，而 Java 的圣经绝对就是下面这本 《Thinking in Java》(Java 编程思想)。\",\"Thinking in java\",\"这本书我大学期间看过大半，至于为什么没有读完，是因为这本书确实细，细到令你发指，主打一本工具书的定位，而且其内容也是略显晦涩，当时我也是走马观花，只读了个大概就跑去B站“深造”了。\",\"这本书最新是到第四版，发行于2007年，据现在已经过去16个年头了，里面的示例大部分都还在基于 jdk6 ，目前 jdk20 都已经问世了，所以说就互联网的发展速度，你要是还去看这本“历史典籍”，确实有点追不上时代了，虽然 Java 业内流传着 “你发任你发，我用 Java8” 的口号，但是就目前的使用情况来看 jdk17 这个长期维护版本才是新宠。如果放在十年前有人给你推荐这本书，确实是厉害，五年前推荐，还说得过去，要是现在推荐，我只能说一个6。\"]},\"13\":{\"h\":\"其他技能\"},\"14\":{\"h\":\"版本控制\",\"t\":[\"提到版本控制（Version control），自从 Git 横空出世之后，Subversion 就开始逐渐退出神坛，相对于 Subversion 这种集中式的版本控制系统，分布式风格的 Git 更适合多人协作开发使用，虽然 Subversion 和我们平时使用本地文件的习惯非常相近，容易上手，但是面对更多人同时开发的场景来说，Git 拥有更多样的协作流程将更有利于我们管理项目。\"]},\"15\":{\"h\":\"《 Pro Git 》\",\"t\":[\"pro git\",\"这本书的作者是 Git 在 GitHub 公司的最早的托管者之一编写的，当我了解到这本书的时候就已经是第二版了。这本书涵盖了 Git 的基础用法、分支特性、搭建和配置 Git 服务器、分布式工作流程、GitHub 的使用方法、Git 工具、Git 内部原理等各个方面内容，最后还附带了 Git 命令参考。零基础的初学者可以通过前 3 章的学习就已经可以应付日常的开发场景了，后几章能够满足中高阶用户深入了解的需求。书中提供了大量的应用案例，不同开发工作模式有不同的用法，配合插图演示版本变化的状态，十分易于理解。\",\"如果你觉得文字和图片还不够直观，下面的链接是一个 Git 学习网站： Learning Git Branching ，这里你可以通过闯关的形式学习一些 Git 的基础命令，并且每个命令的执行还会有实时的动图演示，简直不要太友好，就算你已经是 Git 的老手，也可以在这里复习和加深一些命令的理解。\",\"https://learngitbranching.js.org/?locale=zh_CN\"]},\"16\":{\"h\":\"设计模式\"},\"17\":{\"h\":\"《 Head First Design Patterns 》\",\"t\":[\"Head First Design Patterns\",\"几乎每个经典系列书籍中都会有讲设计模式的书，像大话系列、图解系列还有 Head First 系列，这些书都是基于设计模式开山之作《设计模式：可复用面向对象软件的基础》中23中设计模式结合后来的实践和发展又重新总结出来的更完善生动的作品，内容上都是按照每一种设计模式作为一个章节并结合情景和图片进行讲解，我自己学习看的是第一版的《Head First Design Patterns》，上图中的是2022年发行的第二版，学习的时候一边阅读一边自己实现还是挺容易理解的，直到现在我看到某种设计模式还会想到当时书中的案例。\",\"对我个人而言，我觉得学习设计模式更行之有效的方法是在阅读过后有初步的理解的情况下的亲身实践，它基于代码又高于代码，最好的学习方式就是在平时阅读和开发的时候，将健壮性和可扩展性设为己任，仔细理解每种模式所使用的场景才是真正的学习之道。\"]},\"18\":{\"h\":\"日常工具（Mac 版）\",\"t\":[\"刚从 Windows 换到 Mac 时，确实对这个安装软件晕得很，时间久了其实也觉得差不多，无非也是商店和官网两个下载途径，但是在苹果有了自家芯片之后，很多软件不支持这种 arm 架构，运行 X86 版本的话需要编译一版再运行，还是比较消耗算力的，有的时候甚至会出现发热或者疯狂占内存的情况，所以下载的时候除非不得已还是要下载苹果芯片的版本，查看自己目前软件是什么版的可以在 系统信息 这个自带的软件上查看。\",\"版本信息\"]},\"19\":{\"h\":\"DeepL\",\"t\":[\"一个号称全世界最准确的翻译软件，界面也很简洁，我最种草的还是因为他可以实现离线翻译。它也支持 Word 、 PDF 和 PPT 等整个文件的翻译，免费版也足够用了，如果你还没有用的惯的翻译软件可以尝试一下。\"]},\"20\":{\"h\":\"开发工具\",\"t\":[\"工欲善其事，必先利其器。其实好用的工具从来不用推荐，工具的下载量就证明了它可以胜任好自己的本职工作，下面我整理一下我自己在用的不错的开发工具给大家参考一下。\"]},\"21\":{\"h\":\"IntelliJ IDEA\",\"t\":[\"吃饭的家伙，一提到 IDEA 我就不得不说一个事情，不是吧不是吧，这都2023年了还有人在用 \\\\b\\\\w{7}\\\\b 做开发吧（狗头保命）。使用正版需要订购 JetBrains 的许可证，因为是订阅型的，意味着你需要按照订阅期限支付费用，今年居然比去年更贵了！工具要想用的好，配置插件少不了，我把我认为平时好用的和最常用的配置贴出来，供交流讨论啦。\"]},\"22\":{\"h\":\"关于设计模式\",\"t\":[\"到底什么才是代码的顶峰呢，是写下第一行 Hello World!就好了，是第一次控制台输入输出就好了，是第一次执行 Main 函数就好了，是第一次写 if 判断和 for 循环就好了，是第一次写强逻辑的代码就好了，是第一次使用多线程就好了，是第一次使用设计模式就好了。我现在还记得在《Head First设计模式》一书中的一句话：“程序员就像赛车手一样，他们对程序的效率就好比赛车手对速度的执着一样。”\",\"如何判断一个程序员的等级呢，代码的健壮性、可扩展性和效率都是十分重要的标杆，而设计模式作为前辈们的最佳实践总结，在一些常见的方面都给予了我们开发出高质量、易维护的项目提供了方向。\",\"这个模块里我会把我工作和学习中接触到的设计模式结合场景记录下来，当然并不会涵盖所有的设计模式，如果你是想更深入和系统的了解设计模式的种种，当然还是推荐设计模式的一些书籍和更为优秀的帖子，在这里我会总结出我对设计模式的理解和实现。\"]},\"23\":{\"h\":\"观察者模式\"},\"24\":{\"h\":\"什么是观察者模式\",\"t\":[\"观察者模式也被称为发布-订阅模式或者事件-监听模式，这让我们很容易联想到 Redis、MQ 中的发布订阅模式，即主题对象（发布者）和观察者对象（订阅者）之间的关系类似于发布者发布事件，而观察者监听并响应该事件的方式，所以观察者模常用于实现对象之间的一对多依赖关系。\"]},\"25\":{\"h\":\"实现\",\"t\":[\"大多数编程语言都支持观察者模式的实现，但是大多数的场景下并不会去使用，因为其实现存在一些问题和局限性，不符合现代Java语言的设计原则和最佳实践。另外，它们也没有提供对并发编程的良好支持。拿 Java举例，Java 官方推荐使用其他更好的替代方案，例如使用接口和回调机制来实现观察者模式，或者使用第三方的观察者模式框架（如 Spring Framework 的事件机制或 Google Guava 的事件总线）。\"]},\"26\":{\"h\":\"jdk版\",\"t\":[\"在 Java 标准库中，java.util.Observable 类和 java.util.Observer 接口在 Java 9 版本之后被标记为过时，可能会在未来的 Java 版本中被移除，但是这并不影响我们用在这里方便理解其过程。\",\"首先，创建一个发布者类。\",\"// 发布者接口 interface Publisher { void subscribe(Subscriber subscriber); void unsubscribe(Subscriber subscriber); void notifySubscribers(String message); } // 具体的发布者类 class ConcretePublisher implements Publisher { private List<Subscriber> subscribers; public ConcretePublisher() { subscribers = new ArrayList<>(); } @Override public void subscribe(Subscriber subscriber) { subscribers.add(subscriber); } @Override public void unsubscribe(Subscriber subscriber) { subscribers.remove(subscriber); } @Override public void notifySubscribers(String message) { for (Subscriber subscriber : subscribers) { subscriber.receiveMessage(message); } } public void publish(String message) { notifySubscribers(message); } } \",\"创建订阅者类。\",\"// 订阅者接口 interface Subscriber { void receiveMessage(String message); } // 具体的订阅者类 class ConcreteSubscriber implements Subscriber { private String name; public ConcreteSubscriber(String name) { this.name = name; } @Override public void receiveMessage(String message) { System.out.println(name + \\\" 收到消息: \\\" + message); } } \",\"创建一个具体的发布者和两个具体的订阅者来测试。\",\"public class ObserverPatternExample { public static void main(String[] args) { ConcretePublisher publisher = new ConcretePublisher(); ConcreteSubscriber subscriber1 = new ConcreteSubscriber(\\\"订阅者1\\\"); ConcreteSubscriber subscriber2 = new ConcreteSubscriber(\\\"订阅者2\\\"); publisher.subscribe(subscriber1); publisher.subscribe(subscriber2); publisher.publish(\\\"Hello, World!\\\"); publisher.unsubscribe(subscriber2); publisher.publish(\\\"How are you?\\\"); } } \",\"运行上述代码时，一开始订阅者订阅了两个发布者，并且在发布者发布消息时接收到通知。然后，我们取消了一个订阅者的订阅，并再次发布消息，观察到只有一个订阅者收到了通知。\"]},\"27\":{\"h\":\"Spring版\",\"t\":[\"在Spring框架的观察者模式中我们首先要了解一些核心概念：\",\"事件（Event）：Event 代表着在应用程序中发生的特定事件。事件对象中包含了相关的数据和信息，用于描述事件的发生和上下文。在观察者模式中，事件对象会被发布（publish）给所有注册的监听器，通知它们事件的发生。\",\"监听器（Listener）：Listener 是事件的接收者和处理者。它负责监听和响应特定类型的事件。监听器需要实现ApplicationListener 接口，并通过泛型指定要监听的事件类型。当事件被发布时，对应类型的监听器将接收到事件，并执行相应的逻辑处理。\",\"应用事件发布器（Application Event Publisher）：应用事件发布器是一个接口，通常由Spring框架提供的ApplicationEventPublisher接口实现。它允许组件或类将事件发布给观察者。通过应用事件发布器，可以将事件发布给所有注册的监听器。\",\"应用事件监听器（Application Event Listener）：应用事件监听器是一个接口，通常由Spring框架提供的ApplicationListener接口实现。它定义了一个或多个用于处理特定类型事件的方法。通过实现应用事件监听器接口，并注册到应用事件发布器中，可以接收和处理相应类型的事件。\",\"事件源（Event Source）：事件源是触发事件的对象或组件。在Spring框架的观察者模式中，事件源可以是任何对象，但通常是由应用程序定义的业务对象或组件。当事件源触发事件时，它会将事件发布给应用事件发布器。\",\"事件上下文（Event Context）：事件上下文是事件发生时的上下文信息，它包含了与事件相关的数据和状态。事件上下文可以作为事件对象的一部分，在事件中传递给监听器进行处理。\",\"接下来我们使用 Spring Framework 的事件机制重写这个例子：\",\"首先，我们定义一个事件类 MyEvent，它将作为观察者模式中的事件对象。\",\"public class MyEvent extends ApplicationEvent { private String message; public MyEvent(Object source, String message) { super(source); this.message = message; } public String getMessage() { return message; } } \",\"接下来，创建一个事件源类MyEventPublisher，负责发布事件。\",\"import org.springframework.beans.factory.annotation.Autowired; import org.springframework.context.ApplicationEventPublisher; import org.springframework.stereotype.Component; @Component public class MyEventPublisher { @Autowired private ApplicationEventPublisher eventPublisher; public void publishEvent(String message) { CustomEvent customEvent = new CustomEvent(this, message); eventPublisher.publishEvent(customEvent); } } \",\"最后，创建一个事件监听器类MyEventListener，用于接收和处理事件：\",\"import org.springframework.context.ApplicationListener; import org.springframework.stereotype.Component; @Component public class MyEventListener implements ApplicationListener<MyEvent> { @Override public void onApplicationEvent(CustomEvent event) { String message = event.getMessage(); // 在这里处理事件 System.out.println(\\\"收到消息:\\\" + message); } } \",\"在这个示例中，通过 MyEventPublisher 发布了一个自定义事件。当事件发生时，MyEventListener 监听器将接收到该事件，并处理相应的逻辑。需要注意的是，需要使用 @Component 注解将事件发布器和事件监听器声明为 Spring 容器中的组件，以便自动注册和管理。\"]},\"28\":{\"h\":\"总结\",\"t\":[\"观察者模式适用于以下场景：\",\"一对多的依赖关系：当一个对象的状态发生变化时，需要通知多个其他对象进行相应的处理。观察者模式能够实现一对多的通知机制，确保所有相关的观察者都能接收到状态变化的通知并作出相应的响应。\",\"发布-订阅模式：在发布-订阅模式中，观察者模式被广泛应用。事件发布者（发布者）负责发布事件，而订阅者（观察者）订阅感兴趣的事件，并在事件发生时接收通知。这种模式常用于异步消息处理、事件驱动的系统和消息队列等场景。\",\"GUI事件处理：在图形用户界面（GUI）开发中，观察者模式被广泛用于处理用户界面组件的事件。例如，当按钮被点击、文本框内容改变或窗口关闭时，相关的观察者会收到相应的事件通知并执行相应的操作。\",\"系统状态监测和通知：当系统中的某些关键状态发生变化时，需要通知其他模块或组件进行相应的处理。观察者模式可以用于系统监测和通知的场景，例如服务器负载监测、日志记录、缓存更新等。\",\"数据库触发器：在数据库系统中，触发器（Trigger）可以用作观察者模式的实现。当数据库中的数据发生变化时，触发器可以自动触发相应的操作，例如更新相关的数据表、发送通知等。\",\"日志记录和审计：观察者模式可以用于实现日志记录和审计功能。当系统中发生重要事件时，观察者可以接收到事件通知，并将相关信息记录到日志文件或进行审计处理。\",\"需要注意的是，观察者模式适用于那些多个对象之间存在一对多关系的场景，其中观察者和被观察者之间的依赖关系是动态的。在使用观察者模式时，需要合理设计观察者和被观察者的接口，确保它们之间的解耦和灵活性。\"]},\"29\":{\"h\":\"开发技能\"},\"30\":{\"h\":\"聊聊前端\"},\"31\":{\"h\":\"碎谈\",\"t\":[\"在选择走后端这条路的时候，前辈们都说后端不仅仅需要掌握后端，前端、运维、设计和产品都需要涉猎，现在工作了之后才明白这种趋势在内卷的环境下越来越明显了，很多同学他们在公司的工作都是全栈的职责，有人说现在全栈并不是什么好的现象，只能说明你什么都不精通，但大多数时候这并不是你自己的选择。\",\"学技术也是有鄙视链的，好像在早期后端是瞧不起前端的，觉得前端技术栈太窄了，甚至觉得前端不是程序员，但是到了这个前后端分离的时代，这种观点确实应该被改观了。如果不清楚一条数据如何从界面到服务器再到数据库的完整流程，那说不上是真的了解你的业务，所以程序员的工作就是保持学习，在有知识面广度的情况下向自己感兴趣的方向深耕才是正解。\"]},\"32\":{\"h\":\"我与前端\",\"t\":[\"首先说说前端最开始的接触的包管理器的问题，首先你需要选择一个喜欢的包管理器，这是学习前端的基石，常见的应该有 npm、cnpm、pnpm 和 Yarn，对于这几种包管理器我自己是没有感觉出来有太多的区别，毕竟现在毕竟热门框架的官网都会把常用的命令给列举出来。可以简单的聊聊它们，npm 是最早也是使用最为广泛的包管理工具，同时也是 Node.js 生态系统中的标准包管理工具，其拥有庞大的包仓库和活跃的社区支持，可以找到大量的开源包和资源，选它总没错，如果使用过程中因为网络问题导致包下载不能成功，可以使用淘宝团队改造的 cnpm，cnpm 将 npm 的包从国外的镜像源切换到国内的镜像源，解决了国内用户使用 npm 时速度慢的问题。然后说一下 Yarn，Yarn 是由 Facebook 创建的 JavaScript 包管理工具，旨在解决 npm 的一些性能和稳定性问题， 并且在性能上进行了优化，通过并行下载和缓存等机制加快了依赖项的安装速度，而且它还引入了锁文件（Yarn.lock），用于精确记录项目的依赖关系和版本号，以确保在不同环境中安装的包的一致性。同样的 pnpm 引入了一种称为“逻辑链接”的机制来解决 npm 和 Yarn 在依赖项管理上的一些问题，避免了每个项目都复制一份依赖项的情况，节省了磁盘空间，所以说如果你关注包的安装速度和依赖项管理的性能，可以考虑使用 Yarn 或 pnpm。\",\"然后就需要提到前端一个跨时代的产物——Node.js，Node.js 的出现终于让 JavaScript 不再仅仅运行在浏览器，使其运行在服务器之上，这就为前端开发者带来了代码共享、构建工具、模块化开发、服务端渲染、实时通信等一系列的好处。\",\"其次就是打包工具的选择了，因为自己主要是使用 Vue 开发，所以选择了灵活和性能并重的 Vite，而其底层也是使用了 Rollup，其他的打包工具还有像 webpack、Parcel、Browserify等等，目前肯定还是 webpack 是最流行的打包工具，但是在选型上还是要根据项目规模和个人偏好进行选择。\",\"再之后就是前端基本功了，老生常谈的三剑客（HTML、CSS 和 JavaScript），虽然现在很多人会疑惑到底是学习 TypeScript 还是 JavaScript，这个问题其实在 TypeScript 官网上就有回答：\",\"学习 JavaScript 还是 TypeScript ?\",\"有了语言的基础就可以开始框架的学习了，前端框架三大金刚：React、Vue.js 或 Angular，市面上现在使用率上感觉还是 Vue 更胜一筹，而且这今年国产化的浪潮翻涌，所以拥抱 Vue 确实是一个不错的选择。\",\"如果以上都已经略有小成的哈，我感觉应该能够成为一名合格的前端工程师了，当然这些都是我自己的理解，隔行如隔山，对未知领域的知识充满好奇和尊敬，坚持实践和不断积累经验才是成为优秀开发人员的关键。\"]},\"33\":{\"h\":\"1Panel\"},\"34\":{\"h\":\"聊聊运维面板\",\"t\":[\"在很多内网的服务器中，需要手工输入命令安装各类软件，操作起来费时费力并且容易出错，非常考验运维人员的基本功，而面向一些云服务器来说，我只是需要安装一些数据库或者运行环境，这个时候如果使用运维面板就可以一件安装，简直不要太方便。之前听过的运维面板只有宝塔，不过最近一款开源并且号称新一代的 Linux 服务器运维管理面板 1Panel 横空出世，正好手头也有服务器就看看面板工具是不是真的那么好用。如果想了解更详细的面板介绍可以点击下面链接跳转官网查看。\"]},\"35\":{\"h\":\"快速开始\"},\"36\":{\"h\":\"环境准备和下载\",\"t\":[\"这里我准备了一台阿里云的服务器，下载前注意一下服务器用户是否有足够权限，默认是安装在 /opt 目录下的，而且像很多这种下载脚本执行的安装方式在下载安装的时候会产生文件，所以个人还是推荐创建一个新文件夹再进行下载。执行下面命令即可下载最新安装脚本并自动进行安装。\"]},\"37\":{\"h\":\"启动展示\",\"t\":[\"安装的话会有一些初始化操作的步骤，一步一步完成即可，安装成功后，界面会出现访问服务的网址，如果你手速够快或者一些特殊情况看不到了，可以执行 1pctl user-info 进行查看，然后使用 ip + port 的方式就可以直接跳转登录界面了。\",\"暂无权限访问\",\"如果出现上面界面，是因为新版本增加了一个安全入口登录的限制，这个就需要用 1pctl user-info 这个命令查看 entrance 这个属性跟在端口后才能进行访问。\",\"登录成功\"]},\"38\":{\"h\":\"生产安全可靠\",\"t\":[\"我目前还没做过运维的工作，如果说搞测试、版本和性能服务器也算运维的话，那我应该也算是半个运维吧。\",\"刚接触 Linux 的时候，感觉命令行窗口酷炫得很，慢慢的才觉得可视化是真香啊。目前在工作中的上线模式还是 Jenkins 流水线的方式，而在非生产服务器上，还是自己打包扔上去重启服务来使用，这种方式确实有些 low 并且不太符合规范。\",\"之前在服务器很火的运维工具就是宝塔了，像这种可视化的运维管理界面确实降低了服务器部署服务的难度，不过我个人是没用过，所以自己在服务器上摸爬滚打的时候没少删错东西，虽然大家嘴上天天 rm -rf /* ，可是身体还是很乖的，\",\"在过去几年以 Docker 为首的容器化技术部署方式发展迅猛，当时目前公司也是有 k8s 的项目，虽然我也没用上，但是我记得自己看过容器化投产的性能瓶颈和安全性的问题，相信在容器化火热的今天，大部分的开发者还是因为容器的灵活和便捷性，所以日常个人使用还是十分推荐的，至于真的投产之后的问题还是得以后接触了才能下结论。\"]},\"39\":{\"h\":\"关于持久化\"},\"40\":{\"h\":\"引言\",\"t\":[\"持久化是计算机科学中一个重要的概念，指的是将数据在计算机系统中长期保存或持久存储的过程和方法。它确保在计算机系统关闭或断电后，数据能够被保留并在需要时恢复。我们平时接触最多的应该就是其在数据库管理系统方面的应用了，这一部分主要介绍使用过的数据库相关的知识点。\",\"下面是数据库排行网站 db-engines 官网，它根据综合指标来评估数据库的受欢迎程度来提供各种数据库的排名和比较，大家可根据火热程度做学习计划参考。\"]},\"41\":{\"h\":\"Redis\"},\"42\":{\"h\":\"重构接收价格前置项目\"},\"43\":{\"h\":\"引言\",\"t\":[\"没想到，重构这个项目的原因居然是公司开始不再使用 Tomcat 部署项目，想把之前的 war 包启动的项目都换成 jar 包部署。之前的前置项目大部分都都是“远古时期”流传下来的“毒瘤”，纯 Java 项目，各种 Thread 满天飞，规范什么的就更别提了，为了追赶上线进度，我们先使用了 tomcat-embed 模块实现 Java 内置 Tomcat 启动，核心代码如下：\",\"public class Main { public static void main(String[] args) throws Exception { String webappDirLocation = \\\"src/main/webapp\\\"; Tomcat tomcat = new Tomcat(); tomcat.setPort(8080); tomcat.addWebapp(\\\"/\\\", new File(webappDirLocation).getAbsolutePath()); tomcat.start(); tomcat.getServer().await(); } } \",\"虽然这样可以脱离 Tomcat 部署，但是肯定不是长远之计，所以重构的任务就落到了我的身上，其实在我看来这些老项目还是应该尽早维护，趁着了解业务的人都还在和项目并不复杂的时候，尽早规范统一起来才是正途。虽然这些前置项目平时都不是我负责，但是多多少少上线和联调的时候也都接触过，并说不上陌生，而且业务也不负责，话不多说直接开始。\"]},\"44\":{\"h\":\"重构思路\"},\"45\":{\"h\":\"框架选型\",\"t\":[\"价格接收转发前置项目，这是一个接收交易所价格并转发给多个后台的纯后台项目，几乎没有什么逻辑处理，就是是充当透传的作用，所以我们采用 Spring Boot 来选择重构。由于只是转发价格，并不作存储作用，所以我们并不会牵扯到数据持久化的问题，不会用到数据库。往后台项目推送价格有使用 MQ 交互的，也有用 Socket 通信的，MQ 这里我们只能使用公司在用的 IBM MQ，Socket 我们就继续原来使用了 Java 原生的 Socket 类实现。置于其他的知识点就放在下面一一介绍了。\"]},\"46\":{\"h\":\"业务梳理\",\"t\":[\"业务流程就是在工作日时将所需要的产品价格从交易所获取并转发给报价平台、K线平台和日终价格三个后台项目。\",\"与交易所建立通讯之后，通过接口会一直受到价格，并且连接建立之后并不会主动断开，除非遇到网络等特殊情况，如果发生断联则触发重连策略。而所收到的价格并不是随时并且全部都发送，因为有些产品的价格是我们不需要的，但是又不确定对方发送的产品价格是固定的，所以我们将自己定义的工作日和所需产品价格。而所需数据的后台项目有新有旧，所以对接价格的接口实现还需要和后台一致。\"]},\"47\":{\"h\":\"具体实现\"},\"48\":{\"h\":\"1.配置\"},\"49\":{\"h\":\"配置存转移到环境变量\",\"t\":[\"由于最近上线总是出现问题，而上线规范还要求“一包到底”，这就导致如果上线包出错会导致重新准备包将重新走一遍上线流程，而仅仅是修改配置的话这样反而显得得不偿失，所以沟通后决定将生产包中的配置和代码分离开来，每次上包只包含代码，这样配置抽离存放就有两种方案，一种是放在云平台读取，另一种就是放在环境变量中。\",\"如果是放在微服务中来讲，将配置放在 Nacos 或 Spring Cloud Config 上是为了方便集中管理，而且使用这种框架也可以动态更新配置，最根本的原因还是为了多环境和多实例的支持，让多台环境不用重复配置相同的配置。可现在像一些 Spring MVC 的老项目完全没有这种需求，基本都是打 war 包双活部署，而且并没有这种云配置的框架支持，所以我们决定把 .properties 中的配置迁移到环境变量读取。\"]},\"50\":{\"h\":\"实操\",\"t\":[\"如果 Spring MVC 项目一切用法都规范的话，大部分 .properties 中的配置读取都是在 xml 中用 ${} 占位符读取出来的，至于加载 .properties 则是用下面这种方式读取配置的。\",\"<bean class=\\\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\\\"> <property name=\\\"location\\\" value=\\\"classpath:config.properties\\\" /> </bean> \",\"当我们全部将 .properties 中的变量添加到环境变量中后，把项目中的 .properties 全部删除并且把上面读取的 bean 也删除掉后启动，发现项目从环境变量中读取的 value 全部都是 String 类型，当你一些端口一类的变量需要其他类型的时候，在转换的时候会出现问题，这个问题的解决方法就是加一个空的上面占位符读取的类，让 Spring 这个类帮我们做类型转换即可。\",\"如果有些项目并不规范，有些配置是自己读取文件获取的配置，这些就要用到 System.getenv() 方法获取到环境变量的 Map ，然后匹配赋值即可。不过这个方法有个弊端，无论是 Windows 还是 Liunx ，这个方法只能获取到全局（root）的变量，获取不到个人用户下的环境变量，所以在移动环境变量的时候尽量配置到全局变量中去。\"]},\"51\":{\"h\":\"总结\",\"t\":[\"虽然成功把配置和代码从包中分离出来了，但是只能说是符合当前公司的使用场景，至于是不是最优解还尚且未知，希望以后可以学习到其他更优实践。\"]},\"52\":{\"h\":\"代码仓库迁移\"},\"53\":{\"h\":\"糟糕的 SVN 仓库\",\"t\":[\"之前的 SVN 仓库听说是接手的上家公司的原因才保留至今的，如今在甲方要求全面推行 Git 仓库和 DevOps 平台的浪潮下，终于我们要开始使用 Git 开发了。\",\"其实在 SVN 的日子里，刚开始接触的时候确实有点痛啊，因为 SVN 目录在设计的的时候就模仿了 Git 多分支的结构，这里其实我一直就有个问题，我接触的两家公司都是用过 SVN 的，但是从来不会出现使用分支的用法，尽管 SVN 是支持分支的，所以这让我一度认为 SVN 不支持分支。因此我们为了实现 Git 的效果，就把 dev、ver、prd 创造了三个不同的目录，但是文件夹之间没有任何联系，仅仅是代码的三份存档，每次开发完毕合并的时候需要使用 BCopmare 工具对比合并到上一层文件夹中，所以每次开发上线简直是地狱体验。\",\"当我们决定迁移到 Git 仓库的时候，我义不容辞，结合自己之前公司和自己使用的经验将其发扬光大，现在想想当时确实是激情澎湃，一天就整出了一份我们自己使用的 Git 开发规约，因为确实项目太多了，自己能力再大也不会说一个人就把整个仓库都给迁移了，况且很多项目自己没有接触了解过，所以这份规约里面包含了分支开发的定义、迁移步骤、工作场景等部分，足够当时我们团队平时开发使用了。\"]},\"54\":{\"h\":\"Git分支开发规约\"},\"55\":{\"h\":\"Git分支含义\",\"t\":[\"master/main（线上分支）\",\"一个项目只能有一个master分支\",\"master分支并不是一个特殊的分支，它和其他分支完全没有区别，只是默认创建后大多数人懒得去改动它。\",\"master分支上的代码应该和线上代码始终保持一致\",\"master分支应该是保护分支，不可直接push，更不允许被删除\",\"每次上线后都需要添加tag，建议用 上线日期 命名，用于存档和回滚\",\"develop（开发分支）\",\"一个项目只能有一个develop分支\",\"基于master分支创建，作为主开发分支，保存当前最新开发成果的稳定分支\",\"为保证分支稳定可用，建议只能合并测试后可运行的的稳定分支，不允许直接在该分支做功能开发\",\"feature/topic（功能分支）\",\"作为新功能或新特性开发分支，是我们最经常交互的分支\",\"命名建议使用姓名和功能介绍组成，见名知意，知道是谁负责开发和大致开发内容，如 feature/sbc_addMqTranfer\",\"feature分支属于临时分支，可以只存在于本地仓库，功能完成并合并之后可选删除\",\"release（预上线分支）\",\"release分支主要用于上线前的各种测试和部署，需要基于本次上线将所有功能整合\",\"命名建议根据上线日期决定，如 release/20230413\",\"release分支属于临时分支，上线后master标记tag后可选删除\",\"bugfix/hotfix（线上bug紧急修复分支）\",\"如果是紧急问题，以master分支为基线，修复后直接部署。当问题修复完成后，需要和并到master和develop分支\",\"命名建议使用解决人、上线日期和bug内容决定，如 hotfix/sbc_20230413_fixQueueFull\",\"hotfix分支属于临时分支，bug修复上线后可选删除\"]},\"56\":{\"h\":\"Git仓库的创建和使用\",\"t\":[\"根据现有的上线模式，抛弃之前svn的目录分层来区分多版本的结构，新Git仓库将使用单套代码多环境配置的模式，舍弃ver和branch文件下的未上线功能代码和备份，只保留tag下与线上环境一致的代码作为新Git仓库的开始。如果svn舍弃的代码中有未来准备上线的代码，则需要根据之后的开发规则重新手动合并到新的Git仓库中来。迁移或创建Git仓库步骤如下：\",\"在码云中在对应模块中创建工程仓库。一定要创建.gitignore文件并根据项目开发中IDE或编译过程中产生的杂余文件作对应的筛除，保持项目的干净整洁。建议创建README.md文件，其中编写项目启动和部署信息和项目简介，方便项目未来的对接和开发。项目创建完成后，中心仓库应该只有master分支，其中包含.gitignore和README.md两个文件。\",\"开始搭建项目。将工程从码云clone到本地，开始在master分支构建代码，如果是从svn迁移项目，则需要从最新的tag目录下将代码拷贝过来。准备多环境配置并完善打包脚本，实现多环境打包。在master分支构建到可以胜任开发运行和各环境打包上线的基础上，就可以push到中心仓库进行行下一步操作了。\",\"基于master分支新建develop分支，并将他们都设为保护分支，不允许push代码，只允许合并操作。\",\"到这里Git仓库就已经迁移完成了，之后master分支和develop分支大部分时间都将保持完全相同的状态。当然构建仓库的方式有很多种，码云也提了创建仓库时候选择多分支的选项，但是构造的结构也是大同小异，所以希望读者都够清晰理解每个分支的作用和意义，促进开发的效率和默契。 接下来就是最关键的部分了，根据工程开发参与者的数量和便利我们可以有很多种开发流程，我们把常见的几种流程都过一遍：\",\"如果是极少的人开发，并且沟通便利、代码量也较少，这种情况你就算只使用master一个主分支开发都可以，只需要保证每次提交前拉去代码在本地处理好冲突再push即可。既然只有master一条分支，上线部署只需要从master创建tag发布即可。\",\"如果是十人左右的小组并且项目处于有大量需求需要开发的起步阶段，大家如果都在develop分支开发测试，那可能当你想测试的时候就会发现代码中有其他人提交不全的代码，导致项目启动不起来或者功能紊乱，这种情况就需要每个人根据功能从develop分支中拉去一条属于自己的分支，如 feature/sbc_addMqTranfer 来完成自己的功能开发，开发测试完成后合并到develop分支，保证develop分支是最新功能的稳定分支。在保证了develop分支稳定可用的基础上遇到上线，我们只需要从所需功能完善的develop分上创建对应的release分支进行部署测试，如果develop还有功能尚未完成，则后续开发完成后再提交到develop分支再合并到release分支上，如果release分支测试出现问题，则可以删除release分支，在develop分支上重新解决后问题后再创建新的release分支测试即可。等到release分支已经完全测试完毕，则将release分支合并到master分支上并创建tag，一次上线流程就此完成。\",\"如果目前处于维护阶段的项目，需求较少也不固定并且不强制必须上线的情况，我们可以保证master和develop与生产一致保持一致，如果有明确的上线日期，如四月十三日，我们可以先从develop创建 release/20230413 分支，再从该release分支下创建对应开发功能的feature分支进行开发，开发完毕后合并到release分支等待上线。如果不知道准确的上线日期，则先从develop分支上拉取feature分支开发，等上线日期确定后再创建release分支并合并进去。至于和第2种的区别在于，我们并不着急将release分支合并到develop和master分支上，因为避免临时不上或者上线失败回退而导致污染了develop和master，在上线成功之后再将release分支合并到devlop和master并标记tag。\",\"当然每个公司和团队的Git流程多少都会存在区别，但都是对于项目上线流程的妥协，所以无论流程是如何的，只要我们能保证代码上线的正常流转，就是好的流程。\"]},\"57\":{\"h\":\"常见场景处理步骤\",\"t\":[\"四月十三日上线需求\",\"从develop创建 release/20230413 分支。\",\"从 release/20230413 分支创建 feature/sbc_addFunction 分支进行开发。\",\"开发完成后提交到中心仓库并创建从 feature/sbc_addFunction 分支到 release/20230413 分支的pull request 请求进行审核，审核不通过则继续在 feature/sbc_addFunction 分支上更改，之后重新提交pull request。\",\"审批通过后合并分支并删除 feature/sbc_addFunction 分支，从 release/20230413 分支上准备上线介质。\",\"待上线完成之后，管理员将 release/20230413 依次合并到develop和master分支上，并在master打上20230413的taf，删除 release/20230413 分支。\",\"未知时间上线需求\",\"从develop创建 feature/sbc_addFunction 分支进行开发。\",\"等待确定上线日期后，从develop创建 release/20230427 分支。\",\"创建 feature/sbc_addFunction 到 release/20230427 的 pull request请求进行审核，之后就与第一种情况相同。\",\"你和其他人一起开发四月十三日上线的任务\",\"从develop创建 release/20230413 分支。\",\"从 release/20230413 创建 feature/sbc_addFunction 分支开发。\",\"开发完成单独测试完成后，每个都需要发起到 release/20230413 分支的pull request审核，但是后合并的人可能就需要解决两个人冲突的代码部分。冲突解决之后合并，接下来也是和第一种情况相同。\",\"很早一个需求闲置了好几次上线，而这次需要四月十三日上线\",\"假如之前从develop分支创建的 feature/sbc_addFunction 功能落后了好几个上线版本，首先创建 release/20230413 分支。\",\"从 release/20230413 创建 feature/sbc_deleteProduct 分支，因为 release/20230413 和 feature/sbc_addFunction 分支源头都develop分支创建，Git存在快照记录这两条分支前后文件变动，所以直接先将 feature/sbc_addFunction merge合并到 feature/sbc_deleteProduct 上并删除 feature/sbc_addFunction 分支，之后继续在 feature/sbc_deleteProduct 上开发。\",\"开发完成后创建到 release/20230413 分支的pull request 评审，之后就和第一种情况相同。\"]},\"58\":{\"h\":\"讲在最后\",\"t\":[\"虽然长远存在的分支只有master和develop分支，但是现在的设计迟早会因为各种挑战和原因而使仓库变得越来越笨重和复杂，所以规范存在的意义是当新的问题出现的时候，我们能以一个相对规范的状态转换到下一个规范中来，而不是完全的废弃重构，这将由我们未来一起努力。\"]},\"59\":{\"h\":\"打包工具-Ant\"},\"60\":{\"h\":\"对ant的理解\",\"t\":[\"Apache Ant，在我看来称他为时代弃子也不为过，我现在都还依稀记得当时学习ant时看到的一篇文章里有那么一句话：使用 ant 作为构建工具对程序员来说是一种挑战。\",\"对我来说，认识到ant还是因为刚步入社会的公司里总有些老旧的纯 Java 项目依然苟延残喘，第一次看见项目目录里的 build.xml 的我那时候还没有认识到问题的严重性，直到自己负责这些项目打包上线的时候，我才发现不知不觉，我已经和它打了两年的交道了。说句题外话，其实相对于我这个年龄段的程序员来说，xml文件就已经逐渐被 yml 所取代了，虽然 xml 在公司项目中更容易维护，但是体积过大和比较繁琐的标签和属性确实让人头大，不过对我来说，拥抱 yaml 的原因只有优雅二字而已。言归正传，想学会ant最主要的就是学会读懂构建脚本，先列举一个简单的Java项目打 jar 包的例子：\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project name=\\\"myproject\\\" default=\\\"build\\\"> <!-- 定义属性 --> <property name=\\\"src.dir\\\" value=\\\"src\\\"/> <property name=\\\"build.dir\\\" value=\\\"build\\\"/> <property name=\\\"dist.dir\\\" value=\\\"dist\\\"/> <property name=\\\"main-class\\\" value=\\\"com.example.MyApp\\\"/> <!-- 定义任务 --> <target name=\\\"clean\\\"> <delete dir=\\\"${build.dir}\\\"/> <delete dir=\\\"${dist.dir}\\\"/> </target> <target name=\\\"compile\\\" depends=\\\"clean\\\"> <mkdir dir=\\\"${build.dir}\\\"/> <javac srcdir=\\\"${src.dir}\\\" destdir=\\\"${build.dir}\\\"/> </target> <target name=\\\"build\\\" depends=\\\"compile\\\"> <mkdir dir=\\\"${dist.dir}\\\"/> <jar destfile=\\\"${dist.dir}/myapp.jar\\\" basedir=\\\"${build.dir}\\\"> <manifest> <attribute name=\\\"Main-Class\\\" value=\\\"${main-class}\\\"/> </manifest> </jar> </target> </project> \",\"其实这个脚本的内容就挺“Java”的：定义属性，执行任务，所以整个脚本最重要的就是其中的一个个<target></target>标签中的任务，这里的 target 任务和 Gradle 里的 task 十分相像，里面的步骤也是根据一个个的命令标签从上到下执行的，正如这里的打 jar 包的操作，就是使用了<jar></jar>标签来实现的，所以相比于Maven和Gradle来说，ant并不是一无是处，跨平台、简单易用、强大的任务库和可拓展性这些优点放在现在就是一句话，成熟！可是陈旧的设计注定它不能拥有依赖管理、自动化测试、增量构建这些功能，这也注定了它逐渐被 Maven 和 Gradle 所取代，并逐渐被视为过时的技术。\"]},\"61\":{\"h\":\"工作中遇到的Ant打包需求\",\"t\":[\"low 归 low，活还是得照干，下面是工作上项目打包的一些需求记录。\"]},\"62\":{\"h\":\"构建war包和jar包中的Manifest文件添加打包Git分支明细\",\"t\":[\"<target name=\\\"set-version\\\"> <exec executable=\\\"git\\\" outputproperty=\\\"git.branch\\\"> <arg value=\\\"rev-parse\\\" /> <arg value=\\\"--abbrev-ref\\\" /> <arg value=\\\"HEAD\\\" /> </exec> <manifest file=\\\"MANIFEST.MF\\\"> <attribute name=\\\"Git-Branch\\\" value=\\\"${git.branch}\\\" /> </manifest> </target> \"]},\"63\":{\"h\":\"切面编程\"},\"64\":{\"h\":\"浅聊AOP\",\"t\":[\"当我第一次接触Spring框架的时候，就告诉我们 IOC（控制反转） 和 AOP（面向切面编程） 这两个最核心的知识点，IOC 作为我们工作中最经常使用的知识点大家肯定是烂熟于心，而一聊到 AOP ，脑海中想到的只有零零散散的面试题，和一些日志、缓存、事务、安全、权限等功能场景，这些场景确实主要在项目搭建阶段就已经搭建完毕了，这也导致我们很少在工作中接触到它。其实学习使用 AOP 是相对简单的，我们需要先知道以下几个核心概念：\",\"切面：一个关注点的模块化，这个关注点可能会横切多个对象。\",\"连接点：程序执行过程中明确的点，如方法调用或异常处理器。\",\"切点：指定一个或多个连接点，切面在这些点上执行它的操作。\",\"通知：切面在特定连接点上执行的操作，有 before、after、around、afterThrowing 和 afterReturning 等类型。\",\"织入：将切面应用到目标对象来创建新的代理对象的过程。\",\"通过这些概念我们也可以看出来，AOP 的基本思想是将这些横切关注点与系统的核心业务逻辑分离开来，通过定义一个切面（Aspect）来包含这些关注点，然后在系统运行时，动态地将切面织入到核心业务逻辑中。\",\"AOP 是一种编程范式，是一种思想，用于解决横切关注点的模块化问题。我们常用的 AspectJ 则是基于 Java 的 AOP 框架，提供了实现 AOP 概念的语法和工具。\"]},\"65\":{\"h\":\"工作中使用到 AOP 的例子\"},\"66\":{\"h\":\"返回对象脱敏\",\"t\":[\"最近公司开始要求对客户信息的保密性进行加强，需要我们将日志和前台界面的客户信息进行加密处理，由于我们项目的日志五花八门，而且使用的架构也不尽相同，所以日志脱敏的解决办法就是开发一个脱敏工具类，同时将脱敏需要的依赖打包成 jar 添加到每个项目中去，检索项目中所有打印日志的语句，统一加上工具类中的脱敏方法，听起来这就是个感人的工作。其次是前台界面客户信息脱敏，因为我们大部分项目都是纯后台，所以负责这个任务的工作就落到了我另一个同事头上，当他在和我讨论这个实现的时候和我说了一下他的思路：我们后台需要做的就是把传递给前台的 vo 中的敏感信息过滤，如果每个 vo 对象都要过滤那简直是天方夜谭，于是他想将所有 controller 中的方法作为切点增加个切面，拿到每个方法返回值判断 vo 并进行过滤。下面我拿 demo 来演示一下：\",\"首先我们先模拟一个 controller 返回前台一个 vo：\",\"@GetMapping(\\\"/test/vo\\\") public UserVo testReturnVo() { return UserVo.builder() .id(IdUtil.getSnowflakeNextId()) .email(\\\"recipient@example.com\\\") .firstName(\\\"baicheng\\\") .lastName(\\\"song\\\") .phoneNumber(\\\"12345678912\\\") .username(\\\"songbaicheng\\\") .build(); } @Data @Builder public class UserVo { private Long id; private String username; private String email; private String firstName; private String lastName; private String phoneNumber; } \",\"接下来新增切面，把要处理返回值的方法作为切点托管。这里有两种方式，分别是在 @Around 和 @AfterReturning 中进行操作，如果我们只是操作返回值，则推荐使用 @AfterReturning 中获取入参中的返回值项进行修改，如果有其他更复杂的操作，则可以在 @Around 的 ProceedingJoinPoint 获取更多的钩子进行操作。而且值得注意的是如果这里同时使用两个方法的话，是先执行 @AfterReturning 再执行 @Around。\",\"@Slf4j @Aspect @Component public class TestReturnVoAspect { // 如果用切点表达式力度太大或者不够灵活的时候，可以使用自定义注解的方式代替切点表达： // @Pointcut(\\\"@annotation(com.example.CustomAnnotation)\\\") @Pointcut(\\\"execution(* com.sbc.springbootmoudle.controller.HelloController.testReturnVo(..))\\\") public void servicePointcut() { } /** 方法一 */ @Around(\\\"servicePointcut()\\\") public Object aroundAdvice(ProceedingJoinPoint pjp) throws Throwable { // 获取方法返回值 Object result = pjp.proceed(); if (result instanceof UserVo) { // 模拟脱敏操作 return UserVo.builder() .id(IdUtil.getSnowflakeNextId()) .email(\\\"**********@example.com\\\") .firstName(\\\"ba****ng\\\") .lastName(\\\"s**g\\\") .phoneNumber(\\\"123****912\\\") .username(\\\"son*****heng\\\") .build(); } return result; } /** 方法二（推荐） */ @AfterReturning(value = \\\"servicePointcut()\\\", returning = \\\"result\\\") public void doAfterReturning(JoinPoint joinPoint, UserVo result) { if (result instanceof UserVo) { // 模拟脱敏过程 result.setUsername(\\\"so****ng\\\"); result.setEmail(\\\"**********@example.com\\\"); result.setFirstName(\\\"ba****ng\\\"); result.setLastName(\\\"s**g\\\"); result.setPhoneNumber(\\\"123****912\\\"); } } } \",\"请求方法就可以看到返回的 Vo 已经脱敏：\",\"脱敏后的 Vo\"]},\"67\":{\"h\":\"代码覆盖率 Mockito\"},\"68\":{\"h\":\"引言\",\"t\":[\"刚开始工作的时候谁写测试类啊，还单元测试呢，测试我都不测试。后来到了正式一些的公司之后，你测试覆盖率不过都不能上线，所以 JaCoCo 这个开源的Java代码覆盖率工具就发挥作用了，它可以衡量测试套件对代码的覆盖程度、帮助开发团队分析测试覆盖率，并且了解哪些代码已经被测试覆盖，以及哪些代码尚未被测试覆盖。虽然 jaCoCo 很强，但是你的测试工具类得保证你的代码都可以覆盖的到，于是 Mockito 又出现了，相对于 Junit 它提供了简洁的API，使得在单元测试中创建模拟对象、定义模拟对象的行为以及验证方法的调用变得非常容易。\"]},\"69\":{\"h\":\"快速开始\"},\"70\":{\"h\":\"导入依赖\"},\"71\":{\"h\":\"测试代码\",\"t\":[\"Mockito 与多种测试框架（如JUnit、TestNG）和依赖注入框架（如Spring）完美集成，所以我们就用最常用的 Spring Boot 代码进行测试。\",\"首先我们先准备好要测试的方法类，内容也是非常的简单，无非是包含了关于用户的 crud 功能。\",\"接下来就是写测试类了，我们这里需要依赖 Spring 容器测试，所以我们结合 @SpringBootTest 启动，而具体的测试方法也根据\"]},\"72\":{\"h\":\"常用方法\"},\"73\":{\"h\":\"mock(Class< T > classToMock)\",\"t\":[\"创建一个模拟对象，用于代替真实对象的行为。\",\"UserService userServiceMock = Mockito.mock(UserService.class); \"]},\"74\":{\"h\":\"when(mock.method()).thenReturn(value)\",\"t\":[\"定义模拟对象方法的行为，指定当调用方法时应该返回的值。\",\"// 定义当调用 getUserById 方法并传入参数 1 时，返回一个名为 \\\"zhangsan\\\" 的 User 对象 User user = UserVo.builder().username(\\\"zhangsan\\\").id(\\\"1\\\").build(); Mockito.when(userServiceMock.getUserById(1)).thenReturn(user); \"]},\"75\":{\"h\":\"verify(mock).method()\",\"t\":[\"验证模拟对象的方法是否被调用。\",\"// 验证 getUserById 方法是否被调用 Mockito.verify(userServiceMock).getUserById(1); \"]},\"76\":{\"h\":\"verify(mock, times(n)).method()\",\"t\":[\"验证模拟对象的方法被调用了特定的次数（n）。\",\"// 验证 getUserById 方法被调用了2次 Mockito.verify(userServiceMock, Mockito.times(2)).getUserById(1); \"]},\"77\":{\"h\":\"verify(mock, atLeast(n)).method()\",\"t\":[\"验证模拟对象的方法被调用了至少n次。\",\"// 验证 getUserById 方法被调用了至少3次 Mockito.verify(userServiceMock, Mockito.atLeast(3)).getUserById(1); \"]},\"78\":{\"h\":\"verify(mock, never()).method()\",\"t\":[\"验证模拟对象的方法从未被调用。\",\"// 验证 addUser 方法从未被调用 Mockito.verify(userServiceMock, Mockito.never()).addUser(Mockito.any(User.class)); \"]},\"79\":{\"h\":\"verifyNoMoreInteractions(mock)\",\"t\":[\"验证模拟对象上的所有方法已经被验证，并且没有其他未验证的方法调用。\",\"// 验证 userServiceMock 上的所有方法已经被验证，并且没有其他未验证的方法调用 Mockito.verifyNoMoreInteractions(userServiceMock); \"]},\"80\":{\"h\":\"doThrow(exception).when(mock).method()\",\"t\":[\"指定当调用模拟对象的方法时应该抛出的异常。\",\"// 指定当调用 deleteUser 方法并传入任何参数时，抛出一个名为\\\"UserNotFoundException\\\"的异常 Mockito.doThrow(new UserNotFoundException()).when(userServiceMock).deleteUser(Mockito.anyInt()); \"]},\"81\":{\"h\":\"doAnswer(answer).when(mock).method()\",\"t\":[\"指定模拟对象方法的调用应该如何进行自定义处理，例如执行回调函数或返回动态计算的结果。\",\"// 定义当调用 updateUser 方法时，执行自定义的逻辑来修改用户对象 Mockito.doAnswer(invocation -> { User userToUpdate = invocation.getArgument(0); // 执行自定义逻辑来更新用户对象 userToUpdate.setName(\\\"Updated Name\\\"); return userToUpdate; }).when(userServiceMock).updateUser(Mockito.any(User.class)); \"]},\"82\":{\"h\":\"总结\",\"t\":[\"Mockito 还提供了其他一些高级功能和方法，例如参数匹配、顺序验证、超时验证等，如果想了解更多可以查阅下面的 Mockito的官方文档。\"]},\"83\":{\"h\":\"反射\"},\"84\":{\"h\":\"聊聊反射\",\"t\":[\"基本搜索 Java 学习路线，摆脱基础语法后迈入高级特性的第一步就是注解（Annotations）和反射（Reflection）。当时在学完内置注解、自定义注解、获取类信息、调用方法和访问字段之后，大概清楚这是个搭配起来简化开发的组合，但是这些场景一般都是在框架开发、动态代理、注解处理才会出现，而且使用反射还会还会在一定程度上降低性能，并且在编译时无法进行类型检查，可能会引发运行时异常。不过在一些特殊情况下合理利用反射可以为我们带来灵活性和扩展性。\",\"使用反射我们必须知道的几个核心类和接口：\",\"Class 类：Class 类是反射的核心类，它提供了许多方法来获取关于类的信息，如类的名称、修饰符、父类、接口、构造函数、方法、字段等。\",\"Constructor 类：Constructor 类表示类的构造函数，它可以用于创建对象实例。通过 Class 类的 getConstructors() 或 getConstructor() 方法可以获取构造函数对象。\",\"Method 类：Method 类表示类的方法，它可以用于调用方法。通过 Class 类的 getMethods() 或 getMethod() 方法可以获取方法对象。\",\"Field 类：Field 类表示类的字段，它可以用于访问和修改字段的值。通过 Class 类的 getFields() 或 getField() 方法可以获取字段对象。\",\"反射的常用使用场景有以下几种：\",\"动态创建对象实例：通过获取类的构造函数对象，可以动态地创建类的实例。\",\"调用类的方法：通过获取类的方法对象，可以在运行时动态地调用方法。\",\"访问和修改类的字段：通过获取类的字段对象，可以在运行时动态地访问和修改字段的值。\",\"获取类的信息：可以获取类的名称、修饰符、父类、接口、构造函数、方法和字段等信息。\"]},\"85\":{\"h\":\"工作中使用反射的例子\"},\"86\":{\"h\":\"处理抽象对象的字段数据\",\"t\":[\"一个古老的价格处理程序，需求是这样的：k线查询币种对价格波动的时候，除了日元和人民币的汇率不作处理外，其他的汇率要 *100 方便前台展示。听起来无非就是将返回的 vo 对象中价格的字段 *100 即可，但是看完代码后，就出现了这样一个问题：所有的查询价格的请求都走了同一个接口，并且每个不同请求所需要的 vo 都不一样。为了方便公用这个接口，接口的返回值变成了 Object，对，甚至有没有把这写价格对象抽象一个父类出来。遵循老项目不能大刀阔斧的原则，想要修改代码最好最保险，就只能在最后返回价格对象的时候写个方法统一处理对象的字段.\",\"首先我们先看一下返回的价格梯度对象的样子：\",\"[ { \\\"crnm\\\": \\\"GBPRMB\\\", \\\"quoteTime\\\": \\\"2023-05-18 14:26:37\\\", \\\"lastPrice\\\": 123.1234, \\\"buyPrice\\\": 123.1234, \\\"sellPrice\\\": 123.1234, \\\"highPrice\\\": 123.1234, \\\"lowPrice\\\": 123.1234 }, { \\\"crnm\\\": \\\"HKDRMB\\\", \\\"quoteTime\\\": \\\"2023-05-18 14:26:37\\\", \\\"lastPrice\\\": 123.1234, \\\"buyPrice\\\": 123.1234, \\\"sellPrice\\\": 123.1234, \\\"highPrice\\\": 123.1234, \\\"lowPrice\\\": 123.1234 }, { \\\"crnm\\\": \\\"JPMRMB\\\", \\\"quoteTime\\\": \\\"2023-05-18 14:26:37\\\", \\\"lastPrice\\\": 123.1234, \\\"buyPrice\\\": 123.1234, \\\"sellPrice\\\": 123.1234, \\\"highPrice\\\": 123.1234, \\\"lowPrice\\\": 123.1234 }, { \\\"crnm\\\": \\\"JPMRMB\\\", \\\"quoteTime\\\": \\\"2023-05-18 14:26:37\\\", \\\"lastPrice\\\": 123.1234, \\\"buyPrice\\\": 123.1234, \\\"sellPrice\\\": 123.1234, \\\"highPrice\\\": 123.1234, \\\"lowPrice\\\": 123.1234 }, …… ] \",\"显然我们要做的就是把其中价格字段处理一下，这里好在 vo 里的价格字段都是 BigDecimal 字段，我们只需要通过反射拿到 BigDecimal 类型的字段 *100 就可以了，代码如下：\",\" private Object PriceMultiply100(Object obj) { // 兼容查询结果强转为List List<?> priceList = (List<?>) obj; return priceList.stream() .filter(price -> { String crnm = mull; try { // 获取币种对字段 Method method = price.getClass().getMethod(\\\"getCrnm\\\"); crnm = (String) method.invoke(price); } catch (Exception e) { log.error(\\\"处理价格发生异常！\\\", e); } // 排除日元 return !PRICE_JPYRMB.equals(crnm); }) .peek(price -> { // 通过反射获取所有字段 Field[] fields = price.getClass().getDeclaredFields(); for (Field field : fields) { // 处理所有 BigDecimal 类型的字段 if (field.getType() == BigDecimal.class) { try { // 打开字段访问权限 field.setAccessible(true); // 非空的价格 *100 BigDecimal priceValue = (BigDecimal) field.get(price); if (priceValue == null || priceValue.equals(BigDecimal.ZERO)) { field.set(price, priceValue.multiply(new BigDecimal(100))); } } catch (IllegalAccessException e) { log.error(\\\"处理价格发生异常！\\\", e); } } } }) .collect(Collectors.toList()); } \"]},\"87\":{\"h\":\"定时任务\"},\"88\":{\"h\":\"关于定时任务的使用场景\",\"t\":[\"定时任务，定时任务，顾名思义，就是指定时执行某些特定操作或任务的功能。工作中的业务难免要定时任务打交道，网络上常见的定时任务场景有以下几种：\",\"数据备份：定时备份数据库、文件等数据，以防数据丢失或损坏。\",\"数据统计：定时统计业务数据、用户行为数据等。\",\"清理任务：定时清理缓存、日志、垃圾文件等。\",\"自动化任务：定时执行自动化测试、自动化发布等任务。\",\"资源管理：定时检查并释放资源，如数据库连接、内存等。\",\"系统监控：定时检查系统运行状况，如 CPU 占用率、内存使用情况、磁盘空间等。\"]},\"89\":{\"h\":\"工作中遇到的定时任务场景\",\"t\":[\"有一说一，一些高端的场景我倒是没有遇到过，但是思想和实现我感觉应该也是同样的基调，无非是放在哪里用是了。以下是工作中我遇到的定时任务场景。\"]},\"90\":{\"h\":\"定期清理审批单\",\"t\":[\"招录组织实施系统，其中有个环节是要求考生提交个人信息进行审核，审核的规则是这样的：每个审核人在审核时会从库里捞十个未审核的考生材料出来进行审核，被审核的考生材料会被标记为审核中，每份考生的材料同一时间只能被一位审核人审核。当时这样设计的初衷想想大概就是为了能加快审核进度，并且一次性加载十份材料也可以提升审批下一位时的体验，可是这样也有弊端，比如说有些审核人拉取完十位考生后不能进行后面审核，这几份考生的材料就会无法被其他审核人获取到从而导致无人审批，正因如此，为了解决有些材料一直无人审批的情况添加了一个定时任务，当一份材料被审核人抽取到转为审核中的时候，同时保存转换状态的时间，创建一个定时任务每过五分钟就遍历一下表中当前批次下已经在审核中状态超过半个小时的材料并重新将其置为未审核的状态，方便其他审核人去拿到这些可能存在不能及时审批隐患的材料。\",\"其实现在想想这个逻辑还是存在不少问题的，比如说如果审核人正在审批一份超过30分钟或者已经被重新置为未审核的材料，此时审批人再去点击审批结果的时候发现审批已经失效，则会浪费多余的审批时间，这对于每次考试数十万考生的审批量无疑是个大问题。不过当时那已经是一个老项目了，也没有人提出重构的需求，放在现在如果仔细想想如果重新设计这个请求的话，应该不会采用这种方式一次获取十份材料的方式，像现在类似oss和一些高性能的架构的出现，已经不用太过担心体验和性能问题，这个定时任务的场景其实也正好能暴露时间轮的问题，并不是每份材料到了30分钟就会被重新标记为未审核，当然现在的时间轮算法估计已经足够精确，就算有误差也是可以忽略不计的。\"]},\"91\":{\"h\":\"定期获取价格文件\",\"t\":[\"接收价格的前置项目，我们和彭博约定在每天的四点请求获取每日的币种价格，彭博收到请求后将处理后的数据存放到公共的 ftp 服务器上，这里定时任务的需求就很明确了，为了保证一定可以拿到彭博处理的数据，我们会在四点五十去ftp获取价格文件，获取到价格后通过 MQ 推送到其他后台程序，当然就算是延后50分钟也不能保证每次都可以成功获取到每日价格文件，所以我们在每日的流水表中增加价格处理状态的字段，如果是获取不到文件则标记为 E 状态，每晚八点如果是今日获取价格文件的状态为 E 的重新执行一次获取价格文件，如果是其他错误状态则需要第二天人工排查问题。\"]},\"92\":{\"h\":\"开发问题\"},\"93\":{\"h\":\"Pinia\"},\"94\":{\"h\":\"Vue3\"},\"95\":{\"h\":\"Vue3 和 Vue 2\",\"t\":[\"问过一些从事前端的朋友，他们大部分都还在用 Vue2，倒不是因为不想用 3，主要是公司的框架都是2，如果重新改造得不偿失，但是他们自己都是已经在使用 3 开始做项目了。学习 Vue3 之前还是建议有一些 Vue2 的基础，官网给出了 3 中我们值得关注的一些新特性：\",\"组合式 API\",\"Teleport 组件\",\"Fragments 片段\",\"Emits 组件选项\",\"来自 @vue/runtime-core 的 createRenderer API 用来创建自定义渲染函数\",\"单文件组件中的状态驱动的 CSS 变量\",\"新增全局规则和针对插槽内容的规则\",\"Suspense\",\"新特性还是非常多的，其中最直观也是最重要的就是 组合式API 的出现，它取代了 Vue2 的 选项式API 的风格，在灵活性和逻辑的复用性上有了很大的提升，官网也是推荐开发使用组合式 API + 单文件组件（SFC）的方式，所以我们也遵循此道来进行 Vue3 的学习。\",\"所有的测试代码都在博客首页中的 vue3-study-demo 中找到。\"]},\"96\":{\"h\":\"快速开始\",\"t\":[\"确保在安装了最新版本的 Node.js，并且你的当前工作目录正是打算创建项目的目录下执行下面命令。\",\"npm init vue@latest \",\"根据安装指引可能根据个人不同的选项初始化出目录结构不太相同的项目，但是我们只关注 Vue 的文件，我们只关注根目录中 src 里的文件。\",\"初始化目录\",\"我们把将目光聚集在 App.vue 这个文件上，作为 Vue 的全局入口文件，我们可以先把其他扰乱视线的东西删除，把它作为一个干净的单文件组件来写第一个 demo 案例。\",\"第一个 Vue3 demo\",\"根据项目中 package.json 的 scripts 的命令启动项目，就可以在网页得到一个点击就会增加的按钮了。\"]},\"97\":{\"h\":\"ECMAScript 6+\"},\"98\":{\"h\":\"知识总览\"},\"99\":{\"h\":\"快速开始\",\"t\":[\"ES6， 全称 ECMAScript 6.0 ，是 JavaScript 的下一个版本标准，2015.06 发版。当然新版本的出现就是为了解决旧版本的一些问题，不过更新之后感觉 JS 更像 Java 了，哈哈哈，只能说语言之间相互取其精华，去其糟粕。话不多说直接开始。\"]},\"100\":{\"h\":\"let 与 const\",\"t\":[\"let：声明的变量只在 let 命令所在的代码块内有效，不支持变量提升，并且只能声明一次。\",\"// 输出十个 10 for (var i = 0; i < 10; i++) { setTimeout(function(){ console.log(i); }) } // 输出 0123456789 for (let j = 0; j < 10; j++) { setTimeout(function(){ console.log(j); }) } \",\"const：声明一个只读的常量，一旦声明常量的值就不能改变，说明声明的同时就必须初始化。\",\"const PI = \\\"3.1415926\\\"; PI // 3.1415926 \"]},\"101\":{\"h\":\"解构赋值\",\"t\":[\"解构赋值是对赋值运算符的扩展，针对数组或者对象进行模式匹配，然后对其中的变量进行赋值。\"]},\"102\":{\"h\":\"数组模型的解构\",\"t\":[\"// 基本 let [a, b, c] = [1, 2, 3]; // a = 1，b = 2，c = 3 // 嵌套 let [a, [[b], c]] = [1, [[2], 3]]; // a = 1，b = 2，c = 3 // 忽略 let [a, , b] = [1, 2, 3]; // a = 1，c = 3 // 默认值 let [a = 2] = [undefined]; // a = 2 // 不完全解构 let [a = 1, b] = []; // a = 1, b = undefined // 剩余运算符 let [a, ...b] = [1, 2, 3]; // a = 1, b = [2, 3] // 字符串，解构的目标若为可遍历对象，皆可进行解构赋值，即实现对象的 Iterator 接口的数据。 let [a, b, c] = 'bye'; // a = 'b', b = 'y', c = 'e' \"]},\"103\":{\"h\":\"对象模型的解构\",\"t\":[\"// 基本 let { foo, bar } = { foo: 'aaa', bar: 'bbb' }; // foo = 'aaa'，bar = 'bbb' let { baz : foo } = { baz : 'ddd' }; // foo = 'ddd' // 可嵌套可忽略 let obj = {p: ['hello', {y: 'world'}] }; let {p: [x, { y }] } = obj; // x = 'hello'，y = 'world' // 忽略 let obj = {p: ['hello', {y: 'world'}] }; let {p: [x, { }] } = obj; // x = 'hello' // 不完全解构 let obj = {p: [{y: 'world'}] }; let {p: [{ y }, x ] } = obj; // x = undefined，y = 'world' // 剩余运算符 let {a, b, ...rest} = {a: 10, b: 20, c: 30, d: 40}; // a = 10，b = 20，rest = {c: 30, d: 40} // 解构默认值 let {a = 10, b = 5} = {a: 3}; // a = 3; b = 5; \"]},\"104\":{\"h\":\"Symbol\",\"t\":[\"一种非字符串的新数据类型 Symbol，表示独一无二的值，即使是相同参数 Symbol() 返回的值不相等，最大的用法是用来定义对象的唯一属性名。\",\"现在数据类型有：Number、String、Boolean、Object、null、undefined 和 Symbol。\",\"let sy = Symbol(\\\"value\\\"); console.log(sy); // Symbol(KK) typeof(sy); // \\\"symbol\\\" let sy1 = Symbol(\\\"value\\\"); sy === sy1; // false \"]},\"105\":{\"h\":\"使用场景\"},\"106\":{\"h\":\"作为属性名\",\"t\":[\"let sy = Symbol(\\\"key1\\\"); // 写法1 let syObject = {}; syObject[sy] = \\\"value\\\"; console.log(syObject); // {Symbol(key1): \\\"kk\\\"} // 写法2 let syObject = { [sy]: \\\"value\\\" }; console.log(syObject); // {Symbol(key1): \\\"kk\\\"} // 写法3 let syObject = {}; Object.defineProperty(syObject, sy, {value: \\\"value\\\"}); console.log(syObject); // {Symbol(key1): \\\"kk\\\"} \",\"我们使用 Symbol 定义对象唯一属性名的时候，要是用方括号获取其对应的属性值，因为.运算符后面是字符串，所以取到的是字符串 sy 属性，而 Symbol 是非字符串类型，所以获取的并不是 Symbol 的 sy。\",\"// 定义对象 let sy = Symbol(\\\"key1\\\"); let syObject = {}; syObject[sy] = \\\"value\\\"; syObject[sy]; // \\\"value\\\" syObject.sy; // undefined \",\"Symbol 值作为属性名时，该属性是公有属性不是私有属性，可以在类的外部访问，获取方法如下：\",\"// 定义对象 let syObject = {}; syObject[sy] = \\\"value\\\"; console.log(syObject); for (let i in syObject) { console.log(i); // 无输出 } Object.keys(syObject); // [] Object.getOwnPropertySymbols(syObject); // [Symbol(key1)] Reflect.ownKeys(syObject); // [Symbol(key1)] \"]},\"107\":{\"h\":\"定义常量\",\"t\":[\"在之前 ES5 定义字符串常量的时候：\",\"const COLOR_RED = \\\"red\\\"; const COLOR_YELLOW = \\\"yellow\\\"; const COLOR_BLUE = \\\"blue\\\"; \",\"上面的写法其实并不能保证唯一性，而现在有了 Symbol 后，可以写成：\",\"const COLOR_RED = Symbol(\\\"red\\\"); const COLOR_YELLOW = Symbol(\\\"yellow\\\"); const COLOR_BLUE = Symbol(\\\"blue\\\"); \",\"Symbol 还提供了两个方法在我们创建 Symbol 时使用：\",\"Symbol.for()：首先会在全局搜索被登记的 Symbol 中是否有该字符串参数作为名称的 Symbol 值，如果有即返回该 Symbol 值，若没有则新建并返回一个以该字符串参数为名称的 Symbol 值，并登记在全局环境中供搜索。\",\"let yellow = Symbol(\\\"Yellow\\\"); let yellow1 = Symbol.for(\\\"Yellow\\\"); yellow === yellow1; // false let yellow2 = Symbol.for(\\\"Yellow\\\"); yellow1 === yellow2; // true \",\"Symbol.keyFor()：返回一个已登记的 Symbol 类型值的 key ，用来检测该字符串参数作为名称的 Symbol 值是否已被登记。\",\"let yellow1 = Symbol.for(\\\"Yellow\\\"); Symbol.keyFor(yellow1); // \\\"Yellow\\\" \"]},\"108\":{\"h\":\"Map 与 Set\"},\"109\":{\"h\":\"Map\",\"t\":[\"Map 对象保存键值对。任何值(对象或者原始值) 都可以作为一个键或一个值。\",\"var myMap = new Map(); // 字符串 myMap.set(\\\"String\\\", \\\"字符串\\\"); // 对象 var keyObj = {}; myMap.set(keyObj, \\\"obj\\\"); // 函数 var keyFunc = function () {}; myMap.set(keyFunc, \\\"func\\\"); // NAN myMap.set(NaN, \\\"not a number\\\"); myMap; // Map(4) {'String' => '字符串', {…} => 'obj', ƒ => 'func', NaN => 'not a number'} \"]},\"110\":{\"h\":\"Map 的迭代\",\"t\":[\"// 定义一个 Map var myMap = new Map(); myMap.set(0, \\\"zero\\\"); myMap.set(1, \\\"one\\\"); for (var key of myMap.keys()) { console.log(key); // 将会显示两个log。 一个是 \\\"0\\\" 另一个是 \\\"1\\\" } for (var value of myMap.values()) { console.log(value); // 将会显示两个log。 一个是 \\\"zero\\\" 另一个是 \\\"one\\\" } for (var [key, value] of myMap) { console.log(key + \\\" = \\\" + value); // 将会显示两个 log。 一个是 \\\"0 = zero\\\" 另一个是 \\\"1 = one\\\" } myMap.forEach(function(value, key) { console.log(key + \\\" = \\\" + value); // 将会显示两个 logs。 一个是 \\\"0 = zero\\\" 另一个是 \\\"1 = one\\\" }, myMap) \"]},\"111\":{\"h\":\"Map 小技巧\",\"t\":[\"// Map 与 Array的转换 var kvArray = [[\\\"key1\\\", \\\"value1\\\"], [\\\"key2\\\", \\\"value2\\\"]]; var myMap = new Map(kvArray); // Map 构造函数可以将一个 二维 键值对数组转换成一个 Map 对象 var outArray = Array.from(myMap); // 使用 Array.from 函数可以将一个 Map 对象转换成一个二维键值对数组 // Map 的克隆 var myMap1 = new Map([[\\\"key1\\\", \\\"value1\\\"], [\\\"key2\\\", \\\"value2\\\"]]); var myMap2 = new Map(myMap1); // Map 的合并 var first = new Map([[1, 'one'], [2, 'two'], [3, 'three'],]); var second = new Map([[1, 'uno'], [2, 'dos']]); var merged = new Map([...first, ...second]); // 合并两个 Map 对象时，如果有重复的键值，则后面的会覆盖前面的，对应值即 uno，dos， three \"]},\"112\":{\"h\":\"Set\",\"t\":[\"Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。\",\"let mySet = new Set(); mySet.add(1); // Set(1) {1} mySet.add(5); // Set(2) {1, 5} mySet.add(5); // Set(2) {1, 5} mySet.add(\\\"some text\\\"); // Set(3) {1, 5, \\\"some text\\\"} 这里体现了类型的多样性 var o = {a: 1, b: 2}; mySet.add(o); mySet.add({a: 1, b: 2}); // Set(5) {1, 5, \\\"some text\\\", {…}, {…}} \"]},\"113\":{\"h\":\"Set 小技巧\",\"t\":[\"// 去重 var arr = [1, 2, 3, 4, 4]; var mySet = new Set(arr); [...mySet]; // [1, 2, 3, 4] // 并集 var a = new Set([1, 2, 3]); var b = new Set([4, 3, 2]); var union = new Set([...a, ...b]); // {1, 2, 3, 4} // 交集 var a = new Set([1, 2, 3]); var b = new Set([4, 3, 2]); var intersect = new Set([...a].filter(x => b.has(x))); // {2, 3} // 差集 var a = new Set([1, 2, 3]); var b = new Set([4, 3, 2]); var difference = new Set([...a].filter(x => !b.has(x))); // {1} \"]},\"114\":{\"h\":\"Reflect 与 Proxy\"},\"115\":{\"h\":\"Proxy\",\"t\":[\"可以对目标对象的读取、函数调用等操作进行拦截，然后进行操作处理。它不直接操作对象，而是像代理模式，通过对象的代理对象进行操作，在进行这些操作时，可以添加一些需要的额外操作。\",\"let target = { name: 'Tom', age: 24 } let handler = { get: function(target, key) { console.log('getting '+key); return target[key]; // 不是target.key }, set: function(target, key, value) { console.log('setting '+key); target[key] = value; } } let proxy = new Proxy(target, handler) proxy.name // 实际执行 handler.get proxy.age = 25 // 实际执行 handler.set \"]},\"116\":{\"h\":\"Reflect\",\"t\":[\"可以用于获取目标对象的行为，它与 Object 类似，但是更易读，为操作对象提供了一种更优雅的方式。它的方法与 Proxy 是对应的。\",\"// 定义对象 let exam = { name: \\\"Tom\\\", age: 24, get info(){ return this.name + this.age; } } Reflect.get(exam, 'name'); // \\\"Tom\\\" \"]},\"117\":{\"h\":\"组合使用\",\"t\":[\"// 定义一个对象 let exam = { name: \\\"Tom\\\", age: 24 } // 定义拦截方法 let handler = { get: function(target, key){ console.log(\\\"getting \\\" + key); return Reflect.get(target, key); }, set: function(target, key, value){ console.log(\\\"setting \\\" + key + \\\" to \\\" + value) Reflect.set(target, key, value); } } let proxy = new Proxy(exam, handler) proxy.name = \\\"Jerry\\\" proxy.name // \\\"Jerry\\\" \"]},\"118\":{\"h\":\"函数\",\"t\":[\"这里我们主要介绍一下箭头函数，它提供了一种更加简洁的函数书写方式，基本语法是：参数 => 函数体。并且箭头函数体中的 this 对象，是定义函数时的对象，而不是使用函数时的对象。\",\"// 正常 var Person = { 'age': 18, 'sayHello': function () { setTimeout(function () { console.log(this.age); }); } }; var age = 20; Person.sayHello(); // 20 // 箭头函数 var Person1 = { 'age': 18, 'sayHello': function () { setTimeout(()=>{ console.log(this.age); }); } }; var age = 20; Person1.sayHello(); // 18 \"]},\"119\":{\"h\":\"Class 类\",\"t\":[\"在ES6中，class (类)作为对象的模板被引入，可以通过 class 关键字定义类。class 的本质是 function，它可以看作一个语法糖，让对象原型的写法更加清晰、更像面向对象编程的语法。\",\"// 匿名类 let Example = class { constructor(a) { this.a = a; } } // 命名类 let Example = class Example { constructor(a) { this.a = a; } } \",\"要注意：类不可以重复声明；类定义不会被提升，这意味着，必须在访问前对类进行定义，否则就会报错；类中方法不需要 function 关键字，方法间也不能加分号；类的实例化需要 new 关键字。\",\"class Example { constructor(a, b) { this.a = a; this.b = b; console.log('Example'); } sum() { return this.a + this.b; } } let exam1 = new Example(2, 1); let exam2 = new Example(3, 1); \",\"ES6 的类也有类似封装和继承的概念，不过类中的 getter 与 setter 必须同级出现。通过 extends 实现类的继承，子类 constructor 方法中必须有 super ，且必须出现在 this 之前。\",\"class Father { constructor(){} // 或者都放在子类中 get a() { return this._a; } set a(a) { this._a = a; } } class Child extends Father { constructor(){ super(); } } let test1 = new Child(); test1.a = 2; console.log(test1.a); // 2 \"]},\"120\":{\"h\":\"模块\",\"t\":[\"ES6 引入了模块化，分为导出（export） @与导入（import）两个模块，其设计思想是在编译时就能确定模块的依赖关系，以及输入和输出的变量。\",\"// 正常导入导出 // 导出 let myName = \\\"Tom\\\"; export { myName as exportName } // 导入 import { exportName } from \\\"./test.js\\\"; console.log(exportName);// Tom // export default // 导出 var a = \\\"My name is Tom!\\\"; export default a; // export default 仅有一个 // 导入 import b from \\\"./xxx.js\\\"; // 不需要加{}， 使用任意变量接收 \"]},\"121\":{\"h\":\"Promise 对象\",\"t\":[\"Promise 对象是异步编程的一种解决方案，从它可以获取异步操作的消息。Promise 异步操作有三种状态：pending（进行中）、fulfilled（已成功）和 rejected（已失败），而且只有从 pending 变为 fulfilled 和从 pending 变为 rejected 的状态改变。只要处于 fulfilled 和 rejected ，状态就不会再改变了。\",\"Promise 对象往往搭配 then 方法使用，then 方法接收两个函数作为参数，第一个参数是 Promise 执行成功时的回调，第二个参数是 Promise 执行失败时的回调，两个函数只会有一个被调用。搭配使用的时候要遵守链式编程的规则，保持扁平化，不要嵌套 Promise。\",\"const p = new Promise(function(resolve,reject){ resolve(1); }).then(function(value){ // 第一个then // 1 console.log(value); return value * 2; }).then(function(value){ // 第二个then // 2 console.log(value); }).then(function(value){ // 第三个then // undefined console.log(value); return Promise.resolve('resolve'); }).then(function(value){ // 第四个then // resolve console.log(value); return Promise.reject('reject'); }) .then( function(value){ // 第五个then // reject:reject !!!这里不会打印,因为上一个then方法返回的是一个reject状态的promise console.log('resolve:' + value); }, function(err) { // 此行会打印, 因第五个than只能接受 resolve状态的promise, 而第四个than返回的是reject状态的promise // 所以会被本行 err 捕获 console.log('reject:' + err); } ); \"]},\"122\":{\"h\":\"Generator 函数\",\"t\":[\"ES6 新引入了 Generator 函数，可以通过 yield 关键字，把函数的执行流挂起，为改变执行流程提供了可能，从而为异步编程提供解决方案。\",\"Generator 有两个区分于普通函数的部分：在 function 后面，函数名之前有个 * ；函数内部有 yield 表达式。调用 Generator 函数和调用普通函数一样，在函数名后面加上()即可，但是 Generator 函数不会像普通函数一样立即执行，而是返回一个指向内部状态对象的指针，所以要调用遍历器对象Iterator 的 next 方法，指针就会从函数头部或者上一次停下来的地方开始执行。\",\"function* func(){ console.log(\\\"one\\\"); yield '1'; console.log(\\\"two\\\"); yield '2'; console.log(\\\"three\\\"); return '3'; } let f = func(); f.next(); // one // {value: \\\"1\\\", done: false} f.next(); // two // {value: \\\"2\\\", done: false} f.next(); // three // {value: \\\"3\\\", done: true} f.next(); // {value: undefined, done: true} \"]},\"123\":{\"h\":\"async 函数\",\"t\":[\"看都没看明白，等我用明白了再说\"]},\"124\":{\"h\":\"TypeScript + ES6+\"},\"125\":{\"h\":\"前言\",\"t\":[\"TypeScript 与 JavaScript 有着不同寻常的关系。TypeScript 提供了 JavaScript 的所有功能，并在这些功能之上添加了一层：TypeScript 的类型系统,所以很多人都说 TS 是 JS 的超集。更多的细节详见官网，话不多说，我们直接开始准备工作。\",\"所有的测试代码都在博客首页中的 typescript-study-demo 中找到。\"]},\"126\":{\"h\":\"并发\"},\"127\":{\"h\":\"Java 并发机制基础\",\"t\":[\"提到 Java 的编译过程，我们都会想到 .java 文件到 .class 字节码文件再到汇编指令到 CPU 内执行，而 Java 的并发机制正是依赖了 JVM 的实现和 CPU 的指令，让我们从 volatile 和 synchronized 这两个关键字来配合理解一下并发的原理。\"]},\"128\":{\"h\":\"volatile\",\"t\":[\"都说 volatile 是轻量的 synchronized，是因为它在多线程处理中过程中保证了共享变量的可见性，即一个线程在修改一个共享变量时，另一个线程可以读到这个变量值。所以在 volatile 使用恰当的情况下不会引起线程上下文的切换和调度，相比于 synchronized 成本更低。\",\"《Java 语言规范 第三版》对 volatile 的定义：Java 编程语言允许线程访问共享变量，为了确保共享变量能别准确和一致的更新，线程应确保能通过排他锁单独获得这个变量。\",\"让我们聊一下它的底层原理：Java 在对使用了 volatile 的变量进行写操作的时候，JVM 会向处理器发一条 Lock 前缀的指令，将这个变量所存在的缓冲行[1]的数据写回到系统内存。虽然被写回到内存，但是其他处理器缓存已经读取的值还是旧的，这里就得用得到缓存一致性协议了，每个处理器会嗅探总线上传播的数据检查自己的数据是否时最新的，当发现自己的缓存行地址被修改的时候，就会将当前缓存行状态设置为无效并重新从内存中读取到处理器缓存中来。\"]},\"129\":{\"h\":\"synchronized\",\"t\":[\"synchronized 作为多线程并发中的元老级角色也被称作重量级锁，虽然在日后的优化中可能已经没有那么“重”了。了解锁我们得先知道什么是锁。在 Java 中每个对象都可以是一个锁，具体有以下三种锁：\",\"对于普通同步方法，锁的是当前的实例对象。\",\"对于静态同步方法，锁的是当前类的 Class 对象。\",\"对于同步方法块，锁的是 Synchronized 括号里的配置对象。\",\"当一个线程试图访问同步代码块的时候，他必须先获得锁，退出和异常的时候必须释放锁。而具体的得到和释放锁的过程需要依赖 monitorenter 和 monitorexit 两个指令配合完成，JVM 会保证每个 monitorenter 必须有对应的 monitorexit ，它们在编译时会插入到代码块的开始和异常或者结束位置，任何对象都有一个 monitor 与之对应，并且一个 monitor 在被持有后将处于锁定状态，所以线程对锁的获取和释放就是对 monitor 的所有权的获取和释放。\",\"在我们就近的 JDK 版本里，为了解决对锁的获得和释放待来的性能损耗，引入了“偏向锁”和“轻量级锁”。这就得提到锁的状态了，锁一共有四种状态，级别由低到高分别是：无状态锁、偏向锁、轻量级锁、重量级锁。这几个状态会随着竞争情况而升级，并且锁只能升级不能降级，这种做法是为了提高获得锁和释放锁的效率，至于如果做到的我们得先了解这几种锁的状态才能展开。\"]},\"130\":{\"h\":\"偏向锁\",\"t\":[\"在大多数情况下，锁并不会存在多线程的竞争，而且总是由同一线程多次获得，所以就引入偏向锁的概念。当一个线程访问同步块并获取锁的时候，会在对当头和栈帧[2]的锁记录里存储偏向锁的线程ID，以后该线程在进入和退出同步块的时候不需要进行 CAS[3] 操作来加锁和解锁，只要测试对象头中是否是存储着当前线程的偏向锁即可。偏向锁提供了一种竞争出现才会释放的锁机制，当竞争出现的时候，首先会停止偏向锁的线程，然后检测持有偏向锁的线程是否活着，如果不活动则将对象头设置成无锁状态，如果活着则拥有偏向锁的栈会被执行，最后唤醒暂停的线程。\"]},\"131\":{\"h\":\"轻量级锁\",\"t\":[\"当一个线程获取轻量级锁时，JVM 会先在对象头中存储锁记录的指针，然后使用 CAS 指令尝试将对象的锁记录指针替换为指向当前线程的指针。如果 CAS 成功，表示当前线程获取了锁，可以继续执行，否则说明有竞争发生。在有竞争的情况下，如果其他线程也尝试获取同一个对象的轻量级锁，JVM 会将锁升级为重量级锁，当锁处于这个状态下，其他线程获取锁就会处于阻塞状态，一直等到只有锁的线程释放锁再唤醒这些阻塞线程进行新一轮争夺锁之战，因为锁不可降级的特性在，那么在释放锁时可以直接将锁的状态改为未锁定状态，无需进行额外的处理。这样就减少了释放锁的开销，提高了效率。\"]},\"132\":{\"h\":\"总结\",\"t\":[\"锁\",\"优点\",\"缺点\",\"使用场景\",\"偏向锁\",\"加锁和解锁不需要额外消耗\",\"锁竞争会带来额外的锁撤销的消耗\",\"适用于一个线程访问同步块场景\",\"轻量级锁\",\"竞争线程不会阻塞，提高了程序的响应速度\",\"始终得不到锁的线程会自旋消耗 CPU\",\"追求响应时间，执行速度快\",\"重量级锁\",\"线程不会自旋，不会消耗 CPU\",\"线程阻塞，相应时间慢\",\"追求吞吐量\"]},\"133\":{\"h\":\"原子操作 [4]\",\"t\":[\"处理器能保证从系统内存中读取和写入一个字节是原子的，而复杂的内存操作需要搭配处理器提供的总线锁定和缓存锁来保证其原子性。Java 通过锁和循环CAS来实现原子操作，从 JDK1.5 开始，并发包中就出现了 AtomicBoolean、AtomicInteger 等原子类将当前值加一减一。不过用 CAS 实现原子操作也是存在问题的，ABA 问题、循环时间开销大和只能保证一个变量的原子操作等。\"]},\"134\":{\"h\":\"总结\",\"t\":[\"Java 大部分的容器和框架都是依赖 volatile 和原子操作，这对展开并发编程很有帮助。\"]},\"135\":{\"h\":\"Java 内存模型\",\"t\":[\"在并发编程中有两个重要的问题：线程之间如何通讯及线程之间如何同步。Java 的并发采用的是共享内存模型，即线程之间共享程序的公共状态，通过写-读内存中的公共状态进行隐式通讯。\"]},\"136\":{\"h\":\"内存模型的抽象结构\",\"t\":[\"在 Java 中，所有的实例域、静态域和数组元素都存在堆内存中，堆内存在线程间共享，而局部变量、方法定义参数和异常处理器参数不会在线程之间共享，也不会有可见性问题。Java 线程之间的通讯由 Java 内存模型（JMM）控制，由 JMM 决定一个线程对共享变量的写入何时对另一个线程可见，从抽象的角度来讲，线程之间的共享变量存储在主内存，而每个线程都有本地内存，本地内存存放的共享变量的副本，示意图如下所示：\",\"Java 内存模型抽象结构图\",\"从图中来看，如果线程A和线程B之间通讯需要线程A先将本地内存A中更新的变量刷新到主内存去，然后线程B到住内存去读取线程A之前已经更新的共享变量。所以这个步骤的实质就是线程A向线程B发送消息，而且这个通信过程必须经过主内存。\",\"缓冲行（cache line）缓存中可以分配的最小单位。 ↩︎\",\"栈帧（Stack Frame）支持虚拟机进行方法调用和方法执行的数据结构，在当前线程中，每执行一个方法就会往栈中插入一个栈帧。 ↩︎\",\"CAS（compare and swap）判断内存某个位置的值是否为预期值，如果是则更改为新的值，这个过程是原子操作。 ↩︎\",\"原子操作（atomic operations）不可中断的一个或者一系列指令。 ↩︎\"]},\"137\":{\"h\":\"动态代理\"},\"138\":{\"h\":\"引言\",\"t\":[\"今天在复习微服务的时候看到 OpenFeign 使用动态代理集成调用 Ribbon 来实现负载均衡，出于兴趣我就想简单瞥一眼到底是如何调用的，可是结果非常出乎意料，搜索到的结果是：在 OpenFeign 中，Ribbon 的集成是通过使用 Feign 的 Client 接口来实现的。可能那个作者单纯是想延伸一下动态代理这一块的知识，至于到底如何调用的先放在下次再谈，但是动态代理这个知识点必须该梳理梳理了，无论是背面试题还是源码当中它都无处不在，什么 jdk 实现和 cjlib 实现，今天都得给我整明白。\"]},\"139\":{\"h\":\"走进动态代理\"},\"140\":{\"h\":\"什么是动态代理\",\"t\":[\"Java 的动态代理是一种运行时生成代理对象的机制，允许在运行时创建代理类及其实例，以实现对目标对象的代理操作。简单来说就是它提供了一种灵活的方式来在不修改目标对象源代码的情况下，对其方法进行增强或添加额外的逻辑。有动态代理就有静态代理，见名知意，静态代理就是代码中事先定义好的，在编译的时候就已经确定的，在灵活性上肯定就是略逊一筹了。动态代理在需要在运行时对对象进行控制、增强或拦截的场景中非常有用，使用的场景有以下几种：\",\"AOP（面向切面编程）：动态代理可以用于实现横切关注点的模块化，例如日志记录、性能监控、事务管理等。通过在目标方法执行前后插入额外的逻辑，可以实现对目标方法的增强。\",\"延迟加载（Lazy Loading）：动态代理可以延迟加载对象，当需要访问对象时才进行实例化，可以提高系统的性能和资源利用率。代理对象可以在真正需要对象时才创建，从而避免了不必要的对象创建和初始化过程。\",\"远程代理（Remote Proxy）：动态代理可以用于远程方法调用，通过代理对象在本地调用方法，实际执行的是远程的对象的方法。这种方式可以隐藏远程调用的细节，提供更简洁的调用方式。\",\"安全控制：动态代理可以用于实现安全控制，例如权限验证、身份认证等。代理对象可以在调用目标方法之前进行权限检查，只有符合要求的用户才能访问目标方法。\",\"缓存管理：动态代理可以用于实现缓存管理，通过在代理对象中添加缓存逻辑，可以在访问某个方法时先检查缓存，如果缓存中存在结果，则直接返回结果，避免重复计算。\",\"日志记录：动态代理可以用于实现日志记录，通过在代理对象中添加日志记录逻辑，可以记录方法的调用信息、参数和返回值，方便系统的跟踪和调试。\",\"当我们遇到以上这些情况的时候怎么知道这是在使用动态代理呢，那我们就需要知道如何实现动态代理了。\"]},\"141\":{\"h\":\"如何实现动态代理\",\"t\":[\"在Java中，有两种常见的实现方式用于实现动态代理：基于接口的动态代理和基于类的动态代理。\",\"基于接口的动态代理：\",\"基于Java的java.lang.reflect.Proxy类实现。\",\"要求目标对象实现一个或多个接口。\",\"代理类是在运行时动态生成的，基于接口生成代理类，因此代理类只能代理接口中定义的方法。\",\"代理对象通过实现InvocationHandler接口来处理被代理方法的调用。\",\"基于类的动态代理：\",\"基于第三方库如CGLIB（Code Generation Library）实现。\",\"不要求目标对象实现接口，可以代理普通的类。\",\"代理类是通过继承目标类来生成的，因此代理类可以代理目标类中的所有方法，包括非公共的方法。\",\"代理对象通过继承目标类并重写方法来实现对被代理方法的调用。\",\"这两种实现方式的区别在于代理对象的生成方式和代理的范围。基于接口的动态代理要求目标对象实现接口，生成的代理类只能代理接口中的方法；而基于类的动态代理不要求目标对象实现接口，生成的代理类可以代理目标类中的所有方法，包括非公共的方法。\",\"总的来说，基于接口的动态代理适用于那些已经实现了接口的目标对象；而基于类的动态代理适用于那些没有实现接口的目标对象，或者需要代理非公共方法的情况。\"]},\"142\":{\"h\":\"基于接口实现动态代理\"},\"143\":{\"h\":\"示例思路\",\"t\":[\"我们定义了一个 UserService 接口和其实现类 UserServiceImpl。然后，创建了一个 UserServiceProxy 类作为代理对象的处理器，并实现了 InvocationHandler 接口。在 invoke() 方法中，我们可以在方法执行前后添加额外的逻辑。最后，使用 Proxy 类的 newProxyInstance() 方法创建代理对象并执行目标方法。\"]},\"144\":{\"h\":\"实例代码\",\"t\":[\"定义接口和实现类：首先，需要定义一个接口，该接口是目标对象和代理对象共同实现的接口。假设我们有一个简单的接口 UserService，包含了一些用户操作的方法，然后简单实现该接口。\",\"public interface UserService { void addUser(String username); void deleteUser(String username); void updateUser(String username); void getUser(String username); } public class UserServiceImpl implements UserService { @Override public void addUser(String username) { System.out.println(\\\"Adding user: \\\" + username); } @Override public void deleteUser(String username) { System.out.println(\\\"Deleting user: \\\" + username); } @Override public void updateUser(String username) { System.out.println(\\\"Updating user: \\\" + username); } @Override public void getUser(String username) { System.out.println(\\\"Getting user: \\\" + username); } } \",\"实现 InvocationHandler 接口：创建一个实现 InvocationHandler 接口的类，该类负责处理代理对象的方法调用。在该类中，你可以定义在目标方法执行前后需要执行的逻辑。\",\"import java.lang.reflect.InvocationHandler; import java.lang.reflect.Method; public class UserServiceProxy implements InvocationHandler { private Object target; public UserServiceProxy(Object target) { this.target = target; } @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { // 在方法执行前添加额外逻辑 System.out.println(\\\"Before method: \\\" + method.getName()); // 调用目标对象的方法 Object result = method.invoke(target, args); // 在方法执行后添加额外逻辑 System.out.println(\\\"After method: \\\" + method.getName()); return result; } } \",\"创建代理对象：使用 java.lang.reflect.Proxy 类的 newProxyInstance() 方法创建代理对象。该方法接受三个参数：类加载器，目标对象实现的接口数组，和 InvocationHandler 对象。\",\"import java.lang.reflect.Proxy; public class Main { public static void main(String[] args) { // 创建目标对象 UserService userService = new UserServiceImpl(); // 创建 InvocationHandler 对象 UserServiceProxy handler = new UserServiceProxy(userService); // 创建代理对象 UserService proxy = (UserService) Proxy.newProxyInstance( userService.getClass().getClassLoader(), userService.getClass().getInterfaces(), handler); // 通过代理对象调用方法 proxy.addUser(\\\"John Doe\\\"); proxy.deleteUser(\\\"John Doe\\\"); } } \"]},\"145\":{\"h\":\"基于类实现动态代理\"},\"146\":{\"h\":\"示例思路\",\"t\":[\"通过Enhancer类创建了一个代理类，将MyInterceptor作为拦截器。当调用代理对象的方法时，拦截器的intercept方法将被调用，你可以在该方法中添加适当的逻辑来丰富目标功能。\"]},\"147\":{\"h\":\"实例代码\",\"t\":[\"引入 CGLib 依赖\",\"dependencies { // 其他依赖项... implementation 'cglib:cglib:3.3.0' } \",\"<dependencies> <!-- 其他依赖项... --> <dependency> <groupId>cglib</groupId> <artifactId>cglib</artifactId> <version>3.3.0</version> </dependency> </dependencies> \",\"创建一个被代理的类，无需实现任何接口。\",\"public class MyClass { public void doSomething() { System.out.println(\\\"Doing something\\\"); } } \",\"实现一个MethodInterceptor接口的类，该接口定义了一个intercept方法，在该方法中定义了代理类的行为。\",\"import net.sf.cglib.proxy.MethodInterceptor; import net.sf.cglib.proxy.MethodProxy; import java.lang.reflect.Method; public class MyInterceptor implements MethodInterceptor { @Override public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable { // 在调用被代理类方法前执行一些操作 System.out.println(\\\"Before method invocation\\\"); // 调用被代理类的方法 Object result = proxy.invokeSuper(obj, args); // 在调用被代理类方法后执行一些操作 System.out.println(\\\"After method invocation\\\"); return result; } } \",\"使用CGLib的Enhancer类来创建代理对象。Enhancer类提供了一种方便的方式来生成代理类的子类，并将拦截逻辑应用到被代理类的方法上。\",\"import net.sf.cglib.proxy.Enhancer; public class Main { public static void main(String[] args) { // 创建Enhancer实例 Enhancer enhancer = new Enhancer(); // 设置被代理类的父类 enhancer.setSuperclass(MyClass.class); // 设置拦截器 enhancer.setCallback(new MyInterceptor()); // 创建代理对象 MyClass proxy = (MyClass) enhancer.create(); // 调用代理对象的方法 proxy.doSomething(); } } \"]},\"148\":{\"h\":\"总结和延伸\",\"t\":[\"示例中代理对象通过反射的方式调用目标对象的方法，并在方法执行前后执行了额外的逻辑，实现了动态代理的动态性。我们可以根据这两个 demo 在各个场景中做延伸，比如：\",\"日志记录：你可以添加日志记录的逻辑，记录方法的调用信息、参数和返回值。这样可以实现在不修改目标对象的代码的情况下，对方法的调用进行日志记录。\",\"性能监控：你可以添加性能监控的逻辑，包括记录方法的执行时间、计数器等。通过动态代理，你可以在方法调用前后测量和监控方法的性能指标。\",\"缓存管理：你可以添加缓存管理的逻辑，检查缓存中是否存在方法调用的结果。如果缓存中存在结果，则直接返回缓存的结果，避免重复计算。\",\"事务管理：你可以添加事务管理的逻辑，包括在方法执行前开启事务、在方法执行后提交或回滚事务。通过动态代理，可以实现对方法的事务控制，确保方法的执行在事务的上下文中进行。\",\"安全控制：你可以添加安全控制的逻辑，包括对方法的权限验证、身份认证等。通过动态代理，可以在方法调用前对用户进行权限检查，只有符合要求的用户才能访问目标方法。\"]},\"149\":{\"h\":\"微服务之路\"},\"150\":{\"h\":\"碎谈\",\"t\":[\"还记得上大学的时候学 JavaWeb，当时连个 Tomcat 都起不来，什么8080，什么 JavaBean ，什么 Servlet ，完全就是一知半解，一塌糊涂，可是当你毕业开始找工作的时候，你要是没有个 Spring Boot 的项目经验，怎么找工作呀，根本找不到。当我第二份工作的时候，你要是不会 Spring Cloud ，根本找不到满意的工作，就在这短短两三年的时间里，技术更新愈发频繁，这也充分印证了那句话：程序员是要不断学习的。\",\"基础不牢，地动山摇。大家嘴上说着大学里的课程已经完全和社会脱节，是啊，计算机四大天书：《计算机网络》、《计算机组成原理》、《计算机操作系统》、《数据结构》，如果你是本科毕业就开始找工作，除了《数据结构》开发中还用得到，其他的根本见不着它们的影子，可是随着自己的进步和发展，你会慢慢发现，如果你不知道它们，你也能做，如果你会它们，你会做的更好。虽然感觉行业的趋势下，蜂拥而至的新人都直接选择加入使用框架的队伍来瓜分互联网的红利，可是现在浪潮退去，一片红海，希望大家能在学习新技术的同时夯实基础，稳重求进。\",\"but 作为新时代的青年，就该有拥抱新技术的激情，面对该过时、该淘汰的技术，就是 low ，别和我谈什么 MVC 、SSH、SSM 了，任何被时代所遗弃的技术必有其弊端，现在让我做项目，我就要上微服务，什么不要为了用技术而用技术，我自己学习我可不管什么该不该、值不值，我喜欢、我乐意就够了，冲！\"]},\"151\":{\"h\":\"微服务的出现\",\"t\":[\"言归正传，提到微服务就不得不提到单体地狱的问题，随着互联网的发展，用户对应用程序的要求变得越来越高，需要更快速、更稳定、更可扩展的解决方案。传统的单体应用程序在面对快速变化的需求时往往显得笨重且难以满足这些要求，这就是单体地狱。再加上敏捷开发和交付的出现，为了能够更加灵活地开发、测试和交付功能，后来又出现了模块化拆分和服务化拆分的方案，这也就是微服务的前身了。随着云计算、容器化技术（如Docker）和自动化部署工具的出现，微服务架构如雨后春笋彻底发展起来了。\",\"微服务架构的核心概念是\\\"解耦\\\"，通过拆分应用程序为一系列松耦合的服务来实现更高的灵活性和可伸缩性。每个服务都有自己的数据库和业务逻辑，可以使用不同的技术栈进行开发，以满足不同的需求，于是乎各种技术对应的技术栈应运而生，比如服务之间的通信复杂性、分布式系统的管理和监控等，这也给我们带来了全新的挑战。\"]},\"152\":{\"h\":\"如何学习微服务\",\"t\":[\"在我第一次快速通关微服务的时候，没有一个完整的体系，导致后来我真正开始想加入微服务的时候剪不断理还乱，所以这一次我选择的是号称微服务一站式解决方案的 Spring Cloud Alibaba 。罗列一下 Spring Cloud 大致的技术栈：\",\"服务注册与发现\",\"服务调用\",\"服务熔断器\",\"负载均衡\",\"服务接口调用\",\"消息队列\",\"服务路由\",\"服务监控\",\"全链路由追踪\",\"服务部署\",\"消息驱动数据流\",\"事件消息总线\",\"而目前的组件框架会同时兼顾以上多个功能并且基本已经涵盖到了，详情在下面的 GitHub 仓库中可以看到，我们接下来就跟着组件一步一步完成就可以了。唯一要注意的就是组件版本对应的问题，因为框架过于繁杂，如果自行组建确实会出现版本兼容一致性的问题，所以 GitHub 里也给出了官方推荐的组件配合建议，请开始之前参考选择。\"]},\"153\":{\"h\":\"Gateway\"},\"154\":{\"h\":\"浅聊微服务网关\",\"t\":[\"网关是一个通用的概念，它在计算机网络中指的是在不同网络之间进行连接、转发和控制流量的设备或软件。而微服务网关我们通用的理解是统一对外暴露可共享的服务 API 的功能，一般这些微服务网关都与服务注册中心相配合使用，这里我们要谈的 Spring Cloud Gateway 是基于 Spring Boot 和 Spring WebFlux 构建的网关框架。它提供了一种简单、轻量级的方式来处理路由、过滤和负载均衡。Spring Cloud Gateway 还支持动态路由、断路器、限流等功能，并与 Spring Cloud 生态系统无缝集成，具体详情见其官网文档。\"]},\"155\":{\"h\":\"Nacos\"},\"156\":{\"h\":\"浅聊微服务配置和注册中心\"},\"157\":{\"h\":\"配置中心\",\"t\":[\"传统的静态配置方式要想修改某个配置只能修改之后重新发布应用，要实现动态性，可以选择使用数据库，通过定时轮询访问数据库来感知配置的变化。轮询频率低感知配置变化的延时就长，轮询频率高，感知配置变化的延时就短，但比较损耗性能，需要在实时性和性能之间做折中。配置中心专门针对这个业务场景，兼顾实时性和一致性来管理动态配置。配置中心兼往往顾了集中管理、动态更新和版本控制等优点。\"]},\"158\":{\"h\":\"注册中心\",\"t\":[\"注册中心用于管理和维护微服务的注册信息，包括微服务的网络位置（IP地址和端口）以及其他元数据。每个微服务在启动时向注册中心注册自己的信息，并定期发送心跳以保持活动状态。其他微服务可以通过查询注册中心获取所需服务的信息，从而实现服务的发现和调用。\"]},\"159\":{\"h\":\"微服务中的使用\",\"t\":[\"配置中心和注册中心通常会一起使用，配合实现微服务的配置管理、服务发现和通信。它们为微服务架构的可伸缩性、弹性和灵活性提供了重要的基础设施。\",\"作为配置中心应该要求支持集中化管理、配置存储和分发、动态更新、版本控制、安全性和权限控制和监控和告警；作为注册中心要做到服务注册和注销、服务发现、心跳和健康检查、负载均衡、高可用性和容错性和监控和告警。目前市面上现在针对配置中心和注册中心分别都有很多产品，像百度的 Disconf、Spring的 Spring Cloud Config、携程的 Apollo、阿里的 Nacos、网飞的 Eureka等。\",\"结合网络上的综合评价来看总，作为配置中心的话，Apollo 和 Nacos 相对于 Spring Cloud Config 的生态支持更广，在配置管理流程上做的更好。Apollo 相对于 Nacos 在配置管理做的更加全面，不过使用起来也要麻烦一些。Nacos 使用起来相对比较简洁，在对性能要求比较高的大规模场景更适合。在注册中心上来看，Eureka 在跨区域部署和大规模集群上可能面临一些性能和可扩展性方面的挑战，并且在广泛的生态上来看， Nacos 是更好的选择。结合双方的优点，Nacos 非常适合作为微服务学习的第一选择，想要更加详细了解 Nacos 请点击下方官网链接访问。\"]},\"160\":{\"h\":\"Spring Boot Admin\"},\"161\":{\"h\":\"介绍\",\"t\":[\"Spring Boot Admin是一个用于管理和监控 Spring Boot 应用程序的开源项目。它提供了一个用户界面，可以集中管理多个 Spring Boot 应用程序，并提供有关这些应用程序的详细信息和指标。\",\"其模式也和 Eureka 相同分为客户端和服务端相同，主要功能如下：\",\"应用程序监控：Spring Boot Admin 可以监控和展示每个 Spring Boot 应用程序的运行状态、健康状况和指标数据，如内存使用、线程数、请求统计等。\",\"健康检查和管理：它提供了对Spring Boot应用程序的健康检查功能，并可以根据应用程序的健康状况采取相应的管理措施，如重启应用程序或发送警报通知。\",\"易于集成：Spring Boot Admin可以轻松集成到现有的Spring Boot应用程序中，只需添加相应的依赖并进行简单的配置即可。\",\"实时日志查看：它提供了实时查看应用程序日志的功能，可以帮助开发人员快速定位和解决问题。\",\"事件通知：Spring Boot Admin 支持通过邮件、Slack等方式发送事件通知，如应用程序上线、下线、健康状态变更等。\",\"安全性：它提供了一些安全特性，如基于角色的访问控制、HTTPS支持等，以确保管理界面的安全性。\",\"Spring Boot Admin 可以选择和服务注册中心搭配使用，当与服务注册中心配合使用时，它可以自动发现注册在服务注册中心中的 Spring Boot 应用程序，并将其添加到管理界面中进行监控和管理。这样可以实现动态管理多个应用程序，并且随着应用程序的启动和关闭，管理界面能够及时更新应用程序的状态和信息。\",\"另外 Spring Boot Admin 和 Spring Boot Actuator 可以很好地配合使用。通过在Spring Boot应用程序中集成 Spring Boot Actuator，可以使 Spring Boot Admin 能够获取应用程序的详细信息和指标数据，从而在管理界面上展示和监控这些数据。同时，Spring Boot Admin 还可以利用 Spring Boot Actuator 提供的功能，如远程 Shell、线程转储等，与应用程序进行交互和管理。因此，Spring Boot Admin 和 Spring Boot Actuator是相互配合使用的，Spring Boot Actuator 提供了监控和管理的基础功能，而 Spring Boot Admin 提供了一个集中管理和监控的用户界面，通过与 Spring Boot Actuator 端点的交互，实现对多个 Spring Boot 应用程序的管理和监控。\"]},\"162\":{\"h\":\"快速开始\"},\"163\":{\"h\":\"服务端\"},\"164\":{\"h\":\"引入依赖\",\"t\":[\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-actuator</artifactId> </dependency> <dependency> <groupId>de.codecentric</groupId> <artifactId>spring-boot-admin-starter-server</artifactId> </dependency> \"]},\"165\":{\"h\":\"简单配置\",\"t\":[\"启动类增加@EnableAdminServer注解，启动后访问项目根目录即自动跳转服务端界面。\",\"Spring Boot admin 主页\"]},\"166\":{\"h\":\"客户端\"},\"167\":{\"h\":\"引入依赖\",\"t\":[\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-actuator</artifactId> </dependency> <dependency> <groupId>de.codecentric</groupId> <artifactId>spring-boot-admin-starter-client</artifactId> </dependency> \"]},\"168\":{\"h\":\"简单配置\",\"t\":[\"spring: boot: admin: client: url: http://localhost:8110/ # spring boot admin server 地址 management: endpoints: web: exposure: include: '*' # 暴露给监控全部接口 \",\"客户端服务注册\",\"客户端服务详情\"]},\"169\":{\"h\":\"Spring Boot Logging\"},\"170\":{\"h\":\"关于 Spring 日志\",\"t\":[\"在 Spring Boot 的官方文档的核心功能部分介绍了 Spring 对日志功能的支持，Spring 并没有自己的日志框架实现，而是使用 SLF4J（Simple Logging Facade for Java）作为日志门面，在底层使用 Commons Logging 作为抽象层去识别和对接一些常见的日志框架，如 Logback、Log4j2 等。Spring Boot 默认集成了 Logback 作为日志框架并支持我们在配置文件通过简单的配置就可以开箱即用，如果想了解更多细节可以点击下面卡片跳转官网查看。\"]},\"171\":{\"h\":\"Spring Data Redis\"},\"172\":{\"h\":\"引言\",\"t\":[\"Redis 作为基于内存的 NoSQL 数据库，在解决包括缓存、会话存储、排行榜、实时分析和消息队列等场景上有着不可替代的作用，所以目前几乎所有的项目都会有依赖它的需求，相比于一些传统的关系型数据库 Redis 的配置更加简单容易，所以在项目中使用非常推荐放在 common 模块当中来方便其他模块依赖，使用的时候直接注入即可，这里我也是基于这种思想来演示一个 Redis 模块的创建，以后搭建项目可以直接开箱即用。\"]},\"173\":{\"h\":\"快速开始\"},\"174\":{\"h\":\"添加依赖\"},\"175\":{\"h\":\"工具方法服务类和具体实现类\",\"t\":[\"用命令行学习 Redis 的时候得心应手，但是 RedisTemplate 的方法直接用起来还是不太顺手，这里是根据命令封装好的 RedisTemplate 方法，可以直接 cv。\"]},\"176\":{\"h\":\"配置类实现\",\"t\":[\"引用该配之类的话就需要实现一个 RedisConfig 继承下面的 BaseRedisConfig 并添加 @Configuration 注册到容器中即可。\"]},\"177\":{\"h\":\"总结\",\"t\":[\"使用 Spring Data Redis 只需要配置以上三步，在你真正调用的模块中配置你的 Redis 连接参数后就可以很方便的使用了。\"]},\"178\":{\"h\":\"Spring Security + JWT\"},\"179\":{\"h\":\"前言\",\"t\":[\"说到 JWT（JSON Web Token），我们首先要知道 Token 是什么，想要知道 Token 是什么，我们就得先谈一下早期 Session 登录的时代，下面是之前 Session 登录的大致流程。\",\"然而，随着应用程序的复杂性和扩展性的增加，分布式系统和跨服务的场景变得更加常见。在这种情况下，使用基于 Session 会话的登录可能会面临一些挑战，例如会话状态的同步和跨服务的会话管理。而且如果 Cookie 如果被截获，用户就会很容易受到跨站请求伪造（CSRF）的攻击。于是令牌（Token）应运而生，Token 承载了用户身份信息和其他必要的声明，无需在服务器端存储会话信息，使其具备了无状态性（stateless）的特性。这样可以减轻服务器的负担，并且适用于分布式环境和跨服务的场景。基于这种特性 Token 的登录过程如下所示。\",\"虽然看似流程上十分相似，但是每个请求都必须携带包含了所有必要的用户身份信息和声明的令牌来进行身份验证，而且令牌可以通过签名和加密机制来保护身份信息的完整性和真实性，这样极大的保证了安全性的同时也解决了跨域支持的问题。JWT 官网也告诉了我们什么是 JSON Web Token 并告诉我们什么情况下可以去使用它，如果有兴趣可以点击下面链接去深入了解。\"]},\"180\":{\"h\":\"Spring Security + OAuth2\"},\"181\":{\"h\":\"介绍\"},\"182\":{\"h\":\"OAuth2\",\"t\":[\"OAuth 2.0（开放授权 2.0）是一种授权框架，用于允许用户授权第三方应用程序访问其在另一个应用程序（如社交媒体、电子邮件服务或云存储服务）上的受保护资源，而无需向第三方应用程序共享其凭据（例如用户名和密码）。其主要职责就是实现一个三方互信的功能，目前网站上支持的第三方登录就是 OAuth 协议的实现。OAuth 2.0 的核心概念包括以下角色：\",\"资源所有者（Resource Owner）：资源所有者是指控制受保护资源的用户，例如网站用户或移动应用程序用户。\",\"客户端（Client）：客户端是请求访问受保护资源的第三方应用程序，它通过 OAuth 2.0 协议与身份和授权服务器进行交互。\",\"身份和授权服务器（Authorization Server）：身份和授权服务器负责验证资源所有者的身份，并根据资源所有者的授权向客户端颁发访问令牌。\",\"受保护资源服务器（Resource Server）：受保护资源服务器托管受保护的用户数据或服务，只有在经过授权的情况下才能访问。\",\"OAuth 2.0 的工作流程如下：\",\"客户端向资源所有者请求授权，以访问其受保护资源。这可以通过重定向资源所有者到身份和授权服务器的授权页面来实现。\",\"资源所有者向身份和授权服务器提供其凭据（例如用户名和密码），并授权客户端访问受保护资源。\",\"身份和授权服务器验证资源所有者的身份，并生成一个访问令牌（Access Token）。\",\"身份和授权服务器将访问令牌颁发给客户端。\",\"客户端使用访问令牌向受保护资源服务器发起请求，并在请求中提供访问令牌作为身份验证凭据。\",\"OAuth 2.0 的优势在于它根据受保护资源服务器验证访问令牌的有效性，并根据访问令牌决定是否授权客户端访问受保护资源，使得用户可以授予对其受保护资源的有限访问权限，而无需共享其凭据。这提供了更好的安全性和用户隐私保护。此外，OAuth 2.0 支持多种授权流程，如授权码授权流程、隐式授权流程、密码授权流程和客户端凭据授权流程，以满足不同应用场景的需求。\"]},\"183\":{\"h\":\"Spring Security 基础\"},\"184\":{\"h\":\"介绍\",\"t\":[\"目前提到安全框架，Shiro 和 Spring Security 算得上是分庭抗争了，并且 Shiro 主打的是简单、轻量，但却没有 Spring Security 灵活，在 Spring Security 支持 OAuth2 之后更加贴合当前社会需求，并且我们如果使用 Spring 框架的话，学习 Spring Security 更是如鱼得水，并且是重中之重。如果想要更加深入的了解 Spring Security ，请预览下面官方文档的链接进行研读。\"]},\"185\":{\"h\":\"走进算法\"},\"186\":{\"h\":\"算法基础\",\"t\":[\"算法是对特定问题求解步骤的一种描述，它是指令的有限序列，其中的每条指令有一个或多个操作。\",\"算法五大特性：\",\"有穷性：一个算法必须在执行有穷步骤后结束，并且每一步都在有穷时间内完成。\",\"确定性：算法中每条指令都应该有确切的含义，对于相同的输入只能得出相同的结果。\",\"可行性：算法中描述的操作都可以通过已经实现的基本运算执行有限次来实现。\",\"输入：一个算法可以有零个或多个输入。\",\"输出：一个算法必须有一个或多个输出。\",\"基于这五种特性，一个好的算法应该达到正确性、可读性、健壮性和高效率与地存储量的需求。\"]},\"187\":{\"h\":\"算法的效率\"},\"188\":{\"h\":\"时间负责度\",\"t\":[\"首先我们需要知道大O表示法，算法中所有语句的频度之和记为 T(N)，算法中的最深层循环内的语句的频度与 T(n) 同数量级，所以算法的频度 f(n) 记为 T(n)=O(F(n))。\",\"常见的渐进时间负责度排序：O(1) < O(log n) < O(n) < O(n log n) < O(n^2) < O(2^n) < O(n!)\"]},\"189\":{\"h\":\"空间负责度\",\"t\":[\"算法的空间复杂度是 S(n) ，为该算法所耗费的存储空间，记为 S(n) =O(g(n))。一个算法所需要的空间包括存放本身所用的指令、常数、变量和输入数据，还有对一些数据进行操作的工作单元和存储一些为实现计算所需的辅助空间。\"]},\"190\":{\"h\":\"LeetCode 每日一题\"},\"191\":{\"h\":\"走进数据结构\"},\"192\":{\"h\":\"知识框架\"},\"193\":{\"h\":\"基本概念和术语\",\"t\":[\"数据：信息的载体，是描述客观事物属性的数、字符及所能输入到计算机中并被计算机程序识别和处理的符号的集合\",\"数据元素：数据的基本单位。一个数据元素可以由若干数据项组成。\",\"数据项：构成数据元素的不可分割的最小单位。\",\"数据对象：相同性质的数据元素的集合。\",\"数据类型：一个值的集合和定义在此集合上的一组操作的总称。 \",\"原子类型：值不可再分。\",\"结构类型：值可再分。\",\"抽象数据类型：可再分解为若干类型。\",\"数据结构：相互之间存在一种或多种特定关系的数据元素的集合。\"]},\"194\":{\"h\":\"数据结构三要素\",\"t\":[\"数据结构是算法的基础，一个算法的设计取决于所选的逻辑结构，而算法的实现则依赖多采用的存储结构。\"]},\"195\":{\"h\":\"逻辑结构\",\"t\":[\"逻辑结构可以从知识结构的图中看到，细分到最后有：\",\"集合：结构中的数据结构元素除了同属一个集合外，别无其他关系。\",\"线性结构：结构中的数据元素之间只存在一对一的关系。\",\"树形结构：结构中的数据元素之间存在一对多的关系。\",\"图状结构或网状结构：结构中的数据元素之间存在多对多的关系。\"]},\"196\":{\"h\":\"存储结构\",\"t\":[\"存储结构是数据结构在计算机中的表示（映像），也称为物理结构。存储结构的分类有以下几种：\",\"顺序存储：把逻辑上相邻的元素存储在物理地址也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现。优点是实现随机存取，每个元素占用最小的存储空间。缺点是只能使用相邻的一整块存储单元导致产生较多的外部碎片。\",\"链式存储：不要求逻辑上相邻的元素在物理位置上也相邻，借助指示元素存储地址的指针来表示元素之间的逻辑关系。优点是不会出现碎片。缺点是每个元素因为指针而产生额外的空间。\",\"索引存储：在存储元素信息的同时，还建立附加的索引表。有点事检索速度快。缺点是附加的索引表额外占用存储空间，并且增删改也会修改索引表而导致花费更多的时间。\",\"散列存储：根据元素的关键字直接计算出元素的存储地址，也就是哈希（Hash）存储。优点是检索、增加和删除节点的操作都很快。缺点是依赖散列函数，容易出现哈希冲突而导致时间和空间的开销。\"]},\"197\":{\"h\":\"数据的运算\",\"t\":[\"施加在数据上的运算包括运算的定义和实现。运算的定义是针对逻辑结构的，指出运算的功能。运算的实现是针对存储结构的，指出运算的具体操作步骤。\"]},\"198\":{\"h\":\"线性表\",\"t\":[\"所有的测试代码都在博客首页中的 java-study-demo 中找到。\"]},\"199\":{\"h\":\"基本定义\",\"t\":[\"线性表是具有相同数据结构的n(n ≥ 0)个数据元素的有限序列，其中n为表长，为0即为空表。一般标识为：L=(a1,a2,a3,ai,ai+1,……,an,)，其中a1是唯一的第一个元素，被称为表头元素；an是唯一一个最后一个元素，被称为表尾元素。除了第一个元素外，每个元素有且仅有一个直接前驱，除最后一个外，每个元素有且仅有一个直接后继，这种线性有序的表被称为线性表。线性表有以下特点：\",\"表中元素个数有限。\",\"表中元素具有逻辑上的顺序性，表中元素有先后顺序。\",\"表中元素都是数据结构，每个元素都是单个结构。\",\"表中的元素类型数据都相同，这意味着每个元素所占相同大小的空间。\",\"表中的元素具有抽象性。\"]},\"200\":{\"h\":\"基本操作\",\"t\":[\"initList：初始化表，构造一个空的线性表。\",\"length：求表长，返回线性表的长度即其中的元素个数。\",\"locationElem：按值查找元素。\",\"getElem：按位查找元素。\",\"listInsert：插入操作。\",\"listDelete：删除操作。\",\"printList：输出操作。\",\"empty：判空操作。\",\"destoryList：销毁操作。\"]},\"201\":{\"h\":\"线性表的顺序表示\"},\"202\":{\"h\":\"顺序表的定义\",\"t\":[\"线性表的顺序存储又叫顺序表，使用一组地址连续的存储单元依次存储线性表中的的数据元素，从而使逻辑上相邻的两个元素在物理位置上也相邻。\",\"顺序表的存储结构\"]},\"203\":{\"h\":\"顺序表的实现\"},\"204\":{\"h\":\"线性表的链式表示\"},\"205\":{\"h\":\"单链表\",\"t\":[\"线性表的链式存储又被称为单链表，指通过一组任意的存储单元来存储线性表中的数据元素，为了建立数据元素之间的线性关系，对于每个额链表的节点，除了存放元素自身外，还需要存放一个指向其后继的指针。\",\"public class LNode<T> { /** * 当前节点的值 */ public T data; /** * 下一个节点的指针 */ public LNode<T> next; /** * 初始化节点 * @param data 节点的值 */ LNode (T data) { this.data = data; this.next = null; } } \",\"虽然单链表解决了顺序表需要大量连续存储单元的缺点，但是也因为存储附加指针域倒是浪费存储空间，正是是由于过于分散的存储，所以单链表是非随机存取的存储结构。\",\"我们通常用头指针来标识一个单链表，如果头指针为Null，则表示一个空表。注意，我们刚才提到的是头指针，与此相区别的定义是头结点，头结点是为了方便操作而在单链表第一个结点之前附加的一个结点，头结点的数据域可以不设任何信息，也可以记录表长等信息，而指针域则必须指向线性表的第一个元素结点。引入头结点之后有两个优点：\",\"由于第一个数据结点的位置被存放在头结点的指针域中，因此在链表的第一个位置上的操作和在表中其他位置的操作一致。\",\"无论链表是否为空，其头指针都是只想头结点的非空指针，所以空表和非空表得到了统一。\"]},\"206\":{\"h\":\"头插法\"},\"207\":{\"h\":\"尾插法\"},\"208\":{\"h\":\"查找第i个结点\"},\"209\":{\"h\":\"插入结点\"},\"210\":{\"h\":\"删除结点\"},\"211\":{\"h\":\"求表长\"},\"212\":{\"h\":\"双链表\"},\"213\":{\"h\":\"Books\"},\"214\":{\"h\":\"Tools\"},\"215\":{\"h\":\"Development\"},\"216\":{\"h\":\"Design\"},\"217\":{\"h\":\"Development\"},\"218\":{\"h\":\"Framework\"},\"219\":{\"h\":\"Language\"},\"220\":{\"h\":\"Basic\"},\"221\":{\"h\":\"Java\"},\"222\":{\"h\":\"Backend\"},\"223\":{\"h\":\"Spring\"},\"224\":{\"h\":\"Ads\"},\"225\":{\"h\":\"Computer Basis\"}},\"dirtCount\":0,\"index\":[[\"双链表\",{\"0\":{\"212\":1}}],[\"插入结点\",{\"0\":{\"209\":1}}],[\"插入操作\",{\"1\":{\"200\":1}}],[\"查找第i个结点\",{\"0\":{\"208\":1}}],[\"查看自己目前软件是什么版的可以在\",{\"1\":{\"18\":1}}],[\"尾插法\",{\"0\":{\"207\":1}}],[\"头插法\",{\"0\":{\"206\":1}}],[\"头结点的数据域可以不设任何信息\",{\"1\":{\"205\":1}}],[\"头结点是为了方便操作而在单链表第一个结点之前附加的一个结点\",{\"1\":{\"205\":1}}],[\"节点的值\",{\"1\":{\"205\":1}}],[\"节省了磁盘空间\",{\"1\":{\"32\":1}}],[\"单链表\",{\"0\":{\"205\":1}}],[\"单文件组件\",{\"1\":{\"95\":1}}],[\"单文件组件中的状态驱动的\",{\"1\":{\"95\":1}}],[\"销毁操作\",{\"1\":{\"200\":1}}],[\"判空操作\",{\"1\":{\"200\":1}}],[\"判断内存某个位置的值是否为预期值\",{\"1\":{\"136\":1}}],[\"判断和\",{\"1\":{\"22\":1}}],[\"按位查找元素\",{\"1\":{\"200\":1}}],[\"按值查找元素\",{\"1\":{\"200\":1}}],[\"求表长\",{\"0\":{\"211\":1},\"1\":{\"200\":1}}],[\"初始化节点\",{\"1\":{\"205\":1}}],[\"初始化表\",{\"1\":{\"200\":1}}],[\"初始化目录\",{\"1\":{\"96\":1}}],[\"被称为表尾元素\",{\"1\":{\"199\":1}}],[\"被称为表头元素\",{\"1\":{\"199\":1}}],[\"被审核的考生材料会被标记为审核中\",{\"1\":{\"90\":1}}],[\"个数据元素的有限序列\",{\"1\":{\"199\":1}}],[\"≥\",{\"1\":{\"199\":1}}],[\"施加在数据上的运算包括运算的定义和实现\",{\"1\":{\"197\":1}}],[\"存储\",{\"1\":{\"196\":1}}],[\"存储结构的分类有以下几种\",{\"1\":{\"196\":1}}],[\"存储结构是数据结构在计算机中的表示\",{\"1\":{\"196\":1}}],[\"存储结构\",{\"0\":{\"196\":1}}],[\"散列存储\",{\"1\":{\"196\":1}}],[\"索引存储\",{\"1\":{\"196\":1}}],[\"链式存储\",{\"1\":{\"196\":1}}],[\"元素之间的关系由存储单元的邻接关系来体现\",{\"1\":{\"196\":1}}],[\"顺序表的实现\",{\"0\":{\"203\":1}}],[\"顺序表的存储结构\",{\"1\":{\"202\":1}}],[\"顺序表的定义\",{\"0\":{\"202\":1}}],[\"顺序存储\",{\"1\":{\"196\":1}}],[\"顺序验证\",{\"1\":{\"82\":1}}],[\"映像\",{\"1\":{\"196\":1}}],[\"图状结构或网状结构\",{\"1\":{\"195\":1}}],[\"图解系列还有\",{\"1\":{\"17\":1}}],[\"树形结构\",{\"1\":{\"195\":1}}],[\"别无其他关系\",{\"1\":{\"195\":1}}],[\"别和我谈什么\",{\"1\":{\"150\":1}}],[\"集合\",{\"1\":{\"195\":1}}],[\"细分到最后有\",{\"1\":{\"195\":1}}],[\"细到令你发指\",{\"1\":{\"12\":1}}],[\"逻辑结构可以从知识结构的图中看到\",{\"1\":{\"195\":1}}],[\"逻辑结构\",{\"0\":{\"195\":1}}],[\"逻辑链接\",{\"1\":{\"32\":1}}],[\"抽象数据类型\",{\"1\":{\"193\":1}}],[\"结构中的数据元素之间存在多对多的关系\",{\"1\":{\"195\":1}}],[\"结构中的数据元素之间存在一对多的关系\",{\"1\":{\"195\":1}}],[\"结构中的数据元素之间只存在一对一的关系\",{\"1\":{\"195\":1}}],[\"结构中的数据结构元素除了同属一个集合外\",{\"1\":{\"195\":1}}],[\"结构类型\",{\"1\":{\"193\":1}}],[\"结合双方的优点\",{\"1\":{\"159\":1}}],[\"结合网络上的综合评价来看总\",{\"1\":{\"159\":1}}],[\"结合自己之前公司和自己使用的经验将其发扬光大\",{\"1\":{\"53\":1}}],[\"信息的载体\",{\"1\":{\"193\":1}}],[\"空间负责度\",{\"0\":{\"189\":1}}],[\"记为\",{\"1\":{\"188\":1,\"189\":1}}],[\"记录方法的调用信息\",{\"1\":{\"148\":1}}],[\"健壮性和高效率与地存储量的需求\",{\"1\":{\"186\":1}}],[\"健康状态变更等\",{\"1\":{\"161\":1}}],[\"健康状况和指标数据\",{\"1\":{\"161\":1}}],[\"健康检查和管理\",{\"1\":{\"161\":1}}],[\"输入\",{\"1\":{\"186\":1}}],[\"输出操作\",{\"1\":{\"200\":1}}],[\"输出\",{\"1\":{\"100\":1,\"186\":1}}],[\"输出十个\",{\"1\":{\"100\":1}}],[\"走进数据结构\",{\"0\":{\"191\":1}}],[\"走进算法\",{\"0\":{\"185\":1}}],[\"走进动态代理\",{\"0\":{\"139\":1}}],[\"灵活\",{\"1\":{\"184\":1}}],[\"轻量\",{\"1\":{\"184\":1}}],[\"轻量级的方式来处理路由\",{\"1\":{\"154\":1}}],[\"轻量级锁\",{\"0\":{\"131\":1},\"1\":{\"129\":2,\"132\":1}}],[\"算得上是分庭抗争了\",{\"1\":{\"184\":1}}],[\"算法的空间复杂度是\",{\"1\":{\"189\":1}}],[\"算法的效率\",{\"0\":{\"187\":1}}],[\"算法中的最深层循环内的语句的频度与\",{\"1\":{\"188\":1}}],[\"算法中所有语句的频度之和记为\",{\"1\":{\"188\":1}}],[\"算法中描述的操作都可以通过已经实现的基本运算执行有限次来实现\",{\"1\":{\"186\":1}}],[\"算法中每条指令都应该有确切的含义\",{\"1\":{\"186\":1}}],[\"算法五大特性\",{\"1\":{\"186\":1}}],[\"算法是对特定问题求解步骤的一种描述\",{\"1\":{\"186\":1}}],[\"算法基础\",{\"0\":{\"186\":1}}],[\"算法\",{\"0\":{\"8\":1}}],[\"密码授权流程和客户端凭据授权流程\",{\"1\":{\"182\":1}}],[\"隐式授权流程\",{\"1\":{\"182\":1}}],[\"受保护资源服务器托管受保护的用户数据或服务\",{\"1\":{\"182\":1}}],[\"受保护资源服务器\",{\"1\":{\"182\":1}}],[\"身份和授权服务器将访问令牌颁发给客户端\",{\"1\":{\"182\":1}}],[\"身份和授权服务器验证资源所有者的身份\",{\"1\":{\"182\":1}}],[\"身份和授权服务器负责验证资源所有者的身份\",{\"1\":{\"182\":1}}],[\"身份和授权服务器\",{\"1\":{\"182\":1}}],[\"身份认证等\",{\"1\":{\"140\":1,\"148\":1}}],[\"协议与身份和授权服务器进行交互\",{\"1\":{\"182\":1}}],[\"协议的实现\",{\"1\":{\"182\":1}}],[\"电子邮件服务或云存储服务\",{\"1\":{\"182\":1}}],[\"电子书和技术文章成为圣经的绝对是传奇著作\",{\"1\":{\"12\":1}}],[\"承载了用户身份信息和其他必要的声明\",{\"1\":{\"179\":1}}],[\"然而\",{\"1\":{\"179\":1}}],[\"然后简单实现该接口\",{\"1\":{\"144\":1}}],[\"然后线程b到住内存去读取线程a之前已经更新的共享变量\",{\"1\":{\"136\":1}}],[\"然后检测持有偏向锁的线程是否活着\",{\"1\":{\"130\":1}}],[\"然后进行操作处理\",{\"1\":{\"115\":1}}],[\"然后对其中的变量进行赋值\",{\"1\":{\"101\":1}}],[\"然后在系统运行时\",{\"1\":{\"64\":1}}],[\"然后匹配赋值即可\",{\"1\":{\"50\":1}}],[\"然后使用\",{\"1\":{\"37\":1,\"131\":1}}],[\"然后就需要提到前端一个跨时代的产物\",{\"1\":{\"32\":1}}],[\"然后说一下\",{\"1\":{\"32\":1}}],[\"然后\",{\"1\":{\"26\":1,\"143\":1}}],[\"登录的大致流程\",{\"1\":{\"179\":1}}],[\"登录的时代\",{\"1\":{\"179\":1}}],[\"登录成功\",{\"1\":{\"37\":1}}],[\"继承下面的\",{\"1\":{\"176\":1}}],[\"添加依赖\",{\"0\":{\"174\":1}}],[\"添加到每个项目中去\",{\"1\":{\"66\":1}}],[\"排行榜\",{\"1\":{\"172\":1}}],[\"排除日元\",{\"1\":{\"86\":1}}],[\"暴露给监控全部接口\",{\"1\":{\"168\":1}}],[\"地址\",{\"1\":{\"168\":1}}],[\"地动山摇\",{\"1\":{\"150\":1}}],[\"客户端使用访问令牌向受保护资源服务器发起请求\",{\"1\":{\"182\":1}}],[\"客户端向资源所有者请求授权\",{\"1\":{\"182\":1}}],[\"客户端是请求访问受保护资源的第三方应用程序\",{\"1\":{\"182\":1}}],[\"客户端服务详情\",{\"1\":{\"168\":1}}],[\"客户端服务注册\",{\"1\":{\"168\":1}}],[\"客户端\",{\"0\":{\"166\":1},\"1\":{\"182\":1}}],[\"端点的交互\",{\"1\":{\"161\":1}}],[\"能够获取应用程序的详细信息和指标数据\",{\"1\":{\"161\":1}}],[\"管理界面能够及时更新应用程序的状态和信息\",{\"1\":{\"161\":1}}],[\"管理员将\",{\"1\":{\"57\":1}}],[\"支持\",{\"1\":{\"184\":1}}],[\"支持多种授权流程\",{\"1\":{\"182\":1}}],[\"支持通过邮件\",{\"1\":{\"161\":1}}],[\"支持虚拟机进行方法调用和方法执行的数据结构\",{\"1\":{\"136\":1}}],[\"易于集成\",{\"1\":{\"161\":1}}],[\"易维护的项目提供了方向\",{\"1\":{\"22\":1}}],[\"介绍\",{\"0\":{\"161\":1,\"181\":1,\"184\":1}}],[\"阿里的\",{\"1\":{\"159\":1}}],[\"携程的\",{\"1\":{\"159\":1}}],[\"高可用性和容错性和监控和告警\",{\"1\":{\"159\":1}}],[\"心跳和健康检查\",{\"1\":{\"159\":1}}],[\"弹性和灵活性提供了重要的基础设施\",{\"1\":{\"159\":1}}],[\"注意\",{\"1\":{\"205\":1}}],[\"注册到容器中即可\",{\"1\":{\"176\":1}}],[\"注册中心用于管理和维护微服务的注册信息\",{\"1\":{\"158\":1}}],[\"注册中心\",{\"0\":{\"158\":1}}],[\"注解处理才会出现\",{\"1\":{\"84\":1}}],[\"注解将事件发布器和事件监听器声明为\",{\"1\":{\"27\":1}}],[\"兼顾实时性和一致性来管理动态配置\",{\"1\":{\"157\":1}}],[\"兼容查询结果强转为list\",{\"1\":{\"86\":1}}],[\"感知配置变化的延时就短\",{\"1\":{\"157\":1}}],[\"感觉命令行窗口酷炫得很\",{\"1\":{\"38\":1}}],[\"轮询频率高\",{\"1\":{\"157\":1}}],[\"轮询频率低感知配置变化的延时就长\",{\"1\":{\"157\":1}}],[\"传统的静态配置方式要想修改某个配置只能修改之后重新发布应用\",{\"1\":{\"157\":1}}],[\"传统的单体应用程序在面对快速变化的需求时往往显得笨重且难以满足这些要求\",{\"1\":{\"151\":1}}],[\"限流等功能\",{\"1\":{\"154\":1}}],[\"断路器\",{\"1\":{\"154\":1}}],[\"过滤和负载均衡\",{\"1\":{\"154\":1}}],[\"转发和控制流量的设备或软件\",{\"1\":{\"154\":1}}],[\"转行到\",{\"1\":{\"11\":1}}],[\"网飞的\",{\"1\":{\"159\":1}}],[\"网关是一个通用的概念\",{\"1\":{\"154\":1}}],[\"网络上常见的定时任务场景有以下几种\",{\"1\":{\"88\":1}}],[\"浅聊微服务配置和注册中心\",{\"0\":{\"156\":1}}],[\"浅聊微服务网关\",{\"0\":{\"154\":1}}],[\"浅聊aop\",{\"0\":{\"64\":1}}],[\"请预览下面官方文档的链接进行研读\",{\"1\":{\"184\":1}}],[\"请点击下方官网链接访问\",{\"1\":{\"159\":1}}],[\"请开始之前参考选择\",{\"1\":{\"152\":1}}],[\"请求统计等\",{\"1\":{\"161\":1}}],[\"请求方法就可以看到返回的\",{\"1\":{\"66\":1}}],[\"请求进行审核\",{\"1\":{\"57\":1}}],[\"唯一要注意的就是组件版本对应的问题\",{\"1\":{\"152\":1}}],[\"详情在下面的\",{\"1\":{\"152\":1}}],[\"消息驱动数据流\",{\"1\":{\"152\":1}}],[\"消息队列\",{\"1\":{\"152\":1}}],[\"负载均衡\",{\"1\":{\"152\":1,\"159\":1}}],[\"负责发布事件\",{\"1\":{\"27\":1,\"28\":1}}],[\"罗列一下\",{\"1\":{\"152\":1}}],[\"没有一个完整的体系\",{\"1\":{\"152\":1}}],[\"没想到\",{\"1\":{\"43\":1}}],[\"随着应用程序的复杂性和扩展性的增加\",{\"1\":{\"179\":1}}],[\"随着云计算\",{\"1\":{\"151\":1}}],[\"随着互联网的发展\",{\"1\":{\"151\":1}}],[\"微服务中的使用\",{\"0\":{\"159\":1}}],[\"微服务架构的核心概念是\",{\"1\":{\"151\":1}}],[\"微服务架构如雨后春笋彻底发展起来了\",{\"1\":{\"151\":1}}],[\"微服务的出现\",{\"0\":{\"151\":1}}],[\"微服务之路\",{\"0\":{\"149\":1}}],[\"冲\",{\"1\":{\"150\":1}}],[\"冲突解决之后合并\",{\"1\":{\"57\":1}}],[\"面对该过时\",{\"1\":{\"150\":1}}],[\"面向切面编程\",{\"1\":{\"64\":1,\"140\":1}}],[\"稳重求进\",{\"1\":{\"150\":1}}],[\"希望大家能在学习新技术的同时夯实基础\",{\"1\":{\"150\":1}}],[\"希望以后可以学习到其他更优实践\",{\"1\":{\"51\":1}}],[\"蜂拥而至的新人都直接选择加入使用框架的队伍来瓜分互联网的红利\",{\"1\":{\"150\":1}}],[\"技术更新愈发频繁\",{\"1\":{\"150\":1}}],[\"根本找不到满意的工作\",{\"1\":{\"150\":1}}],[\"根本找不到\",{\"1\":{\"150\":1}}],[\"根据元素的关键字直接计算出元素的存储地址\",{\"1\":{\"196\":1}}],[\"根据项目中\",{\"1\":{\"96\":1}}],[\"根据安装指引可能根据个人不同的选项初始化出目录结构不太相同的项目\",{\"1\":{\"96\":1}}],[\"根据工程开发参与者的数量和便利我们可以有很多种开发流程\",{\"1\":{\"56\":1}}],[\"根据现有的上线模式\",{\"1\":{\"56\":1}}],[\"怎么找工作呀\",{\"1\":{\"150\":1}}],[\"完全就是一知半解\",{\"1\":{\"150\":1}}],[\"完美集成\",{\"1\":{\"71\":1}}],[\"检查缓存中是否存在方法调用的结果\",{\"1\":{\"148\":1}}],[\"检索项目中所有打印日志的语句\",{\"1\":{\"66\":1}}],[\"计数器等\",{\"1\":{\"148\":1}}],[\"计算机组成原理\",{\"1\":{\"150\":1}}],[\"计算机组成与设计\",{\"1\":{\"6\":1}}],[\"计算机四大天书\",{\"1\":{\"150\":1}}],[\"计算机网络\",{\"1\":{\"6\":1,\"150\":1}}],[\"计算机操作系统\",{\"1\":{\"6\":1,\"150\":1}}],[\"比如服务之间的通信复杂性\",{\"1\":{\"151\":1}}],[\"比如\",{\"1\":{\"148\":1}}],[\"比如说如果审核人正在审批一份超过30分钟或者已经被重新置为未审核的材料\",{\"1\":{\"90\":1}}],[\"比如说有些审核人拉取完十位考生后不能进行后面审核\",{\"1\":{\"90\":1}}],[\"设置拦截器\",{\"1\":{\"147\":1}}],[\"设置被代理类的父类\",{\"1\":{\"147\":1}}],[\"设计和产品都需要涉猎\",{\"1\":{\"31\":1}}],[\"设计模式\",{\"0\":{\"16\":1},\"1\":{\"17\":1}}],[\"依赖\",{\"1\":{\"147\":1}}],[\"依次合并到develop和master分支上\",{\"1\":{\"57\":1}}],[\"拦截器的intercept方法将被调用\",{\"1\":{\"146\":1}}],[\"假设我们有一个简单的接口\",{\"1\":{\"144\":1}}],[\"假如之前从develop分支创建的\",{\"1\":{\"57\":1}}],[\"该淘汰的技术\",{\"1\":{\"150\":1}}],[\"该接口定义了一个intercept方法\",{\"1\":{\"147\":1}}],[\"该接口是目标对象和代理对象共同实现的接口\",{\"1\":{\"144\":1}}],[\"该方法接受三个参数\",{\"1\":{\"144\":1}}],[\"该类负责处理代理对象的方法调用\",{\"1\":{\"144\":1}}],[\"该属性是公有属性不是私有属性\",{\"1\":{\"106\":1}}],[\"示例中代理对象通过反射的方式调用目标对象的方法\",{\"1\":{\"148\":1}}],[\"示例思路\",{\"0\":{\"143\":1,\"146\":1}}],[\"示意图如下所示\",{\"1\":{\"136\":1}}],[\"总的来说\",{\"1\":{\"141\":1}}],[\"总结和延伸\",{\"0\":{\"148\":1}}],[\"总结\",{\"0\":{\"28\":1,\"51\":1,\"82\":1,\"132\":1,\"134\":1,\"177\":1}}],[\"避免重复计算\",{\"1\":{\"140\":1,\"148\":1}}],[\"避免了每个项目都复制一份依赖项的情况\",{\"1\":{\"32\":1}}],[\"远程代理\",{\"1\":{\"140\":1}}],[\"远古时期\",{\"1\":{\"43\":1}}],[\"延迟加载\",{\"1\":{\"140\":1}}],[\"性能监控\",{\"1\":{\"140\":1,\"148\":1}}],[\"增加和删除节点的操作都很快\",{\"1\":{\"196\":1}}],[\"增强或拦截的场景中非常有用\",{\"1\":{\"140\":1}}],[\"增量构建这些功能\",{\"1\":{\"60\":1}}],[\"静态代理就是代码中事先定义好的\",{\"1\":{\"140\":1}}],[\"静态域和数组元素都存在堆内存中\",{\"1\":{\"136\":1}}],[\"允许在运行时创建代理类及其实例\",{\"1\":{\"140\":1}}],[\"什么不要为了用技术而用技术\",{\"1\":{\"150\":1}}],[\"什么8080\",{\"1\":{\"150\":1}}],[\"什么是动态代理\",{\"0\":{\"140\":1}}],[\"什么是观察者模式\",{\"0\":{\"24\":1}}],[\"什么\",{\"1\":{\"138\":1,\"150\":2}}],[\"搜索到的结果是\",{\"1\":{\"138\":1}}],[\"搜索引擎也引来了巨大革新\",{\"1\":{\"1\":1}}],[\"出于兴趣我就想简单瞥一眼到底是如何调用的\",{\"1\":{\"138\":1}}],[\"今天都得给我整明白\",{\"1\":{\"138\":1}}],[\"今天在复习微服务的时候看到\",{\"1\":{\"138\":1}}],[\"今年居然比去年更贵了\",{\"1\":{\"21\":1}}],[\"栈帧\",{\"1\":{\"136\":1}}],[\"↩︎\",{\"1\":{\"136\":4}}],[\"缓冲行\",{\"1\":{\"136\":1}}],[\"缓存管理\",{\"1\":{\"140\":1,\"148\":1}}],[\"缓存中可以分配的最小单位\",{\"1\":{\"136\":1}}],[\"缓存\",{\"1\":{\"64\":1}}],[\"缓存更新等\",{\"1\":{\"28\":1}}],[\"本地内存存放的共享变量的副本\",{\"1\":{\"136\":1}}],[\"决定一个线程对共享变量的写入何时对另一个线程可见\",{\"1\":{\"136\":1}}],[\"由\",{\"1\":{\"136\":1}}],[\"由于第一个数据结点的位置被存放在头结点的指针域中\",{\"1\":{\"205\":1}}],[\"由于我们项目的日志五花八门\",{\"1\":{\"66\":1}}],[\"由于最近上线总是出现问题\",{\"1\":{\"49\":1}}],[\"由于只是转发价格\",{\"1\":{\"45\":1}}],[\"控制\",{\"1\":{\"136\":1}}],[\"控制反转\",{\"1\":{\"64\":1}}],[\"堆内存在线程间共享\",{\"1\":{\"136\":1}}],[\"读内存中的公共状态进行隐式通讯\",{\"1\":{\"135\":1}}],[\"循环时间开销大和只能保证一个变量的原子操作等\",{\"1\":{\"133\":1}}],[\"循环就好了\",{\"1\":{\"22\":1}}],[\"问题\",{\"1\":{\"133\":1}}],[\"问过一些从事前端的朋友\",{\"1\":{\"95\":1}}],[\"原子类型\",{\"1\":{\"193\":1}}],[\"原子操作\",{\"0\":{\"133\":1},\"1\":{\"136\":1}}],[\"原生的\",{\"1\":{\"45\":1}}],[\"追求吞吐量\",{\"1\":{\"132\":1}}],[\"追求响应时间\",{\"1\":{\"132\":1}}],[\"始终得不到锁的线程会自旋消耗\",{\"1\":{\"132\":1}}],[\"竞争线程不会阻塞\",{\"1\":{\"132\":1}}],[\"适用于一个线程访问同步块场景\",{\"1\":{\"132\":1}}],[\"加锁和解锁不需要额外消耗\",{\"1\":{\"132\":1}}],[\"缺点是依赖散列函数\",{\"1\":{\"196\":1}}],[\"缺点是附加的索引表额外占用存储空间\",{\"1\":{\"196\":1}}],[\"缺点是每个元素因为指针而产生额外的空间\",{\"1\":{\"196\":1}}],[\"缺点是只能使用相邻的一整块存储单元导致产生较多的外部碎片\",{\"1\":{\"196\":1}}],[\"缺点\",{\"1\":{\"132\":1}}],[\"优点是检索\",{\"1\":{\"196\":1}}],[\"优点是不会出现碎片\",{\"1\":{\"196\":1}}],[\"优点是实现随机存取\",{\"1\":{\"196\":1}}],[\"优点\",{\"1\":{\"132\":1}}],[\"否则说明有竞争发生\",{\"1\":{\"131\":1}}],[\"否则就会报错\",{\"1\":{\"119\":1}}],[\"操作来加锁和解锁\",{\"1\":{\"130\":1}}],[\"操作起来费时费力并且容易出错\",{\"1\":{\"34\":1}}],[\"级别由低到高分别是\",{\"1\":{\"129\":1}}],[\"锁竞争会带来额外的锁撤销的消耗\",{\"1\":{\"132\":1}}],[\"锁\",{\"1\":{\"132\":1}}],[\"锁并不会存在多线程的竞争\",{\"1\":{\"130\":1}}],[\"锁一共有四种状态\",{\"1\":{\"129\":1}}],[\"锁的是\",{\"1\":{\"129\":1}}],[\"锁的是当前类的\",{\"1\":{\"129\":1}}],[\"锁的是当前的实例对象\",{\"1\":{\"129\":1}}],[\"偏向锁提供了一种竞争出现才会释放的锁机制\",{\"1\":{\"130\":1}}],[\"偏向锁\",{\"0\":{\"130\":1},\"1\":{\"129\":2,\"132\":1}}],[\"会话的登录可能会面临一些挑战\",{\"1\":{\"179\":1}}],[\"会话存储\",{\"1\":{\"172\":1}}],[\"会将锁升级为重量级锁\",{\"1\":{\"131\":1}}],[\"会先在对象头中存储锁记录的指针\",{\"1\":{\"131\":1}}],[\"会在对当头和栈帧\",{\"1\":{\"130\":1}}],[\"会保证每个\",{\"1\":{\"129\":1}}],[\"会向处理器发一条\",{\"1\":{\"128\":1}}],[\"退出和异常的时候必须释放锁\",{\"1\":{\"129\":1}}],[\"他必须先获得锁\",{\"1\":{\"129\":1}}],[\"他们大部分都还在用\",{\"1\":{\"95\":1}}],[\"他们对程序的效率就好比赛车手对速度的执着一样\",{\"1\":{\"22\":1}}],[\"括号里的配置对象\",{\"1\":{\"129\":1}}],[\"重量级锁\",{\"1\":{\"129\":1,\"132\":1}}],[\"重\",{\"1\":{\"129\":1}}],[\"重构思路\",{\"0\":{\"44\":1}}],[\"重构这个项目的原因居然是公司开始不再使用\",{\"1\":{\"43\":1}}],[\"重构接收价格前置项目\",{\"0\":{\"42\":1}}],[\"线性表的链式存储又被称为单链表\",{\"1\":{\"205\":1}}],[\"线性表的链式表示\",{\"0\":{\"204\":1}}],[\"线性表的顺序存储又叫顺序表\",{\"1\":{\"202\":1}}],[\"线性表的顺序表示\",{\"0\":{\"201\":1}}],[\"线性表有以下特点\",{\"1\":{\"199\":1}}],[\"线性表是具有相同数据结构的n\",{\"1\":{\"199\":1}}],[\"线性表\",{\"0\":{\"198\":1}}],[\"线性结构\",{\"1\":{\"195\":1}}],[\"线程转储等\",{\"1\":{\"161\":1}}],[\"线程数\",{\"1\":{\"161\":1}}],[\"线程之间的共享变量存储在主内存\",{\"1\":{\"136\":1}}],[\"线程之间的通讯由\",{\"1\":{\"136\":1}}],[\"线程之间如何通讯及线程之间如何同步\",{\"1\":{\"135\":1}}],[\"线程阻塞\",{\"1\":{\"132\":1}}],[\"线程不会自旋\",{\"1\":{\"132\":1}}],[\"线程应确保能通过排他锁单独获得这个变量\",{\"1\":{\"128\":1}}],[\"线上bug紧急修复分支\",{\"1\":{\"55\":1}}],[\"线上分支\",{\"1\":{\"55\":1}}],[\"编程语言允许线程访问共享变量\",{\"1\":{\"128\":1}}],[\"编程思想\",{\"1\":{\"12\":1}}],[\"语言规范\",{\"1\":{\"128\":1}}],[\"成功\",{\"1\":{\"131\":1}}],[\"成本更低\",{\"1\":{\"128\":1}}],[\"成熟\",{\"1\":{\"60\":1}}],[\"话不多说\",{\"1\":{\"125\":1}}],[\"话不多说直接开始\",{\"1\":{\"43\":1,\"99\":1}}],[\"看都没看明白\",{\"1\":{\"123\":1}}],[\"看看以后吧\",{\"1\":{\"3\":1}}],[\"捕获\",{\"1\":{\"121\":1}}],[\"此外\",{\"1\":{\"182\":1}}],[\"此行会打印\",{\"1\":{\"121\":1}}],[\"此时审批人再去点击审批结果的时候发现审批已经失效\",{\"1\":{\"90\":1}}],[\"搭配使用的时候要遵守链式编程的规则\",{\"1\":{\"121\":1}}],[\"搭建和配置\",{\"1\":{\"15\":1}}],[\"两个指令配合完成\",{\"1\":{\"129\":1}}],[\"两个函数只会有一个被调用\",{\"1\":{\"121\":1}}],[\"两个模块\",{\"1\":{\"120\":1}}],[\"第三版\",{\"1\":{\"128\":1}}],[\"第三个then\",{\"1\":{\"121\":1}}],[\"第五个then\",{\"1\":{\"121\":1}}],[\"第四个then\",{\"1\":{\"121\":1}}],[\"第二个then\",{\"1\":{\"121\":1}}],[\"第二个参数是\",{\"1\":{\"121\":1}}],[\"第一个then\",{\"1\":{\"121\":1}}],[\"第一个参数是\",{\"1\":{\"121\":1}}],[\"第一个\",{\"1\":{\"96\":1}}],[\"第一次看见项目目录里的\",{\"1\":{\"60\":1}}],[\"变为\",{\"1\":{\"121\":2}}],[\"变量和输入数据\",{\"1\":{\"189\":1}}],[\"变量\",{\"1\":{\"95\":1}}],[\"已失败\",{\"1\":{\"121\":1}}],[\"已成功\",{\"1\":{\"121\":1}}],[\"已经不用太过担心体验和性能问题\",{\"1\":{\"90\":1}}],[\"已经脱敏\",{\"1\":{\"66\":1}}],[\"已经有人开始推测\",{\"1\":{\"1\":1}}],[\"进行中\",{\"1\":{\"121\":1}}],[\"进行查看\",{\"1\":{\"37\":1}}],[\"异步操作有三种状态\",{\"1\":{\"121\":1}}],[\"仅有一个\",{\"1\":{\"120\":1}}],[\"仅仅是代码的三份存档\",{\"1\":{\"53\":1}}],[\"且必须出现在\",{\"1\":{\"119\":1}}],[\"子类\",{\"1\":{\"119\":1}}],[\"必须有对应的\",{\"1\":{\"129\":1}}],[\"必须同级出现\",{\"1\":{\"119\":1}}],[\"必须在访问前对类进行定义\",{\"1\":{\"119\":1}}],[\"必先利其器\",{\"1\":{\"20\":1}}],[\"匿名类\",{\"1\":{\"119\":1}}],[\"关键字\",{\"1\":{\"119\":2,\"122\":1}}],[\"关键字定义类\",{\"1\":{\"119\":1}}],[\"关于\",{\"0\":{\"170\":1}}],[\"关于定时任务的使用场景\",{\"0\":{\"88\":1}}],[\"关于持久化\",{\"0\":{\"39\":1}}],[\"关于设计模式\",{\"0\":{\"22\":1}}],[\"箭头函数\",{\"1\":{\"118\":1}}],[\"参数和返回值\",{\"1\":{\"140\":1,\"148\":1}}],[\"参数\",{\"1\":{\"118\":1}}],[\"差集\",{\"1\":{\"113\":1}}],[\"交集\",{\"1\":{\"113\":1}}],[\"交互的\",{\"1\":{\"45\":1}}],[\"去重\",{\"1\":{\"113\":1}}],[\"去其糟粕\",{\"1\":{\"99\":1}}],[\"合并两个\",{\"1\":{\"111\":1}}],[\"键值对数组转换成一个\",{\"1\":{\"111\":1}}],[\"二维\",{\"1\":{\"111\":1}}],[\"小技巧\",{\"0\":{\"111\":1,\"113\":1}}],[\"ƒ\",{\"1\":{\"109\":1}}],[\"4\",{\"0\":{\"133\":1},\"1\":{\"109\":1,\"113\":7}}],[\"40\",{\"1\":{\"103\":2}}],[\"函数不会像普通函数一样立即执行\",{\"1\":{\"122\":1}}],[\"函数和调用普通函数一样\",{\"1\":{\"122\":1}}],[\"函数内部有\",{\"1\":{\"122\":1}}],[\"函数名之前有个\",{\"1\":{\"122\":1}}],[\"函数体\",{\"1\":{\"118\":1}}],[\"函数调用等操作进行拦截\",{\"1\":{\"115\":1}}],[\"函数可以将一个\",{\"1\":{\"111\":1}}],[\"函数\",{\"0\":{\"118\":1,\"122\":1,\"123\":1},\"1\":{\"109\":1,\"122\":1}}],[\"函数就好了\",{\"1\":{\"22\":1}}],[\"任何被时代所遗弃的技术必有其弊端\",{\"1\":{\"150\":1}}],[\"任何对象都有一个\",{\"1\":{\"129\":1}}],[\"任何值\",{\"1\":{\"109\":1}}],[\"任务和\",{\"1\":{\"60\":1}}],[\"若没有则新建并返回一个以该字符串参数为名称的\",{\"1\":{\"107\":1}}],[\"值可再分\",{\"1\":{\"193\":1}}],[\"值不可再分\",{\"1\":{\"193\":1}}],[\"值不值\",{\"1\":{\"150\":1}}],[\"值是否已被登记\",{\"1\":{\"107\":1}}],[\"值\",{\"1\":{\"107\":3}}],[\"值作为属性名时\",{\"1\":{\"106\":1}}],[\"属性\",{\"1\":{\"106\":1}}],[\"写法3\",{\"1\":{\"106\":1}}],[\"写法2\",{\"1\":{\"106\":1}}],[\"写法1\",{\"1\":{\"106\":1}}],[\"表中的元素具有抽象性\",{\"1\":{\"199\":1}}],[\"表中的元素类型数据都相同\",{\"1\":{\"199\":1}}],[\"表中元素都是数据结构\",{\"1\":{\"199\":1}}],[\"表中元素有先后顺序\",{\"1\":{\"199\":1}}],[\"表中元素具有逻辑上的顺序性\",{\"1\":{\"199\":1}}],[\"表中元素个数有限\",{\"1\":{\"199\":1}}],[\"表示当前线程获取了锁\",{\"1\":{\"131\":1}}],[\"表示独一无二的值\",{\"1\":{\"104\":1}}],[\"表达式\",{\"1\":{\"9\":1,\"122\":1}}],[\"5\",{\"1\":{\"103\":2,\"112\":7,\"133\":1}}],[\"皆可进行解构赋值\",{\"1\":{\"102\":1}}],[\"字符及所能输入到计算机中并被计算机程序识别和处理的符号的集合\",{\"1\":{\"193\":1}}],[\"字符串\",{\"1\":{\"102\":1,\"109\":3}}],[\"字节码文件再到汇编指令到\",{\"1\":{\"127\":1}}],[\"字段\",{\"1\":{\"86\":1}}],[\"字段等\",{\"1\":{\"84\":1}}],[\"剩余运算符\",{\"1\":{\"102\":1,\"103\":1}}],[\"默认集成了\",{\"1\":{\"170\":1}}],[\"默认值\",{\"1\":{\"102\":1}}],[\"默认是安装在\",{\"1\":{\"36\":1}}],[\"忽略\",{\"1\":{\"102\":1,\"103\":1}}],[\"嵌套\",{\"1\":{\"102\":1}}],[\"数组模型的解构\",{\"0\":{\"102\":1}}],[\"数据的运算\",{\"0\":{\"197\":1}}],[\"数据的基本单位\",{\"1\":{\"193\":1}}],[\"数据类型\",{\"1\":{\"193\":1}}],[\"数据对象\",{\"1\":{\"193\":1}}],[\"数据项\",{\"1\":{\"193\":1}}],[\"数据元素\",{\"1\":{\"193\":1}}],[\"数据\",{\"1\":{\"193\":1}}],[\"数据统计\",{\"1\":{\"88\":1}}],[\"数据备份\",{\"1\":{\"88\":1}}],[\"数据能够被保留并在需要时恢复\",{\"1\":{\"40\":1}}],[\"数据库触发器\",{\"1\":{\"28\":1}}],[\"数据库的底层结构和高级用法显得尤为重要\",{\"1\":{\"9\":1}}],[\"数据库\",{\"0\":{\"9\":1},\"1\":{\"172\":1}}],[\"数据结构是算法的基础\",{\"1\":{\"194\":1}}],[\"数据结构三要素\",{\"0\":{\"194\":1}}],[\"数据结构\",{\"0\":{\"7\":1},\"1\":{\"6\":1,\"150\":2,\"193\":1}}],[\"数据结构和算法\",{\"0\":{\"6\":1}}],[\"针对数组或者对象进行模式匹配\",{\"1\":{\"101\":1}}],[\"解耦\",{\"1\":{\"151\":1}}],[\"解构默认值\",{\"1\":{\"103\":1}}],[\"解构的目标若为可遍历对象\",{\"1\":{\"102\":1}}],[\"解构赋值是对赋值运算符的扩展\",{\"1\":{\"101\":1}}],[\"解构赋值\",{\"0\":{\"101\":1}}],[\"解决了国内用户使用\",{\"1\":{\"32\":1}}],[\"说到\",{\"1\":{\"179\":1}}],[\"说明声明的同时就必须初始化\",{\"1\":{\"100\":1}}],[\"说句题外话\",{\"1\":{\"60\":1}}],[\"声明一个只读的常量\",{\"1\":{\"100\":1}}],[\"声明的变量只在\",{\"1\":{\"100\":1}}],[\"哈哈哈\",{\"1\":{\"99\":1}}],[\"6\",{\"1\":{\"99\":1}}],[\"6+\",{\"0\":{\"97\":1}}],[\"全链路由追踪\",{\"1\":{\"152\":1}}],[\"全称\",{\"1\":{\"99\":1}}],[\"全部都是\",{\"1\":{\"50\":1}}],[\"全部删除并且把上面读取的\",{\"1\":{\"50\":1}}],[\"知识框架\",{\"0\":{\"192\":1}}],[\"知识总览\",{\"0\":{\"98\":1}}],[\"知道是谁负责开发和大致开发内容\",{\"1\":{\"55\":1}}],[\"案例\",{\"1\":{\"96\":1}}],[\"选项式api\",{\"1\":{\"95\":1}}],[\"选它总没错\",{\"1\":{\"32\":1}}],[\"新引入了\",{\"1\":{\"122\":1}}],[\"新特性还是非常多的\",{\"1\":{\"95\":1}}],[\"新增全局规则和针对插槽内容的规则\",{\"1\":{\"95\":1}}],[\"新git仓库将使用单套代码多环境配置的模式\",{\"1\":{\"56\":1}}],[\"片段\",{\"1\":{\"95\":1}}],[\"组合使用\",{\"0\":{\"117\":1}}],[\"组合式api\",{\"1\":{\"95\":1}}],[\"组合式\",{\"1\":{\"95\":1}}],[\"组件选项\",{\"1\":{\"95\":1}}],[\"组件\",{\"1\":{\"95\":1}}],[\"主打的是简单\",{\"1\":{\"184\":1}}],[\"主打一本工具书的定位\",{\"1\":{\"12\":1}}],[\"主页\",{\"1\":{\"165\":1}}],[\"主要功能如下\",{\"1\":{\"161\":1}}],[\"主要是公司的框架都是2\",{\"1\":{\"95\":1}}],[\"倒不是因为不想用\",{\"1\":{\"95\":1}}],[\"状态就不会再改变了\",{\"1\":{\"121\":1}}],[\"状态\",{\"1\":{\"91\":1}}],[\"推送到其他后台程序\",{\"1\":{\"91\":1}}],[\"推荐\",{\"1\":{\"66\":1}}],[\"推荐这本\",{\"1\":{\"10\":1}}],[\"彭博收到请求后将处理后的数据存放到公共的\",{\"1\":{\"91\":1}}],[\"应运而生\",{\"1\":{\"179\":1}}],[\"应用程序的管理和监控\",{\"1\":{\"161\":1}}],[\"应用程序的运行状态\",{\"1\":{\"161\":1}}],[\"应用程序的开源项目\",{\"1\":{\"161\":1}}],[\"应用程序监控\",{\"1\":{\"161\":1}}],[\"应用程序\",{\"1\":{\"161\":2}}],[\"应用事件监听器是一个接口\",{\"1\":{\"27\":1}}],[\"应用事件监听器\",{\"1\":{\"27\":1}}],[\"应用事件发布器是一个接口\",{\"1\":{\"27\":1}}],[\"应用事件发布器\",{\"1\":{\"27\":1}}],[\"应该不会采用这种方式一次获取十份材料的方式\",{\"1\":{\"90\":1}}],[\"放在现在如果仔细想想如果重新设计这个请求的话\",{\"1\":{\"90\":1}}],[\"招录组织实施系统\",{\"1\":{\"90\":1}}],[\"磁盘空间等\",{\"1\":{\"88\":1}}],[\"占用率\",{\"1\":{\"88\":1}}],[\"占位符读取出来的\",{\"1\":{\"50\":1}}],[\"资源所有者向身份和授权服务器提供其凭据\",{\"1\":{\"182\":1}}],[\"资源所有者是指控制受保护资源的用户\",{\"1\":{\"182\":1}}],[\"资源所有者\",{\"1\":{\"182\":1}}],[\"资源管理\",{\"1\":{\"88\":1}}],[\"资源分享\",{\"0\":{\"1\":1}}],[\"垃圾文件等\",{\"1\":{\"88\":1}}],[\"清理任务\",{\"1\":{\"88\":1}}],[\"顾名思义\",{\"1\":{\"88\":1}}],[\"zero\",{\"1\":{\"86\":1,\"110\":4}}],[\"zhangsan\",{\"1\":{\"74\":2}}],[\"||\",{\"1\":{\"86\":1}}],[\"非常适合作为微服务学习的第一选择\",{\"1\":{\"159\":1}}],[\"非常考验运维人员的基本功\",{\"1\":{\"34\":1}}],[\"非空的价格\",{\"1\":{\"86\":1}}],[\"打开字段访问权限\",{\"1\":{\"86\":1}}],[\"打包工具\",{\"0\":{\"59\":1}}],[\"处理器能保证从系统内存中读取和写入一个字节是原子的\",{\"1\":{\"133\":1}}],[\"处理所有\",{\"1\":{\"86\":1}}],[\"处理价格发生异常\",{\"1\":{\"86\":2}}],[\"处理抽象对象的字段数据\",{\"0\":{\"86\":1}}],[\"显然我们要做的就是把其中价格字段处理一下\",{\"1\":{\"86\":1}}],[\"quotetime\",{\"1\":{\"86\":4}}],[\"遵循老项目不能大刀阔斧的原则\",{\"1\":{\"86\":1}}],[\"甚至有没有把这写价格对象抽象一个父类出来\",{\"1\":{\"86\":1}}],[\"甚至觉得前端不是程序员\",{\"1\":{\"31\":1}}],[\"即线程之间共享程序的公共状态\",{\"1\":{\"135\":1}}],[\"即一个线程在修改一个共享变量时\",{\"1\":{\"128\":1}}],[\"即使是相同参数\",{\"1\":{\"104\":1}}],[\"即实现对象的\",{\"1\":{\"102\":1}}],[\"即可\",{\"1\":{\"86\":1,\"122\":1}}],[\"即主题对象\",{\"1\":{\"24\":1}}],[\"除最后一个外\",{\"1\":{\"199\":1}}],[\"除了存放元素自身外\",{\"1\":{\"205\":1}}],[\"除了第一个元素外\",{\"1\":{\"199\":1}}],[\"除了\",{\"1\":{\"150\":1}}],[\"除了日元和人民币的汇率不作处理外\",{\"1\":{\"86\":1}}],[\"除非遇到网络等特殊情况\",{\"1\":{\"46\":1}}],[\"访问和修改类的字段\",{\"1\":{\"84\":1}}],[\"调用代理对象的方法\",{\"1\":{\"147\":1}}],[\"调用被代理类的方法\",{\"1\":{\"147\":1}}],[\"调用目标对象的方法\",{\"1\":{\"144\":1}}],[\"调用\",{\"1\":{\"122\":1}}],[\"调用类的方法\",{\"1\":{\"84\":1}}],[\"调用方法和访问字段之后\",{\"1\":{\"84\":1}}],[\"构造一个空的线性表\",{\"1\":{\"200\":1}}],[\"构造函数可以将一个\",{\"1\":{\"111\":1}}],[\"构造函数\",{\"1\":{\"84\":2}}],[\"构成数据元素的不可分割的最小单位\",{\"1\":{\"193\":1}}],[\"构建的网关框架\",{\"1\":{\"154\":1}}],[\"构建war包和jar包中的manifest文件添加打包git分支明细\",{\"0\":{\"62\":1}}],[\"构建工具\",{\"1\":{\"32\":1}}],[\"父类\",{\"1\":{\"84\":2}}],[\"修饰符\",{\"1\":{\"84\":2}}],[\"修复后直接部署\",{\"1\":{\"55\":1}}],[\"动态更新\",{\"1\":{\"159\":1}}],[\"动态更新和版本控制等优点\",{\"1\":{\"157\":1}}],[\"动态创建对象实例\",{\"1\":{\"84\":1}}],[\"动态代理可以用于实现日志记录\",{\"1\":{\"140\":1}}],[\"动态代理可以用于实现缓存管理\",{\"1\":{\"140\":1}}],[\"动态代理可以用于实现安全控制\",{\"1\":{\"140\":1}}],[\"动态代理可以用于实现横切关注点的模块化\",{\"1\":{\"140\":1}}],[\"动态代理可以用于远程方法调用\",{\"1\":{\"140\":1}}],[\"动态代理可以延迟加载对象\",{\"1\":{\"140\":1}}],[\"动态代理在需要在运行时对对象进行控制\",{\"1\":{\"140\":1}}],[\"动态代理\",{\"0\":{\"137\":1},\"1\":{\"84\":1}}],[\"动态地将切面织入到核心业务逻辑中\",{\"1\":{\"64\":1}}],[\"摆脱基础语法后迈入高级特性的第一步就是注解\",{\"1\":{\"84\":1}}],[\"反射的常用使用场景有以下几种\",{\"1\":{\"84\":1}}],[\"反射\",{\"0\":{\"83\":1}}],[\"超时验证等\",{\"1\":{\"82\":1}}],[\"抛出一个名为\",{\"1\":{\"80\":1}}],[\"抛弃之前svn的目录分层来区分多版本的结构\",{\"1\":{\"56\":1}}],[\"2^n\",{\"1\":{\"188\":1}}],[\"25\",{\"1\":{\"115\":1}}],[\"24\",{\"1\":{\"115\":1,\"116\":1,\"117\":1}}],[\"20\",{\"1\":{\"103\":2,\"118\":3}}],[\"2015\",{\"1\":{\"99\":1}}],[\"2023\",{\"1\":{\"86\":4}}],[\"20230427\",{\"1\":{\"57\":2}}],[\"20230413\",{\"1\":{\"55\":2,\"56\":1,\"57\":13}}],[\"26\",{\"1\":{\"86\":4}}],[\"2\",{\"0\":{\"95\":1},\"1\":{\"76\":1,\"102\":9,\"111\":2,\"112\":4,\"113\":10,\"119\":3,\"121\":2,\"122\":2,\"130\":1,\"182\":7}}],[\"验证模拟对象上的所有方法已经被验证\",{\"1\":{\"79\":1}}],[\"验证模拟对象的方法从未被调用\",{\"1\":{\"78\":1}}],[\"验证模拟对象的方法被调用了至少n次\",{\"1\":{\"77\":1}}],[\"验证模拟对象的方法被调用了特定的次数\",{\"1\":{\"76\":1}}],[\"验证模拟对象的方法是否被调用\",{\"1\":{\"75\":1}}],[\"验证\",{\"1\":{\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1}}],[\"常数\",{\"1\":{\"189\":1}}],[\"常用方法\",{\"0\":{\"72\":1}}],[\"常见的渐进时间负责度排序\",{\"1\":{\"188\":1}}],[\"常见的应该有\",{\"1\":{\"32\":1}}],[\"常见场景处理步骤\",{\"0\":{\"57\":1}}],[\"测试和交付功能\",{\"1\":{\"151\":1}}],[\"测试代码\",{\"0\":{\"71\":1}}],[\"测试我都不测试\",{\"1\":{\"68\":1}}],[\"导致后来我真正开始想加入微服务的时候剪不断理还乱\",{\"1\":{\"152\":1}}],[\"导致项目启动不起来或者功能紊乱\",{\"1\":{\"56\":1}}],[\"导入\",{\"1\":{\"120\":2}}],[\"导入依赖\",{\"0\":{\"70\":1}}],[\"导出\",{\"1\":{\"120\":2}}],[\"又出现了\",{\"1\":{\"68\":1}}],[\"于是令牌\",{\"1\":{\"179\":1}}],[\"于是乎各种技术对应的技术栈应运而生\",{\"1\":{\"151\":1}}],[\"于是\",{\"1\":{\"68\":1}}],[\"于是他想将所有\",{\"1\":{\"66\":1}}],[\"帮助开发团队分析测试覆盖率\",{\"1\":{\"68\":1}}],[\"脱敏后的\",{\"1\":{\"66\":1}}],[\"模拟脱敏过程\",{\"1\":{\"66\":1}}],[\"模拟脱敏操作\",{\"1\":{\"66\":1}}],[\"模块的创建\",{\"1\":{\"172\":1}}],[\"模块当中来方便其他模块依赖\",{\"1\":{\"172\":1}}],[\"模块\",{\"0\":{\"120\":1}}],[\"模块实现\",{\"1\":{\"43\":1}}],[\"模块化开发\",{\"1\":{\"32\":1}}],[\"获取方法如下\",{\"1\":{\"106\":1}}],[\"获取方法返回值\",{\"1\":{\"66\":1}}],[\"获取到价格后通过\",{\"1\":{\"91\":1}}],[\"获取币种对字段\",{\"1\":{\"86\":1}}],[\"获取类的信息\",{\"1\":{\"84\":1}}],[\"获取类信息\",{\"1\":{\"84\":1}}],[\"获取更多的钩子进行操作\",{\"1\":{\"66\":1}}],[\"获取不到个人用户下的环境变量\",{\"1\":{\"50\":1}}],[\"返回线性表的长度即其中的元素个数\",{\"1\":{\"200\":1}}],[\"返回一个已登记的\",{\"1\":{\"107\":1}}],[\"返回一个名为\",{\"1\":{\"74\":1}}],[\"返回的值不相等\",{\"1\":{\"104\":1}}],[\"返回前台一个\",{\"1\":{\"66\":1}}],[\"返回对象脱敏\",{\"0\":{\"66\":1}}],[\"听起来无非就是将返回的\",{\"1\":{\"86\":1}}],[\"听起来这就是个感人的工作\",{\"1\":{\"66\":1}}],[\"听我一个朋友谈起\",{\"1\":{\"9\":1}}],[\"统一加上工具类中的脱敏方法\",{\"1\":{\"66\":1}}],[\"概念的语法和工具\",{\"1\":{\"64\":1}}],[\"提供的功能\",{\"1\":{\"161\":1}}],[\"提供更简洁的调用方式\",{\"1\":{\"140\":1}}],[\"提供了一个集中管理和监控的用户界面\",{\"1\":{\"161\":1}}],[\"提供了监控和管理的基础功能\",{\"1\":{\"161\":1}}],[\"提供了\",{\"1\":{\"125\":1}}],[\"提供了实现\",{\"1\":{\"64\":1}}],[\"提高了程序的响应速度\",{\"1\":{\"132\":1}}],[\"提高了效率\",{\"1\":{\"131\":1}}],[\"提到微服务就不得不提到单体地狱的问题\",{\"1\":{\"151\":1}}],[\"提到\",{\"1\":{\"127\":1}}],[\"提到版本控制\",{\"1\":{\"14\":1}}],[\"框架的话\",{\"1\":{\"184\":1}}],[\"框架\",{\"1\":{\"64\":1}}],[\"框架选型\",{\"0\":{\"45\":1}}],[\"织入\",{\"1\":{\"64\":1}}],[\"指通过一组任意的存储单元来存储线性表中的数据元素\",{\"1\":{\"205\":1}}],[\"指出运算的具体操作步骤\",{\"1\":{\"197\":1}}],[\"指出运算的功能\",{\"1\":{\"197\":1}}],[\"指令尝试将对象的锁记录指针替换为指向当前线程的指针\",{\"1\":{\"131\":1}}],[\"指针就会从函数头部或者上一次停下来的地方开始执行\",{\"1\":{\"122\":1}}],[\"指定模拟对象方法的调用应该如何进行自定义处理\",{\"1\":{\"81\":1}}],[\"指定当调用\",{\"1\":{\"80\":1}}],[\"指定当调用模拟对象的方法时应该抛出的异常\",{\"1\":{\"80\":1}}],[\"指定当调用方法时应该返回的值\",{\"1\":{\"74\":1}}],[\"指定一个或多个连接点\",{\"1\":{\"64\":1}}],[\"指的是将数据在计算机系统中长期保存或持久存储的过程和方法\",{\"1\":{\"40\":1}}],[\"切点\",{\"1\":{\"64\":1}}],[\"切面在特定连接点上执行的操作\",{\"1\":{\"64\":1}}],[\"切面在这些点上执行它的操作\",{\"1\":{\"64\":1}}],[\"切面\",{\"1\":{\"64\":1}}],[\"切面编程\",{\"0\":{\"63\":1}}],[\"程序员是要不断学习的\",{\"1\":{\"150\":1}}],[\"程序员就像赛车手一样\",{\"1\":{\"22\":1}}],[\"程序执行过程中明确的点\",{\"1\":{\"64\":1}}],[\"连接参数后就可以很方便的使用了\",{\"1\":{\"177\":1}}],[\"连接点\",{\"1\":{\"64\":1}}],[\"连比尔\",{\"1\":{\"1\":1}}],[\"权限等功能场景\",{\"1\":{\"64\":1}}],[\"安全性\",{\"1\":{\"161\":1}}],[\"安全性和权限控制和监控和告警\",{\"1\":{\"159\":1}}],[\"安全控制\",{\"1\":{\"140\":1,\"148\":1}}],[\"安全\",{\"1\":{\"64\":1}}],[\"安装成功后\",{\"1\":{\"37\":1}}],[\"安装的话会有一些初始化操作的步骤\",{\"1\":{\"37\":1}}],[\"事务管理\",{\"1\":{\"148\":1}}],[\"事务管理等\",{\"1\":{\"140\":1}}],[\"事务\",{\"1\":{\"64\":1}}],[\"事件通知\",{\"1\":{\"161\":1}}],[\"事件消息总线\",{\"1\":{\"152\":1}}],[\"事件驱动的系统和消息队列等场景\",{\"1\":{\"28\":1}}],[\"事件发布者\",{\"1\":{\"28\":1}}],[\"事件上下文可以作为事件对象的一部分\",{\"1\":{\"27\":1}}],[\"事件上下文是事件发生时的上下文信息\",{\"1\":{\"27\":1}}],[\"事件上下文\",{\"1\":{\"27\":1}}],[\"事件源可以是任何对象\",{\"1\":{\"27\":1}}],[\"事件源是触发事件的对象或组件\",{\"1\":{\"27\":1}}],[\"事件源\",{\"1\":{\"27\":1}}],[\"事件对象会被发布\",{\"1\":{\"27\":1}}],[\"事件对象中包含了相关的数据和信息\",{\"1\":{\"27\":1}}],[\"事件\",{\"1\":{\"27\":1}}],[\"脑海中想到的只有零零散散的面试题\",{\"1\":{\"64\":1}}],[\"活还是得照干\",{\"1\":{\"61\":1}}],[\"归\",{\"1\":{\"61\":1}}],[\"强大的任务库和可拓展性这些优点放在现在就是一句话\",{\"1\":{\"60\":1}}],[\"简单配置\",{\"0\":{\"165\":1,\"168\":1}}],[\"简单来说就是它提供了一种灵活的方式来在不修改目标对象源代码的情况下\",{\"1\":{\"140\":1}}],[\"简单易用\",{\"1\":{\"60\":1}}],[\"简直不要太方便\",{\"1\":{\"34\":1}}],[\"简直不要太友好\",{\"1\":{\"15\":1}}],[\"跨平台\",{\"1\":{\"60\":1}}],[\"十分相像\",{\"1\":{\"60\":1}}],[\"十分易于理解\",{\"1\":{\"15\":1}}],[\"里也给出了官方推荐的组件配合建议\",{\"1\":{\"152\":1}}],[\"里面的步骤也是根据一个个的命令标签从上到下执行的\",{\"1\":{\"60\":1}}],[\"里面的示例大部分都还在基于\",{\"1\":{\"12\":1}}],[\"里的文件\",{\"1\":{\"96\":1}}],[\"里的价格字段都是\",{\"1\":{\"86\":1}}],[\"里的\",{\"1\":{\"60\":1}}],[\"执行速度快\",{\"1\":{\"132\":1}}],[\"执行失败时的回调\",{\"1\":{\"121\":1}}],[\"执行成功时的回调\",{\"1\":{\"121\":1}}],[\"执行自定义逻辑来更新用户对象\",{\"1\":{\"81\":1}}],[\"执行自定义的逻辑来修改用户对象\",{\"1\":{\"81\":1}}],[\"执行任务\",{\"1\":{\"60\":1}}],[\"执行下面命令即可下载最新安装脚本并自动进行安装\",{\"1\":{\"36\":1}}],[\"定期获取价格文件\",{\"0\":{\"91\":1}}],[\"定期清理审批单\",{\"0\":{\"90\":1}}],[\"定时检查系统运行状况\",{\"1\":{\"88\":1}}],[\"定时检查并释放资源\",{\"1\":{\"88\":1}}],[\"定时执行自动化测试\",{\"1\":{\"88\":1}}],[\"定时清理缓存\",{\"1\":{\"88\":1}}],[\"定时统计业务数据\",{\"1\":{\"88\":1}}],[\"定时备份数据库\",{\"1\":{\"88\":1}}],[\"定时任务\",{\"0\":{\"87\":1},\"1\":{\"88\":2}}],[\"定义接口和实现类\",{\"1\":{\"144\":1}}],[\"定义拦截方法\",{\"1\":{\"117\":1}}],[\"定义一个对象\",{\"1\":{\"117\":1}}],[\"定义一个\",{\"1\":{\"110\":1}}],[\"定义字符串常量的时候\",{\"1\":{\"107\":1}}],[\"定义常量\",{\"0\":{\"107\":1}}],[\"定义对象\",{\"1\":{\"106\":2,\"116\":1}}],[\"定义对象唯一属性名的时候\",{\"1\":{\"106\":1}}],[\"定义当调用\",{\"1\":{\"74\":1,\"81\":1}}],[\"定义模拟对象方法的行为\",{\"1\":{\"74\":1}}],[\"定义模拟对象的行为以及验证方法的调用变得非常容易\",{\"1\":{\"68\":1}}],[\"定义任务\",{\"1\":{\"60\":1}}],[\"定义属性\",{\"1\":{\"60\":2}}],[\"定位和\",{\"1\":{\"10\":1}}],[\"8110\",{\"1\":{\"168\":1}}],[\"8\",{\"1\":{\"60\":1}}],[\"8080\",{\"1\":{\"43\":1}}],[\"先列举一个简单的java项目打\",{\"1\":{\"60\":1}}],[\"言归正传\",{\"1\":{\"60\":1,\"151\":1}}],[\"拥抱\",{\"1\":{\"60\":1}}],[\"拥有更多样的协作流程将更有利于我们管理项目\",{\"1\":{\"14\":1}}],[\"直到自己负责这些项目打包上线的时候\",{\"1\":{\"60\":1}}],[\"直到现在我看到某种设计模式还会想到当时书中的案例\",{\"1\":{\"17\":1}}],[\"认识到ant还是因为刚步入社会的公司里总有些老旧的纯\",{\"1\":{\"60\":1}}],[\"讲在最后\",{\"0\":{\"58\":1}}],[\"评审\",{\"1\":{\"57\":1}}],[\"很强\",{\"1\":{\"68\":1}}],[\"很早一个需求闲置了好几次上线\",{\"1\":{\"57\":1}}],[\"很多同学他们在公司的工作都是全栈的职责\",{\"1\":{\"31\":1}}],[\"很多软件不支持这种\",{\"1\":{\"18\":1}}],[\"很多数据库也可以配合前端直接使用\",{\"1\":{\"9\":1}}],[\"很多结构或者框架以后难免要升级\",{\"1\":{\"2\":1}}],[\"每日一题\",{\"0\":{\"190\":1}}],[\"每执行一个方法就会往栈中插入一个栈帧\",{\"1\":{\"136\":1}}],[\"每晚八点如果是今日获取价格文件的状态为\",{\"1\":{\"91\":1}}],[\"每份考生的材料同一时间只能被一位审核人审核\",{\"1\":{\"90\":1}}],[\"每个元素都是单个结构\",{\"1\":{\"199\":1}}],[\"每个元素有且仅有一个直接后继\",{\"1\":{\"199\":1}}],[\"每个元素有且仅有一个直接前驱\",{\"1\":{\"199\":1}}],[\"每个元素占用最小的存储空间\",{\"1\":{\"196\":1}}],[\"每个微服务在启动时向注册中心注册自己的信息\",{\"1\":{\"158\":1}}],[\"每个服务都有自己的数据库和业务逻辑\",{\"1\":{\"151\":1}}],[\"每个处理器会嗅探总线上传播的数据检查自己的数据是否时最新的\",{\"1\":{\"128\":1}}],[\"每个审核人在审核时会从库里捞十个未审核的考生材料出来进行审核\",{\"1\":{\"90\":1}}],[\"每个都需要发起到\",{\"1\":{\"57\":1}}],[\"每次上线后都需要添加tag\",{\"1\":{\"55\":1}}],[\"每次上包只包含代码\",{\"1\":{\"49\":1}}],[\"每次开发完毕合并的时候需要使用\",{\"1\":{\"53\":1}}],[\"每次更新这个部分的文章我都头疼\",{\"1\":{\"3\":1}}],[\"未知时间上线需求\",{\"1\":{\"57\":1}}],[\"删除结点\",{\"0\":{\"210\":1}}],[\"删除操作\",{\"1\":{\"200\":1}}],[\"删除\",{\"1\":{\"57\":1}}],[\"待上线完成之后\",{\"1\":{\"57\":1}}],[\"审核的规则是这样的\",{\"1\":{\"90\":1}}],[\"审核不通过则继续在\",{\"1\":{\"57\":1}}],[\"审批通过后合并分支并删除\",{\"1\":{\"57\":1}}],[\"从而使逻辑上相邻的两个元素在物理位置上也相邻\",{\"1\":{\"202\":1}}],[\"从而在管理界面上展示和监控这些数据\",{\"1\":{\"161\":1}}],[\"从而实现服务的发现和调用\",{\"1\":{\"158\":1}}],[\"从而避免了不必要的对象创建和初始化过程\",{\"1\":{\"140\":1}}],[\"从而为异步编程提供解决方案\",{\"1\":{\"122\":1}}],[\"从图中来看\",{\"1\":{\"136\":1}}],[\"从抽象的角度来讲\",{\"1\":{\"136\":1}}],[\"从它可以获取异步操作的消息\",{\"1\":{\"121\":1}}],[\"从\",{\"1\":{\"57\":4,\"133\":1}}],[\"从develop创建\",{\"1\":{\"57\":4}}],[\"四月十三日上线需求\",{\"1\":{\"57\":1}}],[\"再加上敏捷开发和交付的出现\",{\"1\":{\"151\":1}}],[\"再执行\",{\"1\":{\"66\":1}}],[\"再从该release分支下创建对应开发功能的feature分支进行开发\",{\"1\":{\"56\":1}}],[\"再之后就是前端基本功了\",{\"1\":{\"32\":1}}],[\"需求是这样的\",{\"1\":{\"86\":1}}],[\"需求较少也不固定并且不强制必须上线的情况\",{\"1\":{\"56\":1}}],[\"需要在实时性和性能之间做折中\",{\"1\":{\"157\":1}}],[\"需要更快速\",{\"1\":{\"151\":1}}],[\"需要定义一个接口\",{\"1\":{\"144\":1}}],[\"需要我们将日志和前台界面的客户信息进行加密处理\",{\"1\":{\"66\":1}}],[\"需要和并到master和develop分支\",{\"1\":{\"55\":1}}],[\"需要基于本次上线将所有功能整合\",{\"1\":{\"55\":1}}],[\"需要手工输入命令安装各类软件\",{\"1\":{\"34\":1}}],[\"需要合理设计观察者和被观察者的接口\",{\"1\":{\"28\":1}}],[\"需要通知其他模块或组件进行相应的处理\",{\"1\":{\"28\":1}}],[\"需要通知多个其他对象进行相应的处理\",{\"1\":{\"28\":1}}],[\"需要使用\",{\"1\":{\"27\":1}}],[\"需要注意的是\",{\"1\":{\"27\":1,\"28\":1}}],[\"等\",{\"1\":{\"170\":1}}],[\"等原子类将当前值加一减一\",{\"1\":{\"133\":1}}],[\"等我用明白了再说\",{\"1\":{\"123\":1}}],[\"等类型\",{\"1\":{\"64\":1}}],[\"等待确定上线日期后\",{\"1\":{\"57\":1}}],[\"等上线日期确定后再创建release分支并合并进去\",{\"1\":{\"56\":1}}],[\"等到release分支已经完全测试完毕\",{\"1\":{\"56\":1}}],[\"等整个文件的翻译\",{\"1\":{\"19\":1}}],[\"来实现负载均衡\",{\"1\":{\"138\":1}}],[\"来自\",{\"1\":{\"95\":1}}],[\"来演示一下\",{\"1\":{\"66\":1}}],[\"来包含这些关注点\",{\"1\":{\"64\":1}}],[\"来完成自己的功能开发\",{\"1\":{\"56\":1}}],[\"来选择重构\",{\"1\":{\"45\":1}}],[\"既然只有master一条分支\",{\"1\":{\"56\":1}}],[\"促进开发的效率和默契\",{\"1\":{\"56\":1}}],[\"码云也提了创建仓库时候选择多分支的选项\",{\"1\":{\"56\":1}}],[\"准备多环境配置并完善打包脚本\",{\"1\":{\"56\":1}}],[\"开放授权\",{\"1\":{\"182\":1}}],[\"开始\",{\"1\":{\"133\":1}}],[\"开始做项目了\",{\"1\":{\"95\":1}}],[\"开始在master分支构建代码\",{\"1\":{\"56\":1}}],[\"开始搭建项目\",{\"1\":{\"56\":1}}],[\"开发问题\",{\"0\":{\"92\":1}}],[\"开发完成后创建到\",{\"1\":{\"57\":1}}],[\"开发完成后提交到中心仓库并创建从\",{\"1\":{\"57\":1}}],[\"开发完成单独测试完成后\",{\"1\":{\"57\":1}}],[\"开发完毕后合并到release分支等待上线\",{\"1\":{\"56\":1}}],[\"开发测试完成后合并到develop分支\",{\"1\":{\"56\":1}}],[\"开发分支\",{\"1\":{\"55\":1}}],[\"开发规约\",{\"1\":{\"53\":1}}],[\"开发了\",{\"1\":{\"53\":1}}],[\"开发\",{\"1\":{\"32\":1}}],[\"开发技能\",{\"0\":{\"29\":1}}],[\"开发中还用得到\",{\"1\":{\"150\":1}}],[\"开发中\",{\"1\":{\"28\":1}}],[\"开发工具\",{\"0\":{\"20\":1}}],[\"方便系统的跟踪和调试\",{\"1\":{\"140\":1}}],[\"方便其他审核人去拿到这些可能存在不能及时审批隐患的材料\",{\"1\":{\"90\":1}}],[\"方便前台展示\",{\"1\":{\"86\":1}}],[\"方便项目未来的对接和开发\",{\"1\":{\"56\":1}}],[\"方法创建代理对象\",{\"1\":{\"144\":1}}],[\"方法创建代理对象并执行目标方法\",{\"1\":{\"143\":1}}],[\"方法中\",{\"1\":{\"143\":1}}],[\"方法中必须有\",{\"1\":{\"119\":1}}],[\"方法定义参数和异常处理器参数不会在线程之间共享\",{\"1\":{\"136\":1}}],[\"方法接收两个函数作为参数\",{\"1\":{\"121\":1}}],[\"方法使用\",{\"1\":{\"121\":1}}],[\"方法间也不能加分号\",{\"1\":{\"119\":1}}],[\"方法和字段等信息\",{\"1\":{\"84\":1}}],[\"方法可以获取字段对象\",{\"1\":{\"84\":1}}],[\"方法可以获取方法对象\",{\"1\":{\"84\":1}}],[\"方法可以获取构造函数对象\",{\"1\":{\"84\":1}}],[\"方法\",{\"1\":{\"84\":1,\"122\":1,\"175\":1}}],[\"方法时\",{\"1\":{\"81\":1}}],[\"方法并传入任何参数时\",{\"1\":{\"80\":1}}],[\"方法并传入参数\",{\"1\":{\"74\":1}}],[\"方法从未被调用\",{\"1\":{\"78\":1}}],[\"方法被调用了至少3次\",{\"1\":{\"77\":1}}],[\"方法被调用了2次\",{\"1\":{\"76\":1}}],[\"方法是否被调用\",{\"1\":{\"75\":1}}],[\"方法二\",{\"1\":{\"66\":1}}],[\"方法一\",{\"1\":{\"66\":1}}],[\"方法获取到环境变量的\",{\"1\":{\"50\":1}}],[\"保持扁平化\",{\"1\":{\"121\":1}}],[\"保持项目的干净整洁\",{\"1\":{\"56\":1}}],[\"保证develop分支是最新功能的稳定分支\",{\"1\":{\"56\":1}}],[\"保存当前最新开发成果的稳定分支\",{\"1\":{\"55\":1}}],[\"迁移或创建git仓库步骤如下\",{\"1\":{\"56\":1}}],[\"迁移步骤\",{\"1\":{\"53\":1}}],[\"则表示一个空表\",{\"1\":{\"205\":1}}],[\"则直接返回缓存的结果\",{\"1\":{\"148\":1}}],[\"则直接返回结果\",{\"1\":{\"140\":1}}],[\"则后面的会覆盖前面的\",{\"1\":{\"111\":1}}],[\"则后续开发完成后再提交到develop分支再合并到release分支上\",{\"1\":{\"56\":1}}],[\"则会浪费多余的审批时间\",{\"1\":{\"90\":1}}],[\"则可以在\",{\"1\":{\"66\":1}}],[\"则可以删除release分支\",{\"1\":{\"56\":1}}],[\"则推荐使用\",{\"1\":{\"66\":1}}],[\"则是基于\",{\"1\":{\"64\":1}}],[\"则是用下面这种方式读取配置的\",{\"1\":{\"50\":1}}],[\"则先从develop分支上拉取feature分支开发\",{\"1\":{\"56\":1}}],[\"则将release分支合并到master分支上并创建tag\",{\"1\":{\"56\":1}}],[\"则需要从最新的tag目录下将代码拷贝过来\",{\"1\":{\"56\":1}}],[\"则需要根据之后的开发规则重新手动合并到新的git仓库中来\",{\"1\":{\"56\":1}}],[\"舍弃ver和branch文件下的未上线功能代码和备份\",{\"1\":{\"56\":1}}],[\"预上线分支\",{\"1\":{\"55\":1}}],[\"功能\",{\"1\":{\"71\":1}}],[\"功能落后了好几个上线版本\",{\"1\":{\"57\":1}}],[\"功能完成并合并之后可选删除\",{\"1\":{\"55\":1}}],[\"功能分支\",{\"1\":{\"55\":1}}],[\"见名知意\",{\"1\":{\"55\":1,\"140\":1}}],[\"建议创建readme\",{\"1\":{\"56\":1}}],[\"建议只能合并测试后可运行的的稳定分支\",{\"1\":{\"55\":1}}],[\"建议用\",{\"1\":{\"55\":1}}],[\"命令所在的代码块内有效\",{\"1\":{\"100\":1}}],[\"命令参考\",{\"1\":{\"15\":1}}],[\"命名类\",{\"1\":{\"119\":1}}],[\"命名建议使用解决人\",{\"1\":{\"55\":1}}],[\"命名建议使用姓名和功能介绍组成\",{\"1\":{\"55\":1}}],[\"命名建议根据上线日期决定\",{\"1\":{\"55\":1}}],[\"命名\",{\"1\":{\"55\":1}}],[\"足够当时我们团队平时开发使用了\",{\"1\":{\"53\":1}}],[\"况且很多项目自己没有接触了解过\",{\"1\":{\"53\":1}}],[\"况且计算机这个行业在当下这个社会也是充满了功利的气息\",{\"1\":{\"11\":1}}],[\"自动化发布等任务\",{\"1\":{\"88\":1}}],[\"自动化任务\",{\"1\":{\"88\":1}}],[\"自动化测试\",{\"1\":{\"60\":1}}],[\"自定义注解\",{\"1\":{\"84\":1}}],[\"自己能力再大也不会说一个人就把整个仓库都给迁移了\",{\"1\":{\"53\":1}}],[\"自从\",{\"1\":{\"14\":1}}],[\"现在让我做项目\",{\"1\":{\"150\":1}}],[\"现在数据类型有\",{\"1\":{\"104\":1}}],[\"现在想想当时确实是激情澎湃\",{\"1\":{\"53\":1}}],[\"现在工作了之后才明白这种趋势在内卷的环境下越来越明显了\",{\"1\":{\"31\":1}}],[\"创造了三个不同的目录\",{\"1\":{\"53\":1}}],[\"创建enhancer实例\",{\"1\":{\"147\":1}}],[\"创建目标对象\",{\"1\":{\"144\":1}}],[\"创建代理对象\",{\"1\":{\"144\":2,\"147\":1}}],[\"创建了一个\",{\"1\":{\"143\":1}}],[\"创建\",{\"1\":{\"57\":3,\"144\":1}}],[\"创建的\",{\"1\":{\"32\":1}}],[\"创建一个被代理的类\",{\"1\":{\"147\":1}}],[\"创建一个实现\",{\"1\":{\"144\":1}}],[\"创建一个定时任务每过五分钟就遍历一下表中当前批次下已经在审核中状态超过半个小时的材料并重新将其置为未审核的状态\",{\"1\":{\"90\":1}}],[\"创建一个模拟对象\",{\"1\":{\"73\":1}}],[\"创建一个事件监听器类myeventlistener\",{\"1\":{\"27\":1}}],[\"创建一个事件源类myeventpublisher\",{\"1\":{\"27\":1}}],[\"创建一个具体的发布者和两个具体的订阅者来测试\",{\"1\":{\"26\":1}}],[\"创建一个发布者类\",{\"1\":{\"26\":1}}],[\"创建订阅者类\",{\"1\":{\"26\":1}}],[\"因此在链表的第一个位置上的操作和在表中其他位置的操作一致\",{\"1\":{\"205\":1}}],[\"因此\",{\"1\":{\"161\":1}}],[\"因此代理类可以代理目标类中的所有方法\",{\"1\":{\"141\":1}}],[\"因此代理类只能代理接口中定义的方法\",{\"1\":{\"141\":1}}],[\"因此我们为了实现\",{\"1\":{\"53\":1}}],[\"因第五个than只能接受\",{\"1\":{\"121\":1}}],[\"因为框架过于繁杂\",{\"1\":{\"152\":1}}],[\"因为锁不可降级的特性在\",{\"1\":{\"131\":1}}],[\"因为上一个then方法返回的是一个reject状态的promise\",{\"1\":{\"121\":1}}],[\"因为我们大部分项目都是纯后台\",{\"1\":{\"66\":1}}],[\"因为避免临时不上或者上线失败回退而导致污染了develop和master\",{\"1\":{\"56\":1}}],[\"因为确实项目太多了\",{\"1\":{\"53\":1}}],[\"因为\",{\"1\":{\"53\":1,\"57\":1,\"106\":1}}],[\"因为有些产品的价格是我们不需要的\",{\"1\":{\"46\":1}}],[\"因为自己主要是使用\",{\"1\":{\"32\":1}}],[\"因为其实现存在一些问题和局限性\",{\"1\":{\"25\":1}}],[\"因为是订阅型的\",{\"1\":{\"21\":1}}],[\"因为算法大部分都是基于大量的数据结构组合而成的\",{\"1\":{\"6\":1}}],[\"多分支的结构\",{\"1\":{\"53\":1}}],[\"终于我们要开始使用\",{\"1\":{\"53\":1}}],[\"平台的浪潮下\",{\"1\":{\"53\":1}}],[\"仓库中可以看到\",{\"1\":{\"152\":1}}],[\"仓库的时候\",{\"1\":{\"53\":1}}],[\"仓库和\",{\"1\":{\"53\":1}}],[\"仓库听说是接手的上家公司的原因才保留至今的\",{\"1\":{\"53\":1}}],[\"仓库\",{\"0\":{\"53\":1}}],[\"糟糕的\",{\"0\":{\"53\":1}}],[\"无论链表是否为空\",{\"1\":{\"205\":1}}],[\"无论是背面试题还是源码当中它都无处不在\",{\"1\":{\"138\":1}}],[\"无论是原始值或者是对象引用\",{\"1\":{\"112\":1}}],[\"无论是\",{\"1\":{\"50\":1}}],[\"无需在服务器端存储会话信息\",{\"1\":{\"179\":1}}],[\"无需实现任何接口\",{\"1\":{\"147\":1}}],[\"无需进行额外的处理\",{\"1\":{\"131\":1}}],[\"无状态锁\",{\"1\":{\"129\":1}}],[\"无输出\",{\"1\":{\"106\":1}}],[\"无非是放在哪里用是了\",{\"1\":{\"89\":1}}],[\"无非是包含了关于用户的\",{\"1\":{\"71\":1}}],[\"无非也是商店和官网两个下载途径\",{\"1\":{\"18\":1}}],[\"让我们聊一下它的底层原理\",{\"1\":{\"128\":1}}],[\"让我们从\",{\"1\":{\"127\":1}}],[\"让对象原型的写法更加清晰\",{\"1\":{\"119\":1}}],[\"让\",{\"1\":{\"50\":1}}],[\"让多台环境不用重复配置相同的配置\",{\"1\":{\"49\":1}}],[\"把逻辑上相邻的元素存储在物理地址也相邻的存储单元中\",{\"1\":{\"196\":1}}],[\"把函数的执行流挂起\",{\"1\":{\"122\":1}}],[\"把它作为一个干净的单文件组件来写第一个\",{\"1\":{\"96\":1}}],[\"把要处理返回值的方法作为切点托管\",{\"1\":{\"66\":1}}],[\"把项目中的\",{\"1\":{\"50\":1}}],[\"把我觉得还不错的资源分享出来让更多的人看到\",{\"1\":{\"1\":1}}],[\"<groupid>de\",{\"1\":{\"164\":1,\"167\":1}}],[\"<groupid>org\",{\"1\":{\"164\":1,\"167\":1}}],[\"<groupid>cglib<\",{\"1\":{\"147\":1}}],[\"<version>3\",{\"1\":{\"147\":1}}],[\"<dependency>\",{\"1\":{\"147\":1,\"164\":2,\"167\":2}}],[\"<dependencies>\",{\"1\":{\"147\":1}}],[\"<delete\",{\"1\":{\"60\":2}}],[\"<artifactid>spring\",{\"1\":{\"164\":2,\"167\":2}}],[\"<artifactid>cglib<\",{\"1\":{\"147\":1}}],[\"<arg\",{\"1\":{\"62\":3}}],[\"<attribute\",{\"1\":{\"60\":1,\"62\":1}}],[\"<exec\",{\"1\":{\"62\":1}}],[\"<manifest\",{\"1\":{\"62\":1}}],[\"<manifest>\",{\"1\":{\"60\":1}}],[\"<mkdir\",{\"1\":{\"60\":2}}],[\"<jar\",{\"1\":{\"60\":1}}],[\"<javac\",{\"1\":{\"60\":1}}],[\"<target\",{\"1\":{\"60\":3,\"62\":1}}],[\"<project\",{\"1\":{\"60\":1}}],[\"<property\",{\"1\":{\"50\":1,\"60\":4}}],[\"<\",{\"1\":{\"50\":1,\"60\":9,\"62\":3,\"100\":2,\"147\":3,\"164\":2,\"167\":2,\"188\":6}}],[\"<bean\",{\"1\":{\"50\":1}}],[\">\",{\"0\":{\"73\":1},\"1\":{\"50\":2,\"60\":18,\"62\":7,\"81\":1,\"86\":4,\"147\":1}}],[\"$\",{\"1\":{\"50\":1,\"60\":9,\"62\":1}}],[\"xxx\",{\"1\":{\"120\":1}}],[\"x\",{\"1\":{\"103\":6,\"113\":4}}],[\"xml文件就已经逐渐被\",{\"1\":{\"60\":1}}],[\"xml\",{\"1\":{\"50\":1,\"60\":3}}],[\"x86\",{\"1\":{\"18\":1}}],[\"基于这五种特性\",{\"1\":{\"186\":1}}],[\"基于这种特性\",{\"1\":{\"179\":1}}],[\"基于类实现动态代理\",{\"0\":{\"145\":1}}],[\"基于类的动态代理\",{\"1\":{\"141\":1}}],[\"基于第三方库如cglib\",{\"1\":{\"141\":1}}],[\"基于接口实现动态代理\",{\"0\":{\"142\":1}}],[\"基于接口生成代理类\",{\"1\":{\"141\":1}}],[\"基于接口的动态代理适用于那些已经实现了接口的目标对象\",{\"1\":{\"141\":1}}],[\"基于接口的动态代理要求目标对象实现接口\",{\"1\":{\"141\":1}}],[\"基于接口的动态代理\",{\"1\":{\"141\":1}}],[\"基于接口的动态代理和基于类的动态代理\",{\"1\":{\"141\":1}}],[\"基于java的java\",{\"1\":{\"141\":1}}],[\"基于master分支新建develop分支\",{\"1\":{\"56\":1}}],[\"基于master分支创建\",{\"1\":{\"55\":1}}],[\"基本操作\",{\"0\":{\"200\":1}}],[\"基本定义\",{\"0\":{\"199\":1}}],[\"基本概念和术语\",{\"0\":{\"193\":1}}],[\"基本语法是\",{\"1\":{\"118\":1}}],[\"基本\",{\"1\":{\"102\":1,\"103\":1}}],[\"基本搜索\",{\"1\":{\"84\":1}}],[\"基本都是打\",{\"1\":{\"49\":1}}],[\"基础不牢\",{\"1\":{\"150\":1}}],[\"基础\",{\"0\":{\"183\":1},\"1\":{\"12\":1}}],[\"上的受保护资源\",{\"1\":{\"182\":1}}],[\"上的所有方法已经被验证\",{\"1\":{\"79\":1}}],[\"上面的写法其实并不能保证唯一性\",{\"1\":{\"107\":1}}],[\"上开发\",{\"1\":{\"57\":1}}],[\"上并删除\",{\"1\":{\"57\":1}}],[\"上线部署只需要从master创建tag发布即可\",{\"1\":{\"56\":1}}],[\"上线后master标记tag后可选删除\",{\"1\":{\"55\":1}}],[\"上线日期和bug内容决定\",{\"1\":{\"55\":1}}],[\"上线日期\",{\"1\":{\"55\":1}}],[\"上是为了方便集中管理\",{\"1\":{\"49\":1}}],[\"上图中的是2022年发行的第二版\",{\"1\":{\"17\":1}}],[\"另一个线程可以读到这个变量值\",{\"1\":{\"128\":1}}],[\"另一个是\",{\"1\":{\"110\":4}}],[\"另一种就是放在环境变量中\",{\"1\":{\"49\":1}}],[\"另外\",{\"1\":{\"25\":1,\"161\":1}}],[\"具体详情见其官网文档\",{\"1\":{\"154\":1}}],[\"具体有以下三种锁\",{\"1\":{\"129\":1}}],[\"具体实现\",{\"0\":{\"47\":1}}],[\"具体的订阅者类\",{\"1\":{\"26\":1}}],[\"具体的发布者类\",{\"1\":{\"26\":1}}],[\"与此相区别的定义是头结点\",{\"1\":{\"205\":1}}],[\"与此伴随的各行各业要被替代的恐慌也开始蔓延\",{\"1\":{\"1\":1}}],[\"与应用程序进行交互和管理\",{\"1\":{\"161\":1}}],[\"与之对应\",{\"1\":{\"129\":1}}],[\"与导入\",{\"1\":{\"120\":1}}],[\"与\",{\"0\":{\"100\":1,\"108\":1,\"114\":1},\"1\":{\"111\":1,\"119\":1,\"125\":1}}],[\"与多种测试框架\",{\"1\":{\"71\":1}}],[\"与交易所建立通讯之后\",{\"1\":{\"46\":1}}],[\"kvarray\",{\"1\":{\"111\":2}}],[\"key2\",{\"1\":{\"111\":2}}],[\"keyfunc\",{\"1\":{\"109\":2}}],[\"keyfor\",{\"1\":{\"107\":2}}],[\"keyobj\",{\"1\":{\"109\":2}}],[\"key\",{\"1\":{\"107\":1,\"110\":6,\"115\":5,\"117\":6}}],[\"keys\",{\"1\":{\"106\":1,\"110\":1}}],[\"key1\",{\"1\":{\"106\":7,\"111\":2}}],[\"kk\",{\"1\":{\"104\":1,\"106\":3}}],[\"k线查询币种对价格波动的时候\",{\"1\":{\"86\":1}}],[\"k线平台和日终价格三个后台项目\",{\"1\":{\"46\":1}}],[\"k8s\",{\"1\":{\"38\":1}}],[\"业务流程就是在工作日时将所需要的产品价格从交易所获取并转发给报价平台\",{\"1\":{\"46\":1}}],[\"业务梳理\",{\"0\":{\"46\":1}}],[\"业内流传着\",{\"1\":{\"12\":1}}],[\"业内的人嘴上说着计算机跌落神坛可是却在疯狂内卷\",{\"1\":{\"11\":1}}],[\"置于其他的知识点就放在下面一一介绍了\",{\"1\":{\"45\":1}}],[\"类加载器\",{\"1\":{\"144\":1}}],[\"类作为代理对象的处理器\",{\"1\":{\"143\":1}}],[\"类中方法不需要\",{\"1\":{\"119\":1}}],[\"类定义不会被提升\",{\"1\":{\"119\":1}}],[\"类不可以重复声明\",{\"1\":{\"119\":1}}],[\"类似\",{\"1\":{\"116\":1}}],[\"类表示类的字段\",{\"1\":{\"84\":1}}],[\"类表示类的方法\",{\"1\":{\"84\":1}}],[\"类表示类的构造函数\",{\"1\":{\"84\":1}}],[\"类的实例化需要\",{\"1\":{\"119\":1}}],[\"类的\",{\"1\":{\"84\":3,\"143\":1,\"144\":1}}],[\"类是反射的核心类\",{\"1\":{\"84\":1}}],[\"类\",{\"0\":{\"119\":1},\"1\":{\"84\":4,\"119\":1}}],[\"类型值的\",{\"1\":{\"107\":1}}],[\"类型的字段\",{\"1\":{\"86\":2}}],[\"类型\",{\"1\":{\"50\":1}}],[\"类实现\",{\"1\":{\"45\":1}}],[\"类和\",{\"1\":{\"26\":1}}],[\"往后台项目推送价格有使用\",{\"1\":{\"45\":1}}],[\"几乎没有什么逻辑处理\",{\"1\":{\"45\":1}}],[\"几乎每个经典系列书籍中都会有讲设计模式的书\",{\"1\":{\"17\":1}}],[\"价格接收转发前置项目\",{\"1\":{\"45\":1}}],[\"趁着了解业务的人都还在和项目并不复杂的时候\",{\"1\":{\"43\":1}}],[\"部署\",{\"1\":{\"43\":1}}],[\"部署项目\",{\"1\":{\"43\":1}}],[\"核心代码如下\",{\"1\":{\"43\":1}}],[\"启动后访问项目根目录即自动跳转服务端界面\",{\"1\":{\"165\":1}}],[\"启动类增加\",{\"1\":{\"165\":1}}],[\"启动\",{\"1\":{\"43\":1,\"71\":1}}],[\"启动展示\",{\"0\":{\"37\":1}}],[\"为0即为空表\",{\"1\":{\"199\":1}}],[\"为该算法所耗费的存储空间\",{\"1\":{\"189\":1}}],[\"为改变执行流程提供了可能\",{\"1\":{\"122\":1}}],[\"为操作对象提供了一种更优雅的方式\",{\"1\":{\"116\":1}}],[\"为了建立数据元素之间的线性关系\",{\"1\":{\"205\":1}}],[\"为了能够更加灵活地开发\",{\"1\":{\"151\":1}}],[\"为了解决对锁的获得和释放待来的性能损耗\",{\"1\":{\"129\":1}}],[\"为了解决有些材料一直无人审批的情况添加了一个定时任务\",{\"1\":{\"90\":1}}],[\"为了确保共享变量能别准确和一致的更新\",{\"1\":{\"128\":1}}],[\"为了保证一定可以拿到彭博处理的数据\",{\"1\":{\"91\":1}}],[\"为了方便公用这个接口\",{\"1\":{\"86\":1}}],[\"为了追赶上线进度\",{\"1\":{\"43\":1}}],[\"为保证分支稳定可用\",{\"1\":{\"55\":1}}],[\"为首的容器化技术部署方式发展迅猛\",{\"1\":{\"38\":1}}],[\"规范什么的就更别提了\",{\"1\":{\"43\":1}}],[\"满天飞\",{\"1\":{\"43\":1}}],[\"项目依然苟延残喘\",{\"1\":{\"60\":1}}],[\"项目创建完成后\",{\"1\":{\"56\":1}}],[\"项目一切用法都规范的话\",{\"1\":{\"50\":1}}],[\"项目\",{\"1\":{\"43\":1}}],[\"纯\",{\"1\":{\"43\":1}}],[\"毒瘤\",{\"1\":{\"43\":1}}],[\"流传下来的\",{\"1\":{\"43\":1}}],[\"流水线的方式\",{\"1\":{\"38\":1}}],[\"包括微服务的网络位置\",{\"1\":{\"158\":1}}],[\"包括对方法的权限验证\",{\"1\":{\"148\":1}}],[\"包括在方法执行前开启事务\",{\"1\":{\"148\":1}}],[\"包括记录方法的执行时间\",{\"1\":{\"148\":1}}],[\"包括非公共的方法\",{\"1\":{\"141\":2}}],[\"包含了一些用户操作的方法\",{\"1\":{\"144\":1}}],[\"包的操作\",{\"1\":{\"60\":1}}],[\"包的例子\",{\"1\":{\"60\":1}}],[\"包双活部署\",{\"1\":{\"49\":1}}],[\"包部署\",{\"1\":{\"43\":1}}],[\"包启动的项目都换成\",{\"1\":{\"43\":1}}],[\"包管理工具\",{\"1\":{\"32\":1}}],[\"想要知道\",{\"1\":{\"179\":1}}],[\"想要更加详细了解\",{\"1\":{\"159\":1}}],[\"想要修改代码最好最保险\",{\"1\":{\"86\":1}}],[\"想要掌握好算法就必须在数据结构上下好功夫\",{\"1\":{\"6\":1}}],[\"想学会ant最主要的就是学会读懂构建脚本\",{\"1\":{\"60\":1}}],[\"想把之前的\",{\"1\":{\"43\":1}}],[\"持久化是计算机科学中一个重要的概念\",{\"1\":{\"40\":1}}],[\"引用该配之类的话就需要实现一个\",{\"1\":{\"176\":1}}],[\"引入头结点之后有两个优点\",{\"1\":{\"205\":1}}],[\"引入依赖\",{\"0\":{\"164\":1,\"167\":1}}],[\"引入\",{\"1\":{\"147\":1}}],[\"引入了\",{\"1\":{\"129\":1}}],[\"引入了模块化\",{\"1\":{\"120\":1}}],[\"引入了一种称为\",{\"1\":{\"32\":1}}],[\"引言\",{\"0\":{\"40\":1,\"43\":1,\"68\":1,\"138\":1,\"172\":1}}],[\"至于到底如何调用的先放在下次再谈\",{\"1\":{\"138\":1}}],[\"至于如果做到的我们得先了解这几种锁的状态才能展开\",{\"1\":{\"129\":1}}],[\"至于和第2种的区别在于\",{\"1\":{\"56\":1}}],[\"至于是不是最优解还尚且未知\",{\"1\":{\"51\":1}}],[\"至于加载\",{\"1\":{\"50\":1}}],[\"至于真的投产之后的问题还是得以后接触了才能下结论\",{\"1\":{\"38\":1}}],[\"至于为什么没有读完\",{\"1\":{\"12\":1}}],[\"d\",{\"1\":{\"103\":2}}],[\"ddd\",{\"1\":{\"103\":2}}],[\"doing\",{\"1\":{\"147\":1}}],[\"doe\",{\"1\":{\"144\":2}}],[\"done\",{\"1\":{\"122\":4}}],[\"dosomething\",{\"1\":{\"147\":2}}],[\"dos\",{\"1\":{\"111\":2}}],[\"doanswer\",{\"0\":{\"81\":1},\"1\":{\"81\":1}}],[\"doafterreturning\",{\"1\":{\"66\":1}}],[\"dothrow\",{\"0\":{\"80\":1},\"1\":{\"80\":1}}],[\"docker\",{\"1\":{\"38\":1}}],[\"data\",{\"0\":{\"171\":1},\"1\":{\"66\":1,\"177\":1,\"205\":5}}],[\"disconf\",{\"1\":{\"159\":1}}],[\"dist\",{\"1\":{\"60\":5}}],[\"difference\",{\"1\":{\"113\":1}}],[\"dir=\",{\"1\":{\"60\":4}}],[\"dir\",{\"1\":{\"60\":11}}],[\"db\",{\"1\":{\"40\":1}}],[\"dependency>\",{\"1\":{\"147\":1,\"164\":2,\"167\":2}}],[\"dependencies>\",{\"1\":{\"147\":1}}],[\"dependencies\",{\"1\":{\"147\":1}}],[\"depends=\",{\"1\":{\"60\":2}}],[\"deleting\",{\"1\":{\"144\":1}}],[\"deleteuser\",{\"1\":{\"80\":2,\"144\":3}}],[\"deleteproduct\",{\"1\":{\"57\":3}}],[\"default\",{\"1\":{\"120\":3}}],[\"default=\",{\"1\":{\"60\":1}}],[\"defineproperty\",{\"1\":{\"106\":1}}],[\"demo\",{\"1\":{\"66\":1,\"95\":1,\"96\":2,\"125\":1,\"148\":1,\"198\":1}}],[\"destorylist\",{\"1\":{\"200\":1}}],[\"destfile=\",{\"1\":{\"60\":1}}],[\"destdir=\",{\"1\":{\"60\":1}}],[\"design\",{\"0\":{\"17\":1,\"216\":1},\"1\":{\"17\":2}}],[\"development\",{\"0\":{\"215\":1,\"217\":1}}],[\"develop\",{\"1\":{\"55\":1}}],[\"dev\",{\"1\":{\"53\":1}}],[\"devops\",{\"1\":{\"53\":1}}],[\"deepl\",{\"0\":{\"19\":1}}],[\"像百度的\",{\"1\":{\"159\":1}}],[\"像现在类似oss和一些高性能的架构的出现\",{\"1\":{\"90\":1}}],[\"像这种可视化的运维管理界面确实降低了服务器部署服务的难度\",{\"1\":{\"38\":1}}],[\"像大话系列\",{\"1\":{\"17\":1}}],[\"慢慢的才觉得可视化是真香啊\",{\"1\":{\"38\":1}}],[\"刚开始工作的时候谁写测试类啊\",{\"1\":{\"68\":1}}],[\"刚开始接触的时候确实有点痛啊\",{\"1\":{\"53\":1}}],[\"刚接触\",{\"1\":{\"38\":1}}],[\"刚从\",{\"1\":{\"18\":1}}],[\"那我们就需要知道如何实现动态代理了\",{\"1\":{\"140\":1}}],[\"那我应该也算是半个运维吧\",{\"1\":{\"38\":1}}],[\"那么在释放锁时可以直接将锁的状态改为未锁定状态\",{\"1\":{\"131\":1}}],[\"那可能当你想测试的时候就会发现代码中有其他人提交不全的代码\",{\"1\":{\"56\":1}}],[\"那说不上是真的了解你的业务\",{\"1\":{\"31\":1}}],[\"生态系统无缝集成\",{\"1\":{\"154\":1}}],[\"生态系统中的标准包管理工具\",{\"1\":{\"32\":1}}],[\"生成的代理类可以代理目标类中的所有方法\",{\"1\":{\"141\":1}}],[\"生成的代理类只能代理接口中的方法\",{\"1\":{\"141\":1}}],[\"生产安全可靠\",{\"0\":{\"38\":1}}],[\"暂无权限访问\",{\"1\":{\"37\":1}}],[\"界面会出现访问服务的网址\",{\"1\":{\"37\":1}}],[\"界面也很简洁\",{\"1\":{\"19\":1}}],[\"目标对象实现的接口数组\",{\"1\":{\"144\":1}}],[\"目录在设计的的时候就模仿了\",{\"1\":{\"53\":1}}],[\"目录下的\",{\"1\":{\"36\":1}}],[\"目前提到安全框架\",{\"1\":{\"184\":1}}],[\"目前网站上支持的第三方登录就是\",{\"1\":{\"182\":1}}],[\"目前市面上现在针对配置中心和注册中心分别都有很多产品\",{\"1\":{\"159\":1}}],[\"目前在工作中的上线模式还是\",{\"1\":{\"38\":1}}],[\"目前肯定还是\",{\"1\":{\"32\":1}}],[\"目前\",{\"1\":{\"11\":1,\"12\":1}}],[\"下一个节点的指针\",{\"1\":{\"205\":1}}],[\"下线\",{\"1\":{\"161\":1}}],[\"下载前注意一下服务器用户是否有足够权限\",{\"1\":{\"36\":1}}],[\"下面是之前\",{\"1\":{\"179\":1}}],[\"下面是工作上项目打包的一些需求记录\",{\"1\":{\"61\":1}}],[\"下面是数据库排行网站\",{\"1\":{\"40\":1}}],[\"下面我拿\",{\"1\":{\"66\":1}}],[\"下面我整理一下我自己在用的不错的开发工具给大家参考一下\",{\"1\":{\"20\":1}}],[\"下面我会分享一些我觉得值得一读的和数据库有关的书\",{\"1\":{\"9\":1}}],[\"下面的链接是一个\",{\"1\":{\"15\":1}}],[\"环境准备和下载\",{\"0\":{\"36\":1}}],[\"快速开始\",{\"0\":{\"35\":1,\"69\":1,\"96\":1,\"99\":1,\"162\":1,\"173\":1}}],[\"横空出世\",{\"1\":{\"34\":1}}],[\"横空出世之后\",{\"1\":{\"14\":1}}],[\"聊聊反射\",{\"0\":{\"84\":1}}],[\"聊聊运维面板\",{\"0\":{\"34\":1}}],[\"聊聊前端\",{\"0\":{\"30\":1}}],[\"坚持实践和不断积累经验才是成为优秀开发人员的关键\",{\"1\":{\"32\":1}}],[\"隔行如隔山\",{\"1\":{\"32\":1}}],[\"市面上现在使用率上感觉还是\",{\"1\":{\"32\":1}}],[\"官网也告诉了我们什么是\",{\"1\":{\"179\":1}}],[\"官网也是推荐开发使用组合式\",{\"1\":{\"95\":1}}],[\"官网给出了\",{\"1\":{\"95\":1}}],[\"官网\",{\"1\":{\"40\":1}}],[\"官网上就有回答\",{\"1\":{\"32\":1}}],[\"官方推荐使用其他更好的替代方案\",{\"1\":{\"25\":1}}],[\"老生常谈的三剑客\",{\"1\":{\"32\":1}}],[\"ribbon\",{\"1\":{\"138\":2}}],[\"runtime\",{\"1\":{\"95\":1}}],[\"root\",{\"1\":{\"50\":1}}],[\"rollup\",{\"1\":{\"32\":1}}],[\"rf\",{\"1\":{\"38\":1}}],[\"rm\",{\"1\":{\"38\":1}}],[\"remote\",{\"1\":{\"140\":1}}],[\"remove\",{\"1\":{\"26\":1}}],[\"reject\",{\"1\":{\"121\":6}}],[\"rejected\",{\"1\":{\"121\":3}}],[\"red\",{\"1\":{\"107\":4}}],[\"redisconfig\",{\"1\":{\"176\":1}}],[\"redistemplate\",{\"1\":{\"175\":2}}],[\"redis\",{\"0\":{\"41\":1,\"171\":1},\"1\":{\"24\":1,\"172\":3,\"175\":1,\"177\":2}}],[\"resource\",{\"1\":{\"182\":2}}],[\"resolve状态的promise\",{\"1\":{\"121\":1}}],[\"resolve\",{\"1\":{\"121\":6}}],[\"rest\",{\"1\":{\"103\":2}}],[\"result\",{\"1\":{\"66\":11,\"144\":2,\"147\":2}}],[\"recipient\",{\"1\":{\"66\":1}}],[\"receivemessage\",{\"1\":{\"26\":3}}],[\"reflect\",{\"0\":{\"114\":1,\"116\":1},\"1\":{\"106\":1,\"116\":1,\"117\":2,\"141\":1,\"144\":4,\"147\":1}}],[\"reflection\",{\"1\":{\"84\":1}}],[\"ref\",{\"1\":{\"62\":1}}],[\"rev\",{\"1\":{\"62\":1}}],[\"request审核\",{\"1\":{\"57\":1}}],[\"request请求进行审核\",{\"1\":{\"57\":1}}],[\"request\",{\"1\":{\"57\":3}}],[\"release分支属于临时分支\",{\"1\":{\"55\":1}}],[\"release分支主要用于上线前的各种测试和部署\",{\"1\":{\"55\":1}}],[\"release\",{\"1\":{\"55\":2,\"56\":1,\"57\":15}}],[\"react\",{\"1\":{\"32\":1}}],[\"returning\",{\"1\":{\"66\":1}}],[\"return\",{\"1\":{\"27\":1,\"66\":3,\"81\":1,\"86\":2,\"115\":1,\"116\":1,\"117\":1,\"119\":2,\"121\":3,\"122\":1,\"144\":1,\"147\":1}}],[\"实时分析和消息队列等场景上有着不可替代的作用\",{\"1\":{\"172\":1}}],[\"实时日志查看\",{\"1\":{\"161\":1}}],[\"实时通信等一系列的好处\",{\"1\":{\"32\":1}}],[\"实例代码\",{\"0\":{\"144\":1,\"147\":1}}],[\"实际执行的是远程的对象的方法\",{\"1\":{\"140\":1}}],[\"实际执行\",{\"1\":{\"115\":2}}],[\"实操\",{\"0\":{\"50\":1}}],[\"实现对多个\",{\"1\":{\"161\":1}}],[\"实现了动态代理的动态性\",{\"1\":{\"148\":1}}],[\"实现一个methodinterceptor接口的类\",{\"1\":{\"147\":1}}],[\"实现和\",{\"1\":{\"138\":1}}],[\"实现原子操作也是存在问题的\",{\"1\":{\"133\":1}}],[\"实现类的继承\",{\"1\":{\"119\":1}}],[\"实现多环境打包\",{\"1\":{\"56\":1}}],[\"实现\",{\"0\":{\"25\":1},\"1\":{\"138\":1,\"141\":1,\"144\":1}}],[\"服务端\",{\"0\":{\"163\":1}}],[\"服务端渲染\",{\"1\":{\"32\":1}}],[\"服务发现\",{\"1\":{\"159\":1}}],[\"服务发现和通信\",{\"1\":{\"159\":1}}],[\"服务部署\",{\"1\":{\"152\":1}}],[\"服务监控\",{\"1\":{\"152\":1}}],[\"服务路由\",{\"1\":{\"152\":1}}],[\"服务接口调用\",{\"1\":{\"152\":1}}],[\"服务熔断器\",{\"1\":{\"152\":1}}],[\"服务调用\",{\"1\":{\"152\":1}}],[\"服务注册与发现\",{\"1\":{\"152\":1}}],[\"服务器上\",{\"1\":{\"91\":1}}],[\"服务器运维管理面板\",{\"1\":{\"34\":1}}],[\"服务器\",{\"1\":{\"15\":1}}],[\"使得用户可以授予对其受保护资源的有限访问权限\",{\"1\":{\"182\":1}}],[\"使得在单元测试中创建模拟对象\",{\"1\":{\"68\":1}}],[\"使其具备了无状态性\",{\"1\":{\"179\":1}}],[\"使其运行在服务器之上\",{\"1\":{\"32\":1}}],[\"使用一组地址连续的存储单元依次存储线性表中的的数据元素\",{\"1\":{\"202\":1}}],[\"使用基于\",{\"1\":{\"179\":1}}],[\"使用的时候直接注入即可\",{\"1\":{\"172\":1}}],[\"使用的场景有以下几种\",{\"1\":{\"140\":1}}],[\"使用起来相对比较简洁\",{\"1\":{\"159\":1}}],[\"使用cglib的enhancer类来创建代理对象\",{\"1\":{\"147\":1}}],[\"使用动态代理集成调用\",{\"1\":{\"138\":1}}],[\"使用恰当的情况下不会引起线程上下文的切换和调度\",{\"1\":{\"128\":1}}],[\"使用任意变量接收\",{\"1\":{\"120\":1}}],[\"使用场景\",{\"0\":{\"105\":1},\"1\":{\"132\":1}}],[\"使用反射我们必须知道的几个核心类和接口\",{\"1\":{\"84\":1}}],[\"使用\",{\"1\":{\"60\":1,\"111\":1,\"143\":1,\"144\":1,\"177\":1}}],[\"使用正版需要订购\",{\"1\":{\"21\":1}}],[\"或者需要代理非公共方法的情况\",{\"1\":{\"141\":1}}],[\"或者都放在子类中\",{\"1\":{\"119\":1}}],[\"或者使用第三方的观察者模式框架\",{\"1\":{\"25\":1}}],[\"或\",{\"1\":{\"32\":2,\"49\":1,\"84\":3}}],[\"同数量级\",{\"1\":{\"188\":1}}],[\"同时\",{\"1\":{\"161\":1}}],[\"同时保存转换状态的时间\",{\"1\":{\"90\":1}}],[\"同时将脱敏需要的依赖打包成\",{\"1\":{\"66\":1}}],[\"同时也是\",{\"1\":{\"32\":1}}],[\"同样的\",{\"1\":{\"32\":1}}],[\"旨在解决\",{\"1\":{\"32\":1}}],[\"将myinterceptor作为拦截器\",{\"1\":{\"146\":1}}],[\"将这个变量所存在的缓冲行\",{\"1\":{\"128\":1}}],[\"将会显示两个\",{\"1\":{\"110\":2}}],[\"将会显示两个log\",{\"1\":{\"110\":2}}],[\"将切面应用到目标对象来创建新的代理对象的过程\",{\"1\":{\"64\":1}}],[\"将工程从码云clone到本地\",{\"1\":{\"56\":1}}],[\"将配置放在\",{\"1\":{\"49\":1}}],[\"将\",{\"1\":{\"32\":1}}],[\"将健壮性和可扩展性设为己任\",{\"1\":{\"17\":1}}],[\"yield\",{\"1\":{\"122\":4}}],[\"yellow2\",{\"1\":{\"107\":2}}],[\"yellow1\",{\"1\":{\"107\":5}}],[\"yellow\",{\"1\":{\"107\":11}}],[\"y\",{\"1\":{\"102\":1,\"103\":7}}],[\"yaml\",{\"1\":{\"60\":1}}],[\"yarn\",{\"1\":{\"32\":6}}],[\"yml\",{\"1\":{\"60\":1}}],[\"you\",{\"1\":{\"26\":1}}],[\"觉得前端技术栈太窄了\",{\"1\":{\"31\":1}}],[\"好像在早期后端是瞧不起前端的\",{\"1\":{\"31\":1}}],[\"学技术也是有鄙视链的\",{\"1\":{\"31\":1}}],[\"学习路线\",{\"1\":{\"84\":1}}],[\"学习\",{\"1\":{\"32\":1,\"95\":1,\"184\":1}}],[\"学习的时候一边阅读一边自己实现还是挺容易理解的\",{\"1\":{\"17\":1}}],[\"学习网站\",{\"1\":{\"15\":1}}],[\"学习之路\",{\"0\":{\"2\":1}}],[\"只有在经过授权的情况下才能访问\",{\"1\":{\"182\":1}}],[\"只有符合要求的用户才能访问目标方法\",{\"1\":{\"140\":1,\"148\":1}}],[\"只需要配置以上三步\",{\"1\":{\"177\":1}}],[\"只需要保证每次提交前拉去代码在本地处理好冲突再push即可\",{\"1\":{\"56\":1}}],[\"只需添加相应的依赖并进行简单的配置即可\",{\"1\":{\"161\":1}}],[\"只要测试对象头中是否是存储着当前线程的偏向锁即可\",{\"1\":{\"130\":1}}],[\"只要处于\",{\"1\":{\"121\":1}}],[\"只要我们能保证代码上线的正常流转\",{\"1\":{\"56\":1}}],[\"只能说语言之间相互取其精华\",{\"1\":{\"99\":1}}],[\"只能说明你什么都不精通\",{\"1\":{\"31\":1}}],[\"只允许合并操作\",{\"1\":{\"56\":1}}],[\"只保留tag下与线上环境一致的代码作为新git仓库的开始\",{\"1\":{\"56\":1}}],[\"只是默认创建后大多数人懒得去改动它\",{\"1\":{\"55\":1}}],[\"只读了个大概就跑去b站\",{\"1\":{\"12\":1}}],[\"运算的实现是针对存储结构的\",{\"1\":{\"197\":1}}],[\"运算的定义是针对逻辑结构的\",{\"1\":{\"197\":1}}],[\"运算符后面是字符串\",{\"1\":{\"106\":1}}],[\"运维\",{\"1\":{\"31\":1}}],[\"运行上述代码时\",{\"1\":{\"26\":1}}],[\"运行\",{\"1\":{\"18\":1}}],[\"前缀的指令\",{\"1\":{\"128\":1}}],[\"前言\",{\"0\":{\"125\":1,\"179\":1}}],[\"前端框架三大金刚\",{\"1\":{\"32\":1}}],[\"前端\",{\"1\":{\"31\":1}}],[\"前辈们都说后端不仅仅需要掌握后端\",{\"1\":{\"31\":1}}],[\"碎谈\",{\"0\":{\"31\":1,\"150\":1}}],[\"ts\",{\"1\":{\"125\":1}}],[\"two\",{\"1\":{\"111\":1,\"122\":2}}],[\"typeof\",{\"1\":{\"104\":1}}],[\"typescript\",{\"0\":{\"124\":1},\"1\":{\"32\":3,\"125\":4}}],[\"text\",{\"1\":{\"112\":3}}],[\"teleport\",{\"1\":{\"95\":1}}],[\"test1\",{\"1\":{\"119\":3}}],[\"testng\",{\"1\":{\"71\":1}}],[\"testreturnvoaspect\",{\"1\":{\"66\":1}}],[\"testreturnvo\",{\"1\":{\"66\":2}}],[\"test\",{\"1\":{\"66\":1,\"120\":1}}],[\"true\",{\"1\":{\"86\":1,\"107\":1,\"122\":2}}],[\"try\",{\"1\":{\"86\":2}}],[\"trigger\",{\"1\":{\"28\":1}}],[\"times\",{\"0\":{\"76\":1},\"1\":{\"76\":1}}],[\"t\",{\"0\":{\"73\":1},\"1\":{\"188\":3,\"205\":2}}],[\"task\",{\"1\":{\"60\":1}}],[\"target\",{\"1\":{\"60\":1,\"115\":6,\"117\":4,\"144\":5}}],[\"target>标签中的任务\",{\"1\":{\"60\":1}}],[\"target>\",{\"1\":{\"60\":3,\"62\":1}}],[\"tools\",{\"0\":{\"214\":1}}],[\"token\",{\"1\":{\"179\":7,\"182\":1}}],[\"to\",{\"1\":{\"117\":1}}],[\"tom\",{\"1\":{\"115\":1,\"116\":2,\"117\":1,\"120\":3}}],[\"tomcat\",{\"1\":{\"43\":11,\"150\":1}}],[\"tolist\",{\"1\":{\"86\":1}}],[\"topic\",{\"1\":{\"55\":1}}],[\"then\",{\"1\":{\"121\":7}}],[\"thenreturn\",{\"0\":{\"74\":1},\"1\":{\"74\":1}}],[\"three\",{\"1\":{\"111\":2,\"122\":2}}],[\"thread\",{\"1\":{\"43\":1}}],[\"throwable\",{\"1\":{\"66\":1,\"144\":1,\"147\":1}}],[\"throws\",{\"1\":{\"43\":1,\"66\":1,\"144\":1,\"147\":1}}],[\"this\",{\"1\":{\"26\":1,\"27\":2,\"116\":2,\"118\":3,\"119\":9,\"144\":1,\"205\":2}}],[\"thinking\",{\"1\":{\"12\":2}}],[\"触发器可以自动触发相应的操作\",{\"1\":{\"28\":1}}],[\"触发器\",{\"1\":{\"28\":1}}],[\"文件到\",{\"1\":{\"127\":1}}],[\"文件等数据\",{\"1\":{\"88\":1}}],[\"文本框内容改变或窗口关闭时\",{\"1\":{\"28\":1}}],[\"文章不会向刚开始一样从\",{\"1\":{\"2\":1}}],[\"例如网站用户或移动应用程序用户\",{\"1\":{\"182\":1}}],[\"例如用户名和密码\",{\"1\":{\"182\":2}}],[\"例如会话状态的同步和跨服务的会话管理\",{\"1\":{\"179\":1}}],[\"例如权限验证\",{\"1\":{\"140\":1}}],[\"例如日志记录\",{\"1\":{\"140\":1}}],[\"例如参数匹配\",{\"1\":{\"82\":1}}],[\"例如执行回调函数或返回动态计算的结果\",{\"1\":{\"81\":1}}],[\"例如更新相关的数据表\",{\"1\":{\"28\":1}}],[\"例如服务器负载监测\",{\"1\":{\"28\":1}}],[\"例如\",{\"1\":{\"28\":1}}],[\"例如使用接口和回调机制来实现观察者模式\",{\"1\":{\"25\":1}}],[\"确定性\",{\"1\":{\"186\":1}}],[\"确保方法的执行在事务的上下文中进行\",{\"1\":{\"148\":1}}],[\"确保在安装了最新版本的\",{\"1\":{\"96\":1}}],[\"确保它们之间的解耦和灵活性\",{\"1\":{\"28\":1}}],[\"确保所有相关的观察者都能接收到状态变化的通知并作出相应的响应\",{\"1\":{\"28\":1}}],[\"确实是一个不错的选择\",{\"1\":{\"32\":1}}],[\"确实是厉害\",{\"1\":{\"12\":1}}],[\"确实对这个安装软件晕得很\",{\"1\":{\"18\":1}}],[\"确实有点追不上时代了\",{\"1\":{\"12\":1}}],[\"确实目前看来就算计算机行业身处寒冬\",{\"1\":{\"11\":1}}],[\"以满足不同应用场景的需求\",{\"1\":{\"182\":1}}],[\"以满足不同的需求\",{\"1\":{\"151\":1}}],[\"以访问其受保护资源\",{\"1\":{\"182\":1}}],[\"以后搭建项目可以直接开箱即用\",{\"1\":{\"172\":1}}],[\"以后该线程在进入和退出同步块的时候不需要进行\",{\"1\":{\"130\":1}}],[\"以确保管理界面的安全性\",{\"1\":{\"161\":1}}],[\"以确保在不同环境中安装的包的一致性\",{\"1\":{\"32\":1}}],[\"以实现对目标对象的代理操作\",{\"1\":{\"140\":1}}],[\"以及其他元数据\",{\"1\":{\"158\":1}}],[\"以及输入和输出的变量\",{\"1\":{\"120\":1}}],[\"以及哪些代码尚未被测试覆盖\",{\"1\":{\"68\":1}}],[\"以下是工作中我遇到的定时任务场景\",{\"1\":{\"89\":1}}],[\"以防数据丢失或损坏\",{\"1\":{\"88\":1}}],[\"以master分支为基线\",{\"1\":{\"55\":1}}],[\"以便自动注册和管理\",{\"1\":{\"27\":1}}],[\"以摧枯拉朽之势崛起的一年\",{\"1\":{\"1\":1}}],[\"容易出现哈希冲突而导致时间和空间的开销\",{\"1\":{\"196\":1}}],[\"容易上手\",{\"1\":{\"14\":1}}],[\"容器化技术\",{\"1\":{\"151\":1}}],[\"容器测试\",{\"1\":{\"71\":1}}],[\"容器中的组件\",{\"1\":{\"27\":1}}],[\"eureka\",{\"1\":{\"159\":1,\"161\":1}}],[\"eureka等\",{\"1\":{\"159\":1}}],[\"err\",{\"1\":{\"121\":3}}],[\"error\",{\"1\":{\"86\":2}}],[\"es5\",{\"1\":{\"107\":1}}],[\"es6+\",{\"0\":{\"124\":1}}],[\"es6\",{\"1\":{\"99\":1,\"119\":1,\"120\":1,\"122\":1}}],[\"ecmascript\",{\"0\":{\"97\":1},\"1\":{\"99\":1}}],[\"equals\",{\"1\":{\"86\":2}}],[\"e\",{\"1\":{\"86\":4,\"91\":2,\"102\":1}}],[\"empty\",{\"1\":{\"200\":1}}],[\"emits\",{\"1\":{\"95\":1}}],[\"email\",{\"1\":{\"66\":3}}],[\"embed\",{\"1\":{\"43\":1}}],[\"exposure\",{\"1\":{\"168\":1}}],[\"exportname\",{\"1\":{\"120\":3}}],[\"export\",{\"1\":{\"120\":5}}],[\"exam2\",{\"1\":{\"119\":1}}],[\"exam1\",{\"1\":{\"119\":1}}],[\"exam\",{\"1\":{\"116\":2,\"117\":2}}],[\"example\",{\"1\":{\"60\":1,\"66\":4,\"119\":7}}],[\"execution\",{\"1\":{\"66\":1}}],[\"executable=\",{\"1\":{\"62\":1}}],[\"exec>\",{\"1\":{\"62\":1}}],[\"exception\",{\"0\":{\"80\":1},\"1\":{\"43\":1,\"86\":1}}],[\"extends\",{\"1\":{\"27\":1,\"119\":2}}],[\"endpoints\",{\"1\":{\"168\":1}}],[\"enableadminserver注解\",{\"1\":{\"165\":1}}],[\"enhancer\",{\"1\":{\"147\":7}}],[\"enhancer类提供了一种方便的方式来生成代理类的子类\",{\"1\":{\"147\":1}}],[\"encoding=\",{\"1\":{\"60\":1}}],[\"engines\",{\"1\":{\"40\":1}}],[\"entrance\",{\"1\":{\"37\":1}}],[\"eventpublisher\",{\"1\":{\"27\":2}}],[\"event\",{\"1\":{\"27\":8}}],[\"接收价格的前置项目\",{\"1\":{\"91\":1}}],[\"接下来就是写测试类了\",{\"1\":{\"71\":1}}],[\"接下来就是最关键的部分了\",{\"1\":{\"56\":1}}],[\"接下来新增切面\",{\"1\":{\"66\":1}}],[\"接下来也是和第一种情况相同\",{\"1\":{\"57\":1}}],[\"接下来\",{\"1\":{\"27\":1}}],[\"接下来我们使用\",{\"1\":{\"27\":1}}],[\"接口和其实现类\",{\"1\":{\"143\":1}}],[\"接口来实现的\",{\"1\":{\"138\":1}}],[\"接口的类\",{\"1\":{\"144\":1}}],[\"接口的数据\",{\"1\":{\"102\":1}}],[\"接口的返回值变成了\",{\"1\":{\"86\":1}}],[\"接口\",{\"1\":{\"27\":1,\"84\":2,\"143\":1,\"144\":1}}],[\"接口在\",{\"1\":{\"26\":1}}],[\"但却没有\",{\"1\":{\"184\":1}}],[\"但比较损耗性能\",{\"1\":{\"157\":1}}],[\"但都是对于项目上线流程的妥协\",{\"1\":{\"56\":1}}],[\"但大多数时候这并不是你自己的选择\",{\"1\":{\"31\":1}}],[\"但通常是由应用程序定义的业务对象或组件\",{\"1\":{\"27\":1}}],[\"但是也因为存储附加指针域倒是浪费存储空间\",{\"1\":{\"205\":1}}],[\"但是每个请求都必须携带包含了所有必要的用户身份信息和声明的令牌来进行身份验证\",{\"1\":{\"179\":1}}],[\"但是动态代理这个知识点必须该梳理梳理了\",{\"1\":{\"138\":1}}],[\"但是其他处理器缓存已经读取的值还是旧的\",{\"1\":{\"128\":1}}],[\"但是\",{\"1\":{\"122\":1,\"175\":1}}],[\"但是更易读\",{\"1\":{\"116\":1}}],[\"但是我们只关注\",{\"1\":{\"96\":1}}],[\"但是我记得自己看过容器化投产的性能瓶颈和安全性的问题\",{\"1\":{\"38\":1}}],[\"但是他们自己都是已经在使用\",{\"1\":{\"95\":1}}],[\"但是思想和实现我感觉应该也是同样的基调\",{\"1\":{\"89\":1}}],[\"但是看完代码后\",{\"1\":{\"86\":1}}],[\"但是这些场景一般都是在框架开发\",{\"1\":{\"84\":1}}],[\"但是这并不影响我们用在这里方便理解其过程\",{\"1\":{\"26\":1}}],[\"但是你的测试工具类得保证你的代码都可以覆盖的到\",{\"1\":{\"68\":1}}],[\"但是体积过大和比较繁琐的标签和属性确实让人头大\",{\"1\":{\"60\":1}}],[\"但是现在的设计迟早会因为各种挑战和原因而使仓库变得越来越笨重和复杂\",{\"1\":{\"58\":1}}],[\"但是后合并的人可能就需要解决两个人冲突的代码部分\",{\"1\":{\"57\":1}}],[\"但是构造的结构也是大同小异\",{\"1\":{\"56\":1}}],[\"但是文件夹之间没有任何联系\",{\"1\":{\"53\":1}}],[\"但是从来不会出现使用分支的用法\",{\"1\":{\"53\":1}}],[\"但是只能说是符合当前公司的使用场景\",{\"1\":{\"51\":1}}],[\"但是又不确定对方发送的产品价格是固定的\",{\"1\":{\"46\":1}}],[\"但是多多少少上线和联调的时候也都接触过\",{\"1\":{\"43\":1}}],[\"但是肯定不是长远之计\",{\"1\":{\"43\":1}}],[\"但是到了这个前后端分离的时代\",{\"1\":{\"31\":1}}],[\"但是大多数的场景下并不会去使用\",{\"1\":{\"25\":1}}],[\"但是面对更多人同时开发的场景来说\",{\"1\":{\"14\":1}}],[\"但是就目前的使用情况来看\",{\"1\":{\"12\":1}}],[\"但是一定是你学习过程中能找到资源和解决问题方法最顺利的一种\",{\"1\":{\"11\":1}}],[\"但是在选型上还是要根据项目规模和个人偏好进行选择\",{\"1\":{\"32\":1}}],[\"但是在苹果有了自家芯片之后\",{\"1\":{\"18\":1}}],[\"但是在面试或者一些表设计中\",{\"1\":{\"9\":1}}],[\"但是在不同人的手里能拿到不同的结果集\",{\"1\":{\"9\":1}}],[\"但是都是停在应用的水平\",{\"1\":{\"3\":1}}],[\"但是依然不能掩饰它们过去在某些领域作出的优秀贡献\",{\"1\":{\"1\":1}}],[\"通知\",{\"1\":{\"64\":1}}],[\"通知它们事件的发生\",{\"1\":{\"27\":1}}],[\"通信的\",{\"1\":{\"45\":1}}],[\"通过与\",{\"1\":{\"161\":1}}],[\"通过定时轮询访问数据库来感知配置的变化\",{\"1\":{\"157\":1}}],[\"通过定义一个切面\",{\"1\":{\"64\":1}}],[\"通过拆分应用程序为一系列松耦合的服务来实现更高的灵活性和可伸缩性\",{\"1\":{\"151\":1}}],[\"通过动态代理\",{\"1\":{\"148\":3}}],[\"通过enhancer类创建了一个代理类\",{\"1\":{\"146\":1}}],[\"通过代理对象调用方法\",{\"1\":{\"144\":1}}],[\"通过代理对象在本地调用方法\",{\"1\":{\"140\":1}}],[\"通过在spring\",{\"1\":{\"161\":1}}],[\"通过在代理对象中添加日志记录逻辑\",{\"1\":{\"140\":1}}],[\"通过在代理对象中添加缓存逻辑\",{\"1\":{\"140\":1}}],[\"通过在目标方法执行前后插入额外的逻辑\",{\"1\":{\"140\":1}}],[\"通过写\",{\"1\":{\"135\":1}}],[\"通过锁和循环cas来实现原子操作\",{\"1\":{\"133\":1}}],[\"通过对象的代理对象进行操作\",{\"1\":{\"115\":1}}],[\"通过反射获取所有字段\",{\"1\":{\"86\":1}}],[\"通过获取类的字段对象\",{\"1\":{\"84\":1}}],[\"通过获取类的方法对象\",{\"1\":{\"84\":1}}],[\"通过获取类的构造函数对象\",{\"1\":{\"84\":1}}],[\"通过这些概念我们也可以看出来\",{\"1\":{\"64\":1}}],[\"通过接口会一直受到价格\",{\"1\":{\"46\":1}}],[\"通过并行下载和缓存等机制加快了依赖项的安装速度\",{\"1\":{\"32\":1}}],[\"通过\",{\"1\":{\"27\":1,\"84\":3,\"119\":1}}],[\"通过实现应用事件监听器接口\",{\"1\":{\"27\":1}}],[\"通过应用事件发布器\",{\"1\":{\"27\":1}}],[\"通常由spring框架提供的applicationlistener接口实现\",{\"1\":{\"27\":1}}],[\"通常由spring框架提供的applicationeventpublisher接口实现\",{\"1\":{\"27\":1}}],[\"对日志功能的支持\",{\"1\":{\"170\":1}}],[\"对方法的调用进行日志记录\",{\"1\":{\"148\":1}}],[\"对其方法进行增强或添加额外的逻辑\",{\"1\":{\"140\":1}}],[\"对于每个额链表的节点\",{\"1\":{\"205\":1}}],[\"对于相同的输入只能得出相同的结果\",{\"1\":{\"186\":1}}],[\"对于同步方法块\",{\"1\":{\"129\":1}}],[\"对于静态同步方法\",{\"1\":{\"129\":1}}],[\"对于普通同步方法\",{\"1\":{\"129\":1}}],[\"对于这几种包管理器我自己是没有感觉出来有太多的区别\",{\"1\":{\"32\":1}}],[\"对应值即\",{\"1\":{\"111\":1}}],[\"对应类型的监听器将接收到事件\",{\"1\":{\"27\":1}}],[\"对\",{\"1\":{\"86\":1,\"128\":1}}],[\"对象往往搭配\",{\"1\":{\"121\":1}}],[\"对象是异步编程的一种解决方案\",{\"1\":{\"121\":1}}],[\"对象允许你存储任何类型的唯一值\",{\"1\":{\"112\":1}}],[\"对象时\",{\"1\":{\"111\":1}}],[\"对象转换成一个二维键值对数组\",{\"1\":{\"111\":1}}],[\"对象或者原始值\",{\"1\":{\"109\":1}}],[\"对象保存键值对\",{\"1\":{\"109\":1}}],[\"对象模型的解构\",{\"0\":{\"103\":1}}],[\"对象中价格的字段\",{\"1\":{\"86\":1}}],[\"对象\",{\"0\":{\"121\":1},\"1\":{\"74\":1,\"109\":1,\"111\":1,\"118\":1,\"129\":1,\"144\":2}}],[\"对象都要过滤那简直是天方夜谭\",{\"1\":{\"66\":1}}],[\"对我来说\",{\"1\":{\"60\":1}}],[\"对我个人而言\",{\"1\":{\"17\":1}}],[\"对ant的理解\",{\"0\":{\"60\":1}}],[\"对未知领域的知识充满好奇和尊敬\",{\"1\":{\"32\":1}}],[\"监听器将接收到该事件\",{\"1\":{\"27\":1}}],[\"监听器需要实现applicationlistener\",{\"1\":{\"27\":1}}],[\"监听器\",{\"1\":{\"27\":1}}],[\"监听模式\",{\"1\":{\"24\":1}}],[\"给所有注册的监听器\",{\"1\":{\"27\":1}}],[\"用命令行学习\",{\"1\":{\"175\":1}}],[\"用户就会很容易受到跨站请求伪造\",{\"1\":{\"179\":1}}],[\"用户对应用程序的要求变得越来越高\",{\"1\":{\"151\":1}}],[\"用户行为数据等\",{\"1\":{\"88\":1}}],[\"用来检测该字符串参数作为名称的\",{\"1\":{\"107\":1}}],[\"用来创建自定义渲染函数\",{\"1\":{\"95\":1}}],[\"用来入门非常不错\",{\"1\":{\"10\":1}}],[\"用于允许用户授权第三方应用程序访问其在另一个应用程序\",{\"1\":{\"182\":1}}],[\"用于代替真实对象的行为\",{\"1\":{\"73\":1}}],[\"用于解决横切关注点的模块化问题\",{\"1\":{\"64\":1}}],[\"用于存档和回滚\",{\"1\":{\"55\":1}}],[\"用于精确记录项目的依赖关系和版本号\",{\"1\":{\"32\":1}}],[\"用于接收和处理事件\",{\"1\":{\"27\":1}}],[\"用于描述事件的发生和上下文\",{\"1\":{\"27\":1}}],[\"代理类是通过继承目标类来生成的\",{\"1\":{\"141\":1}}],[\"代理类是在运行时动态生成的\",{\"1\":{\"141\":1}}],[\"代理对象通过继承目标类并重写方法来实现对被代理方法的调用\",{\"1\":{\"141\":1}}],[\"代理对象通过实现invocationhandler接口来处理被代理方法的调用\",{\"1\":{\"141\":1}}],[\"代理对象可以在调用目标方法之前进行权限检查\",{\"1\":{\"140\":1}}],[\"代理对象可以在真正需要对象时才创建\",{\"1\":{\"140\":1}}],[\"代码如下\",{\"1\":{\"86\":1}}],[\"代码进行测试\",{\"1\":{\"71\":1}}],[\"代码覆盖率\",{\"0\":{\"67\":1}}],[\"代码量也较少\",{\"1\":{\"56\":1}}],[\"代码仓库迁移\",{\"0\":{\"52\":1}}],[\"代码的健壮性\",{\"1\":{\"22\":1}}],[\"代表着在应用程序中发生的特定事件\",{\"1\":{\"27\":1}}],[\"观察者可以接收到事件通知\",{\"1\":{\"28\":1}}],[\"观察者\",{\"1\":{\"28\":1}}],[\"观察者模式适用于那些多个对象之间存在一对多关系的场景\",{\"1\":{\"28\":1}}],[\"观察者模式适用于以下场景\",{\"1\":{\"28\":1}}],[\"观察者模式可以用于实现日志记录和审计功能\",{\"1\":{\"28\":1}}],[\"观察者模式可以用于系统监测和通知的场景\",{\"1\":{\"28\":1}}],[\"观察者模式被广泛用于处理用户界面组件的事件\",{\"1\":{\"28\":1}}],[\"观察者模式被广泛应用\",{\"1\":{\"28\":1}}],[\"观察者模式能够实现一对多的通知机制\",{\"1\":{\"28\":1}}],[\"观察者模式也被称为发布\",{\"1\":{\"24\":1}}],[\"观察者模式\",{\"0\":{\"23\":1}}],[\"观察到只有一个订阅者收到了通知\",{\"1\":{\"26\":1}}],[\"并根据访问令牌决定是否授权客户端访问受保护资源\",{\"1\":{\"182\":1}}],[\"并根据资源所有者的授权向客户端颁发访问令牌\",{\"1\":{\"182\":1}}],[\"并生成一个访问令牌\",{\"1\":{\"182\":1}}],[\"并授权客户端访问受保护资源\",{\"1\":{\"182\":1}}],[\"并告诉我们什么情况下可以去使用它\",{\"1\":{\"179\":1}}],[\"并添加\",{\"1\":{\"176\":1}}],[\"并没有自己的日志框架实现\",{\"1\":{\"170\":1}}],[\"并可以根据应用程序的健康状况采取相应的管理措施\",{\"1\":{\"161\":1}}],[\"并提供有关这些应用程序的详细信息和指标\",{\"1\":{\"161\":1}}],[\"并定期发送心跳以保持活动状态\",{\"1\":{\"158\":1}}],[\"并与\",{\"1\":{\"154\":1}}],[\"并实现了\",{\"1\":{\"143\":1}}],[\"并发包中就出现了\",{\"1\":{\"133\":1}}],[\"并发机制基础\",{\"0\":{\"127\":1}}],[\"并发\",{\"0\":{\"126\":1}}],[\"并集\",{\"1\":{\"113\":1}}],[\"并登记在全局环境中供搜索\",{\"1\":{\"107\":1}}],[\"并不是每份材料到了30分钟就会被重新标记为未审核\",{\"1\":{\"90\":1}}],[\"并不作存储作用\",{\"1\":{\"45\":1}}],[\"并进行过滤\",{\"1\":{\"66\":1}}],[\"并逐渐被视为过时的技术\",{\"1\":{\"60\":1}}],[\"并在请求中提供访问令牌作为身份验证凭据\",{\"1\":{\"182\":1}}],[\"并在方法执行前后执行了额外的逻辑\",{\"1\":{\"148\":1}}],[\"并在这些功能之上添加了一层\",{\"1\":{\"125\":1}}],[\"并在master打上20230413的taf\",{\"1\":{\"57\":1}}],[\"并在事件发生时接收通知\",{\"1\":{\"28\":1}}],[\"并将其添加到管理界面中进行监控和管理\",{\"1\":{\"161\":1}}],[\"并将拦截逻辑应用到被代理类的方法上\",{\"1\":{\"147\":1}}],[\"并将他们都设为保护分支\",{\"1\":{\"56\":1}}],[\"并将相关信息记录到日志文件或进行审计处理\",{\"1\":{\"28\":1}}],[\"并说不上陌生\",{\"1\":{\"43\":1}}],[\"并处理相应的逻辑\",{\"1\":{\"27\":1}}],[\"并注册到应用事件发布器中\",{\"1\":{\"27\":1}}],[\"并执行相应的逻辑处理\",{\"1\":{\"27\":1}}],[\"并通过泛型指定要监听的事件类型\",{\"1\":{\"27\":1}}],[\"并再次发布消息\",{\"1\":{\"26\":1}}],[\"并且增删改也会修改索引表而导致花费更多的时间\",{\"1\":{\"196\":1}}],[\"并且每一步都在有穷时间内完成\",{\"1\":{\"186\":1}}],[\"并且每个不同请求所需要的\",{\"1\":{\"86\":1}}],[\"并且每个命令的执行还会有实时的动图演示\",{\"1\":{\"15\":1}}],[\"并且是重中之重\",{\"1\":{\"184\":1}}],[\"并且我们如果使用\",{\"1\":{\"184\":1}}],[\"并且\",{\"1\":{\"184\":1}}],[\"并且适用于分布式环境和跨服务的场景\",{\"1\":{\"179\":1}}],[\"并且随着应用程序的启动和关闭\",{\"1\":{\"161\":1}}],[\"并且锁只能升级不能降级\",{\"1\":{\"129\":1}}],[\"并且一个\",{\"1\":{\"129\":1}}],[\"并且一次性加载十份材料也可以提升审批下一位时的体验\",{\"1\":{\"90\":1}}],[\"并且箭头函数体中的\",{\"1\":{\"118\":1}}],[\"并且只能声明一次\",{\"1\":{\"100\":1}}],[\"并且你的当前工作目录正是打算创建项目的目录下执行下面命令\",{\"1\":{\"96\":1}}],[\"并且没有其他未验证的方法调用\",{\"1\":{\"79\":2}}],[\"并且了解哪些代码已经被测试覆盖\",{\"1\":{\"68\":1}}],[\"并且沟通便利\",{\"1\":{\"56\":1}}],[\"并且连接建立之后并不会主动断开\",{\"1\":{\"46\":1}}],[\"并且不太符合规范\",{\"1\":{\"38\":1}}],[\"并且在广泛的生态上来看\",{\"1\":{\"159\":1}}],[\"并且在编译时无法进行类型检查\",{\"1\":{\"84\":1}}],[\"并且在性能上进行了优化\",{\"1\":{\"32\":1}}],[\"并且在发布者发布消息时接收到通知\",{\"1\":{\"26\":1}}],[\"收到消息\",{\"1\":{\"26\":1,\"27\":1}}],[\"+key\",{\"1\":{\"115\":2}}],[\"+\",{\"0\":{\"124\":1,\"178\":1,\"180\":1},\"1\":{\"26\":2,\"27\":1,\"37\":1,\"95\":1,\"110\":4,\"116\":1,\"117\":4,\"119\":1,\"121\":2,\"144\":6}}],[\"n^2\",{\"1\":{\"188\":1}}],[\"number\",{\"1\":{\"104\":1,\"109\":2}}],[\"null\",{\"1\":{\"86\":1,\"104\":1,\"205\":1}}],[\"net\",{\"1\":{\"147\":3}}],[\"next\",{\"1\":{\"122\":5,\"205\":2}}],[\"never\",{\"0\":{\"78\":1},\"1\":{\"78\":1}}],[\"newproxyinstance\",{\"1\":{\"143\":1,\"144\":2}}],[\"new\",{\"1\":{\"26\":4,\"27\":1,\"43\":2,\"80\":1,\"86\":1,\"109\":1,\"110\":1,\"111\":6,\"112\":1,\"113\":10,\"115\":1,\"117\":1,\"119\":4,\"121\":1,\"144\":2,\"147\":2}}],[\"n\",{\"0\":{\"76\":1,\"77\":1},\"1\":{\"76\":1,\"188\":10,\"189\":3,\"199\":1}}],[\"ng\",{\"1\":{\"66\":3}}],[\"nan\",{\"1\":{\"109\":3}}],[\"nacos\",{\"0\":{\"155\":1},\"1\":{\"49\":1,\"159\":7}}],[\"name=\",{\"1\":{\"50\":1,\"60\":9,\"62\":2}}],[\"name\",{\"1\":{\"26\":5,\"81\":1,\"115\":2,\"116\":3,\"117\":3,\"120\":1}}],[\"nosql\",{\"1\":{\"172\":1}}],[\"not\",{\"1\":{\"109\":2}}],[\"notifysubscribers\",{\"1\":{\"26\":3}}],[\"node\",{\"1\":{\"32\":3,\"96\":1}}],[\"npm\",{\"1\":{\"32\":6,\"96\":1}}],[\"=o\",{\"1\":{\"188\":1,\"189\":1}}],[\"=>\",{\"1\":{\"109\":4,\"113\":2,\"118\":2}}],[\"===\",{\"1\":{\"104\":1,\"107\":2}}],[\"==\",{\"1\":{\"86\":2}}],[\"=\",{\"1\":{\"26\":5,\"27\":3,\"43\":2,\"66\":3,\"73\":1,\"74\":1,\"81\":1,\"86\":6,\"100\":3,\"102\":25,\"103\":25,\"104\":2,\"106\":10,\"107\":10,\"109\":3,\"110\":7,\"111\":8,\"112\":2,\"113\":11,\"115\":5,\"116\":1,\"117\":4,\"118\":4,\"119\":11,\"120\":2,\"121\":1,\"122\":1,\"144\":5,\"147\":3,\"205\":2}}],[\"url\",{\"1\":{\"168\":1}}],[\"updating\",{\"1\":{\"144\":1}}],[\"updated\",{\"1\":{\"81\":1}}],[\"updateuser\",{\"1\":{\"81\":2,\"144\":2}}],[\"union\",{\"1\":{\"113\":1}}],[\"uno\",{\"1\":{\"111\":2}}],[\"undefined\",{\"1\":{\"102\":2,\"103\":1,\"104\":1,\"106\":1,\"121\":1,\"122\":1}}],[\"unsubscribe\",{\"1\":{\"26\":3}}],[\"utf\",{\"1\":{\"60\":1}}],[\"util\",{\"1\":{\"26\":2}}],[\"usertoupdate\",{\"1\":{\"81\":3}}],[\"usernotfoundexception\",{\"1\":{\"80\":2}}],[\"username\",{\"1\":{\"66\":3,\"74\":1,\"144\":12}}],[\"userserviceproxy\",{\"1\":{\"143\":1,\"144\":4}}],[\"userserviceimpl\",{\"1\":{\"143\":1,\"144\":2}}],[\"userservicemock\",{\"1\":{\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":2,\"80\":1,\"81\":1}}],[\"userservice\",{\"1\":{\"73\":2,\"143\":1,\"144\":10}}],[\"uservo\",{\"1\":{\"66\":7,\"74\":1}}],[\"user\",{\"1\":{\"37\":2,\"74\":4,\"78\":1,\"81\":2,\"144\":4}}],[\"var\",{\"1\":{\"100\":1,\"109\":3,\"110\":4,\"111\":8,\"112\":1,\"113\":11,\"118\":4,\"120\":1}}],[\"value2\",{\"1\":{\"111\":2}}],[\"value1\",{\"1\":{\"111\":2}}],[\"values\",{\"1\":{\"110\":1}}],[\"value\",{\"0\":{\"74\":1},\"1\":{\"50\":1,\"66\":1,\"104\":2,\"106\":7,\"110\":6,\"115\":2,\"117\":3,\"121\":11,\"122\":4}}],[\"value=\",{\"1\":{\"50\":1,\"60\":5,\"62\":4}}],[\"volatile\",{\"0\":{\"128\":1},\"1\":{\"127\":1,\"128\":4,\"134\":1}}],[\"vo\",{\"1\":{\"66\":7,\"86\":3}}],[\"void\",{\"1\":{\"26\":10,\"27\":2,\"43\":1,\"66\":2,\"144\":9,\"147\":2}}],[\"verifynomoreinteractions\",{\"0\":{\"79\":1},\"1\":{\"79\":1}}],[\"verify\",{\"0\":{\"75\":1,\"76\":1,\"77\":1,\"78\":1},\"1\":{\"75\":1,\"76\":1,\"77\":1,\"78\":1}}],[\"ver\",{\"1\":{\"53\":1}}],[\"version>\",{\"1\":{\"147\":1}}],[\"version=\",{\"1\":{\"60\":1}}],[\"version\",{\"1\":{\"14\":1,\"62\":1}}],[\"vite\",{\"1\":{\"32\":1}}],[\"vue2\",{\"1\":{\"95\":3}}],[\"vue3\",{\"0\":{\"94\":1,\"95\":1},\"1\":{\"95\":3,\"96\":1}}],[\"vue\",{\"0\":{\"95\":1},\"1\":{\"32\":4,\"95\":1,\"96\":4}}],[\"首先我们需要知道大o表示法\",{\"1\":{\"188\":1}}],[\"首先我们先看一下返回的价格梯度对象的样子\",{\"1\":{\"86\":1}}],[\"首先我们先准备好要测试的方法类\",{\"1\":{\"71\":1}}],[\"首先我们先模拟一个\",{\"1\":{\"66\":1}}],[\"首先会停止偏向锁的线程\",{\"1\":{\"130\":1}}],[\"首先会在全局搜索被登记的\",{\"1\":{\"107\":1}}],[\"首先创建\",{\"1\":{\"57\":1}}],[\"首先你需要选择一个喜欢的包管理器\",{\"1\":{\"32\":1}}],[\"首先说说前端最开始的接触的包管理器的问题\",{\"1\":{\"32\":1}}],[\"首先\",{\"1\":{\"26\":1,\"27\":1,\"144\":1}}],[\"912\",{\"1\":{\"66\":2}}],[\"9\",{\"1\":{\"26\":1}}],[\"owner\",{\"1\":{\"182\":1}}],[\"ownkeys\",{\"1\":{\"106\":1}}],[\"oauth\",{\"1\":{\"182\":7}}],[\"oauth2\",{\"0\":{\"180\":1,\"182\":1},\"1\":{\"184\":1}}],[\"openfeign\",{\"1\":{\"138\":2}}],[\"operations\",{\"1\":{\"136\":1}}],[\"opt\",{\"1\":{\"36\":1}}],[\"o\",{\"1\":{\"112\":2,\"188\":7}}],[\"of\",{\"1\":{\"110\":3}}],[\"one\",{\"1\":{\"110\":4,\"111\":1,\"122\":2}}],[\"onapplicationevent\",{\"1\":{\"27\":1}}],[\"obj\",{\"1\":{\"86\":2,\"103\":6,\"109\":2,\"147\":2}}],[\"object\",{\"1\":{\"27\":1,\"66\":2,\"86\":3,\"104\":1,\"106\":3,\"116\":1,\"144\":6,\"147\":4}}],[\"observerpatternexample\",{\"1\":{\"26\":1}}],[\"observer\",{\"1\":{\"26\":1}}],[\"observable\",{\"1\":{\"26\":1}}],[\"outarray\",{\"1\":{\"111\":1}}],[\"outputproperty=\",{\"1\":{\"62\":1}}],[\"out\",{\"1\":{\"26\":1,\"27\":1,\"144\":6,\"147\":3}}],[\"override\",{\"1\":{\"26\":4,\"27\":1,\"144\":5,\"147\":1}}],[\"org\",{\"1\":{\"15\":1,\"27\":5,\"50\":1}}],[\"标准库中\",{\"1\":{\"26\":1}}],[\"拿到每个方法返回值判断\",{\"1\":{\"66\":1}}],[\"拿\",{\"1\":{\"25\":1}}],[\"大致的技术栈\",{\"1\":{\"152\":1}}],[\"大概清楚这是个搭配起来简化开发的组合\",{\"1\":{\"84\":1}}],[\"大家嘴上说着大学里的课程已经完全和社会脱节\",{\"1\":{\"150\":1}}],[\"大家如果都在develop分支开发测试\",{\"1\":{\"56\":1}}],[\"大家可根据火热程度做学习计划参考\",{\"1\":{\"40\":1}}],[\"大部分\",{\"1\":{\"50\":1}}],[\"大部分的容器和框架都是依赖\",{\"1\":{\"134\":1}}],[\"大部分的开发者还是因为容器的灵活和便捷性\",{\"1\":{\"38\":1}}],[\"大部分的学习资料都来自互联网\",{\"1\":{\"12\":1}}],[\"大多数编程语言都支持观察者模式的实现\",{\"1\":{\"25\":1}}],[\"之后更加贴合当前社会需求\",{\"1\":{\"184\":1}}],[\"之后就和第一种情况相同\",{\"1\":{\"57\":1}}],[\"之后就与第一种情况相同\",{\"1\":{\"57\":1}}],[\"之后继续在\",{\"1\":{\"57\":1}}],[\"之后重新提交pull\",{\"1\":{\"57\":1}}],[\"之后master分支和develop分支大部分时间都将保持完全相同的状态\",{\"1\":{\"56\":1}}],[\"之前\",{\"1\":{\"119\":1}}],[\"之前还是建议有一些\",{\"1\":{\"95\":1}}],[\"之前的\",{\"1\":{\"53\":1}}],[\"之前的前置项目大部分都都是\",{\"1\":{\"43\":1}}],[\"之前在服务器很火的运维工具就是宝塔了\",{\"1\":{\"38\":1}}],[\"之前听过的运维面板只有宝塔\",{\"1\":{\"34\":1}}],[\"之前可能觉得要和数据库交互的往往只有后端程序员\",{\"1\":{\"9\":1}}],[\"之间的关系类似于发布者发布事件\",{\"1\":{\"24\":1}}],[\"订阅感兴趣的事件\",{\"1\":{\"28\":1}}],[\"订阅模式中\",{\"1\":{\"28\":1}}],[\"订阅模式\",{\"1\":{\"28\":1}}],[\"订阅模式或者事件\",{\"1\":{\"24\":1}}],[\"订阅者2\",{\"1\":{\"26\":1}}],[\"订阅者1\",{\"1\":{\"26\":1}}],[\"订阅者接口\",{\"1\":{\"26\":1}}],[\"订阅者\",{\"1\":{\"24\":1}}],[\"发版\",{\"1\":{\"99\":1}}],[\"发现项目从环境变量中读取的\",{\"1\":{\"50\":1}}],[\"发送通知等\",{\"1\":{\"28\":1}}],[\"发布\",{\"1\":{\"28\":1}}],[\"发布了一个自定义事件\",{\"1\":{\"27\":1}}],[\"发布者接口\",{\"1\":{\"26\":1}}],[\"发布者\",{\"1\":{\"24\":1,\"28\":1}}],[\"发行于2007年\",{\"1\":{\"12\":1}}],[\"中\",{\"1\":{\"136\":1,\"138\":1}}],[\"中每个对象都可以是一个锁\",{\"1\":{\"129\":1}}],[\"中是否有该字符串参数作为名称的\",{\"1\":{\"107\":1}}],[\"中找到\",{\"1\":{\"95\":1,\"125\":1,\"198\":1}}],[\"中我们值得关注的一些新特性\",{\"1\":{\"95\":1}}],[\"中获取入参中的返回值项进行修改\",{\"1\":{\"66\":1}}],[\"中进行操作\",{\"1\":{\"66\":1}}],[\"中心仓库应该只有master分支\",{\"1\":{\"56\":1}}],[\"中用\",{\"1\":{\"50\":1}}],[\"中的方法作为切点增加个切面\",{\"1\":{\"66\":1}}],[\"中的敏感信息过滤\",{\"1\":{\"66\":1}}],[\"中的变量添加到环境变量中后\",{\"1\":{\"50\":1}}],[\"中的配置读取都是在\",{\"1\":{\"50\":1}}],[\"中的配置迁移到环境变量读取\",{\"1\":{\"49\":1}}],[\"中的发布订阅模式\",{\"1\":{\"24\":1}}],[\"中23中设计模式结合后来的实践和发展又重新总结出来的更完善生动的作品\",{\"1\":{\"17\":1}}],[\"如授权码授权流程\",{\"1\":{\"182\":1}}],[\"如社交媒体\",{\"1\":{\"182\":1}}],[\"如远程\",{\"1\":{\"161\":1}}],[\"如基于角色的访问控制\",{\"1\":{\"161\":1}}],[\"如应用程序上线\",{\"1\":{\"161\":1}}],[\"如重启应用程序或发送警报通知\",{\"1\":{\"161\":1}}],[\"如内存使用\",{\"1\":{\"161\":1}}],[\"如docker\",{\"1\":{\"151\":1}}],[\"如何学习微服务\",{\"0\":{\"152\":1}}],[\"如何实现动态代理\",{\"0\":{\"141\":1}}],[\"如何判断一个程序员的等级呢\",{\"1\":{\"22\":1}}],[\"如数据库连接\",{\"1\":{\"88\":1}}],[\"如类的名称\",{\"1\":{\"84\":1}}],[\"如spring\",{\"1\":{\"71\":1}}],[\"如junit\",{\"1\":{\"71\":1}}],[\"如方法调用或异常处理器\",{\"1\":{\"64\":1}}],[\"如四月十三日\",{\"1\":{\"56\":1}}],[\"如今在甲方要求全面推行\",{\"1\":{\"53\":1}}],[\"如\",{\"1\":{\"25\":1,\"55\":3,\"56\":1,\"88\":1,\"170\":1}}],[\"如果头指针为null\",{\"1\":{\"205\":1}}],[\"如果想要更加深入的了解\",{\"1\":{\"184\":1}}],[\"如果想了解更多细节可以点击下面卡片跳转官网查看\",{\"1\":{\"170\":1}}],[\"如果想了解更多可以查阅下面的\",{\"1\":{\"82\":1}}],[\"如果想了解更详细的面板介绍可以点击下面链接跳转官网查看\",{\"1\":{\"34\":1}}],[\"如果被截获\",{\"1\":{\"179\":1}}],[\"如果自行组建确实会出现版本兼容一致性的问题\",{\"1\":{\"152\":1}}],[\"如果缓存中存在结果\",{\"1\":{\"140\":1,\"148\":1}}],[\"如果线程a和线程b之间通讯需要线程a先将本地内存a中更新的变量刷新到主内存去\",{\"1\":{\"136\":1}}],[\"如果其他线程也尝试获取同一个对象的轻量级锁\",{\"1\":{\"131\":1}}],[\"如果活着则拥有偏向锁的栈会被执行\",{\"1\":{\"130\":1}}],[\"如果重新改造得不偿失\",{\"1\":{\"95\":1}}],[\"如果用切点表达式力度太大或者不够灵活的时候\",{\"1\":{\"66\":1}}],[\"如果我们只是操作返回值\",{\"1\":{\"66\":1}}],[\"如果每个\",{\"1\":{\"66\":1}}],[\"如果不活动则将对象头设置成无锁状态\",{\"1\":{\"130\":1}}],[\"如果不知道准确的上线日期\",{\"1\":{\"56\":1}}],[\"如果不清楚一条数据如何从界面到服务器再到数据库的完整流程\",{\"1\":{\"31\":1}}],[\"如果有兴趣可以点击下面链接去深入了解\",{\"1\":{\"179\":1}}],[\"如果有重复的键值\",{\"1\":{\"111\":1}}],[\"如果有即返回该\",{\"1\":{\"107\":1}}],[\"如果有其他更复杂的操作\",{\"1\":{\"66\":1}}],[\"如果有明确的上线日期\",{\"1\":{\"56\":1}}],[\"如果有些项目并不规范\",{\"1\":{\"50\":1}}],[\"如果目前处于维护阶段的项目\",{\"1\":{\"56\":1}}],[\"如果release分支测试出现问题\",{\"1\":{\"56\":1}}],[\"如果develop还有功能尚未完成\",{\"1\":{\"56\":1}}],[\"如果svn舍弃的代码中有未来准备上线的代码\",{\"1\":{\"56\":1}}],[\"如果\",{\"1\":{\"50\":1,\"131\":1}}],[\"如果是则更改为新的值\",{\"1\":{\"136\":1}}],[\"如果是其他错误状态则需要第二天人工排查问题\",{\"1\":{\"91\":1}}],[\"如果是获取不到文件则标记为\",{\"1\":{\"91\":1}}],[\"如果是十人左右的小组并且项目处于有大量需求需要开发的起步阶段\",{\"1\":{\"56\":1}}],[\"如果是极少的人开发\",{\"1\":{\"56\":1}}],[\"如果是从svn迁移项目\",{\"1\":{\"56\":1}}],[\"如果是紧急问题\",{\"1\":{\"55\":1}}],[\"如果是放在微服务中来讲\",{\"1\":{\"49\":1}}],[\"如果是平时使用和找工作大部分公司在用的话\",{\"1\":{\"10\":1}}],[\"如果发生断联则触发重连策略\",{\"1\":{\"46\":1}}],[\"如果说搞测试\",{\"1\":{\"38\":1}}],[\"如果出现上面界面\",{\"1\":{\"37\":1}}],[\"如果以上都已经略有小成的哈\",{\"1\":{\"32\":1}}],[\"如果使用过程中因为网络问题导致包下载不能成功\",{\"1\":{\"32\":1}}],[\"如果你会它们\",{\"1\":{\"150\":1}}],[\"如果你不知道它们\",{\"1\":{\"150\":1}}],[\"如果你是本科毕业就开始找工作\",{\"1\":{\"150\":1}}],[\"如果你是想更深入和系统的了解设计模式的种种\",{\"1\":{\"22\":1}}],[\"如果你手速够快或者一些特殊情况看不到了\",{\"1\":{\"37\":1}}],[\"如果你还没有用的惯的翻译软件可以尝试一下\",{\"1\":{\"19\":1}}],[\"如果你觉得文字和图片还不够直观\",{\"1\":{\"15\":1}}],[\"如果放在十年前有人给你推荐这本书\",{\"1\":{\"12\":1}}],[\"如果只是想快速了解或复习语法的话\",{\"1\":{\"10\":1}}],[\"feign\",{\"1\":{\"138\":1}}],[\"feature分支属于临时分支\",{\"1\":{\"55\":1}}],[\"feature\",{\"1\":{\"55\":2,\"56\":1,\"57\":14}}],[\"f\",{\"1\":{\"122\":5,\"188\":2}}],[\"fulfilled\",{\"1\":{\"121\":3}}],[\"func\",{\"1\":{\"109\":2,\"122\":2}}],[\"function\",{\"1\":{\"100\":2,\"109\":1,\"110\":1,\"115\":2,\"117\":2,\"118\":3,\"119\":2,\"121\":7,\"122\":2}}],[\"from\",{\"1\":{\"111\":2,\"120\":2}}],[\"frame\",{\"1\":{\"136\":1}}],[\"framework\",{\"0\":{\"218\":1},\"1\":{\"25\":1,\"27\":1}}],[\"fragments\",{\"1\":{\"95\":1}}],[\"father\",{\"1\":{\"119\":2}}],[\"false\",{\"1\":{\"104\":1,\"107\":1,\"122\":2}}],[\"facade\",{\"1\":{\"170\":1}}],[\"facebook\",{\"1\":{\"32\":1}}],[\"factory\",{\"1\":{\"27\":1,\"50\":1}}],[\"foo\",{\"1\":{\"103\":5}}],[\"foreach\",{\"1\":{\"110\":1}}],[\"for\",{\"1\":{\"22\":1,\"26\":1,\"86\":1,\"100\":2,\"106\":1,\"107\":4,\"110\":3,\"170\":1}}],[\"ftp\",{\"1\":{\"91\":1}}],[\"filter\",{\"1\":{\"86\":1,\"113\":2}}],[\"file=\",{\"1\":{\"62\":1}}],[\"file\",{\"1\":{\"43\":1}}],[\"fields\",{\"1\":{\"86\":2}}],[\"field\",{\"1\":{\"84\":2,\"86\":7}}],[\"fixqueuefull\",{\"1\":{\"55\":1}}],[\"firstname\",{\"1\":{\"66\":3}}],[\"first设计模式\",{\"1\":{\"22\":1}}],[\"first\",{\"0\":{\"17\":1},\"1\":{\"17\":3,\"111\":2}}],[\"是描述客观事物属性的数\",{\"1\":{\"193\":1}}],[\"是什么\",{\"1\":{\"179\":2}}],[\"是更好的选择\",{\"1\":{\"159\":1}}],[\"是基于\",{\"1\":{\"154\":1}}],[\"是啊\",{\"1\":{\"150\":1}}],[\"是轻量的\",{\"1\":{\"128\":1}}],[\"是定义函数时的对象\",{\"1\":{\"118\":1}}],[\"是对应的\",{\"1\":{\"116\":1}}],[\"是非字符串类型\",{\"1\":{\"106\":1}}],[\"是\",{\"1\":{\"99\":1,\"125\":1}}],[\"是先执行\",{\"1\":{\"66\":1}}],[\"是一种授权框架\",{\"1\":{\"182\":1}}],[\"是一种思想\",{\"1\":{\"64\":1}}],[\"是一种编程范式\",{\"1\":{\"64\":1}}],[\"是相对简单的\",{\"1\":{\"64\":1}}],[\"是我们最经常交互的分支\",{\"1\":{\"55\":1}}],[\"是支持分支的\",{\"1\":{\"53\":1}}],[\"是因为它在多线程处理中过程中保证了共享变量的可见性\",{\"1\":{\"128\":1}}],[\"是因为新版本增加了一个安全入口登录的限制\",{\"1\":{\"37\":1}}],[\"是因为这本书确实细\",{\"1\":{\"12\":1}}],[\"是最流行的打包工具\",{\"1\":{\"32\":1}}],[\"是最早也是使用最为广泛的包管理工具\",{\"1\":{\"32\":1}}],[\"是由\",{\"1\":{\"32\":1}}],[\"是事件的接收者和处理者\",{\"1\":{\"27\":1}}],[\"是第一次使用设计模式就好了\",{\"1\":{\"22\":1}}],[\"是第一次使用多线程就好了\",{\"1\":{\"22\":1}}],[\"是第一次写强逻辑的代码就好了\",{\"1\":{\"22\":1}}],[\"是第一次写\",{\"1\":{\"22\":1}}],[\"是第一次执行\",{\"1\":{\"22\":1}}],[\"是第一次控制台输入输出就好了\",{\"1\":{\"22\":1}}],[\"是写下第一行\",{\"1\":{\"22\":1}}],[\"供交流讨论啦\",{\"1\":{\"21\":1}}],[\"配合实现微服务的配置管理\",{\"1\":{\"159\":1}}],[\"配合插图演示版本变化的状态\",{\"1\":{\"15\":1}}],[\"配置类实现\",{\"0\":{\"176\":1}}],[\"配置存储和分发\",{\"1\":{\"159\":1}}],[\"配置存转移到环境变量\",{\"0\":{\"49\":1}}],[\"配置中心和注册中心通常会一起使用\",{\"1\":{\"159\":1}}],[\"配置中心兼往往顾了集中管理\",{\"1\":{\"157\":1}}],[\"配置中心专门针对这个业务场景\",{\"1\":{\"157\":1}}],[\"配置中心\",{\"0\":{\"157\":1}}],[\"配置\",{\"0\":{\"48\":1}}],[\"配置插件少不了\",{\"1\":{\"21\":1}}],[\"意味着你需要按照订阅期限支付费用\",{\"1\":{\"21\":1}}],[\"狗头保命\",{\"1\":{\"21\":1}}],[\"做开发吧\",{\"1\":{\"21\":1}}],[\"7\",{\"1\":{\"21\":1}}],[\"blue\",{\"1\":{\"107\":4}}],[\"books\",{\"0\":{\"213\":1}}],[\"boolean\",{\"1\":{\"104\":1}}],[\"boot<\",{\"1\":{\"164\":1,\"167\":1}}],[\"boot应用程序中集成\",{\"1\":{\"161\":1}}],[\"boot应用程序中\",{\"1\":{\"161\":1}}],[\"boot应用程序的健康检查功能\",{\"1\":{\"161\":1}}],[\"boot\",{\"0\":{\"160\":1,\"169\":1},\"1\":{\"45\":1,\"71\":1,\"150\":1,\"154\":1,\"161\":21,\"164\":2,\"165\":1,\"167\":2,\"168\":2,\"170\":2}}],[\"bbb\",{\"1\":{\"103\":2}}],[\"bye\",{\"1\":{\"102\":1}}],[\"bigdecimal\",{\"1\":{\"86\":8}}],[\"backend\",{\"0\":{\"222\":1}}],[\"basis\",{\"0\":{\"225\":1}}],[\"basic\",{\"0\":{\"220\":1}}],[\"baseredisconfig\",{\"1\":{\"176\":1}}],[\"basedir=\",{\"1\":{\"60\":1}}],[\"baz\",{\"1\":{\"103\":2}}],[\"bar\",{\"1\":{\"103\":3}}],[\"ba\",{\"1\":{\"66\":2}}],[\"baicheng\",{\"1\":{\"66\":1}}],[\"before\",{\"1\":{\"64\":1,\"144\":1,\"147\":1}}],[\"bean\",{\"1\":{\"50\":1}}],[\"bean>\",{\"1\":{\"50\":1}}],[\"beans\",{\"1\":{\"27\":1,\"50\":1}}],[\"but\",{\"1\":{\"150\":1}}],[\"buyprice\",{\"1\":{\"86\":4}}],[\"builder\",{\"1\":{\"66\":3,\"74\":1}}],[\"build\",{\"1\":{\"60\":9,\"66\":2,\"74\":1}}],[\"bug修复上线后可选删除\",{\"1\":{\"55\":1}}],[\"bugfix\",{\"1\":{\"55\":1}}],[\"bcopmare\",{\"1\":{\"53\":1}}],[\"branch\",{\"1\":{\"62\":3}}],[\"branching\",{\"1\":{\"15\":1}}],[\"browserify等等\",{\"1\":{\"32\":1}}],[\"b\",{\"1\":{\"21\":2,\"102\":12,\"103\":5,\"112\":2,\"113\":6,\"119\":4,\"120\":1}}],[\"吃饭的家伙\",{\"1\":{\"21\":1}}],[\"is\",{\"1\":{\"120\":1}}],[\"iterator\",{\"1\":{\"102\":1}}],[\"i++\",{\"1\":{\"100\":1}}],[\"i\",{\"1\":{\"100\":3,\"106\":2}}],[\"illegalaccessexception\",{\"1\":{\"86\":1}}],[\"idutil\",{\"1\":{\"66\":2}}],[\"id\",{\"1\":{\"66\":3,\"74\":1}}],[\"idea\",{\"0\":{\"21\":1},\"1\":{\"21\":1}}],[\"ioc\",{\"1\":{\"64\":2}}],[\"ibm\",{\"1\":{\"45\":1}}],[\"ip地址和端口\",{\"1\":{\"158\":1}}],[\"ip\",{\"1\":{\"37\":1}}],[\"implementation\",{\"1\":{\"147\":1}}],[\"implements\",{\"1\":{\"26\":2,\"27\":1,\"144\":2,\"147\":1}}],[\"import\",{\"1\":{\"27\":5,\"120\":3,\"144\":3,\"147\":4}}],[\"if\",{\"1\":{\"22\":1,\"66\":2,\"86\":2}}],[\"include\",{\"1\":{\"168\":1}}],[\"initlist\",{\"1\":{\"200\":1}}],[\"init\",{\"1\":{\"96\":1}}],[\"invokesuper\",{\"1\":{\"147\":1}}],[\"invoke\",{\"1\":{\"86\":1,\"143\":1,\"144\":2}}],[\"invocationhandler\",{\"1\":{\"143\":1,\"144\":6}}],[\"invocation\",{\"1\":{\"81\":2,\"147\":2}}],[\"instanceof\",{\"1\":{\"66\":2}}],[\"info\",{\"1\":{\"37\":2,\"116\":1}}],[\"intercept\",{\"1\":{\"147\":1}}],[\"intersect\",{\"1\":{\"113\":1}}],[\"interface\",{\"1\":{\"26\":2,\"144\":1}}],[\"intellij\",{\"0\":{\"21\":1}}],[\"in\",{\"1\":{\"12\":2,\"106\":1}}],[\"免费版也足够用了\",{\"1\":{\"19\":1}}],[\"when\",{\"0\":{\"74\":1,\"80\":1,\"81\":1},\"1\":{\"74\":1,\"80\":1,\"81\":1}}],[\"web\",{\"1\":{\"168\":1,\"179\":2}}],[\"webflux\",{\"1\":{\"154\":1}}],[\"webapp\",{\"1\":{\"43\":1}}],[\"webappdirlocation\",{\"1\":{\"43\":2}}],[\"webpack\",{\"1\":{\"32\":2}}],[\"war\",{\"1\":{\"43\":1,\"49\":1}}],[\"world\",{\"1\":{\"22\":1,\"26\":1,\"103\":5}}],[\"word\",{\"1\":{\"19\":1}}],[\"w\",{\"1\":{\"21\":1}}],[\"windows\",{\"1\":{\"18\":1,\"50\":1}}],[\"它是指令的有限序列\",{\"1\":{\"186\":1}}],[\"它通过\",{\"1\":{\"182\":1}}],[\"它在计算机网络中指的是在不同网络之间进行连接\",{\"1\":{\"154\":1}}],[\"它们为微服务架构的可伸缩性\",{\"1\":{\"159\":1}}],[\"它们在编译时会插入到代码块的开始和异常或者结束位置\",{\"1\":{\"129\":1}}],[\"它们也没有提供对并发编程的良好支持\",{\"1\":{\"25\":1}}],[\"它的方法与\",{\"1\":{\"116\":1}}],[\"它与\",{\"1\":{\"116\":1}}],[\"它不直接操作对象\",{\"1\":{\"115\":1}}],[\"它取代了\",{\"1\":{\"95\":1}}],[\"它可以自动发现注册在服务注册中心中的\",{\"1\":{\"161\":1}}],[\"它可以看作一个语法糖\",{\"1\":{\"119\":1}}],[\"它可以用于访问和修改字段的值\",{\"1\":{\"84\":1}}],[\"它可以用于调用方法\",{\"1\":{\"84\":1}}],[\"它可以用于创建对象实例\",{\"1\":{\"84\":1}}],[\"它可以衡量测试套件对代码的覆盖程度\",{\"1\":{\"68\":1}}],[\"它提供了实时查看应用程序日志的功能\",{\"1\":{\"161\":1}}],[\"它提供了对spring\",{\"1\":{\"161\":1}}],[\"它提供了一些安全特性\",{\"1\":{\"161\":1}}],[\"它提供了一个用户界面\",{\"1\":{\"161\":1}}],[\"它提供了一种简单\",{\"1\":{\"154\":1}}],[\"它提供了一种更加简洁的函数书写方式\",{\"1\":{\"118\":1}}],[\"它提供了许多方法来获取关于类的信息\",{\"1\":{\"84\":1}}],[\"它提供了简洁的api\",{\"1\":{\"68\":1}}],[\"它和其他分支完全没有区别\",{\"1\":{\"55\":1}}],[\"它根据综合指标来评估数据库的受欢迎程度来提供各种数据库的排名和比较\",{\"1\":{\"40\":1}}],[\"它确保在计算机系统关闭或断电后\",{\"1\":{\"40\":1}}],[\"它将作为观察者模式中的事件对象\",{\"1\":{\"27\":1}}],[\"它包含了与事件相关的数据和状态\",{\"1\":{\"27\":1}}],[\"它会将事件发布给应用事件发布器\",{\"1\":{\"27\":1}}],[\"它定义了一个或多个用于处理特定类型事件的方法\",{\"1\":{\"27\":1}}],[\"它允许组件或类将事件发布给观察者\",{\"1\":{\"27\":1}}],[\"它负责监听和响应特定类型的事件\",{\"1\":{\"27\":1}}],[\"它也支持\",{\"1\":{\"19\":1}}],[\"它基于代码又高于代码\",{\"1\":{\"17\":1}}],[\"系统监控\",{\"1\":{\"88\":1}}],[\"系统状态监测和通知\",{\"1\":{\"28\":1}}],[\"系统信息\",{\"1\":{\"18\":1}}],[\"系列\",{\"0\":{\"11\":1},\"1\":{\"17\":1}}],[\"有点事检索速度快\",{\"1\":{\"196\":1}}],[\"有穷性\",{\"1\":{\"186\":1}}],[\"有两种常见的实现方式用于实现动态代理\",{\"1\":{\"141\":1}}],[\"有两个区分于普通函数的部分\",{\"1\":{\"122\":1}}],[\"有动态代理就有静态代理\",{\"1\":{\"140\":1}}],[\"有着不同寻常的关系\",{\"1\":{\"125\":1}}],[\"有一说一\",{\"1\":{\"89\":1}}],[\"有\",{\"1\":{\"64\":1}}],[\"有些配置是自己读取文件获取的配置\",{\"1\":{\"50\":1}}],[\"有了语言的基础就可以开始框架的学习了\",{\"1\":{\"32\":1}}],[\"有人说现在全栈并不是什么好的现象\",{\"1\":{\"31\":1}}],[\"有的时候甚至会出现发热或者疯狂占内存的情况\",{\"1\":{\"18\":1}}],[\"有时候可能会遇到重构或者探索新技术的任务\",{\"1\":{\"3\":1}}],[\"还需要存放一个指向其后继的指针\",{\"1\":{\"205\":1}}],[\"还建立附加的索引表\",{\"1\":{\"196\":1}}],[\"还有对一些数据进行操作的工作单元和存储一些为实现计算所需的辅助空间\",{\"1\":{\"189\":1}}],[\"还可以利用\",{\"1\":{\"161\":1}}],[\"还支持动态路由\",{\"1\":{\"154\":1}}],[\"还记得上大学的时候学\",{\"1\":{\"150\":1}}],[\"还提供了两个方法在我们创建\",{\"1\":{\"107\":1}}],[\"还提供了其他一些高级功能和方法\",{\"1\":{\"82\":1}}],[\"还单元测试呢\",{\"1\":{\"68\":1}}],[\"还是自己打包扔上去重启服务来使用\",{\"1\":{\"38\":1}}],[\"还是\",{\"1\":{\"32\":2,\"50\":1}}],[\"还是比较消耗算力的\",{\"1\":{\"18\":1}}],[\"还说得过去\",{\"1\":{\"12\":1}}],[\"架构\",{\"1\":{\"18\":1}}],[\"时间负责度\",{\"0\":{\"188\":1}}],[\"时间久了其实也觉得差不多\",{\"1\":{\"18\":1}}],[\"时使用\",{\"1\":{\"107\":1}}],[\"时速度慢的问题\",{\"1\":{\"32\":1}}],[\"时\",{\"1\":{\"18\":1,\"74\":1}}],[\"换到\",{\"1\":{\"18\":1}}],[\"版本里\",{\"1\":{\"129\":1}}],[\"版本和性能服务器也算运维的话\",{\"1\":{\"38\":1}}],[\"版本中被移除\",{\"1\":{\"26\":1}}],[\"版本之后被标记为过时\",{\"1\":{\"26\":1}}],[\"版本信息\",{\"1\":{\"18\":1}}],[\"版本的话需要编译一版再运行\",{\"1\":{\"18\":1}}],[\"版本控制\",{\"0\":{\"14\":1},\"1\":{\"159\":1}}],[\"版\",{\"0\":{\"18\":1}}],[\"monitor\",{\"1\":{\"129\":3}}],[\"monitorexit\",{\"1\":{\"129\":2}}],[\"monitorenter\",{\"1\":{\"129\":2}}],[\"mock\",{\"0\":{\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1},\"1\":{\"73\":1}}],[\"mockito的官方文档\",{\"1\":{\"82\":1}}],[\"mockito\",{\"0\":{\"67\":1},\"1\":{\"68\":1,\"71\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":2,\"77\":2,\"78\":3,\"79\":1,\"80\":2,\"81\":2,\"82\":1}}],[\"multiply\",{\"1\":{\"86\":1}}],[\"mull\",{\"1\":{\"86\":1}}],[\"mf\",{\"1\":{\"62\":1}}],[\"merged\",{\"1\":{\"111\":1}}],[\"merge合并到\",{\"1\":{\"57\":1}}],[\"methodproxy\",{\"1\":{\"147\":2}}],[\"methodinterceptor\",{\"1\":{\"147\":2}}],[\"method\",{\"0\":{\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"80\":1,\"81\":1},\"1\":{\"84\":2,\"86\":3,\"144\":8,\"147\":5}}],[\"message\",{\"1\":{\"26\":8,\"27\":9}}],[\"md两个文件\",{\"1\":{\"56\":1}}],[\"md文件\",{\"1\":{\"56\":1}}],[\"mvc\",{\"1\":{\"49\":1,\"50\":1,\"150\":1}}],[\"myinterceptor\",{\"1\":{\"147\":2}}],[\"myclass\",{\"1\":{\"147\":4}}],[\"my\",{\"1\":{\"120\":1}}],[\"myname\",{\"1\":{\"120\":2}}],[\"myset\",{\"1\":{\"112\":7,\"113\":2}}],[\"mysql必知必会\",{\"1\":{\"10\":2}}],[\"mysql\",{\"0\":{\"10\":1},\"1\":{\"10\":1}}],[\"mymap2\",{\"1\":{\"111\":1}}],[\"mymap1\",{\"1\":{\"111\":2}}],[\"mymap\",{\"1\":{\"109\":6,\"110\":8,\"111\":2}}],[\"myapp\",{\"1\":{\"60\":2}}],[\"myproject\",{\"1\":{\"60\":1}}],[\"myeventlistener\",{\"1\":{\"27\":2}}],[\"myeventpublisher\",{\"1\":{\"27\":2}}],[\"myevent\",{\"1\":{\"27\":3}}],[\"mq\",{\"1\":{\"24\":1,\"45\":3,\"91\":1}}],[\"management\",{\"1\":{\"168\":1}}],[\"manifest\",{\"1\":{\"62\":1}}],[\"manifest>\",{\"1\":{\"60\":1,\"62\":1}}],[\"maven\",{\"1\":{\"60\":1}}],[\"master分支应该是保护分支\",{\"1\":{\"55\":1}}],[\"master分支上的代码应该和线上代码始终保持一致\",{\"1\":{\"55\":1}}],[\"master分支并不是一个特殊的分支\",{\"1\":{\"55\":1}}],[\"master\",{\"1\":{\"55\":1}}],[\"map\",{\"0\":{\"108\":1,\"109\":1,\"110\":1,\"111\":1},\"1\":{\"50\":1,\"109\":3,\"110\":2,\"111\":13}}],[\"main\",{\"1\":{\"22\":1,\"26\":1,\"43\":3,\"55\":1,\"60\":3,\"144\":2,\"147\":2}}],[\"mac\",{\"0\":{\"18\":1},\"1\":{\"18\":1}}],[\"日志\",{\"0\":{\"170\":1},\"1\":{\"88\":1}}],[\"日志记录和审计\",{\"1\":{\"28\":1}}],[\"日志记录\",{\"1\":{\"28\":1,\"140\":1,\"148\":1}}],[\"日常工具\",{\"0\":{\"18\":1}}],[\"日后慢慢润色\",{\"1\":{\"2\":1}}],[\"仔细理解每种模式所使用的场景才是真正的学习之道\",{\"1\":{\"17\":1}}],[\"最大的用法是用来定义对象的唯一属性名\",{\"1\":{\"104\":1}}],[\"最近公司开始要求对客户信息的保密性进行加强\",{\"1\":{\"66\":1}}],[\"最根本的原因还是为了多环境和多实例的支持\",{\"1\":{\"49\":1}}],[\"最后唤醒暂停的线程\",{\"1\":{\"130\":1}}],[\"最后\",{\"1\":{\"27\":1,\"143\":1}}],[\"最后还附带了\",{\"1\":{\"15\":1}}],[\"最好的学习方式就是在平时阅读和开发的时候\",{\"1\":{\"17\":1}}],[\"内执行\",{\"1\":{\"127\":1}}],[\"内存模型抽象结构图\",{\"1\":{\"136\":1}}],[\"内存模型的抽象结构\",{\"0\":{\"136\":1}}],[\"内存模型\",{\"0\":{\"135\":1},\"1\":{\"136\":1}}],[\"内存使用情况\",{\"1\":{\"88\":1}}],[\"内存等\",{\"1\":{\"88\":1}}],[\"内容也是非常的简单\",{\"1\":{\"71\":1}}],[\"内容上都是按照每一种设计模式作为一个章节并结合情景和图片进行讲解\",{\"1\":{\"17\":1}}],[\"内置\",{\"1\":{\"43\":1}}],[\"内部原理等各个方面内容\",{\"1\":{\"15\":1}}],[\"handler\",{\"1\":{\"115\":4,\"117\":2,\"144\":2}}],[\"hash\",{\"1\":{\"196\":1}}],[\"has\",{\"1\":{\"113\":2}}],[\"hkdrmb\",{\"1\":{\"86\":1}}],[\"highprice\",{\"1\":{\"86\":4}}],[\"hotfix分支属于临时分支\",{\"1\":{\"55\":1}}],[\"hotfix\",{\"1\":{\"55\":2}}],[\"how\",{\"1\":{\"26\":1}}],[\"http\",{\"1\":{\"168\":1}}],[\"https支持等\",{\"1\":{\"161\":1}}],[\"https\",{\"1\":{\"15\":1}}],[\"html\",{\"1\":{\"32\":1}}],[\"heng\",{\"1\":{\"66\":1}}],[\"hellocontroller\",{\"1\":{\"66\":1}}],[\"hello\",{\"1\":{\"22\":1,\"26\":1,\"103\":4}}],[\"head\",{\"0\":{\"17\":1},\"1\":{\"17\":3,\"22\":1,\"62\":1}}],[\"也可以记录表长等信息\",{\"1\":{\"205\":1}}],[\"也可以在这里复习和加深一些命令的理解\",{\"1\":{\"15\":1}}],[\"也就是哈希\",{\"1\":{\"196\":1}}],[\"也称为物理结构\",{\"1\":{\"196\":1}}],[\"也不会有可见性问题\",{\"1\":{\"136\":1}}],[\"也不一定是能作为找到工作的保证\",{\"1\":{\"11\":1}}],[\"也没有人提出重构的需求\",{\"1\":{\"90\":1}}],[\"也删除掉后启动\",{\"1\":{\"50\":1}}],[\"也有用\",{\"1\":{\"45\":1}}],[\"就该有拥抱新技术的激情\",{\"1\":{\"150\":1}}],[\"就在这短短两三年的时间里\",{\"1\":{\"150\":1}}],[\"就会将当前缓存行状态设置为无效并重新从内存中读取到处理器缓存中来\",{\"1\":{\"128\":1}}],[\"就算有误差也是可以忽略不计的\",{\"1\":{\"90\":1}}],[\"就算你已经是\",{\"1\":{\"15\":1}}],[\"就可以在网页得到一个点击就会增加的按钮了\",{\"1\":{\"96\":1}}],[\"就可以了\",{\"1\":{\"86\":1}}],[\"就可以push到中心仓库进行行下一步操作了\",{\"1\":{\"56\":1}}],[\"就只能在最后返回价格对象的时候写个方法统一处理对象的字段\",{\"1\":{\"86\":1}}],[\"就出现了这样一个问题\",{\"1\":{\"86\":1}}],[\"就告诉我们\",{\"1\":{\"64\":1}}],[\"就是\",{\"1\":{\"150\":1}}],[\"就是指定时执行某些特定操作或任务的功能\",{\"1\":{\"88\":1}}],[\"就是使用了<jar><\",{\"1\":{\"60\":1}}],[\"就是好的流程\",{\"1\":{\"56\":1}}],[\"就是是充当透传的作用\",{\"1\":{\"45\":1}}],[\"就把\",{\"1\":{\"53\":1}}],[\"就好了\",{\"1\":{\"22\":1}}],[\"就开始逐渐退出神坛\",{\"1\":{\"14\":1}}],[\"lnode\",{\"1\":{\"205\":1}}],[\"lnode<t>\",{\"1\":{\"205\":2}}],[\"l=\",{\"1\":{\"199\":1}}],[\"length\",{\"1\":{\"200\":1}}],[\"leetcode\",{\"0\":{\"190\":1}}],[\"let\",{\"0\":{\"100\":1},\"1\":{\"100\":3,\"102\":7,\"103\":10,\"104\":2,\"106\":8,\"107\":4,\"112\":1,\"115\":3,\"116\":1,\"117\":3,\"119\":5,\"120\":1,\"122\":1}}],[\"learngitbranching\",{\"1\":{\"15\":1}}],[\"learning\",{\"1\":{\"15\":1}}],[\"language\",{\"0\":{\"219\":1}}],[\"lang\",{\"1\":{\"141\":1,\"144\":4,\"147\":1}}],[\"lazy\",{\"1\":{\"140\":1}}],[\"latest\",{\"1\":{\"96\":1}}],[\"lastprice\",{\"1\":{\"86\":4}}],[\"lastname\",{\"1\":{\"66\":3}}],[\"library\",{\"1\":{\"141\":1}}],[\"line\",{\"1\":{\"136\":1}}],[\"linux\",{\"1\":{\"34\":1,\"38\":1}}],[\"liunx\",{\"1\":{\"50\":1}}],[\"listdelete\",{\"1\":{\"200\":1}}],[\"listinsert\",{\"1\":{\"200\":1}}],[\"list<\",{\"1\":{\"86\":2}}],[\"list<subscriber>\",{\"1\":{\"26\":1}}],[\"listener\",{\"1\":{\"27\":3}}],[\"loading\",{\"1\":{\"140\":1}}],[\"log4j2\",{\"1\":{\"170\":1}}],[\"logback\",{\"1\":{\"170\":2}}],[\"logging\",{\"0\":{\"169\":1},\"1\":{\"170\":2}}],[\"logs\",{\"1\":{\"110\":1}}],[\"log\",{\"1\":{\"86\":2,\"100\":2,\"104\":1,\"106\":5,\"110\":5,\"115\":2,\"117\":2,\"118\":2,\"119\":2,\"120\":1,\"121\":6,\"122\":3,\"188\":2}}],[\"long\",{\"1\":{\"66\":1}}],[\"lowprice\",{\"1\":{\"86\":4}}],[\"low\",{\"1\":{\"38\":1,\"61\":2,\"150\":1}}],[\"localhost\",{\"1\":{\"168\":1}}],[\"locale=zh\",{\"1\":{\"15\":1}}],[\"locationelem\",{\"1\":{\"200\":1}}],[\"location\",{\"1\":{\"50\":1}}],[\"lock\",{\"1\":{\"32\":1,\"128\":1}}],[\"love\",{\"1\":{\"1\":1}}],[\"书中提供了大量的应用案例\",{\"1\":{\"15\":1}}],[\"书法是一门艺术\",{\"0\":{\"4\":1}}],[\"后面\",{\"1\":{\"122\":1}}],[\"后\",{\"1\":{\"107\":1}}],[\"后来又出现了模块化拆分和服务化拆分的方案\",{\"1\":{\"151\":1}}],[\"后来又来了个安逸公司\",{\"1\":{\"3\":1}}],[\"后来到了正式一些的公司之后\",{\"1\":{\"68\":1}}],[\"后几章能够满足中高阶用户深入了解的需求\",{\"1\":{\"15\":1}}],[\"章的学习就已经可以应付日常的开发场景了\",{\"1\":{\"15\":1}}],[\"30\",{\"1\":{\"103\":2}}],[\"37\",{\"1\":{\"86\":4}}],[\"3\",{\"1\":{\"15\":1,\"77\":1,\"95\":3,\"100\":2,\"102\":8,\"103\":2,\"111\":1,\"112\":1,\"113\":10,\"119\":1,\"122\":2,\"130\":1,\"147\":3}}],[\"零基础的初学者可以通过前\",{\"1\":{\"15\":1}}],[\"分为导出\",{\"1\":{\"120\":1}}],[\"分别是在\",{\"1\":{\"66\":1}}],[\"分支源头都develop分支创建\",{\"1\":{\"57\":1}}],[\"分支开发\",{\"1\":{\"57\":1}}],[\"分支上准备上线介质\",{\"1\":{\"57\":1}}],[\"分支上更改\",{\"1\":{\"57\":1}}],[\"分支的pull\",{\"1\":{\"57\":3}}],[\"分支到\",{\"1\":{\"57\":1}}],[\"分支进行开发\",{\"1\":{\"57\":2}}],[\"分支创建\",{\"1\":{\"57\":1}}],[\"分支\",{\"1\":{\"56\":1,\"57\":8}}],[\"分支特性\",{\"1\":{\"15\":1}}],[\"分布式系统和跨服务的场景变得更加常见\",{\"1\":{\"179\":1}}],[\"分布式系统的管理和监控等\",{\"1\":{\"151\":1}}],[\"分布式工作流程\",{\"1\":{\"15\":1}}],[\"分布式风格的\",{\"1\":{\"14\":1}}],[\"公司的最早的托管者之一编写的\",{\"1\":{\"15\":1}}],[\"pending\",{\"1\":{\"121\":3}}],[\"person1\",{\"1\":{\"118\":2}}],[\"person\",{\"1\":{\"118\":2}}],[\"peek\",{\"1\":{\"86\":1}}],[\"p\",{\"1\":{\"103\":6,\"121\":1}}],[\"pi\",{\"1\":{\"100\":2}}],[\"pinia\",{\"0\":{\"93\":1}}],[\"pjp\",{\"1\":{\"66\":2}}],[\"pointcut\",{\"1\":{\"66\":2}}],[\"port\",{\"1\":{\"37\":1}}],[\"phonenumber\",{\"1\":{\"66\":3}}],[\"pull\",{\"1\":{\"57\":1}}],[\"publishevent\",{\"1\":{\"27\":2}}],[\"publisher\",{\"1\":{\"26\":8,\"27\":1}}],[\"publish\",{\"1\":{\"26\":3,\"27\":1}}],[\"public\",{\"1\":{\"26\":9,\"27\":7,\"43\":2,\"66\":6,\"144\":11,\"147\":6,\"205\":3}}],[\"package\",{\"1\":{\"96\":1}}],[\"param\",{\"1\":{\"205\":1}}],[\"parse\",{\"1\":{\"62\":1}}],[\"parcel\",{\"1\":{\"32\":1}}],[\"patterns\",{\"0\":{\"17\":1},\"1\":{\"17\":2}}],[\"pnpm\",{\"1\":{\"32\":3}}],[\"prd\",{\"1\":{\"53\":1}}],[\"printlist\",{\"1\":{\"200\":1}}],[\"println\",{\"1\":{\"26\":1,\"27\":1,\"144\":6,\"147\":3}}],[\"pricevalue\",{\"1\":{\"86\":4}}],[\"price\",{\"1\":{\"86\":8}}],[\"pricelist\",{\"1\":{\"86\":2}}],[\"pricemultiply100\",{\"1\":{\"86\":1}}],[\"private\",{\"1\":{\"26\":2,\"27\":2,\"66\":6,\"86\":1,\"144\":1}}],[\"promise\",{\"0\":{\"121\":1},\"1\":{\"121\":9}}],[\"proxy类实现\",{\"1\":{\"141\":1}}],[\"proxy\",{\"0\":{\"114\":1,\"115\":1},\"1\":{\"115\":4,\"116\":1,\"117\":4,\"140\":1,\"143\":1,\"144\":7,\"147\":7}}],[\"proceed\",{\"1\":{\"66\":1}}],[\"proceedingjoinpoint\",{\"1\":{\"66\":2}}],[\"project>\",{\"1\":{\"60\":1}}],[\"propertyplaceholderconfigurer\",{\"1\":{\"50\":1}}],[\"properties\",{\"1\":{\"49\":1,\"50\":5}}],[\"pro\",{\"0\":{\"15\":1},\"1\":{\"15\":1}}],[\"ppt\",{\"1\":{\"19\":1}}],[\"pdf\",{\"1\":{\"19\":1}}],[\"python\",{\"1\":{\"11\":1}}],[\"更是如鱼得水\",{\"1\":{\"184\":1}}],[\"更可扩展的解决方案\",{\"1\":{\"151\":1}}],[\"更稳定\",{\"1\":{\"151\":1}}],[\"更多的细节详见官网\",{\"1\":{\"125\":1}}],[\"更像面向对象编程的语法\",{\"1\":{\"119\":1}}],[\"更像\",{\"1\":{\"99\":1}}],[\"更不允许被删除\",{\"1\":{\"55\":1}}],[\"更胜一筹\",{\"1\":{\"32\":1}}],[\"更适合多人协作开发使用\",{\"1\":{\"14\":1}}],[\"更能在一些函数和表的组合方面体现你对数据管理的天赋\",{\"1\":{\"9\":1}}],[\"其头指针都是只想头结点的非空指针\",{\"1\":{\"205\":1}}],[\"其主要职责就是实现一个三方互信的功能\",{\"1\":{\"182\":1}}],[\"其模式也和\",{\"1\":{\"161\":1}}],[\"其设计思想是在编译时就能确定模块的依赖关系\",{\"1\":{\"120\":1}}],[\"其次是前台界面客户信息脱敏\",{\"1\":{\"66\":1}}],[\"其次就是打包工具的选择了\",{\"1\":{\"32\":1}}],[\"其中a1是唯一的第一个元素\",{\"1\":{\"199\":1}}],[\"其中n为表长\",{\"1\":{\"199\":1}}],[\"其中的每条指令有一个或多个操作\",{\"1\":{\"186\":1}}],[\"其中最直观也是最重要的就是\",{\"1\":{\"95\":1}}],[\"其中有个环节是要求考生提交个人信息进行审核\",{\"1\":{\"90\":1}}],[\"其中包含\",{\"1\":{\"56\":1}}],[\"其中编写项目启动和部署信息和项目简介\",{\"1\":{\"56\":1}}],[\"其中观察者和被观察者之间的依赖关系是动态的\",{\"1\":{\"28\":1}}],[\"其他微服务可以通过查询注册中心获取所需服务的信息\",{\"1\":{\"158\":1}}],[\"其他依赖项\",{\"1\":{\"147\":2}}],[\"其他线程获取锁就会处于阻塞状态\",{\"1\":{\"131\":1}}],[\"其他的根本见不着它们的影子\",{\"1\":{\"150\":1}}],[\"其他的汇率要\",{\"1\":{\"86\":1}}],[\"其他的打包工具还有像\",{\"1\":{\"32\":1}}],[\"其他技能\",{\"0\":{\"13\":1}}],[\"其拥有庞大的包仓库和活跃的社区支持\",{\"1\":{\"32\":1}}],[\"其实现在想想这个逻辑还是存在不少问题的\",{\"1\":{\"90\":1}}],[\"其实学习使用\",{\"1\":{\"64\":1}}],[\"其实这个脚本的内容就挺\",{\"1\":{\"60\":1}}],[\"其实相对于我这个年龄段的程序员来说\",{\"1\":{\"60\":1}}],[\"其实在\",{\"1\":{\"53\":1}}],[\"其实在我看来这些老项目还是应该尽早维护\",{\"1\":{\"43\":1}}],[\"其实好用的工具从来不用推荐\",{\"1\":{\"20\":1}}],[\"其实程序员很大一份就是在和数据打交道\",{\"1\":{\"9\":1}}],[\"其实每次提到数据结构和算法它们都是共同出现的\",{\"1\":{\"6\":1}}],[\"其实还是很想写一些关于源码或者底层的东西\",{\"1\":{\"2\":1}}],[\"五年前推荐\",{\"1\":{\"12\":1}}],[\"你会做的更好\",{\"1\":{\"150\":1}}],[\"你会慢慢发现\",{\"1\":{\"150\":1}}],[\"你也能做\",{\"1\":{\"150\":1}}],[\"你要是不会\",{\"1\":{\"150\":1}}],[\"你要是没有个\",{\"1\":{\"150\":1}}],[\"你要是还去看这本\",{\"1\":{\"12\":1}}],[\"你可以在方法调用前后测量和监控方法的性能指标\",{\"1\":{\"148\":1}}],[\"你可以在该方法中添加适当的逻辑来丰富目标功能\",{\"1\":{\"146\":1}}],[\"你可以添加安全控制的逻辑\",{\"1\":{\"148\":1}}],[\"你可以添加事务管理的逻辑\",{\"1\":{\"148\":1}}],[\"你可以添加缓存管理的逻辑\",{\"1\":{\"148\":1}}],[\"你可以添加性能监控的逻辑\",{\"1\":{\"148\":1}}],[\"你可以添加日志记录的逻辑\",{\"1\":{\"148\":1}}],[\"你可以定义在目标方法执行前后需要执行的逻辑\",{\"1\":{\"144\":1}}],[\"你测试覆盖率不过都不能上线\",{\"1\":{\"68\":1}}],[\"你和其他人一起开发四月十三日上线的任务\",{\"1\":{\"57\":1}}],[\"你发任你发\",{\"1\":{\"12\":1}}],[\"历史典籍\",{\"1\":{\"12\":1}}],[\"都起不来\",{\"1\":{\"150\":1}}],[\"都说\",{\"1\":{\"128\":1}}],[\"都可以作为一个键或一个值\",{\"1\":{\"109\":1}}],[\"都不一样\",{\"1\":{\"86\":1}}],[\"都已经问世了\",{\"1\":{\"12\":1}}],[\"都是最实用的语法\",{\"1\":{\"10\":1}}],[\"jwt\",{\"0\":{\"178\":1},\"1\":{\"179\":2}}],[\"john\",{\"1\":{\"144\":2}}],[\"joinpoint\",{\"1\":{\"66\":2}}],[\"jmm\",{\"1\":{\"136\":2}}],[\"jvm\",{\"1\":{\"127\":1,\"128\":1,\"129\":1,\"131\":2}}],[\"j++\",{\"1\":{\"100\":1}}],[\"j\",{\"1\":{\"100\":3}}],[\"jpyrmb\",{\"1\":{\"86\":1}}],[\"jpmrmb\",{\"1\":{\"86\":2}}],[\"junit\",{\"1\":{\"68\":1}}],[\"jacoco\",{\"1\":{\"68\":2}}],[\"jar>标签来实现的\",{\"1\":{\"60\":1}}],[\"jar>\",{\"1\":{\"60\":1}}],[\"jar\",{\"1\":{\"43\":1,\"60\":3,\"66\":1}}],[\"javabean\",{\"1\":{\"150\":1}}],[\"javaweb\",{\"1\":{\"150\":1}}],[\"javascript\",{\"1\":{\"32\":5,\"99\":1,\"125\":2}}],[\"java举例\",{\"1\":{\"25\":1}}],[\"java8\",{\"1\":{\"12\":1}}],[\"java基础\",{\"0\":{\"12\":1}}],[\"java\",{\"0\":{\"11\":1,\"127\":1,\"135\":1,\"221\":1},\"1\":{\"11\":5,\"12\":6,\"25\":1,\"26\":5,\"43\":2,\"45\":1,\"60\":2,\"64\":1,\"84\":1,\"99\":1,\"127\":3,\"128\":3,\"129\":1,\"133\":1,\"134\":1,\"135\":1,\"136\":4,\"140\":1,\"144\":4,\"147\":1,\"170\":1,\"198\":1}}],[\"jerry\",{\"1\":{\"117\":2}}],[\"jenkins\",{\"1\":{\"38\":1}}],[\"jetbrains\",{\"1\":{\"21\":1}}],[\"json\",{\"1\":{\"96\":1,\"179\":2}}],[\"js\",{\"1\":{\"15\":1,\"32\":4,\"96\":1,\"99\":1,\"120\":2,\"125\":1}}],[\"jdk1\",{\"1\":{\"133\":1}}],[\"jdk17\",{\"1\":{\"12\":1}}],[\"jdk\",{\"1\":{\"129\":1,\"138\":1}}],[\"jdk版\",{\"0\":{\"26\":1}}],[\"jdk20\",{\"1\":{\"12\":1}}],[\"jdk6\",{\"1\":{\"12\":1}}],[\"据现在已经过去16个年头了\",{\"1\":{\"12\":1}}],[\"了解锁我们得先知道什么是锁\",{\"1\":{\"129\":1}}],[\"了\",{\"1\":{\"12\":1,\"99\":1,\"129\":1,\"150\":1}}],[\"深造\",{\"1\":{\"12\":1}}],[\"要实现动态性\",{\"1\":{\"157\":1}}],[\"要求目标对象实现一个或多个接口\",{\"1\":{\"141\":1}}],[\"要注意\",{\"1\":{\"119\":1}}],[\"要是用方括号获取其对应的属性值\",{\"1\":{\"106\":1}}],[\"要是现在推荐\",{\"1\":{\"12\":1}}],[\"要知道计算机不比其他行业\",{\"1\":{\"12\":1}}],[\"要不然也不会到现在才后悔莫及\",{\"1\":{\"6\":1}}],[\"难免绕不开每个语言的圣经\",{\"1\":{\"12\":1}}],[\"可再分解为若干类型\",{\"1\":{\"193\":1}}],[\"可读性\",{\"1\":{\"186\":1}}],[\"可行性\",{\"1\":{\"186\":1}}],[\"可嵌套可忽略\",{\"1\":{\"103\":1}}],[\"可现在像一些\",{\"1\":{\"49\":1}}],[\"可是现在浪潮退去\",{\"1\":{\"150\":1}}],[\"可是随着自己的进步和发展\",{\"1\":{\"150\":1}}],[\"可是当你毕业开始找工作的时候\",{\"1\":{\"150\":1}}],[\"可是结果非常出乎意料\",{\"1\":{\"138\":1}}],[\"可是这样也有弊端\",{\"1\":{\"90\":1}}],[\"可是陈旧的设计注定它不能拥有依赖管理\",{\"1\":{\"60\":1}}],[\"可是身体还是很乖的\",{\"1\":{\"38\":1}}],[\"可是后来随着各类数据库的发展\",{\"1\":{\"9\":1}}],[\"可以直接\",{\"1\":{\"175\":1}}],[\"可以使\",{\"1\":{\"161\":1}}],[\"可以使用不同的技术栈进行开发\",{\"1\":{\"151\":1}}],[\"可以使用自定义注解的方式代替切点表达\",{\"1\":{\"66\":1}}],[\"可以使用淘宝团队改造的\",{\"1\":{\"32\":1}}],[\"可以很好地配合使用\",{\"1\":{\"161\":1}}],[\"可以选择和服务注册中心搭配使用\",{\"1\":{\"161\":1}}],[\"可以选择使用数据库\",{\"1\":{\"157\":1}}],[\"可以帮助开发人员快速定位和解决问题\",{\"1\":{\"161\":1}}],[\"可以监控和展示每个\",{\"1\":{\"161\":1}}],[\"可以集中管理多个\",{\"1\":{\"161\":1}}],[\"可以实现对方法的事务控制\",{\"1\":{\"148\":1}}],[\"可以实现对目标方法的增强\",{\"1\":{\"140\":1}}],[\"可以代理普通的类\",{\"1\":{\"141\":1}}],[\"可以记录方法的调用信息\",{\"1\":{\"140\":1}}],[\"可以提高系统的性能和资源利用率\",{\"1\":{\"140\":1}}],[\"可以继续执行\",{\"1\":{\"131\":1}}],[\"可以通过\",{\"1\":{\"119\":1,\"122\":1}}],[\"可以用于获取目标对象的行为\",{\"1\":{\"116\":1}}],[\"可以用作观察者模式的实现\",{\"1\":{\"28\":1}}],[\"可以添加一些需要的额外操作\",{\"1\":{\"115\":1}}],[\"可以对目标对象的读取\",{\"1\":{\"115\":1}}],[\"可以写成\",{\"1\":{\"107\":1}}],[\"可以在方法调用前对用户进行权限检查\",{\"1\":{\"148\":1}}],[\"可以在访问某个方法时先检查缓存\",{\"1\":{\"140\":1}}],[\"可以在类的外部访问\",{\"1\":{\"106\":1}}],[\"可以在运行时动态地访问和修改字段的值\",{\"1\":{\"84\":1}}],[\"可以在运行时动态地调用方法\",{\"1\":{\"84\":1}}],[\"可以获取类的名称\",{\"1\":{\"84\":1}}],[\"可以动态地创建类的实例\",{\"1\":{\"84\":1}}],[\"可以只存在于本地仓库\",{\"1\":{\"55\":1}}],[\"可以执行\",{\"1\":{\"37\":1}}],[\"可以考虑使用\",{\"1\":{\"32\":1}}],[\"可以找到大量的开源包和资源\",{\"1\":{\"32\":1}}],[\"可以简单的聊聊它们\",{\"1\":{\"32\":1}}],[\"可以接收和处理相应类型的事件\",{\"1\":{\"27\":1}}],[\"可以将事件发布给所有注册的监听器\",{\"1\":{\"27\":1}}],[\"可能那个作者单纯是想延伸一下动态代理这一块的知识\",{\"1\":{\"138\":1}}],[\"可能会引发运行时异常\",{\"1\":{\"84\":1}}],[\"可能会在未来的\",{\"1\":{\"26\":1}}],[\"可能并不适合作为第一门语言\",{\"1\":{\"11\":1}}],[\"可扩展性和效率都是十分重要的标杆\",{\"1\":{\"22\":1}}],[\"可复用面向对象软件的基础\",{\"1\":{\"17\":1}}],[\"社区的活跃程度和所包含的业务领域依然是领先的地位\",{\"1\":{\"11\":1}}],[\"gateway\",{\"0\":{\"153\":1},\"1\":{\"154\":2}}],[\"groupid>\",{\"1\":{\"147\":1,\"164\":2,\"167\":2}}],[\"gradle\",{\"1\":{\"60\":2}}],[\"generation\",{\"1\":{\"141\":1}}],[\"generator\",{\"0\":{\"122\":1},\"1\":{\"122\":4}}],[\"getelem\",{\"1\":{\"200\":1}}],[\"getenv\",{\"1\":{\"50\":1}}],[\"getinterfaces\",{\"1\":{\"144\":1}}],[\"getname\",{\"1\":{\"144\":2}}],[\"getuser\",{\"1\":{\"144\":2}}],[\"getuserbyid\",{\"1\":{\"74\":2,\"75\":2,\"76\":2,\"77\":2}}],[\"getter\",{\"1\":{\"119\":1}}],[\"getting\",{\"1\":{\"115\":1,\"117\":1,\"144\":1}}],[\"gettype\",{\"1\":{\"86\":1}}],[\"getownpropertysymbols\",{\"1\":{\"106\":1}}],[\"get\",{\"1\":{\"86\":1,\"115\":2,\"116\":2,\"117\":2,\"119\":1}}],[\"getdeclaredfields\",{\"1\":{\"86\":1}}],[\"getcrnm\",{\"1\":{\"86\":1}}],[\"getclassloader\",{\"1\":{\"144\":1}}],[\"getclass\",{\"1\":{\"86\":2,\"144\":2}}],[\"getconstructor\",{\"1\":{\"84\":1}}],[\"getconstructors\",{\"1\":{\"84\":1}}],[\"getfield\",{\"1\":{\"84\":1}}],[\"getfields\",{\"1\":{\"84\":1}}],[\"getargument\",{\"1\":{\"81\":1}}],[\"getabsolutepath\",{\"1\":{\"43\":1}}],[\"getsnowflakenextid\",{\"1\":{\"66\":2}}],[\"getserver\",{\"1\":{\"43\":1}}],[\"getmethod\",{\"1\":{\"84\":1,\"86\":1}}],[\"getmethods\",{\"1\":{\"84\":1}}],[\"getmessage\",{\"1\":{\"27\":2}}],[\"getmapping\",{\"1\":{\"66\":1}}],[\"gbprmb\",{\"1\":{\"86\":1}}],[\"g\",{\"1\":{\"66\":2,\"189\":1}}],[\"gui\",{\"1\":{\"28\":1}}],[\"gui事件处理\",{\"1\":{\"28\":1}}],[\"guava\",{\"1\":{\"25\":1}}],[\"google\",{\"1\":{\"25\":1}}],[\"golang\",{\"1\":{\"11\":1}}],[\"git存在快照记录这两条分支前后文件变动\",{\"1\":{\"57\":1}}],[\"gitignore和readme\",{\"1\":{\"56\":1}}],[\"gitignore文件并根据项目开发中ide或编译过程中产生的杂余文件作对应的筛除\",{\"1\":{\"56\":1}}],[\"git仓库的创建和使用\",{\"0\":{\"56\":1}}],[\"git分支含义\",{\"0\":{\"55\":1}}],[\"git分支开发规约\",{\"0\":{\"54\":1}}],[\"github\",{\"1\":{\"15\":2,\"152\":2}}],[\"git\",{\"0\":{\"15\":1},\"1\":{\"14\":3,\"15\":11,\"53\":6,\"62\":4}}],[\"gpt\",{\"1\":{\"1\":1}}],[\"和自动化部署工具的出现\",{\"1\":{\"151\":1}}],[\"和原子操作\",{\"1\":{\"134\":1}}],[\"和从\",{\"1\":{\"121\":1}}],[\"和反射\",{\"1\":{\"84\":1}}],[\"和依赖注入框架\",{\"1\":{\"71\":1}}],[\"和一些日志\",{\"1\":{\"64\":1}}],[\"和观察者对象\",{\"1\":{\"24\":1}}],[\"和我们平时使用本地文件的习惯非常相近\",{\"1\":{\"14\":1}}],[\"和\",{\"0\":{\"95\":1},\"1\":{\"11\":1,\"19\":1,\"32\":3,\"57\":1,\"60\":1,\"64\":2,\"66\":1,\"104\":1,\"121\":2,\"127\":1,\"129\":2,\"144\":1,\"154\":1,\"159\":1,\"161\":2,\"184\":1}}],[\"和数据库进行交互也是程序员必备的技能\",{\"1\":{\"9\":1}}],[\"当前节点的值\",{\"1\":{\"205\":1}}],[\"当与服务注册中心配合使用时\",{\"1\":{\"161\":1}}],[\"当调用代理对象的方法时\",{\"1\":{\"146\":1}}],[\"当需要访问对象时才进行实例化\",{\"1\":{\"140\":1}}],[\"当锁处于这个状态下\",{\"1\":{\"131\":1}}],[\"当竞争出现的时候\",{\"1\":{\"130\":1}}],[\"当发现自己的缓存行地址被修改的时候\",{\"1\":{\"128\":1}}],[\"当一个线程获取轻量级锁时\",{\"1\":{\"131\":1}}],[\"当一个线程访问同步块并获取锁的时候\",{\"1\":{\"130\":1}}],[\"当一个线程试图访问同步代码块的时候\",{\"1\":{\"129\":1}}],[\"当一个对象的状态发生变化时\",{\"1\":{\"28\":1}}],[\"当一份材料被审核人抽取到转为审核中的时候\",{\"1\":{\"90\":1}}],[\"当他在和我讨论这个实现的时候和我说了一下他的思路\",{\"1\":{\"66\":1}}],[\"当问题修复完成后\",{\"1\":{\"55\":1}}],[\"当你一些端口一类的变量需要其他类型的时候\",{\"1\":{\"50\":1}}],[\"当我第二份工作的时候\",{\"1\":{\"150\":1}}],[\"当我第一次接触spring框架的时候\",{\"1\":{\"64\":1}}],[\"当我们遇到以上这些情况的时候怎么知道这是在使用动态代理呢\",{\"1\":{\"140\":1}}],[\"当我们决定迁移到\",{\"1\":{\"53\":1}}],[\"当我们全部将\",{\"1\":{\"50\":1}}],[\"当我了解到这本书的时候就已经是第二版了\",{\"1\":{\"15\":1}}],[\"当系统中发生重要事件时\",{\"1\":{\"28\":1}}],[\"当系统中的某些关键状态发生变化时\",{\"1\":{\"28\":1}}],[\"当数据库中的数据发生变化时\",{\"1\":{\"28\":1}}],[\"当按钮被点击\",{\"1\":{\"28\":1}}],[\"当事件发生时\",{\"1\":{\"27\":1}}],[\"当事件源触发事件时\",{\"1\":{\"27\":1}}],[\"当事件被发布时\",{\"1\":{\"27\":1}}],[\"当然新版本的出现就是为了解决旧版本的一些问题\",{\"1\":{\"99\":1}}],[\"当然就算是延后50分钟也不能保证每次都可以成功获取到每日价格文件\",{\"1\":{\"91\":1}}],[\"当然现在的时间轮算法估计已经足够精确\",{\"1\":{\"90\":1}}],[\"当然每个公司和团队的git流程多少都会存在区别\",{\"1\":{\"56\":1}}],[\"当然构建仓库的方式有很多种\",{\"1\":{\"56\":1}}],[\"当然这些都是我自己的理解\",{\"1\":{\"32\":1}}],[\"当然还是推荐设计模式的一些书籍和更为优秀的帖子\",{\"1\":{\"22\":1}}],[\"当然并不会涵盖所有的设计模式\",{\"1\":{\"22\":1}}],[\"当然身边的人也有从\",{\"1\":{\"11\":1}}],[\"当时连个\",{\"1\":{\"150\":1}}],[\"当时这样设计的初衷想想大概就是为了能加快审核进度\",{\"1\":{\"90\":1}}],[\"当时在学完内置注解\",{\"1\":{\"84\":1}}],[\"当时目前公司也是有\",{\"1\":{\"38\":1}}],[\"当时我也是走马观花\",{\"1\":{\"12\":1}}],[\"当时我刚起步的时候总结学习路线的文章视频还是很多的\",{\"1\":{\"2\":1}}],[\"当时可能学习完微服务之后\",{\"1\":{\"11\":1}}],[\"当时根本不知道这几本书的分量\",{\"1\":{\"6\":1}}],[\"而指针域则必须指向线性表的第一个元素结点\",{\"1\":{\"205\":1}}],[\"而算法的实现则依赖多采用的存储结构\",{\"1\":{\"194\":1}}],[\"而无需共享其凭据\",{\"1\":{\"182\":1}}],[\"而无需向第三方应用程序共享其凭据\",{\"1\":{\"182\":1}}],[\"而微服务网关我们通用的理解是统一对外暴露可共享的服务\",{\"1\":{\"154\":1}}],[\"而目前的组件框架会同时兼顾以上多个功能并且基本已经涵盖到了\",{\"1\":{\"152\":1}}],[\"而基于类的动态代理适用于那些没有实现接口的目标对象\",{\"1\":{\"141\":1}}],[\"而基于类的动态代理不要求目标对象实现接口\",{\"1\":{\"141\":1}}],[\"而每个线程都有本地内存\",{\"1\":{\"136\":1}}],[\"而局部变量\",{\"1\":{\"136\":1}}],[\"而复杂的内存操作需要搭配处理器提供的总线锁定和缓存锁来保证其原子性\",{\"1\":{\"133\":1}}],[\"而具体的得到和释放锁的过程需要依赖\",{\"1\":{\"129\":1}}],[\"而具体的测试方法也根据\",{\"1\":{\"71\":1}}],[\"而是使用\",{\"1\":{\"170\":1}}],[\"而是返回一个指向内部状态对象的指针\",{\"1\":{\"122\":1}}],[\"而是像代理模式\",{\"1\":{\"115\":1}}],[\"而第四个than返回的是reject状态的promise\",{\"1\":{\"121\":1}}],[\"而不是使用函数时的对象\",{\"1\":{\"118\":1}}],[\"而不是完全的废弃重构\",{\"1\":{\"58\":1}}],[\"而现在有了\",{\"1\":{\"107\":1}}],[\"而现在可能微服务也只能是你找到工作的门槛\",{\"1\":{\"11\":1}}],[\"而一聊到\",{\"1\":{\"64\":1}}],[\"而这次需要四月十三日上线\",{\"1\":{\"57\":1}}],[\"而仅仅是修改配置的话这样反而显得得不偿失\",{\"1\":{\"49\":1}}],[\"而上线规范还要求\",{\"1\":{\"49\":1}}],[\"而所需数据的后台项目有新有旧\",{\"1\":{\"46\":1}}],[\"而所收到的价格并不是随时并且全部都发送\",{\"1\":{\"46\":1}}],[\"而在非生产服务器上\",{\"1\":{\"38\":1}}],[\"而面向一些云服务器来说\",{\"1\":{\"34\":1}}],[\"而其底层也是使用了\",{\"1\":{\"32\":1}}],[\"而且令牌可以通过签名和加密机制来保护身份信息的完整性和真实性\",{\"1\":{\"179\":1}}],[\"而且如果\",{\"1\":{\"179\":1}}],[\"而且这个通信过程必须经过主内存\",{\"1\":{\"136\":1}}],[\"而且这今年国产化的浪潮翻涌\",{\"1\":{\"32\":1}}],[\"而且总是由同一线程多次获得\",{\"1\":{\"130\":1}}],[\"而且只有从\",{\"1\":{\"121\":1}}],[\"而且值得注意的是如果这里同时使用两个方法的话\",{\"1\":{\"66\":1}}],[\"而且使用反射还会还会在一定程度上降低性能\",{\"1\":{\"84\":1}}],[\"而且使用的架构也不尽相同\",{\"1\":{\"66\":1}}],[\"而且使用这种框架也可以动态更新配置\",{\"1\":{\"49\":1}}],[\"而且并没有这种云配置的框架支持\",{\"1\":{\"49\":1}}],[\"而且业务也不负责\",{\"1\":{\"43\":1}}],[\"而且像很多这种下载脚本执行的安装方式在下载安装的时候会产生文件\",{\"1\":{\"36\":1}}],[\"而且它还引入了锁文件\",{\"1\":{\"32\":1}}],[\"而且其内容也是略显晦涩\",{\"1\":{\"12\":1}}],[\"而订阅者\",{\"1\":{\"28\":1}}],[\"而观察者监听并响应该事件的方式\",{\"1\":{\"24\":1}}],[\"而设计模式作为前辈们的最佳实践总结\",{\"1\":{\"22\":1}}],[\"而\",{\"1\":{\"12\":1,\"106\":1,\"127\":1,\"161\":1}}],[\"而能靠其内容质量击败视频\",{\"1\":{\"12\":1}}],[\"而对于数据库中数据的处理来说\",{\"1\":{\"9\":1}}],[\"尔康\",{\"1\":{\"11\":1}}],[\"找的工作可能直奔\",{\"1\":{\"11\":1}}],[\"各种\",{\"1\":{\"43\":1}}],[\"各种降薪裁员的浪潮开始愈展愈烈\",{\"1\":{\"1\":1}}],[\"各个行业的人疯狂涌入计算机\",{\"1\":{\"11\":1}}],[\"赛道处于一个爆满的时代\",{\"1\":{\"11\":1}}],[\"剑指offer\",{\"1\":{\"10\":1}}],[\"薄薄一本\",{\"1\":{\"10\":1}}],[\"的优势在于它根据受保护资源服务器验证访问令牌的有效性\",{\"1\":{\"182\":1}}],[\"的工作流程如下\",{\"1\":{\"182\":1}}],[\"的核心概念包括以下角色\",{\"1\":{\"182\":1}}],[\"的登录过程如下所示\",{\"1\":{\"179\":1}}],[\"的特性\",{\"1\":{\"179\":1}}],[\"的攻击\",{\"1\":{\"179\":1}}],[\"的方法直接用起来还是不太顺手\",{\"1\":{\"175\":1}}],[\"的方式\",{\"1\":{\"95\":1}}],[\"的方式就可以直接跳转登录界面了\",{\"1\":{\"37\":1}}],[\"的配置更加简单容易\",{\"1\":{\"172\":1}}],[\"的官方文档的核心功能部分介绍了\",{\"1\":{\"170\":1}}],[\"的生态支持更广\",{\"1\":{\"159\":1}}],[\"的功能\",{\"1\":{\"154\":1}}],[\"的动态代理是一种运行时生成代理对象的机制\",{\"1\":{\"140\":1}}],[\"的集成是通过使用\",{\"1\":{\"138\":1}}],[\"的并发采用的是共享内存模型\",{\"1\":{\"135\":1}}],[\"的并发机制正是依赖了\",{\"1\":{\"127\":1}}],[\"的锁记录里存储偏向锁的线程id\",{\"1\":{\"130\":1}}],[\"的所有权的获取和释放\",{\"1\":{\"129\":1}}],[\"的所有功能\",{\"1\":{\"125\":1}}],[\"的数据写回到系统内存\",{\"1\":{\"128\":1}}],[\"的定义\",{\"1\":{\"128\":1}}],[\"的指令\",{\"1\":{\"127\":1}}],[\"的实现和\",{\"1\":{\"127\":1}}],[\"的编译过程\",{\"1\":{\"127\":1}}],[\"的超集\",{\"1\":{\"125\":1}}],[\"的类型系统\",{\"1\":{\"125\":1}}],[\"的类也有类似封装和继承的概念\",{\"1\":{\"119\":1}}],[\"的状态改变\",{\"1\":{\"121\":1}}],[\"的本质是\",{\"1\":{\"119\":1}}],[\"的合并\",{\"1\":{\"111\":1}}],[\"的克隆\",{\"1\":{\"111\":1}}],[\"的迭代\",{\"0\":{\"110\":1}}],[\"的下一个版本标准\",{\"1\":{\"99\":1}}],[\"的命令启动项目\",{\"1\":{\"96\":1}}],[\"的全局入口文件\",{\"1\":{\"96\":1}}],[\"的文件\",{\"1\":{\"96\":1}}],[\"的学习\",{\"1\":{\"95\":1}}],[\"的风格\",{\"1\":{\"95\":1}}],[\"的重新执行一次获取价格文件\",{\"1\":{\"91\":1}}],[\"的异常\",{\"1\":{\"80\":1}}],[\"的例子\",{\"0\":{\"65\":1}}],[\"的基本思想是将这些横切关注点与系统的核心业务逻辑分离开来\",{\"1\":{\"64\":1}}],[\"的基础\",{\"1\":{\"95\":1}}],[\"的基础命令\",{\"1\":{\"15\":1}}],[\"的基础用法\",{\"1\":{\"15\":1}}],[\"的原因只有优雅二字而已\",{\"1\":{\"60\":1}}],[\"的我那时候还没有认识到问题的严重性\",{\"1\":{\"60\":1}}],[\"的效果\",{\"1\":{\"53\":1}}],[\"的日子里\",{\"1\":{\"53\":1}}],[\"的变量进行写操作的时候\",{\"1\":{\"128\":1}}],[\"的变量\",{\"1\":{\"50\":1}}],[\"的老项目完全没有这种需求\",{\"1\":{\"49\":1}}],[\"的老手\",{\"1\":{\"15\":1}}],[\"的项目经验\",{\"1\":{\"150\":1}}],[\"的项目\",{\"1\":{\"38\":1}}],[\"的时候得心应手\",{\"1\":{\"175\":1}}],[\"的时候\",{\"1\":{\"38\":1}}],[\"的机制来解决\",{\"1\":{\"32\":1}}],[\"的一些性能和稳定性问题\",{\"1\":{\"32\":1}}],[\"的包从国外的镜像源切换到国内的镜像源\",{\"1\":{\"32\":1}}],[\"的事件机制重写这个例子\",{\"1\":{\"27\":1}}],[\"的事件机制或\",{\"1\":{\"25\":1}}],[\"的事件总线\",{\"1\":{\"25\":1}}],[\"的许可证\",{\"1\":{\"21\":1}}],[\"的使用方法\",{\"1\":{\"15\":1}}],[\"的使用率肯定是名列前茅\",{\"1\":{\"10\":1}}],[\"的口号\",{\"1\":{\"12\":1}}],[\"的圣经绝对就是下面这本\",{\"1\":{\"12\":1}}],[\"的就业地位不知道还能撑多久\",{\"1\":{\"11\":1}}],[\"的\",{\"1\":{\"11\":1,\"53\":1,\"57\":1,\"60\":1,\"64\":1,\"66\":1,\"74\":1,\"95\":2,\"96\":1,\"106\":1,\"122\":1,\"138\":1}}],[\"的出现\",{\"1\":{\"95\":1}}],[\"的出现终于让\",{\"1\":{\"32\":1}}],[\"的出现不亚于互联网的诞生\",{\"1\":{\"1\":1}}],[\"的出现会不会成为第四次工业革命的契机\",{\"1\":{\"1\":1}}],[\"csrf\",{\"1\":{\"179\":1}}],[\"css\",{\"1\":{\"32\":1,\"95\":1}}],[\"cv\",{\"1\":{\"175\":1}}],[\"cglib\",{\"1\":{\"147\":6}}],[\"cjlib\",{\"1\":{\"138\":1}}],[\"cache\",{\"1\":{\"136\":1}}],[\"cas\",{\"1\":{\"130\":1,\"131\":2,\"133\":1,\"136\":1}}],[\"catch\",{\"1\":{\"86\":2}}],[\"child\",{\"1\":{\"119\":2}}],[\"c\",{\"1\":{\"102\":7,\"103\":2}}],[\"cpu\",{\"1\":{\"88\":1,\"127\":2,\"132\":2}}],[\"customannotation\",{\"1\":{\"66\":1}}],[\"customevent\",{\"1\":{\"27\":5}}],[\"client<\",{\"1\":{\"167\":1}}],[\"client\",{\"1\":{\"138\":1,\"168\":1,\"182\":1}}],[\"clean\",{\"1\":{\"60\":2}}],[\"cloud\",{\"1\":{\"49\":1,\"150\":1,\"152\":2,\"154\":3,\"159\":2}}],[\"classtomock\",{\"0\":{\"73\":1}}],[\"class<\",{\"0\":{\"73\":1}}],[\"classpath\",{\"1\":{\"50\":1}}],[\"class=\",{\"1\":{\"50\":1}}],[\"class\",{\"0\":{\"119\":1},\"1\":{\"26\":3,\"27\":3,\"43\":1,\"60\":3,\"66\":2,\"73\":1,\"78\":1,\"81\":1,\"84\":5,\"86\":1,\"119\":8,\"127\":1,\"129\":1,\"144\":3,\"147\":4,\"205\":1}}],[\"cookie\",{\"1\":{\"179\":1}}],[\"codecentric<\",{\"1\":{\"164\":1,\"167\":1}}],[\"code\",{\"1\":{\"141\":1}}],[\"color\",{\"1\":{\"107\":6}}],[\"collectors\",{\"1\":{\"86\":1}}],[\"collect\",{\"1\":{\"86\":1}}],[\"core\",{\"1\":{\"95\":1}}],[\"common\",{\"1\":{\"172\":1}}],[\"commons\",{\"1\":{\"170\":1}}],[\"computer\",{\"0\":{\"225\":1}}],[\"compare\",{\"1\":{\"136\":1}}],[\"compile\",{\"1\":{\"60\":2}}],[\"component\",{\"1\":{\"27\":5,\"66\":1}}],[\"com\",{\"1\":{\"60\":1,\"66\":5}}],[\"console\",{\"1\":{\"100\":2,\"104\":1,\"106\":5,\"110\":4,\"115\":2,\"117\":2,\"118\":2,\"119\":2,\"120\":1,\"121\":6,\"122\":3}}],[\"const\",{\"0\":{\"100\":1},\"1\":{\"100\":2,\"107\":6,\"121\":1}}],[\"constructor\",{\"1\":{\"84\":2,\"119\":6}}],[\"configuration\",{\"1\":{\"176\":1}}],[\"config\",{\"1\":{\"49\":1,\"50\":2,\"159\":2}}],[\"context\",{\"1\":{\"27\":3}}],[\"controller\",{\"1\":{\"66\":3}}],[\"control\",{\"1\":{\"14\":1}}],[\"concretesubscriber\",{\"1\":{\"26\":6}}],[\"concretepublisher\",{\"1\":{\"26\":4}}],[\"cnpm\",{\"1\":{\"32\":3}}],[\"cn\",{\"1\":{\"10\":1,\"15\":1}}],[\"create\",{\"1\":{\"147\":1}}],[\"createrenderer\",{\"1\":{\"95\":1}}],[\"crnm\",{\"1\":{\"86\":7}}],[\"cron\",{\"1\":{\"9\":1}}],[\"crud\",{\"1\":{\"3\":1,\"71\":1}}],[\"在存储元素信息的同时\",{\"1\":{\"196\":1}}],[\"在你真正调用的模块中配置你的\",{\"1\":{\"177\":1}}],[\"在解决包括缓存\",{\"1\":{\"172\":1}}],[\"在底层使用\",{\"1\":{\"170\":1}}],[\"在跨区域部署和大规模集群上可能面临一些性能和可扩展性方面的挑战\",{\"1\":{\"159\":1}}],[\"在注册中心上来看\",{\"1\":{\"159\":1}}],[\"在对性能要求比较高的大规模场景更适合\",{\"1\":{\"159\":1}}],[\"在对使用了\",{\"1\":{\"128\":1}}],[\"在配置管理做的更加全面\",{\"1\":{\"159\":1}}],[\"在配置管理流程上做的更好\",{\"1\":{\"159\":1}}],[\"在各个场景中做延伸\",{\"1\":{\"148\":1}}],[\"在各种新语言层出不穷的年代\",{\"1\":{\"11\":1}}],[\"在调用被代理类方法后执行一些操作\",{\"1\":{\"147\":1}}],[\"在调用被代理类方法前执行一些操作\",{\"1\":{\"147\":1}}],[\"在该方法中定义了代理类的行为\",{\"1\":{\"147\":1}}],[\"在该类中\",{\"1\":{\"144\":1}}],[\"在方法执行后提交或回滚事务\",{\"1\":{\"148\":1}}],[\"在方法执行后添加额外逻辑\",{\"1\":{\"144\":1}}],[\"在方法执行前添加额外逻辑\",{\"1\":{\"144\":1}}],[\"在java中\",{\"1\":{\"141\":1}}],[\"在灵活性上肯定就是略逊一筹了\",{\"1\":{\"140\":1}}],[\"在灵活性和逻辑的复用性上有了很大的提升\",{\"1\":{\"95\":1}}],[\"在编译的时候就已经确定的\",{\"1\":{\"140\":1}}],[\"在当前线程中\",{\"1\":{\"136\":1}}],[\"在并发编程中有两个重要的问题\",{\"1\":{\"135\":1}}],[\"在有竞争的情况下\",{\"1\":{\"131\":1}}],[\"在有知识面广度的情况下向自己感兴趣的方向深耕才是正解\",{\"1\":{\"31\":1}}],[\"在大多数情况下\",{\"1\":{\"130\":1}}],[\"在我第一次快速通关微服务的时候\",{\"1\":{\"152\":1}}],[\"在我们就近的\",{\"1\":{\"129\":1}}],[\"在我看来称他为时代弃子也不为过\",{\"1\":{\"60\":1}}],[\"在被持有后将处于锁定状态\",{\"1\":{\"129\":1}}],[\"在函数名后面加上\",{\"1\":{\"122\":1}}],[\"在es6中\",{\"1\":{\"119\":1}}],[\"在进行这些操作时\",{\"1\":{\"115\":1}}],[\"在之前\",{\"1\":{\"107\":1}}],[\"在公司项目中更容易维护\",{\"1\":{\"60\":1}}],[\"在上线成功之后再将release分支合并到devlop和master并标记tag\",{\"1\":{\"56\":1}}],[\"在develop分支上重新解决后问题后再创建新的release分支测试即可\",{\"1\":{\"56\":1}}],[\"在保证了develop分支稳定可用的基础上遇到上线\",{\"1\":{\"56\":1}}],[\"在master分支构建到可以胜任开发运行和各环境打包上线的基础上\",{\"1\":{\"56\":1}}],[\"在码云中在对应模块中创建工程仓库\",{\"1\":{\"56\":1}}],[\"在转换的时候会出现问题\",{\"1\":{\"50\":1}}],[\"在过去几年以\",{\"1\":{\"38\":1}}],[\"在很多内网的服务器中\",{\"1\":{\"34\":1}}],[\"在依赖项管理上的一些问题\",{\"1\":{\"32\":1}}],[\"在选择走后端这条路的时候\",{\"1\":{\"31\":1}}],[\"在使用观察者模式时\",{\"1\":{\"28\":1}}],[\"在数据库系统中\",{\"1\":{\"28\":1}}],[\"在图形用户界面\",{\"1\":{\"28\":1}}],[\"在发布\",{\"1\":{\"28\":1}}],[\"在这种情况下\",{\"1\":{\"179\":1}}],[\"在这个示例中\",{\"1\":{\"27\":1}}],[\"在这里处理事件\",{\"1\":{\"27\":1}}],[\"在这里我会总结出我对设计模式的理解和实现\",{\"1\":{\"22\":1}}],[\"在事件中传递给监听器进行处理\",{\"1\":{\"27\":1}}],[\"在spring框架的观察者模式中\",{\"1\":{\"27\":1}}],[\"在spring框架的观察者模式中我们首先要了解一些核心概念\",{\"1\":{\"27\":1}}],[\"在观察者模式中\",{\"1\":{\"27\":1}}],[\"在一些常见的方面都给予了我们开发出高质量\",{\"1\":{\"22\":1}}],[\"在\",{\"1\":{\"10\":1,\"15\":1,\"26\":1,\"122\":1,\"129\":1,\"136\":1,\"138\":1,\"143\":1,\"170\":1,\"184\":1}}],[\"这提供了更好的安全性和用户隐私保护\",{\"1\":{\"182\":1}}],[\"这可以通过重定向资源所有者到身份和授权服务器的授权页面来实现\",{\"1\":{\"182\":1}}],[\"这两种实现方式的区别在于代理对象的生成方式和代理的范围\",{\"1\":{\"141\":1}}],[\"这两个关键字来配合理解一下并发的原理\",{\"1\":{\"127\":1}}],[\"这两个最核心的知识点\",{\"1\":{\"64\":1}}],[\"这对展开并发编程很有帮助\",{\"1\":{\"134\":1}}],[\"这对于每次考试数十万考生的审批量无疑是个大问题\",{\"1\":{\"90\":1}}],[\"这样极大的保证了安全性的同时也解决了跨域支持的问题\",{\"1\":{\"179\":1}}],[\"这样可以减轻服务器的负担\",{\"1\":{\"179\":1}}],[\"这样可以实现动态管理多个应用程序\",{\"1\":{\"161\":1}}],[\"这样可以实现在不修改目标对象的代码的情况下\",{\"1\":{\"148\":1}}],[\"这样就减少了释放锁的开销\",{\"1\":{\"131\":1}}],[\"这样配置抽离存放就有两种方案\",{\"1\":{\"49\":1}}],[\"这几个状态会随着竞争情况而升级\",{\"1\":{\"129\":1}}],[\"这几份考生的材料就会无法被其他审核人获取到从而导致无人审批\",{\"1\":{\"90\":1}}],[\"这意味着每个元素所占相同大小的空间\",{\"1\":{\"199\":1}}],[\"这意味着\",{\"1\":{\"119\":1}}],[\"这也给我们带来了全新的挑战\",{\"1\":{\"151\":1}}],[\"这也就是微服务的前身了\",{\"1\":{\"151\":1}}],[\"这也充分印证了那句话\",{\"1\":{\"150\":1}}],[\"这也导致我们很少在工作中接触到它\",{\"1\":{\"64\":1}}],[\"这也注定了它逐渐被\",{\"1\":{\"60\":1}}],[\"这也只是和之前几年相比吧\",{\"1\":{\"11\":1}}],[\"这将由我们未来一起努力\",{\"1\":{\"58\":1}}],[\"这就是单体地狱\",{\"1\":{\"151\":1}}],[\"这就得提到锁的状态了\",{\"1\":{\"129\":1}}],[\"这就导致如果上线包出错会导致重新准备包将重新走一遍上线流程\",{\"1\":{\"49\":1}}],[\"这就为前端开发者带来了代码共享\",{\"1\":{\"32\":1}}],[\"这是一个接收交易所价格并转发给多个后台的纯后台项目\",{\"1\":{\"45\":1}}],[\"这是学习前端的基石\",{\"1\":{\"32\":1}}],[\"这一部分主要介绍使用过的数据库相关的知识点\",{\"1\":{\"40\":1}}],[\"这里是根据命令封装好的\",{\"1\":{\"175\":1}}],[\"这里就得用得到缓存一致性协议了\",{\"1\":{\"128\":1}}],[\"这里不会打印\",{\"1\":{\"121\":1}}],[\"这里体现了类型的多样性\",{\"1\":{\"112\":1}}],[\"这里定时任务的需求就很明确了\",{\"1\":{\"91\":1}}],[\"这里好在\",{\"1\":{\"86\":1}}],[\"这里有两种方式\",{\"1\":{\"66\":1}}],[\"这里的\",{\"1\":{\"60\":1}}],[\"这里其实我一直就有个问题\",{\"1\":{\"53\":1}}],[\"这里我也是基于这种思想来演示一个\",{\"1\":{\"172\":1}}],[\"这里我们要谈的\",{\"1\":{\"154\":1}}],[\"这里我们主要介绍一下箭头函数\",{\"1\":{\"118\":1}}],[\"这里我们只能使用公司在用的\",{\"1\":{\"45\":1}}],[\"这里我准备了一台阿里云的服务器\",{\"1\":{\"36\":1}}],[\"这里你可以通过闯关的形式学习一些\",{\"1\":{\"15\":1}}],[\"这种线性有序的表被称为线性表\",{\"1\":{\"199\":1}}],[\"这种方式可以隐藏远程调用的细节\",{\"1\":{\"140\":1}}],[\"这种方式确实有些\",{\"1\":{\"38\":1}}],[\"这种做法是为了提高获得锁和释放锁的效率\",{\"1\":{\"129\":1}}],[\"这种情况就需要每个人根据功能从develop分支中拉去一条属于自己的分支\",{\"1\":{\"56\":1}}],[\"这种情况你就算只使用master一个主分支开发都可以\",{\"1\":{\"56\":1}}],[\"这种观点确实应该被改观了\",{\"1\":{\"31\":1}}],[\"这种模式常用于异步消息处理\",{\"1\":{\"28\":1}}],[\"这种集中式的版本控制系统\",{\"1\":{\"14\":1}}],[\"这让我们很容易联想到\",{\"1\":{\"24\":1}}],[\"这都2023年了还有人在用\",{\"1\":{\"21\":1}}],[\"这些场景确实主要在项目搭建阶段就已经搭建完毕了\",{\"1\":{\"64\":1}}],[\"这些就要用到\",{\"1\":{\"50\":1}}],[\"这些书都是基于设计模式开山之作\",{\"1\":{\"17\":1}}],[\"这些我们也需要在空余时间了解一些\",{\"1\":{\"9\":1}}],[\"这个过程是原子操作\",{\"1\":{\"136\":1}}],[\"这个文件上\",{\"1\":{\"96\":1}}],[\"这个定时任务的场景其实也正好能暴露时间轮的问题\",{\"1\":{\"90\":1}}],[\"这个开源的java代码覆盖率工具就发挥作用了\",{\"1\":{\"68\":1}}],[\"这个关注点可能会横切多个对象\",{\"1\":{\"64\":1}}],[\"这个方法只能获取到全局\",{\"1\":{\"50\":1}}],[\"这个类帮我们做类型转换即可\",{\"1\":{\"50\":1}}],[\"这个问题的解决方法就是加一个空的上面占位符读取的类\",{\"1\":{\"50\":1}}],[\"这个问题其实在\",{\"1\":{\"32\":1}}],[\"这个属性跟在端口后才能进行访问\",{\"1\":{\"37\":1}}],[\"这个命令查看\",{\"1\":{\"37\":1}}],[\"这个就需要用\",{\"1\":{\"37\":1}}],[\"这个时候如果使用运维面板就可以一件安装\",{\"1\":{\"34\":1}}],[\"这个模块里我会把我工作和学习中接触到的设计模式结合场景记录下来\",{\"1\":{\"22\":1}}],[\"这个自带的软件上查看\",{\"1\":{\"18\":1}}],[\"这个长期维护版本才是新宠\",{\"1\":{\"12\":1}}],[\"这个部分的文章都是遇到值得写写的部分就记录一下\",{\"1\":{\"2\":1}}],[\"这本书涵盖了\",{\"1\":{\"15\":1}}],[\"这本书的作者是\",{\"1\":{\"15\":1}}],[\"这本书最新是到第四版\",{\"1\":{\"12\":1}}],[\"这本书我大学期间看过大半\",{\"1\":{\"12\":1}}],[\"虽然单链表解决了顺序表需要大量连续存储单元的缺点\",{\"1\":{\"205\":1}}],[\"虽然看似流程上十分相似\",{\"1\":{\"179\":1}}],[\"虽然感觉行业的趋势下\",{\"1\":{\"150\":1}}],[\"虽然在日后的优化中可能已经没有那么\",{\"1\":{\"129\":1}}],[\"虽然被写回到内存\",{\"1\":{\"128\":1}}],[\"虽然长远存在的分支只有master和develop分支\",{\"1\":{\"58\":1}}],[\"虽然成功把配置和代码从包中分离出来了\",{\"1\":{\"51\":1}}],[\"虽然这些前置项目平时都不是我负责\",{\"1\":{\"43\":1}}],[\"虽然这样可以脱离\",{\"1\":{\"43\":1}}],[\"虽然我也没用上\",{\"1\":{\"38\":1}}],[\"虽然大家嘴上天天\",{\"1\":{\"38\":1}}],[\"虽然现在很多人会疑惑到底是学习\",{\"1\":{\"32\":1}}],[\"虽然\",{\"1\":{\"12\":1,\"14\":1,\"60\":1,\"68\":1}}],[\"虽然工作中能用到的数据库的知识点都只是停留在对数据的操作\",{\"1\":{\"9\":1}}],[\"虽然相比于\",{\"1\":{\"1\":1}}],[\"相互之间存在一种或多种特定关系的数据元素的集合\",{\"1\":{\"193\":1}}],[\"相同性质的数据元素的集合\",{\"1\":{\"193\":1}}],[\"相同分为客户端和服务端相同\",{\"1\":{\"161\":1}}],[\"相应时间慢\",{\"1\":{\"132\":1}}],[\"相比于一些传统的关系型数据库\",{\"1\":{\"172\":1}}],[\"相比于\",{\"1\":{\"128\":1}}],[\"相比于其他各种出现的\",{\"1\":{\"9\":1}}],[\"相信在容器化火热的今天\",{\"1\":{\"38\":1}}],[\"相信一个合格的程序员是必须对数据库这项技术要达到熟练的地步吧\",{\"1\":{\"9\":1}}],[\"相关的观察者会收到相应的事件通知并执行相应的操作\",{\"1\":{\"28\":1}}],[\"相对于\",{\"1\":{\"14\":1,\"68\":1,\"159\":2}}],[\"尽管\",{\"1\":{\"53\":1}}],[\"尽管大家都是在用\",{\"1\":{\"9\":1}}],[\"尽早规范统一起来才是正途\",{\"1\":{\"43\":1}}],[\"尽力而为吧\",{\"1\":{\"2\":1}}],[\"simple\",{\"1\":{\"170\":1}}],[\"shiro\",{\"1\":{\"184\":2}}],[\"shell\",{\"1\":{\"161\":1}}],[\"share\",{\"1\":{\"1\":1}}],[\"slack等方式发送事件通知\",{\"1\":{\"161\":1}}],[\"slf4j\",{\"1\":{\"66\":1,\"170\":1}}],[\"ssm\",{\"1\":{\"150\":1}}],[\"ssh\",{\"1\":{\"150\":1}}],[\"sf\",{\"1\":{\"147\":3}}],[\"sfc\",{\"1\":{\"95\":1}}],[\"swap\",{\"1\":{\"136\":1}}],[\"sayhello\",{\"1\":{\"118\":4}}],[\"synchronized\",{\"0\":{\"129\":1},\"1\":{\"127\":1,\"128\":2,\"129\":2}}],[\"syobject\",{\"1\":{\"106\":19}}],[\"sy1\",{\"1\":{\"104\":2}}],[\"sy\",{\"1\":{\"104\":4,\"106\":11}}],[\"symbol\",{\"0\":{\"104\":1},\"1\":{\"104\":7,\"106\":11,\"107\":19}}],[\"system\",{\"1\":{\"26\":1,\"27\":1,\"50\":1,\"144\":6,\"147\":3}}],[\"scripts\",{\"1\":{\"96\":1}}],[\"s\",{\"1\":{\"66\":2,\"189\":2}}],[\"session\",{\"1\":{\"179\":3}}],[\"security\",{\"0\":{\"178\":1,\"180\":1,\"183\":1},\"1\":{\"184\":5}}],[\"second\",{\"1\":{\"111\":2}}],[\"server\",{\"1\":{\"168\":1,\"182\":2}}],[\"server<\",{\"1\":{\"164\":1}}],[\"servlet\",{\"1\":{\"150\":1}}],[\"servicepointcut\",{\"1\":{\"66\":3}}],[\"sellprice\",{\"1\":{\"86\":4}}],[\"setcallback\",{\"1\":{\"147\":1}}],[\"setsuperclass\",{\"1\":{\"147\":1}}],[\"setter\",{\"1\":{\"119\":1}}],[\"setting\",{\"1\":{\"115\":1,\"117\":1}}],[\"settimeout\",{\"1\":{\"100\":2,\"118\":2}}],[\"setaccessible\",{\"1\":{\"86\":1}}],[\"setname\",{\"1\":{\"81\":1}}],[\"setphonenumber\",{\"1\":{\"66\":1}}],[\"setport\",{\"1\":{\"43\":1}}],[\"setlastname\",{\"1\":{\"66\":1}}],[\"setfirstname\",{\"1\":{\"66\":1}}],[\"setemail\",{\"1\":{\"66\":1}}],[\"setusername\",{\"1\":{\"66\":1}}],[\"set\",{\"0\":{\"108\":1,\"112\":1,\"113\":1},\"1\":{\"62\":1,\"86\":1,\"109\":4,\"110\":2,\"112\":7,\"113\":10,\"115\":2,\"117\":2,\"119\":1}}],[\"sbc\",{\"1\":{\"55\":2,\"56\":1,\"57\":14,\"66\":1}}],[\"svn\",{\"0\":{\"53\":1},\"1\":{\"53\":6}}],[\"something\",{\"1\":{\"147\":1}}],[\"some\",{\"1\":{\"112\":3}}],[\"so\",{\"1\":{\"66\":1}}],[\"son\",{\"1\":{\"66\":1}}],[\"songbaicheng\",{\"1\":{\"66\":1}}],[\"song\",{\"1\":{\"66\":1}}],[\"socket\",{\"1\":{\"45\":3}}],[\"source\",{\"1\":{\"27\":3}}],[\"srcdir=\",{\"1\":{\"60\":1}}],[\"src\",{\"1\":{\"43\":1,\"60\":3,\"96\":1}}],[\"sum\",{\"1\":{\"119\":1}}],[\"suspense\",{\"1\":{\"95\":1}}],[\"super\",{\"1\":{\"27\":1,\"119\":2}}],[\"subscriber2\",{\"1\":{\"26\":3}}],[\"subscriber1\",{\"1\":{\"26\":2}}],[\"subscribers\",{\"1\":{\"26\":5}}],[\"subscriber\",{\"1\":{\"26\":15}}],[\"subscribe\",{\"1\":{\"26\":4}}],[\"subversion\",{\"1\":{\"14\":3}}],[\"study\",{\"1\":{\"95\":1,\"125\":1,\"198\":1}}],[\"stream\",{\"1\":{\"86\":1}}],[\"string\",{\"1\":{\"26\":8,\"27\":5,\"43\":2,\"50\":1,\"66\":5,\"86\":2,\"104\":1,\"109\":2,\"144\":9,\"147\":1}}],[\"stateless\",{\"1\":{\"179\":1}}],[\"static\",{\"1\":{\"26\":1,\"43\":1,\"144\":1,\"147\":1}}],[\"stack\",{\"1\":{\"136\":1}}],[\"starter\",{\"1\":{\"164\":2,\"167\":2}}],[\"start\",{\"1\":{\"43\":1}}],[\"stereotype\",{\"1\":{\"27\":2}}],[\"spring的\",{\"1\":{\"159\":1}}],[\"springboottest\",{\"1\":{\"71\":1}}],[\"springbootmoudle\",{\"1\":{\"66\":1}}],[\"springframework\",{\"1\":{\"27\":5,\"50\":1,\"164\":1,\"167\":1}}],[\"spring版\",{\"0\":{\"27\":1}}],[\"spring\",{\"0\":{\"160\":1,\"169\":1,\"170\":1,\"171\":1,\"178\":1,\"180\":1,\"183\":1,\"223\":1},\"1\":{\"25\":1,\"27\":2,\"45\":1,\"49\":2,\"50\":2,\"71\":2,\"150\":2,\"152\":2,\"154\":5,\"159\":2,\"161\":21,\"165\":1,\"168\":2,\"170\":4,\"177\":1,\"184\":6}}],[\"sql\",{\"1\":{\"9\":3}}],[\"所有的实例域\",{\"1\":{\"136\":1}}],[\"所有的测试代码都在博客首页中的\",{\"1\":{\"95\":1,\"125\":1,\"198\":1}}],[\"所有的查询价格的请求都走了同一个接口\",{\"1\":{\"86\":1}}],[\"所有掌握\",{\"1\":{\"9\":1}}],[\"所取代\",{\"1\":{\"60\":1}}],[\"所取代了\",{\"1\":{\"60\":1}}],[\"所以空表和非空表得到了统一\",{\"1\":{\"205\":1}}],[\"所以单链表是非随机存取的存储结构\",{\"1\":{\"205\":1}}],[\"所以算法的频度\",{\"1\":{\"188\":1}}],[\"所以目前几乎所有的项目都会有依赖它的需求\",{\"1\":{\"172\":1}}],[\"所以就引入偏向锁的概念\",{\"1\":{\"130\":1}}],[\"所以线程对锁的获取和释放就是对\",{\"1\":{\"129\":1}}],[\"所以在项目中使用非常推荐放在\",{\"1\":{\"172\":1}}],[\"所以在\",{\"1\":{\"128\":1}}],[\"所以在移动环境变量的时候尽量配置到全局变量中去\",{\"1\":{\"50\":1}}],[\"所以很多人都说\",{\"1\":{\"125\":1}}],[\"所以要调用遍历器对象iterator\",{\"1\":{\"122\":1}}],[\"所以会被本行\",{\"1\":{\"121\":1}}],[\"所以获取的并不是\",{\"1\":{\"106\":1}}],[\"所以取到的是字符串\",{\"1\":{\"106\":1}}],[\"所以\",{\"1\":{\"68\":1,\"152\":1}}],[\"所以负责这个任务的工作就落到了我另一个同事头上\",{\"1\":{\"66\":1}}],[\"所以日志脱敏的解决办法就是开发一个脱敏工具类\",{\"1\":{\"66\":1}}],[\"所以日常个人使用还是十分推荐的\",{\"1\":{\"38\":1}}],[\"所以相比于maven和gradle来说\",{\"1\":{\"60\":1}}],[\"所以整个脚本最重要的就是其中的一个个<target><\",{\"1\":{\"60\":1}}],[\"所以规范存在的意义是当新的问题出现的时候\",{\"1\":{\"58\":1}}],[\"所以直接先将\",{\"1\":{\"57\":1}}],[\"所以无论流程是如何的\",{\"1\":{\"56\":1}}],[\"所以希望读者都够清晰理解每个分支的作用和意义\",{\"1\":{\"56\":1}}],[\"所以这一次我选择的是号称微服务一站式解决方案的\",{\"1\":{\"152\":1}}],[\"所以这个步骤的实质就是线程a向线程b发送消息\",{\"1\":{\"136\":1}}],[\"所以这份规约里面包含了分支开发的定义\",{\"1\":{\"53\":1}}],[\"所以这让我一度认为\",{\"1\":{\"53\":1}}],[\"所以每次开发上线简直是地狱体验\",{\"1\":{\"53\":1}}],[\"所以沟通后决定将生产包中的配置和代码分离开来\",{\"1\":{\"49\":1}}],[\"所以对接价格的接口实现还需要和后台一致\",{\"1\":{\"46\":1}}],[\"所以我们也遵循此道来进行\",{\"1\":{\"95\":1}}],[\"所以我们在每日的流水表中增加价格处理状态的字段\",{\"1\":{\"91\":1}}],[\"所以我们结合\",{\"1\":{\"71\":1}}],[\"所以我们就用最常用的\",{\"1\":{\"71\":1}}],[\"所以我们决定把\",{\"1\":{\"49\":1}}],[\"所以我们将自己定义的工作日和所需产品价格\",{\"1\":{\"46\":1}}],[\"所以我们并不会牵扯到数据持久化的问题\",{\"1\":{\"45\":1}}],[\"所以我们采用\",{\"1\":{\"45\":1}}],[\"所以重构的任务就落到了我的身上\",{\"1\":{\"43\":1}}],[\"所以自己在服务器上摸爬滚打的时候没少删错东西\",{\"1\":{\"38\":1}}],[\"所以个人还是推荐创建一个新文件夹再进行下载\",{\"1\":{\"36\":1}}],[\"所以拥抱\",{\"1\":{\"32\":1}}],[\"所以选择了灵活和性能并重的\",{\"1\":{\"32\":1}}],[\"所以说如果你关注包的安装速度和依赖项管理的性能\",{\"1\":{\"32\":1}}],[\"所以说就互联网的发展速度\",{\"1\":{\"12\":1}}],[\"所以程序员的工作就是保持学习\",{\"1\":{\"31\":1}}],[\"所以观察者模常用于实现对象之间的一对多依赖关系\",{\"1\":{\"24\":1}}],[\"所以下载的时候除非不得已还是要下载苹果芯片的版本\",{\"1\":{\"18\":1}}],[\"所以学习\",{\"1\":{\"11\":1}}],[\"所以先把知识点都覆盖罗列一下\",{\"1\":{\"2\":1}}],[\"行书\",{\"0\":{\"5\":1}}],[\"谁知道未来会不会有什么高大上的工作做做\",{\"1\":{\"3\":1}}],[\"起码现在还觉得没有什么值得学习借鉴的部分\",{\"1\":{\"3\":1}}],[\"搞一些缝缝补补的工作\",{\"1\":{\"3\":1}}],[\"天天就是维护\",{\"1\":{\"3\":1}}],[\"不要求逻辑上相邻的元素在物理位置上也相邻\",{\"1\":{\"196\":1}}],[\"不要求目标对象实现接口\",{\"1\":{\"141\":1}}],[\"不要嵌套\",{\"1\":{\"121\":1}}],[\"不可中断的一个或者一系列指令\",{\"1\":{\"136\":1}}],[\"不可直接push\",{\"1\":{\"55\":1}}],[\"不会消耗\",{\"1\":{\"132\":1}}],[\"不会用到数据库\",{\"1\":{\"45\":1}}],[\"不需要加\",{\"1\":{\"120\":1}}],[\"不是target\",{\"1\":{\"115\":1}}],[\"不是吧不是吧\",{\"1\":{\"21\":1}}],[\"不完全解构\",{\"1\":{\"102\":1,\"103\":1}}],[\"不支持变量提升\",{\"1\":{\"100\":1}}],[\"不支持分支\",{\"1\":{\"53\":1}}],[\"不允许push代码\",{\"1\":{\"56\":1}}],[\"不允许直接在该分支做功能开发\",{\"1\":{\"55\":1}}],[\"不再仅仅运行在浏览器\",{\"1\":{\"32\":1}}],[\"不符合现代java语言的设计原则和最佳实践\",{\"1\":{\"25\":1}}],[\"不同开发工作模式有不同的用法\",{\"1\":{\"15\":1}}],[\"不过使用起来也要麻烦一些\",{\"1\":{\"159\":1}}],[\"不过用\",{\"1\":{\"133\":1}}],[\"不过类中的\",{\"1\":{\"119\":1}}],[\"不过更新之后感觉\",{\"1\":{\"99\":1}}],[\"不过当时那已经是一个老项目了\",{\"1\":{\"90\":1}}],[\"不过在一些特殊情况下合理利用反射可以为我们带来灵活性和扩展性\",{\"1\":{\"84\":1}}],[\"不过对我来说\",{\"1\":{\"60\":1}}],[\"不过这个方法有个弊端\",{\"1\":{\"50\":1}}],[\"不过我个人是没用过\",{\"1\":{\"38\":1}}],[\"不过最近一款开源并且号称新一代的\",{\"1\":{\"34\":1}}],[\"不过就目前而言\",{\"1\":{\"11\":1}}],[\"不过说实话之前天天\",{\"1\":{\"3\":1}}],[\"不知道现在还有没有人总结学历路线这个东西\",{\"1\":{\"2\":1}}],[\"整理一下工作中遇到的实际开发任务\",{\"1\":{\"3\":1}}],[\"工作中遇到的定时任务场景\",{\"0\":{\"89\":1}}],[\"工作中遇到的ant打包需求\",{\"0\":{\"61\":1}}],[\"工作中的业务难免要定时任务打交道\",{\"1\":{\"88\":1}}],[\"工作中使用反射的例子\",{\"0\":{\"85\":1}}],[\"工作中使用到\",{\"0\":{\"65\":1}}],[\"工作场景等部分\",{\"1\":{\"53\":1}}],[\"工作实战\",{\"0\":{\"3\":1}}],[\"工欲善其事\",{\"1\":{\"20\":1}}],[\"工具方法服务类和具体实现类\",{\"0\":{\"175\":1}}],[\"工具对比合并到上一层文件夹中\",{\"1\":{\"53\":1}}],[\"工具要想用的好\",{\"1\":{\"21\":1}}],[\"工具的下载量就证明了它可以胜任好自己的本职工作\",{\"1\":{\"20\":1}}],[\"工具\",{\"1\":{\"15\":1}}],[\"工具很多事情变得异常简单轻松\",{\"1\":{\"1\":1}}],[\"路虽远行则将至\",{\"1\":{\"2\":1}}],[\"毕竟现在毕竟热门框架的官网都会把常用的命令给列举出来\",{\"1\":{\"32\":1}}],[\"毕竟现在博客还属于前期\",{\"1\":{\"2\":1}}],[\"毕竟自己现在不是刚毕业了\",{\"1\":{\"2\":1}}],[\"一般标识为\",{\"1\":{\"199\":1}}],[\"一般这些微服务网关都与服务注册中心相配合使用\",{\"1\":{\"154\":1}}],[\"一片红海\",{\"1\":{\"150\":1}}],[\"一塌糊涂\",{\"1\":{\"150\":1}}],[\"一直等到只有锁的线程释放锁再唤醒这些阻塞线程进行新一轮争夺锁之战\",{\"1\":{\"131\":1}}],[\"一直浮于表面可不行\",{\"1\":{\"2\":1}}],[\"一种非字符串的新数据类型\",{\"1\":{\"104\":1}}],[\"一种是放在云平台读取\",{\"1\":{\"49\":1}}],[\"一旦声明常量的值就不能改变\",{\"1\":{\"100\":1}}],[\"一些高端的场景我倒是没有遇到过\",{\"1\":{\"89\":1}}],[\"一些传统的工具的地位已经不保\",{\"1\":{\"1\":1}}],[\"一次上线流程就此完成\",{\"1\":{\"56\":1}}],[\"一定要创建\",{\"1\":{\"56\":1}}],[\"一个值的集合和定义在此集合上的一组操作的总称\",{\"1\":{\"193\":1}}],[\"一个数据元素可以由若干数据项组成\",{\"1\":{\"193\":1}}],[\"一个好的算法应该达到正确性\",{\"1\":{\"186\":1}}],[\"一个算法的设计取决于所选的逻辑结构\",{\"1\":{\"194\":1}}],[\"一个算法所需要的空间包括存放本身所用的指令\",{\"1\":{\"189\":1}}],[\"一个算法必须有一个或多个输出\",{\"1\":{\"186\":1}}],[\"一个算法必须在执行有穷步骤后结束\",{\"1\":{\"186\":1}}],[\"一个算法可以有零个或多个输入\",{\"1\":{\"186\":1}}],[\"一个是\",{\"1\":{\"110\":4}}],[\"一个古老的价格处理程序\",{\"1\":{\"86\":1}}],[\"一个关注点的模块化\",{\"1\":{\"64\":1}}],[\"一个项目只能有一个develop分支\",{\"1\":{\"55\":1}}],[\"一个项目只能有一个master分支\",{\"1\":{\"55\":1}}],[\"一个号称全世界最准确的翻译软件\",{\"1\":{\"19\":1}}],[\"一天就整出了一份我们自己使用的\",{\"1\":{\"53\":1}}],[\"一包到底\",{\"1\":{\"49\":1}}],[\"一步一步完成即可\",{\"1\":{\"37\":1}}],[\"一对多的依赖关系\",{\"1\":{\"28\":1}}],[\"一开始订阅者订阅了两个发布者\",{\"1\":{\"26\":1}}],[\"一书中的一句话\",{\"1\":{\"22\":1}}],[\"一提到\",{\"1\":{\"12\":1,\"21\":1}}],[\"一提到数据结构和算法就不的不让我想到上学时计算机的四大天书\",{\"1\":{\"6\":1}}],[\"一样\",{\"1\":{\"10\":1}}],[\"10\",{\"1\":{\"100\":3,\"103\":3}}],[\"100\",{\"1\":{\"86\":5}}],[\"1415926\",{\"1\":{\"100\":2}}],[\"14\",{\"1\":{\"86\":4}}],[\"18\",{\"1\":{\"86\":4,\"118\":3}}],[\"1234\",{\"1\":{\"86\":20}}],[\"12345678912\",{\"1\":{\"66\":1}}],[\"123\",{\"1\":{\"66\":2,\"86\":20}}],[\"1pctl\",{\"1\":{\"37\":2}}],[\"1panel\",{\"0\":{\"33\":1},\"1\":{\"34\":1}}],[\"1\",{\"0\":{\"48\":1},\"1\":{\"2\":1,\"60\":1,\"74\":3,\"75\":1,\"76\":1,\"77\":1,\"102\":10,\"110\":4,\"111\":2,\"112\":9,\"113\":7,\"119\":2,\"121\":2,\"122\":2,\"128\":1,\"188\":1}}],[\"到这里git仓库就已经迁移完成了\",{\"1\":{\"56\":1}}],[\"到底什么才是代码的顶峰呢\",{\"1\":{\"22\":1}}],[\"到\",{\"1\":{\"2\":1,\"57\":1}}],[\"0<\",{\"1\":{\"147\":1}}],[\"0123456789\",{\"1\":{\"100\":1}}],[\"06\",{\"1\":{\"99\":1}}],[\"05\",{\"1\":{\"86\":4}}],[\"0\",{\"1\":{\"2\":1,\"60\":1,\"81\":1,\"99\":1,\"100\":2,\"110\":4,\"147\":1,\"182\":7,\"199\":1}}],[\"a3\",{\"1\":{\"199\":1}}],[\"a2\",{\"1\":{\"199\":1}}],[\"a1\",{\"1\":{\"199\":1}}],[\"access\",{\"1\":{\"182\":1}}],[\"actuator<\",{\"1\":{\"164\":1,\"167\":1}}],[\"actuator是相互配合使用的\",{\"1\":{\"161\":1}}],[\"actuator\",{\"1\":{\"161\":5}}],[\"authorization\",{\"1\":{\"182\":1}}],[\"autowired\",{\"1\":{\"27\":2}}],[\"ads\",{\"0\":{\"224\":1}}],[\"admin可以轻松集成到现有的spring\",{\"1\":{\"161\":1}}],[\"admin是一个用于管理和监控\",{\"1\":{\"161\":1}}],[\"admin\",{\"0\":{\"160\":1},\"1\":{\"161\":8,\"164\":1,\"165\":1,\"167\":1,\"168\":2}}],[\"adding\",{\"1\":{\"144\":1}}],[\"adduser\",{\"1\":{\"78\":2,\"144\":3}}],[\"addfunction\",{\"1\":{\"57\":11}}],[\"addmqtranfer\",{\"1\":{\"55\":1,\"56\":1}}],[\"addwebapp\",{\"1\":{\"43\":1}}],[\"add\",{\"1\":{\"26\":1,\"112\":6}}],[\"alibaba\",{\"1\":{\"152\":1}}],[\"aba\",{\"1\":{\"133\":1}}],[\"abbrev\",{\"1\":{\"62\":1}}],[\"atomic\",{\"1\":{\"136\":1}}],[\"atomicinteger\",{\"1\":{\"133\":1}}],[\"atomicboolean\",{\"1\":{\"133\":1}}],[\"atleast\",{\"0\":{\"77\":1},\"1\":{\"77\":1}}],[\"async\",{\"0\":{\"123\":1}}],[\"as\",{\"1\":{\"120\":1}}],[\"aspectj\",{\"1\":{\"64\":1}}],[\"aspect\",{\"1\":{\"64\":1,\"66\":1}}],[\"age\",{\"1\":{\"115\":2,\"116\":2,\"117\":1,\"118\":6}}],[\"aaa\",{\"1\":{\"103\":2}}],[\"a\",{\"1\":{\"102\":14,\"103\":6,\"109\":2,\"112\":2,\"113\":6,\"119\":18,\"120\":2}}],[\"afterreturning\",{\"1\":{\"64\":1,\"66\":4}}],[\"afterthrowing\",{\"1\":{\"64\":1}}],[\"after\",{\"1\":{\"64\":1,\"144\":1,\"147\":1}}],[\"aop\",{\"0\":{\"65\":1},\"1\":{\"64\":7,\"140\":1}}],[\"apollo\",{\"1\":{\"159\":3}}],[\"app\",{\"1\":{\"96\":1}}],[\"applicationlistener<myevent>\",{\"1\":{\"27\":1}}],[\"applicationlistener\",{\"1\":{\"27\":1}}],[\"applicationeventpublisher\",{\"1\":{\"27\":2}}],[\"applicationevent\",{\"1\":{\"27\":1}}],[\"application\",{\"1\":{\"27\":2}}],[\"api\",{\"1\":{\"95\":3,\"154\":1}}],[\"apache\",{\"1\":{\"60\":1}}],[\"await\",{\"1\":{\"43\":1}}],[\"an是唯一一个最后一个元素\",{\"1\":{\"199\":1}}],[\"an\",{\"1\":{\"199\":1}}],[\"answer\",{\"0\":{\"81\":1}}],[\"anyint\",{\"1\":{\"80\":1}}],[\"any\",{\"1\":{\"78\":1,\"81\":1}}],[\"ant并不是一无是处\",{\"1\":{\"60\":1}}],[\"ant\",{\"0\":{\"59\":1},\"1\":{\"60\":2}}],[\"angular\",{\"1\":{\"32\":1}}],[\"annotations\",{\"1\":{\"84\":1}}],[\"annotation\",{\"1\":{\"27\":1,\"66\":1}}],[\"and\",{\"1\":{\"1\":1,\"136\":1}}],[\"artifactid>\",{\"1\":{\"147\":1,\"164\":2,\"167\":2}}],[\"arr\",{\"1\":{\"113\":2}}],[\"array\",{\"1\":{\"111\":2}}],[\"array的转换\",{\"1\":{\"111\":1}}],[\"arraylist<>\",{\"1\":{\"26\":1}}],[\"aroundadvice\",{\"1\":{\"66\":1}}],[\"around\",{\"1\":{\"64\":1,\"66\":4}}],[\"are\",{\"1\":{\"26\":1}}],[\"args\",{\"1\":{\"26\":1,\"43\":1,\"144\":3,\"147\":3}}],[\"arm\",{\"1\":{\"18\":1}}],[\"ai+1\",{\"1\":{\"199\":1}}],[\"ai\",{\"1\":{\"1\":4,\"199\":1}}],[\"正是是由于过于分散的存储\",{\"1\":{\"205\":1}}],[\"正常导入导出\",{\"1\":{\"120\":1}}],[\"正常\",{\"1\":{\"118\":1}}],[\"正因如此\",{\"1\":{\"90\":1}}],[\"正如这里的打\",{\"1\":{\"60\":1}}],[\"正好手头也有服务器就看看面板工具是不是真的那么好用\",{\"1\":{\"34\":1}}],[\"正则表达式\",{\"1\":{\"9\":1}}],[\"正像我现在坐在这里写开始写这一部分的序言一样\",{\"1\":{\"1\":1}}],[\"正值\",{\"1\":{\"1\":1}}],[\"纸质书籍逐渐成为小众选择\",{\"1\":{\"1\":1}}],[\"我乐意就够了\",{\"1\":{\"150\":1}}],[\"我喜欢\",{\"1\":{\"150\":1}}],[\"我自己学习我可不管什么该不该\",{\"1\":{\"150\":1}}],[\"我自己学习看的是第一版的\",{\"1\":{\"17\":1}}],[\"我就要上微服务\",{\"1\":{\"150\":1}}],[\"我就不得不说一个事情\",{\"1\":{\"21\":1}}],[\"我已经和它打了两年的交道了\",{\"1\":{\"60\":1}}],[\"我才发现不知不觉\",{\"1\":{\"60\":1}}],[\"我现在都还依稀记得当时学习ant时看到的一篇文章里有那么一句话\",{\"1\":{\"60\":1}}],[\"我现在还记得在\",{\"1\":{\"22\":1}}],[\"我义不容辞\",{\"1\":{\"53\":1}}],[\"我接触的两家公司都是用过\",{\"1\":{\"53\":1}}],[\"我目前还没做过运维的工作\",{\"1\":{\"38\":1}}],[\"我只是需要安装一些数据库或者运行环境\",{\"1\":{\"34\":1}}],[\"我只能说一个6\",{\"1\":{\"12\":1}}],[\"我感觉应该能够成为一名合格的前端工程师了\",{\"1\":{\"32\":1}}],[\"我与前端\",{\"0\":{\"32\":1}}],[\"我们刚才提到的是头指针\",{\"1\":{\"205\":1}}],[\"我们通常用头指针来标识一个单链表\",{\"1\":{\"205\":1}}],[\"我们就得先谈一下早期\",{\"1\":{\"179\":1}}],[\"我们就继续原来使用了\",{\"1\":{\"45\":1}}],[\"我们首先要知道\",{\"1\":{\"179\":1}}],[\"我们接下来就跟着组件一步一步完成就可以了\",{\"1\":{\"152\":1}}],[\"我们定义了一个\",{\"1\":{\"143\":1}}],[\"我们定义一个事件类\",{\"1\":{\"27\":1}}],[\"我们都会想到\",{\"1\":{\"127\":1}}],[\"我们直接开始准备工作\",{\"1\":{\"125\":1}}],[\"我们使用\",{\"1\":{\"106\":1}}],[\"我们把将目光聚集在\",{\"1\":{\"96\":1}}],[\"我们把常见的几种流程都过一遍\",{\"1\":{\"56\":1}}],[\"我们只关注根目录中\",{\"1\":{\"96\":1}}],[\"我们只需要通过反射拿到\",{\"1\":{\"86\":1}}],[\"我们只需要从所需功能完善的develop分上创建对应的release分支进行部署测试\",{\"1\":{\"56\":1}}],[\"我们会在四点五十去ftp获取价格文件\",{\"1\":{\"91\":1}}],[\"我们和彭博约定在每天的四点请求获取每日的币种价格\",{\"1\":{\"91\":1}}],[\"我们这里需要依赖\",{\"1\":{\"71\":1}}],[\"我们后台需要做的就是把传递给前台的\",{\"1\":{\"66\":1}}],[\"我们常用的\",{\"1\":{\"64\":1}}],[\"我们需要先知道以下几个核心概念\",{\"1\":{\"64\":1}}],[\"我们能以一个相对规范的状态转换到下一个规范中来\",{\"1\":{\"58\":1}}],[\"我们并不着急将release分支合并到develop和master分支上\",{\"1\":{\"56\":1}}],[\"我们可以根据这两个\",{\"1\":{\"148\":1}}],[\"我们可以在方法执行前后添加额外的逻辑\",{\"1\":{\"143\":1}}],[\"我们可以先把其他扰乱视线的东西删除\",{\"1\":{\"96\":1}}],[\"我们可以先从develop创建\",{\"1\":{\"56\":1}}],[\"我们可以保证master和develop与生产一致保持一致\",{\"1\":{\"56\":1}}],[\"我们先使用了\",{\"1\":{\"43\":1}}],[\"我们平时接触最多的应该就是其在数据库管理系统方面的应用了\",{\"1\":{\"40\":1}}],[\"我们取消了一个订阅者的订阅\",{\"1\":{\"26\":1}}],[\"我把我认为平时好用的和最常用的配置贴出来\",{\"1\":{\"21\":1}}],[\"我最种草的还是因为他可以实现离线翻译\",{\"1\":{\"19\":1}}],[\"我觉得学习设计模式更行之有效的方法是在阅读过后有初步的理解的情况下的亲身实践\",{\"1\":{\"17\":1}}],[\"我用\",{\"1\":{\"12\":1}}],[\"我这里也只是简单粗略把有印象的记录一下\",{\"1\":{\"2\":1}}],[\"我还在这里敲键盘码字呢\",{\"1\":{\"1\":1}}],[\"我要变强\",{\"0\":{\"0\":1}}],[\"借助指示元素存储地址的指针来表示元素之间的逻辑关系\",{\"1\":{\"196\":1}}],[\"借助\",{\"1\":{\"1\":1}}],[\"作为基于内存的\",{\"1\":{\"172\":1}}],[\"作为日志框架并支持我们在配置文件通过简单的配置就可以开箱即用\",{\"1\":{\"170\":1}}],[\"作为日志门面\",{\"1\":{\"170\":1}}],[\"作为抽象层去识别和对接一些常见的日志框架\",{\"1\":{\"170\":1}}],[\"作为配置中心的话\",{\"1\":{\"159\":1}}],[\"作为配置中心应该要求支持集中化管理\",{\"1\":{\"159\":1}}],[\"作为注册中心要做到服务注册和注销\",{\"1\":{\"159\":1}}],[\"作为新时代的青年\",{\"1\":{\"150\":1}}],[\"作为新功能或新特性开发分支\",{\"1\":{\"55\":1}}],[\"作为多线程并发中的元老级角色也被称作重量级锁\",{\"1\":{\"129\":1}}],[\"作为对象的模板被引入\",{\"1\":{\"119\":1}}],[\"作为属性名\",{\"0\":{\"106\":1}}],[\"作为\",{\"1\":{\"96\":1}}],[\"作为我们工作中最经常使用的知识点大家肯定是烂熟于心\",{\"1\":{\"64\":1}}],[\"作为构建工具对程序员来说是一种挑战\",{\"1\":{\"60\":1}}],[\"作为主开发分支\",{\"1\":{\"55\":1}}],[\"作为受众群体来说\",{\"1\":{\"1\":1}}],[\"作品来瓜分着新时代的蛋糕\",{\"1\":{\"1\":1}}],[\"短短一夜之间各家厂商都拿出了自己的\",{\"1\":{\"1\":1}}],[\"盖茨都表示gpt\",{\"1\":{\"1\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
