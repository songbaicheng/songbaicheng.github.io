import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as a,a as i}from"./app-89e4a93b.js";const t={},n=i('<h1 id="prompt-engineering" tabindex="-1"><a class="header-anchor" href="#prompt-engineering" aria-hidden="true">#</a> Prompt Engineering</h1><p>Prompt（指令） 就是 AGI 时代的编程语言。<br> 学习提示工程，你要明白为什么有的指令有效有的指令无效、怎么提升指令有效的概率、那些问题用提升工程更有效、那些用传统编程更快、能完成与业务系统的对接。</p><h2 id="目的" tabindex="-1"><a class="header-anchor" href="#目的" aria-hidden="true">#</a> 目的</h2><ol><li>获取问题答案。类似于更加智能的百度。</li><li>固化一套 Prompt 到程序中来，成为系统功能的一部分。类似于生成日报、AI客服、知识库问答等。</li></ol><h2 id="prompt-调优" tabindex="-1"><a class="header-anchor" href="#prompt-调优" aria-hidden="true">#</a> Prompt 调优</h2><p>好的 Prompt 不是一蹴而就的，要尝试，高质量 Prompt 的核心要点是：<strong>具体、丰富、少歧异</strong>。</p><ul><li>角色定义。有论文表示，在提示词开始和结束的位置对模型影响是最大的，中间的内容反而影响最小。</li><li>加入例子。</li><li>思维链。在提问以“一步一步思考”的方式，让模型一步步推理出答案，模型会把问题分解成多个步骤然后逐步解决，使得输出更加准确。</li><li>思维树。</li><li>自洽性。多次结果不一致，需要调整 Prompt。</li><li>好的 Prompt 可以在新对话中重复测试，防止上下文影响。</li></ul><h2 id="防止-prompt-漏洞" tabindex="-1"><a class="header-anchor" href="#防止-prompt-漏洞" aria-hidden="true">#</a> 防止 Prompt 漏洞</h2><p>像著名的“奶奶漏洞”问题，通过变换用户角色等描述废弃掉之前的 Prompt 描述。解决大模型漏洞的方式和生活中的方式很像，解决方案有以下几种</p><h3 id="注入分类器" tabindex="-1"><a class="header-anchor" href="#注入分类器" aria-hidden="true">#</a> 注入分类器</h3><p>在 Prompt 中加入分类器，让模型判断输入是否符合预期。在 Prompt 判断自己的结果是否符合之前要求进行拦截。</p><h3 id="输入防御" tabindex="-1"><a class="header-anchor" href="#输入防御" aria-hidden="true">#</a> 输入防御</h3><p>在输入内容的前面都加上原则，比如说“作为……你不能回答与之无关的问题”。</p>',13),o=[n];function p(h,d){return e(),a("div",null,o)}const m=r(t,[["render",p],["__file","prompt-engineering.html.vue"]]);export{m as default};
