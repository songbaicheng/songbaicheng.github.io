import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as c,c as n,a as e,b as a,d as i,w as l,e as d}from"./app-7e92a49c.js";const u="/assets/images/study/computer-basis/ads/data-structure/stack/stack.jpg",h={},p=e("h1",{id:"栈",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#栈","aria-hidden":"true"},"#"),a(" 栈")],-1),_=d('<h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><p>栈（Stack）是只允许在一端进行插入或删除操作的线性表。</p><figure><img src="'+u+'" alt="栈的示意图" tabindex="0" loading="lazy"><figcaption>栈的示意图</figcaption></figure><ul><li>栈顶：线性表允许进行插入和删除的那一端。</li><li>栈底：固定的，不允许进行插入和删除的那一端。</li><li>空栈：不含任何元素空表。</li></ul><p>如上图所示，a1为栈底元素，a5为栈顶元素。根据规则，进栈次序依次为a1,a2,a3,a4,a5，而出栈依次为a5,a4,a3,a2,a1，由此可见栈的操作特性可以明显囊括为先进后出（Last In First Out，LIFO）。</p><blockquote><p>栈的数学性质：n个不同元素进栈，出栈元素不同排列的个数为 1/(n+1)乘2n中选n个数的排列，也被称为卡特兰（Catalan）数。</p></blockquote><h2 id="基本操作" tabindex="-1"><a class="header-anchor" href="#基本操作" aria-hidden="true">#</a> 基本操作</h2><ul><li>InitStack：初始化一个空栈。</li><li>StackEmpty：判断一个栈是否为空。</li><li>Push：进栈。</li><li>Pop：出栈。</li><li>GetTop：读取栈顶元素。</li><li>DestroyStack：销毁栈。</li></ul><h2 id="栈的顺序存储" tabindex="-1"><a class="header-anchor" href="#栈的顺序存储" aria-hidden="true">#</a> 栈的顺序存储</h2>',9);function m(f,k){const r=t("RouterLink"),o=t("Mermaid");return c(),n("div",null,[p,e("blockquote",null,[e("p",null,[a("所有的测试代码都在博客"),i(r,{to:"/"},{default:l(()=>[a("首页")]),_:1}),a("中的 java-study-demo 中找到。")])]),i(o,{id:"mermaid-8",code:"eJzLzcxLyU0s4FJQKMrPL9F4tqBDE8gGgZcLdz3d1Q8UgPEn70NwnrZufLJrNYgPAD5KGvY="}),_])}const b=s(h,[["render",m],["__file","stack.html.vue"]]);export{b as default};
