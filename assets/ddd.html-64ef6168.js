const e=JSON.parse(`{"key":"v-723727f0","path":"/study/development/ddd.html","title":"DDD 领域驱动设计","lang":"zh-CN","frontmatter":{"star":true,"category":"框架设计","tag":["DDD"],"description":"DDD 领域驱动设计 关于 DDD 领域驱动设计（Domain-Driven Design，DDD）是一种软件设计方法，是一种思想，它以领域为核心，将软件系统拆分为不同的领域，并在不同的领域中建立模型和规则。通过这种方式，可以提高软件系统的可维护性和可扩展性，并减少软件系统中的错误。 在我们以前的后端项目的开发过程当中，软件架构的设计往往是在项目开始之初就确立的，可是在实际的项目开发当中，我们往往发现，架构设计往往是在项目后期才逐渐完善起来的，这往往是因为项目初期对业务的理解不足，或者对软件架构的设计不够清晰，导致架构设计不够合理，最终导致软件系统的可维护性和可扩展性越来越差，而这个时期再开始考虑项目拆分的时候就会因为 MVC 架构各种复杂的调用关系而难以下手。","head":[["meta",{"property":"og:url","content":"https://github.com/songbaicheng/songbaicheng.github.io/study/development/ddd.html"}],["meta",{"property":"og:site_name","content":"Baicheng's Blog"}],["meta",{"property":"og:title","content":"DDD 领域驱动设计"}],["meta",{"property":"og:description","content":"DDD 领域驱动设计 关于 DDD 领域驱动设计（Domain-Driven Design，DDD）是一种软件设计方法，是一种思想，它以领域为核心，将软件系统拆分为不同的领域，并在不同的领域中建立模型和规则。通过这种方式，可以提高软件系统的可维护性和可扩展性，并减少软件系统中的错误。 在我们以前的后端项目的开发过程当中，软件架构的设计往往是在项目开始之初就确立的，可是在实际的项目开发当中，我们往往发现，架构设计往往是在项目后期才逐渐完善起来的，这往往是因为项目初期对业务的理解不足，或者对软件架构的设计不够清晰，导致架构设计不够合理，最终导致软件系统的可维护性和可扩展性越来越差，而这个时期再开始考虑项目拆分的时候就会因为 MVC 架构各种复杂的调用关系而难以下手。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-29T08:50:04.000Z"}],["meta",{"property":"article:author","content":"songbaicheng"}],["meta",{"property":"article:tag","content":"DDD"}],["meta",{"property":"article:modified_time","content":"2023-12-29T08:50:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"DDD 领域驱动设计\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-29T08:50:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"songbaicheng\\",\\"url\\":\\"https://github.com/songbaicheng\\",\\"email\\":\\"songbaicheng16@163.com\\"}]}"]]},"headers":[{"level":2,"title":"关于 DDD","slug":"关于-ddd","link":"#关于-ddd","children":[]},{"level":2,"title":"DDD 核心概念","slug":"ddd-核心概念","link":"#ddd-核心概念","children":[]},{"level":2,"title":"借鉴思想","slug":"借鉴思想","link":"#借鉴思想","children":[]},{"level":2,"title":"DDD 四层架构","slug":"ddd-四层架构","link":"#ddd-四层架构","children":[]}],"git":{"createdTime":1703839804000,"updatedTime":1703839804000,"contributors":[{"name":"songbaicheng","email":"songbaicheng16@163.com","commits":1}]},"readingTime":{"minutes":4.33,"words":1298},"filePathRelative":"study/development/ddd.md","localizedDate":"2023年12月29日","excerpt":"<h1> DDD 领域驱动设计</h1>\\n<h2> 关于 DDD</h2>\\n<p>领域驱动设计（Domain-Driven Design，DDD）是一种软件设计方法，是一种思想，它以领域为核心，将软件系统拆分为不同的领域，并在不同的领域中建立模型和规则。通过这种方式，可以提高软件系统的可维护性和可扩展性，并减少软件系统中的错误。</p>\\n<p>在我们以前的后端项目的开发过程当中，软件架构的设计往往是在项目开始之初就确立的，可是在实际的项目开发当中，我们往往发现，架构设计往往是在项目后期才逐渐完善起来的，这往往是因为项目初期对业务的理解不足，或者对软件架构的设计不够清晰，导致架构设计不够合理，最终导致软件系统的可维护性和可扩展性越来越差，而这个时期再开始考虑项目拆分的时候就会因为 MVC 架构各种复杂的调用关系而难以下手。</p>","autoDesc":true}`);export{e as data};
