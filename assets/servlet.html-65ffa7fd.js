import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o as i,c as d,d as o,a as e,b as l,e as s}from"./app-32b2efd5.js";const h={},n=e("h1",{id:"servlet",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#servlet","aria-hidden":"true"},"#"),l(" Servlet")],-1),c=s('<h2 id="servlet-是什么" tabindex="-1"><a class="header-anchor" href="#servlet-是什么" aria-hidden="true">#</a> Servlet 是什么</h2><p>Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</p><p>Servlet 执行以下主要任务：</p><ul><li>读取客户端（浏览器）发送的显式的数据。这包括网页上的 HTML 表单，或者也可以是来自 applet 或自定义的 HTTP 客户端程序的表单。</li><li>读取客户端（浏览器）发送的隐式的 HTTP 请求数据。这包括 cookies、媒体类型和浏览器能理解的压缩格式等等。</li><li>处理数据并生成结果。这个过程可能需要访问数据库，执行 RMI 或 CORBA 调用，调用 Web 服务，或者直接计算得出对应的响应。</li><li>发送显式的数据（即文档）到客户端（浏览器）。该文档的格式可以是多种多样的，包括文本文件（HTML 或 XML）、二进制文件（GIF 图像）、Excel 等。</li><li>发送隐式的 HTTP 响应到客户端（浏览器）。这包括告诉浏览器或其他客户端被返回的文档类型（例如 HTML），设置 cookies 和缓存参数，以及其他类似的任务。</li></ul><h2 id="servlet-生命周期" tabindex="-1"><a class="header-anchor" href="#servlet-生命周期" aria-hidden="true">#</a> Servlet 生命周期</h2><p>Servlet 生命周期可被定义为从创建直到毁灭的整个过程。以下是 Servlet 遵循的过程：</p><ol><li>Servlet 初始化后调用 init () 方法。</li><li>Servlet 调用 service() 方法来处理客户端的请求。</li><li>Servlet 销毁前调用 destroy() 方法。</li><li>Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</li></ol><h3 id="init-方法" tabindex="-1"><a class="header-anchor" href="#init-方法" aria-hidden="true">#</a> init 方法</h3><p>init 方法被设计成只调用一次。它在第一次创建 Servlet 时被调用，在后续每次用户请求时不再调用。当用户调用一个 Servlet 时，就会创建一个 Servlet 实例，每一个用户请求都会产生一个新的线程，适当的时候移交给 doGet 或 doPost 方法。init() 方法简单地创建或加载一些数据，这些数据将被用于 Servlet 的整个生命周期。</p><h3 id="service-方法" tabindex="-1"><a class="header-anchor" href="#service-方法" aria-hidden="true">#</a> service 方法</h3><p>service() 方法是执行实际任务的主要方法。Servlet 容器（即 Web 服务器）调用 service() 方法来处理来自客户端（浏览器）的请求，并把格式化的响应写回给客户端。</p><p>每次服务器接收到一个 Servlet 请求时，服务器会产生一个新的线程并调用服务。service() 方法检查 HTTP 请求类型（GET、POST、PUT、DELETE 等），并在适当的时候调用 doGet、doPost、doPut，doDelete 等方法。</p><h3 id="doget-方法" tabindex="-1"><a class="header-anchor" href="#doget-方法" aria-hidden="true">#</a> doGet 方法</h3><p>GET 请求来自于一个 URL 的正常请求，或者来自于一个未指定 method 的 HTML 表单，它由 doGet() 方法处理。</p><h3 id="dopost-方法" tabindex="-1"><a class="header-anchor" href="#dopost-方法" aria-hidden="true">#</a> doPost 方法</h3><p>POST 请求来自于一个特别指定了 method 为 POST 的 HTML 表单，它由 doPost() 方法处理。</p><h3 id="destroy-方法" tabindex="-1"><a class="header-anchor" href="#destroy-方法" aria-hidden="true">#</a> destroy 方法</h3><p>destroy() 方法只会被调用一次，在 Servlet 生命周期结束时被调用。destroy() 方法可以让您的 Servlet 关闭数据库连接、停止后台线程、把 Cookie 列表或点击计数器写入到磁盘，并执行其他类似的清理活动。在调用 destroy() 方法之后，servlet 对象被标记为垃圾回收。</p><h2 id="实现-servlet" tabindex="-1"><a class="header-anchor" href="#实现-servlet" aria-hidden="true">#</a> 实现 Servlet</h2>',19);function v(p,T){const r=a("Mermaid");return i(),d("div",null,[n,o(r,{id:"mermaid-3",code:"eJzLzcxLyU0s4FJQKMrPL9HQCE4tKstJLVF4Pn/pi/Vtz5t2amoC5UDAIyQkQOFpb/+LdeugIiH5ucmJJQrP5vQ+7Vr4dOYKqDDUiOezWp6um/e8bwNMf0lJAVQqKLWwNLW4ROHp+p0vNi5Ek0/NAcoXF+TnFaeiKnDOz8/ORBODaCouzszPQ5WA2uScn1eSWoFm07Np7U92b3uyo+vJngVPJ/U82dH9Yu9eLgCKRXBT"}),c])}const m=t(h,[["render",v],["__file","servlet.html.vue"]]);export{m as default};
