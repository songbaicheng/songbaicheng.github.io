import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as n,a as i}from"./app-95977c7e.js";const c={},o=i('<h1 id="走进-ci-cd-的世界" tabindex="-1"><a class="header-anchor" href="#走进-ci-cd-的世界" aria-hidden="true">#</a> 走进 CI/CD 的世界</h1><p>少年，还在自己手动打包介质吗，还在手动传包到服务器部署吗，借用一名国外开发者的话来说：“如果一件事会让你觉得机械无聊浪费时间的话，就把它交给计算机。”</p><p>什么是 CI/CD，是“Continuous Integration”（持续集成）和“Continuous Delivery/Deployment”（持续交付/部署）的缩写，现在大环境处在敏捷开发和 DevOps 文化之中，几乎所有主流的工具和服务都提供了该功能，如 Jenkins、GitHub Actions、GitLab CI/CD、CircleCI 等，这个博客的实现就是基于 GitHub Actions 来实现自动更新部署。</p><p>当我入职当前公司的时候，正值公司进行产品、架构和 APSSA 推广的关键时期，前后正好经历了从单体架构到微服务的转型，开发工具的迭代与产品的升级改造，一年多的时间里每次的上线窗口的规范和方式一直在变化，而大部分的责任就这样落在了我的肩膀上。</p><p>还记得一开始上线的方式，一些项目并没有配置平台，每个环境的包因为配置的不同都要同时准备三份甚至更多，通过每次打包后上传到 Bitbucket 统一的制品仓库，然后编写这的上线手册，运维团队在拿到介质包和手册后按照步骤在生产环境部署，其过程听起来就让人头皮发麻，经常因为手册不明确和包有问题而导致上线失败。</p><p>之后经过第一轮的升级改造，代码仓库和流水线的出现，我们不需要关心环境和上传介质的问题了，通过脚本控制各个环境的配置打包并上传到介质库，通过开发创建测试和版本的流水线后，运维进行校验和更新，彻底抛弃了每次手动执行带来的问题。</p><p>到现在慢慢的将静态代码分析、单元测试、集成测试、性能测试、安全测试、介质检查等步骤完善到流水线，项目架构升级也支持对接统一配置平台后，一键部署上线已经不是问题，开发人员只需要关心代码分支的规范和业务功能就可以了，十分 nice。</p><p>CI/CD 并不是只是运维人员掌握，尤其是现在云服务器价格逐渐降低，自己项目的部署也需要我们每个程序员掌握这项技术，而 Jenkins 作为行业最主流的 CI/CD 工具，学习它可以让我们更好的理解 DevOps 理念，并且为之后结合 Docker 与 Kubernetes 更是如虎添翼。</p><p>这里我以我自己工作和日常开发用到的 Jenkins 经历进行归纳和整理，方便以后更高效合理的进行软件的高效迭代和稳定交付。</p>',9),s=[o];function p(r,a){return t(),n("div",null,s)}const u=e(c,[["render",p],["__file","index.html.vue"]]);export{u as default};
