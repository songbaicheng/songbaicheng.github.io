import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as n,e as i}from"./app-467c4f8d.js";const r={},t=i('<h1 id="走进算法" tabindex="-1"><a class="header-anchor" href="#走进算法" aria-hidden="true">#</a> 走进算法</h1><h2 id="算法基础" tabindex="-1"><a class="header-anchor" href="#算法基础" aria-hidden="true">#</a> 算法基础</h2><p>算法是对特定问题求解步骤的一种描述，它是指令的有限序列，其中的每条指令有一个或多个操作。</p><p>算法五大特性：</p><ol><li>有穷性：一个算法必须在执行有穷步骤后结束，并且每一步都在有穷时间内完成。</li><li>确定性：算法中每条指令都应该有确切的含义，对于相同的输入只能得出相同的结果。</li><li>可行性：算法中描述的操作都可以通过已经实现的基本运算执行有限次来实现。</li><li>输入：一个算法可以有零个或多个输入。</li><li>输出：一个算法必须有一个或多个输出。</li></ol><p>基于这五种特性，一个好的算法应该达到正确性、可读性、健壮性和高效率与地存储量的需求。</p><h2 id="算法的效率" tabindex="-1"><a class="header-anchor" href="#算法的效率" aria-hidden="true">#</a> 算法的效率</h2><h3 id="时间负责度" tabindex="-1"><a class="header-anchor" href="#时间负责度" aria-hidden="true">#</a> 时间负责度</h3><p>首先我们需要知道大O表示法，算法中所有语句的频度之和记为 T(N)，算法中的最深层循环内的语句的频度与 T(n) 同数量级，所以算法的频度 f(n) 记为 T(n)=O(F(n))。</p><p>常见的渐进时间负责度排序：O(1) &lt; O(log n) &lt; O(n) &lt; O(n log n) &lt; O(n^2) &lt; O(2^n) &lt; O(n!)</p><h3 id="空间负责度" tabindex="-1"><a class="header-anchor" href="#空间负责度" aria-hidden="true">#</a> 空间负责度</h3><p>算法的空间复杂度是 S(n) ，为该算法所耗费的存储空间，记为 S(n) =O(g(n))。一个算法所需要的空间包括存放本身所用的指令、常数、变量和输入数据，还有对一些数据进行操作的工作单元和存储一些为实现计算所需的辅助空间。</p>',12),h=[t];function d(l,c){return a(),n("div",null,h)}const p=e(r,[["render",d],["__file","index.html.vue"]]);export{p as default};
