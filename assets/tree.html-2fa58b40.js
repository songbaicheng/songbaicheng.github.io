import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as c,c as d,a as n,b as a,d as e,w as r,e as o}from"./app-b5f25fba.js";const p="/assets/images/study/computer-basis/ads/data-structure/tree/tree.jpg",u="/assets/images/study/computer-basis/ads/data-structure/tree/full-tree-and-compete-tree.jpg",h={},m=n("h1",{id:"树和二叉树",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#树和二叉树","aria-hidden":"true"},"#"),a(" 树和二叉树")],-1),b=o('<h2 id="树的基本概念" tabindex="-1"><a class="header-anchor" href="#树的基本概念" aria-hidden="true">#</a> 树的基本概念</h2><p>树是 n(n &gt;= 0) 个结点的有限集。当 n = 0 的时候，称为<strong>空树</strong>，在任何一个非空树中应该满足：</p><ol><li>有且只有一个特定的称为根的结点。</li><li>当 n &gt; 1 时，其余结点可以分为 m(m &gt; 0) 个互不相交的有限集 T1,T2,T3,……,Tm，其中每个结合本身又是一棵树，并成为根的子树。</li></ol><p>显然，树的定义是递归的，即在树的定义中又用到了其自身，树作为一种逻辑结构，同时也是一种分层结构，具有两个特点</p><ol><li>树的根结点没有前驱，根结点外的所有结点有且只有一个前驱。</li><li>树中的所有所有结点都可以有零个或多个前驱。</li></ol><p>因为树中的某个节点（除根结点外）最多只和上一层的一个结点有直接关系，根结点没有直接上层结点，所有n个结点的树有 n - 1 条边，而且每个结点与其下一层的零个或多个结点（即子女结点）都有直接关系。</p><h3 id="基本术语" tabindex="-1"><a class="header-anchor" href="#基本术语" aria-hidden="true">#</a> 基本术语</h3><figure><img src="'+p+'" alt="树的树形表示" tabindex="0" loading="lazy"><figcaption>树的树形表示</figcaption></figure><ul><li>首先观察结点K，根A到K的唯一路径到的任意点，称为结点K的祖先，即A、B、E都是K的祖先。而E是路径上最接近K的祖先，所以称E为K的双亲，而K是E的孩子。</li><li>有相同双亲结点称为兄弟，如K和L都有共同的双亲E，即K和L为兄弟结点。</li><li>树中一个结点的孩子总数称为该结点的度，树中结点最大的度称为树的度，如结点B的度为2，D的度为3，树的度为3.</li><li>度大于0的结点称为分支结点（又称非终端结点），度为0的结点为叶子结点（又称终端结点）。</li><li>结点的层次从根结点开始，根结点为第一层，它的子结点为第二层，以此类推。双亲在同一层的结点互为堂兄弟，如G和E、F、H、I、J互为堂兄弟。</li><li>结点的深度是从根结点开始自顶向下逐层累加，结点的高度从叶子结点开始自底向上逐层累加。树的高度或深度是树中结点的最大深度。</li><li>有序树和无序树。树中的结点从左到右是有次序的，不能互换被称为有序树。否则称为无序树。</li><li>路径和路径长度。树中的两个结点之间的路径是由这两个结点之间所经过的的结点序列构成的，而路径长度是路径上所经过的边的个数。</li><li>树的分支是有向的，从双亲结点指向子结点。</li><li>森林。森林是m（m&gt;=0）颗互不相交的树的集合。森里只要把所有树的根结点去除就成了森林，相反，只要给m颗树独立的树添加一个根结点，森林就成了树。</li></ul><h3 id="基本性质" tabindex="-1"><a class="header-anchor" href="#基本性质" aria-hidden="true">#</a> 基本性质</h3><ol><li>树中的结点数等于所有结点的度之和加一。</li><li>度为m的树第i层上至多有m<sup>i-1</sup>个结点（i&gt;=1）。</li><li>高度为h的m叉树至多有 (m<sup>h</sup>-1)/(m-1)个结点。</li><li>具有n个结点的m叉树的最小高度为⌈log<sub>m</sub>(n(m-1)+1)⌉。</li></ol><h2 id="二叉树" tabindex="-1"><a class="header-anchor" href="#二叉树" aria-hidden="true">#</a> 二叉树</h2><p>二叉树是一种特殊的树形结构，其特点就是每个结点至多只有两颗子树，即不存在度大于2的结点，而且二叉树是有序树，左右结点次序不能随意颠倒。二叉树的递归定义是或为空二叉树，或为一个根结点和两个互不相交的被称为根的左子树和右子树组成，左子树和右子树分别又是一颗二叉树。</p><p>二叉树是特殊的度为二的有序树，度为2的有序树至少有三个结点，而二叉树可以为空。度为二的有序树左右次序是对于另一个孩子而言的，若某个节点只有一个孩子，则这个孩子就无需区分其左右次序，而二叉树无论孩子个数是否为2，均需要确定其左右次序。</p><h3 id="几种特殊的二叉树" tabindex="-1"><a class="header-anchor" href="#几种特殊的二叉树" aria-hidden="true">#</a> 几种特殊的二叉树</h3><figure><img src="'+u+`" alt="完全二叉树和满二叉树" tabindex="0" loading="lazy"><figcaption>完全二叉树和满二叉树</figcaption></figure><ul><li>完全二叉树：高度为h，有n个结点的二叉树，当且仅当每个结点都与高度为h的满二叉树中编号为1～n的结点一一对应称为完全二叉树。 <ul><li>若 i &lt;= ⌊n/2⌋，则i为分支结点，否则为叶子结点。</li><li>叶子结点只可能在层数最大的两层出现，并且最大层出现的叶子结点应该依次排列在该层的最左边的位置。</li><li>若有度为1的结点，则只可能有一个，且该结点，且该结点只有左孩子。</li><li>按照层序编号后，一旦出现结点为叶子结点或者只有左孩子，则编号大于i的结点均为叶子结点。</li><li>若n为奇数，则每个分支结点都有左右孩子，若n为偶数，则编号n/2的结点只有左孩子。</li></ul></li><li>满二叉树：一个高度为h，且含有2<sup>h</sup>-1个结点的二叉树称为满二叉树，即每层都是最多的结点。按照层序排序后，对于编号为i的结点，若有双亲则双亲为⌊i/2⌋，若有左孩子，则左孩子为 2i，若有右孩子，有孩子为 2i+1。</li><li>二叉排序树：左子树上所有的结点的关键字均小于更结点的关键字；右子树上的所有结点句大于根结点的关键字，左右子树分别又各是一颗二叉排序树。</li><li>平衡二叉树：树上任意一个结点的左子树和右子树的深度之差不超过1。</li></ul><h3 id="二叉树的性质" tabindex="-1"><a class="header-anchor" href="#二叉树的性质" aria-hidden="true">#</a> 二叉树的性质</h3><ol><li>非空二叉树的叶子结点数等于度为2的结点树加一，即 n<sub>0</sub>=n<sub>2</sub> + 1。</li><li>非空二叉树上第k层上至多有 2<sub>k-1</sub> 个结点。</li><li>高度为h的二叉树至多有 2<sup>k</sup>-1 个结点，h &gt;= 1.</li><li>结点所在的深度为 ⌊log<sub>2</sub>n⌋ + 1。</li><li>具有n个（n&gt;0）结点的完全二叉树的高度为 ⌈log<sub>2</sub>(n + 1)⌉ 或 ⌊log<sub>2</sub>n⌋ + 1。</li></ol><h3 id="二叉树的存储" tabindex="-1"><a class="header-anchor" href="#二叉树的存储" aria-hidden="true">#</a> 二叉树的存储</h3><h4 id="顺序存储" tabindex="-1"><a class="header-anchor" href="#顺序存储" aria-hidden="true">#</a> 顺序存储</h4><p>二叉树的顺序存储是指用一组地址连续的存储单元依次自上而下、自左至右完全存储二叉树的所有结点元素。根据二叉树的性质，<strong>完全二叉树</strong>和<strong>满二叉树</strong>采用顺序结构比较合适，树中结点的序号可以唯一的反应结点之间的逻辑结构，这样既能最大可能的节省存储空间，又能利用数组元素的下标确定结点的位置以及结点的关系。如果是一般的二叉树为了让数组下标反应二叉树中结点之间的逻辑关系，只能添加一些并不存在空结点，让其每个结点与完全二叉树的结点相对照，如果最坏的情况高度为h且之后h个结点的单枝树却要占据 2<sup>h</sup> - 1 个单元。</p><p>需要注意的是，顺序存储需要从数组下标1开始存储树中的结点，否则一些性质则无法满足。</p><h4 id="链式存储" tabindex="-1"><a class="header-anchor" href="#链式存储" aria-hidden="true">#</a> 链式存储</h4><p>由于顺序存储的空间利用率较低，因此二叉树一般都是采用链式存储，在二叉树中结点通常包含数据域和指针域，二叉链表就必须包含数据域 data、左指针域 lchild 和右指针域 rchild。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 数据域
     */</span>
    <span class="token class-name">E</span> data<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 左孩子指针
     */</span>
    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> lChild<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 右孩子指针
     */</span>
    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> rChild<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26);function g(v,k){const i=s("RouterLink"),l=s("Mermaid");return c(),d("div",null,[m,n("blockquote",null,[n("p",null,[a("所有的测试代码都在博客"),e(i,{to:"/"},{default:r(()=>[a("首页")]),_:1}),a("中的 java-study-demo 中找到。")])]),e(l,{id:"mermaid-8",code:"eJzLzcxLyU0s4FJQKMrPL9F4tmDi072Lnu+e/GxeiyZQEASe7Op52t8JlIHyQeDZsqan+7ciCYDA03WznuzsRBdcO+Np0wqIicgGTO59sncOmtonOzqfL+992dj7tK8NTer5rv3PtyzC5pSnu6Y8n7IC3dad257NX/pyNroxTyd3PF2y+tnsPQgzQF6e1PNs8bpn86bTwYd9cD88n9XyYu+aZ72L0NRg+J+ADwG36qiI"}),b])}const x=t(h,[["render",g],["__file","tree.html.vue"]]);export{x as default};
