import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-689a1f25.js";const t={},p=e(`<h1 id="leetcode-每日一题" tabindex="-1"><a class="header-anchor" href="#leetcode-每日一题" aria-hidden="true">#</a> LeetCode 每日一题</h1><p><em><strong>想起来就做一题吧！</strong></em></p><h2 id="_2578-最小和分割" tabindex="-1"><a class="header-anchor" href="#_2578-最小和分割" aria-hidden="true">#</a> 2578.最小和分割</h2><h3 id="题目内容" tabindex="-1"><a class="header-anchor" href="#题目内容" aria-hidden="true">#</a> <strong>题目内容</strong></h3><p>给你一个正整数 num ，请你将它分割成两个非负整数 num1 和 num2 ，满足：</p><ul><li>num1 和 num2 直接连起来，得到 num 各数位的一个排列。</li></ul><blockquote><p>换句话说，num1 和 num2 中所有数字出现的次数之和等于 num 中所有数字出现的次数。</p></blockquote><ul><li>num1 和 num2 可以包含前导 0 。<br> 请你返回 num1 和 num2 可以得到的和的 最小 值。</li></ul><h4 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> <strong>注意</strong></h4><ul><li>num 保证没有前导 0 。</li><li>num1 和 num2 中数位顺序可以与 num 中数位顺序不同。</li></ul><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> <strong>示例</strong></h4><p>示例 1：<br> 输入：num = 4325<br> 输出：59<br> 解释：我们可以将 4325 分割成 num1 = 24 和 num2 = 35 ，和为 59 ，59 是最小和。</p><p>示例 2：<br> 输入：num = 687<br> 输出：75<br> 解释：我们可以将 687 分割成 num1 = 68 和 num2 = 7 ，和为最优值 75 。</p><h3 id="题解思路" tabindex="-1"><a class="header-anchor" href="#题解思路" aria-hidden="true">#</a> 题解思路</h3><p>首先我们看到想要让和最小就必须让 num1 和 num2 都做到尽量的小，这个时候我们就应该想到排序了，第一步肯定是先对给出的数字数组进行排序，其次想让 num1 和 num2 都做到尽量小的相同，那我们可以从排序出的数字依次给数字组合。</p><h3 id="题解代码" tabindex="-1"><a class="header-anchor" href="#题解代码" aria-hidden="true">#</a> 题解代码</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">splitNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 排序</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 依次组合数字</span>
    <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> num2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            num1 <span class="token operator">=</span> num1 <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            num2 <span class="token operator">=</span> num2 <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),o=[p];function c(u,l){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","leetcode.html.vue"]]);export{d as default};
