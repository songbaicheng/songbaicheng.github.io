const e=JSON.parse(`{"key":"v-057dbb30","path":"/study/computer-basis/ads/algorithms/","title":"走进算法","lang":"zh-CN","frontmatter":{"description":"走进算法 算法无处不在 其实算法并不是必须牵扯数学的复杂东西，更多的是一种逻辑思想。其实在生活中我们已经不知不觉学会了很多算法，比如： 查阅字典 比如说我想查字典，我可以先打开字典，然后翻到A开头，再找到A-Z，最后找到需要的单词。但是我们通常不会采用这种方法，而是随即从比较中间的位置打开，如果我们需要找到 R 开头的单词，当前看到的却是 M，我们知道 R 在 M 之后，所以我们就会默认排除字典当前的前半部分继续重复上面的操作来找到我们的目标 R，这就是后面要学到的二分查找。 整理扑克 在抓牌的过程中，我们抽取的下一张牌的大小是未知的，而且我们手里的牌序是在我们自己的规则下是有序的，每当我们抽取一张未知的新牌后就会按照自己的规则放到指定的位置去，慢慢的就会让一堆无序的牌堆变成有序的手牌，这也就是后面我们要学的插入排序。 货币找零 在需要找零31块的时候，我们采取的方案一般是先找到能找零的最大面值的再依次减少，直到找完为止，也就是 20 -&gt; 10 -&gt; 1，这就是后面我们要学的贪心算法。","head":[["meta",{"property":"og:url","content":"https://github.com/songbaicheng/songbaicheng.github.io/study/computer-basis/ads/algorithms/"}],["meta",{"property":"og:site_name","content":"Baicheng's Blog"}],["meta",{"property":"og:title","content":"走进算法"}],["meta",{"property":"og:description","content":"走进算法 算法无处不在 其实算法并不是必须牵扯数学的复杂东西，更多的是一种逻辑思想。其实在生活中我们已经不知不觉学会了很多算法，比如： 查阅字典 比如说我想查字典，我可以先打开字典，然后翻到A开头，再找到A-Z，最后找到需要的单词。但是我们通常不会采用这种方法，而是随即从比较中间的位置打开，如果我们需要找到 R 开头的单词，当前看到的却是 M，我们知道 R 在 M 之后，所以我们就会默认排除字典当前的前半部分继续重复上面的操作来找到我们的目标 R，这就是后面要学到的二分查找。 整理扑克 在抓牌的过程中，我们抽取的下一张牌的大小是未知的，而且我们手里的牌序是在我们自己的规则下是有序的，每当我们抽取一张未知的新牌后就会按照自己的规则放到指定的位置去，慢慢的就会让一堆无序的牌堆变成有序的手牌，这也就是后面我们要学的插入排序。 货币找零 在需要找零31块的时候，我们采取的方案一般是先找到能找零的最大面值的再依次减少，直到找完为止，也就是 20 -&gt; 10 -&gt; 1，这就是后面我们要学的贪心算法。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-12T08:03:09.000Z"}],["meta",{"property":"article:author","content":"songbaicheng"}],["meta",{"property":"article:modified_time","content":"2024-01-12T08:03:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"走进算法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-01-12T08:03:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"songbaicheng\\",\\"url\\":\\"https://github.com/songbaicheng\\",\\"email\\":\\"songbaicheng16@163.com\\"}]}"]]},"headers":[{"level":2,"title":"算法无处不在","slug":"算法无处不在","link":"#算法无处不在","children":[]},{"level":2,"title":"什么是算法","slug":"什么是算法","link":"#什么是算法","children":[]},{"level":2,"title":"算法的效率","slug":"算法的效率","link":"#算法的效率","children":[{"level":3,"title":"时间复杂度","slug":"时间复杂度","link":"#时间复杂度","children":[]},{"level":3,"title":"空间复杂度","slug":"空间复杂度","link":"#空间复杂度","children":[]}]}],"git":{"createdTime":1689408496000,"updatedTime":1705046589000,"contributors":[{"name":"songbaicheng","email":"songbaicheng16@163.com","commits":2},{"name":"songbaicheng","email":"2524218694@qq.com","commits":1}]},"readingTime":{"minutes":4.07,"words":1222},"filePathRelative":"study/computer-basis/ads/algorithms/README.md","localizedDate":"2023年7月15日","excerpt":"<h1> 走进算法</h1>\\n<h2> 算法无处不在</h2>\\n<p>其实算法并不是必须牵扯数学的复杂东西，更多的是一种逻辑思想。其实在生活中我们已经不知不觉学会了很多算法，比如：</p>\\n<ol>\\n<li>查阅字典<br>\\n比如说我想查字典，我可以先打开字典，然后翻到A开头，再找到A-Z，最后找到需要的单词。但是我们通常不会采用这种方法，而是随即从比较中间的位置打开，如果我们需要找到 R 开头的单词，当前看到的却是 M，我们知道 R 在 M 之后，所以我们就会默认排除字典当前的前半部分继续重复上面的操作来找到我们的目标 R，这就是后面要学到的二分查找。</li>\\n<li>整理扑克<br>\\n在抓牌的过程中，我们抽取的下一张牌的大小是未知的，而且我们手里的牌序是在我们自己的规则下是有序的，每当我们抽取一张未知的新牌后就会按照自己的规则放到指定的位置去，慢慢的就会让一堆无序的牌堆变成有序的手牌，这也就是后面我们要学的插入排序。</li>\\n<li>货币找零<br>\\n在需要找零31块的时候，我们采取的方案一般是先找到能找零的最大面值的再依次减少，直到找完为止，也就是 20 -&gt; 10 -&gt; 1，这就是后面我们要学的贪心算法。</li>\\n</ol>","autoDesc":true}`);export{e as data};
