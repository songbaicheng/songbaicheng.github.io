const t=JSON.parse(`{"key":"v-2d435077","path":"/study/backend/java/basic/java8.html","title":"Java 8 新特性","lang":"zh-CN","frontmatter":{"star":true,"category":"Java 基础","tag":["Java 8 新特性","Optional"],"description":"Java 8 新特性 Optional Java 8中的 Optional 类可以在以下情况下使用： 当你不确定一个值是否存在时，可以使用 Optional 来封装这个值，避免在运行时出现 NullPointerException 异常。 当你需要返回一个可能为空的值时，可以使用 Optional 来代替空指针。这样，你可以避免在代码中使用 null 值，并且可以更加优雅地处理可能为空的情况。 当你需要对一个可能为空的值进行操作时，可以使用 Optional 提供的 map、filter 等方法来避免空指针异常的出现。","head":[["meta",{"property":"og:url","content":"https://github.com/songbaicheng/songbaicheng.github.io/study/backend/java/basic/java8.html"}],["meta",{"property":"og:site_name","content":"Baicheng's Blog"}],["meta",{"property":"og:title","content":"Java 8 新特性"}],["meta",{"property":"og:description","content":"Java 8 新特性 Optional Java 8中的 Optional 类可以在以下情况下使用： 当你不确定一个值是否存在时，可以使用 Optional 来封装这个值，避免在运行时出现 NullPointerException 异常。 当你需要返回一个可能为空的值时，可以使用 Optional 来代替空指针。这样，你可以避免在代码中使用 null 值，并且可以更加优雅地处理可能为空的情况。 当你需要对一个可能为空的值进行操作时，可以使用 Optional 提供的 map、filter 等方法来避免空指针异常的出现。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-30T15:01:29.000Z"}],["meta",{"property":"article:author","content":"songbaicheng"}],["meta",{"property":"article:tag","content":"Java 8 新特性"}],["meta",{"property":"article:tag","content":"Optional"}],["meta",{"property":"article:modified_time","content":"2023-08-30T15:01:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 8 新特性\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-08-30T15:01:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"songbaicheng\\",\\"url\\":\\"https://github.com/songbaicheng\\",\\"email\\":\\"songbaicheng16@163.com\\"}]}"]]},"headers":[{"level":2,"title":"Optional","slug":"optional","link":"#optional","children":[{"level":3,"title":"创建一个 Optional","slug":"创建一个-optional","link":"#创建一个-optional","children":[]},{"level":3,"title":"判断一个 Optional 是否为空","slug":"判断一个-optional-是否为空","link":"#判断一个-optional-是否为空","children":[]},{"level":3,"title":"获取一个 Optional 的值","slug":"获取一个-optional-的值","link":"#获取一个-optional-的值","children":[]},{"level":3,"title":"反例","slug":"反例","link":"#反例","children":[]},{"level":3,"title":"正例","slug":"正例","link":"#正例","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":1693407689000,"updatedTime":1693407689000,"contributors":[{"name":"songbaicheng","email":"2524218694@qq.com","commits":1}]},"readingTime":{"minutes":2.64,"words":792},"filePathRelative":"study/backend/java/basic/java8.md","localizedDate":"2023年8月30日","excerpt":"<h1> Java 8 新特性</h1>\\n<h2> Optional</h2>\\n<p>Java 8中的 Optional 类可以在以下情况下使用：</p>\\n<ul>\\n<li>当你不确定一个值是否存在时，可以使用 Optional 来封装这个值，避免在运行时出现 NullPointerException 异常。</li>\\n<li>当你需要返回一个可能为空的值时，可以使用 Optional 来代替空指针。这样，你可以避免在代码中使用 null 值，并且可以更加优雅地处理可能为空的情况。</li>\\n<li>当你需要对一个可能为空的值进行操作时，可以使用 Optional 提供的 map、filter 等方法来避免空指针异常的出现。</li>\\n</ul>","autoDesc":true}`);export{t as data};
