import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as r,e as h}from"./app-4db68b0a.js";const d={},t=h('<h1 id="栈和队列的应用" tabindex="-1"><a class="header-anchor" href="#栈和队列的应用" aria-hidden="true">#</a> 栈和队列的应用</h1><h2 id="栈在括号匹配的应用" tabindex="-1"><a class="header-anchor" href="#栈在括号匹配的应用" aria-hidden="true">#</a> 栈在括号匹配的应用</h2><p>假设表达式中允许包含两种括号：圆括号和方括号，其嵌套的顺序任意，只需要成对匹配即位正确，否则为不正确。</p><h2 id="栈在表达式求值的应用" tabindex="-1"><a class="header-anchor" href="#栈在表达式求值的应用" aria-hidden="true">#</a> 栈在表达式求值的应用</h2><h2 id="栈在递归中的应用" tabindex="-1"><a class="header-anchor" href="#栈在递归中的应用" aria-hidden="true">#</a> 栈在递归中的应用</h2><h2 id="队列在层次遍历中的应用" tabindex="-1"><a class="header-anchor" href="#队列在层次遍历中的应用" aria-hidden="true">#</a> 队列在层次遍历中的应用</h2><h2 id="队列在计算机系统中的应用" tabindex="-1"><a class="header-anchor" href="#队列在计算机系统中的应用" aria-hidden="true">#</a> 队列在计算机系统中的应用</h2><p>队列在计算机系统中的应用非常广泛，一方面是解决主机与外部设备之间速度不匹配的问题，一方面是解决由多用户引起的资源竞争问题。</p><p>第一方面仅以主机和打印机之间速度不匹配的问题作说明。主机把数据输送给打印机，输出的数据速度比打印机的速度快得多，解决的方法就是设置一个打印数据缓冲区，主机把要打印的数据写入这个缓冲区，写满后就暂停输出，转去做其他事情，打印机就从缓冲区按照先进先出的原则依次取出数据并打印，打印完再向主机发出申请，主机接到请求后再向缓冲区写入打印数据。这样做既保证了打印的数量正确，又使主机提升了效率。</p><p>第二个方面，CPU 资源的竞争就是一个典型的例子。在一个带有多终端的计算机系统上，由多个用户需要 CPU 各自运行自己的程序，他们分别通过各自的终端向操作系统提出占用 CPU 的请求。操作系统通常会按照请求在时间上的先后顺序把他们呢拍成一个队列，每次把 CPU 分配给队首请求的用户使用。当对应的程序运行结束或用完规定的时间间隔，令其出队，再把自己 CPU 分配给新的队首请求的用户使用。这样既保证了每个用户的请求，又能使 CPU 正常运行。</p>',10),i=[t];function c(n,s){return a(),r("div",null,i)}const l=e(d,[["render",c],["__file","stack-queue.html.vue"]]);export{l as default};
