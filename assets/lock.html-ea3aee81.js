const e=JSON.parse(`{"key":"v-5e74305b","path":"/study/development/lock.html","title":"锁","lang":"zh-CN","frontmatter":{"category":"锁","tag":["共享锁","排他锁","悲观锁","乐观锁","行锁","表锁","自旋锁","公平锁","非公平锁"],"description":"锁 锁的概念 锁是计算机协调多个进程或线程并发访问某一资源的机制，它主要用于同步并发访问共享资源的多个线程或进程，以防止数据不一致或竞争条件的发生，锁的使用场景有以下几种： 多线程编程：在多线程环境中，多个线程可能同时访问和修改共享数据。使用锁可以确保在同一时间只有一个线程可以访问和修改数据，从而避免数据不一致和竞争条件。 并发编程：在并发编程中，多个进程可能同时访问共享文件、数据库连接等资源。使用锁可以确保同一时间只有一个进程可以访问资源，防止数据损坏或不一致。 分布式系统：在分布式系统中，多个节点可能同时访问和修改共享资源。使用分布式锁可以确保同一时间只有一个节点可以访问和修改资源，实现数据的最终一致性。","head":[["meta",{"property":"og:url","content":"https://github.com/songbaicheng/songbaicheng.github.io/study/development/lock.html"}],["meta",{"property":"og:site_name","content":"Baicheng's Blog"}],["meta",{"property":"og:title","content":"锁"}],["meta",{"property":"og:description","content":"锁 锁的概念 锁是计算机协调多个进程或线程并发访问某一资源的机制，它主要用于同步并发访问共享资源的多个线程或进程，以防止数据不一致或竞争条件的发生，锁的使用场景有以下几种： 多线程编程：在多线程环境中，多个线程可能同时访问和修改共享数据。使用锁可以确保在同一时间只有一个线程可以访问和修改数据，从而避免数据不一致和竞争条件。 并发编程：在并发编程中，多个进程可能同时访问共享文件、数据库连接等资源。使用锁可以确保同一时间只有一个进程可以访问资源，防止数据损坏或不一致。 分布式系统：在分布式系统中，多个节点可能同时访问和修改共享资源。使用分布式锁可以确保同一时间只有一个节点可以访问和修改资源，实现数据的最终一致性。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-15T10:09:02.000Z"}],["meta",{"property":"article:author","content":"songbaicheng"}],["meta",{"property":"article:tag","content":"共享锁"}],["meta",{"property":"article:tag","content":"排他锁"}],["meta",{"property":"article:tag","content":"悲观锁"}],["meta",{"property":"article:tag","content":"乐观锁"}],["meta",{"property":"article:tag","content":"行锁"}],["meta",{"property":"article:tag","content":"表锁"}],["meta",{"property":"article:tag","content":"自旋锁"}],["meta",{"property":"article:tag","content":"公平锁"}],["meta",{"property":"article:tag","content":"非公平锁"}],["meta",{"property":"article:modified_time","content":"2024-07-15T10:09:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"锁\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-15T10:09:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"songbaicheng\\",\\"url\\":\\"https://github.com/songbaicheng\\",\\"email\\":\\"songbaicheng16@163.com\\"}]}"]]},"headers":[{"level":2,"title":"锁的概念","slug":"锁的概念","link":"#锁的概念","children":[]},{"level":2,"title":"锁的类型","slug":"锁的类型","link":"#锁的类型","children":[{"level":3,"title":"共享锁","slug":"共享锁","link":"#共享锁","children":[]},{"level":3,"title":"排他锁","slug":"排他锁","link":"#排他锁","children":[]},{"level":3,"title":"悲观锁","slug":"悲观锁","link":"#悲观锁","children":[]},{"level":3,"title":"乐观锁","slug":"乐观锁","link":"#乐观锁","children":[]},{"level":3,"title":"行锁","slug":"行锁","link":"#行锁","children":[]},{"level":3,"title":"表锁","slug":"表锁","link":"#表锁","children":[]},{"level":3,"title":"自旋锁","slug":"自旋锁","link":"#自旋锁","children":[]},{"level":3,"title":"公平锁","slug":"公平锁","link":"#公平锁","children":[]},{"level":3,"title":"非公平锁","slug":"非公平锁","link":"#非公平锁","children":[]},{"level":3,"title":"可重入锁","slug":"可重入锁","link":"#可重入锁","children":[]}]}],"git":{"createdTime":1720523691000,"updatedTime":1721038142000,"contributors":[{"name":"songbaicheng","email":"songbaicheng16@163.com","commits":5}]},"readingTime":{"minutes":9.79,"words":2938},"filePathRelative":"study/development/lock.md","localizedDate":"2024年7月9日","excerpt":"<h1> 锁</h1>\\n<h2> 锁的概念</h2>\\n<p>锁是计算机协调多个进程或线程并发访问某一资源的机制，它主要用于同步并发访问共享资源的多个线程或进程，以防止数据不一致或竞争条件的发生，锁的使用场景有以下几种：</p>\\n<ol>\\n<li>多线程编程：在多线程环境中，多个线程可能同时访问和修改共享数据。使用锁可以确保在同一时间只有一个线程可以访问和修改数据，从而避免数据不一致和竞争条件。</li>\\n<li>并发编程：在并发编程中，多个进程可能同时访问共享文件、数据库连接等资源。使用锁可以确保同一时间只有一个进程可以访问资源，防止数据损坏或不一致。</li>\\n<li>分布式系统：在分布式系统中，多个节点可能同时访问和修改共享资源。使用分布式锁可以确保同一时间只有一个节点可以访问和修改资源，实现数据的最终一致性。</li>\\n</ol>","autoDesc":true}`);export{e as data};
