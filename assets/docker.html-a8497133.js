const e=JSON.parse(`{"key":"v-5e39eb1e","path":"/study/maintenance/docker.html","title":"Docker","lang":"zh-CN","frontmatter":{"category":"运维","tag":["Docker"],"description":"Docker 在云计算的推动下，虚拟化技术是大势所趋，Docker 是作为运维工程师及后端开发人员都应该了解的技术，简化环境搭建、节省开支、持续交付、部署和部署，也是学习 k8s 之前必须要学会的知识点。学习后在搭建测试环境和本地测试也是十分的方便，再也不用受各种安装环境时提示安装失败的折磨，快快学起来。 Docker 架构 Docker 包括三个基本概念: 镜像（Image）：相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。 容器（Container）：镜像和容器的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。 仓库（Repository）：仓库可看成一个代码控制中心，用来保存镜像。","head":[["meta",{"property":"og:url","content":"https://github.com/songbaicheng/songbaicheng.github.io/study/maintenance/docker.html"}],["meta",{"property":"og:site_name","content":"Baicheng's Blog"}],["meta",{"property":"og:title","content":"Docker"}],["meta",{"property":"og:description","content":"Docker 在云计算的推动下，虚拟化技术是大势所趋，Docker 是作为运维工程师及后端开发人员都应该了解的技术，简化环境搭建、节省开支、持续交付、部署和部署，也是学习 k8s 之前必须要学会的知识点。学习后在搭建测试环境和本地测试也是十分的方便，再也不用受各种安装环境时提示安装失败的折磨，快快学起来。 Docker 架构 Docker 包括三个基本概念: 镜像（Image）：相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。 容器（Container）：镜像和容器的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。 仓库（Repository）：仓库可看成一个代码控制中心，用来保存镜像。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-22T10:00:45.000Z"}],["meta",{"property":"article:author","content":"songbaicheng"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:modified_time","content":"2023-09-22T10:00:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-22T10:00:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"songbaicheng\\",\\"url\\":\\"https://github.com/songbaicheng\\",\\"email\\":\\"songbaicheng16@163.com\\"}]}"]]},"headers":[{"level":2,"title":"Docker 架构","slug":"docker-架构","link":"#docker-架构","children":[]},{"level":2,"title":"镜像加速","slug":"镜像加速","link":"#镜像加速","children":[{"level":3,"title":"加速器","slug":"加速器","link":"#加速器","children":[]},{"level":3,"title":"配置加速器","slug":"配置加速器","link":"#配置加速器","children":[]},{"level":3,"title":"检查加速器是否生效","slug":"检查加速器是否生效","link":"#检查加速器是否生效","children":[]}]}],"git":{"createdTime":1695376845000,"updatedTime":1695376845000,"contributors":[{"name":"songbaicheng","email":"2524218694@qq.com","commits":1}]},"readingTime":{"minutes":1.71,"words":514},"filePathRelative":"study/maintenance/docker.md","localizedDate":"2023年9月22日","excerpt":"<h1> Docker</h1>\\n<p>在云计算的推动下，虚拟化技术是大势所趋，Docker 是作为运维工程师及后端开发人员都应该了解的技术，简化环境搭建、节省开支、持续交付、部署和部署，也是学习 k8s 之前必须要学会的知识点。学习后在搭建测试环境和本地测试也是十分的方便，再也不用受各种安装环境时提示安装失败的折磨，快快学起来。</p>\\n<h2> Docker 架构</h2>\\n<p>Docker 包括三个基本概念:</p>\\n<ul>\\n<li>镜像（Image）：相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</li>\\n<li>容器（Container）：镜像和容器的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li>\\n<li>仓库（Repository）：仓库可看成一个代码控制中心，用来保存镜像。</li>\\n</ul>","autoDesc":true}`);export{e as data};
