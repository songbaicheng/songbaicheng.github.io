import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as t,d as s,n as r,g as n,e as a}from"./app-37f2efaa.js";const c={},d=a('<h1 id="spring-security-jwt" tabindex="-1"><a class="header-anchor" href="#spring-security-jwt" aria-hidden="true">#</a> Spring Security + JWT</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>说到 JWT（JSON Web Token），我们首先要知道 Token 是什么，想要知道 Token 是什么，我们就得先谈一下早期 Session 登录的时代。</p><ol><li>用户通过表单或其他方式提交用户名和密码。</li><li>服务器接收到登录请求，验证用户提供的用户名和密码是否有效。</li><li>如果验证通过，服务器会为该用户创建一个唯一的会话标识符（Session ID）。</li><li>服务器将该会话标识符存储在服务器端，通常保存在内存中或持久化到数据库中。</li><li>服务器将会话标识符发送回客户端，通常通过设置一个名为&quot;JSESSIONID&quot;的 Cookie。</li><li>客户端收到会话标识符后，将其保存在客户端的 Cookie 中。</li><li>客户端之后的每个请求都会自动附带会话标识符，通常通过 Cookie 或其他方式（如 URL 参数）。</li><li>服务器在接收到请求时，会根据会话标识符查找对应的会话信息。</li><li>如果会话有效并且用户已经登录，则服务器将请求视为已经通过身份验证。</li><li>如果会话无效或已过期，服务器可能要求用户重新进行身份验证或重定向到登录页面。</li></ol><p>然而，随着应用程序的复杂性和扩展性的增加，分布式系统和跨服务的场景变得更加常见。在这种情况下，使用基于 Session 会话的登录可能会面临一些挑战，例如会话状态的同步和跨服务的会话管理。而且如果 Cookie 如果被截获，用户就会很容易受到跨站请求伪造（CSRF）的攻击。于是令牌（Token） 应运而生，Token 承载了用户身份信息和其他必要的声明，无需在服务器端存储会话信息，使其具备了无状态性（stateless）的特性。这样可以减轻服务器的负担，并且适用于分布式环境和跨服务的场景。基于这种特性 Token 的登录过程如下所示。</p><ol><li>用户通过表单或其他方式提交用户名和密码。</li><li>服务器接收到登录请求，验证用户提供的用户名和密码是否有效。</li><li>如果验证通过，服务器会生成一个令牌（Token），包含用户身份信息和其他必要的声明（例如权限、过期时间等）并保存在缓存服务器（Redis）中。</li><li>服务器将令牌返回给客户端，通常通过响应的数据体中的字段或特定的响应头部。</li><li>客户端收到令牌后，将其保存在客户端（通常是本地存储或 Cookie）。</li><li>客户端之后的每个请求都会将令牌作为身份验证凭据附加在请求中，通常通过请求头部的 Authorization 字段。</li><li>服务器在接收到请求时，会验证令牌的有效性和真实性。</li><li>如果令牌有效并且包含了正确的用户身份信息，则服务器将请求视为已经通过身份验证。</li><li>如果令牌无效、过期或篡改，服务器可能要求用户重新进行身份验证或拒绝请求。</li></ol><p>虽然看似流程上十分相似，但是每个请求都必须携带包含了所有必要的用户身份信息和声明的令牌来进行身份验证，而且令牌可以通过签名和加密机制来保护身份信息的完整性和真实性，这样极大的保证了安全性的同时也解决了跨域支持的问题。</p>',7);function p(u,h){const i=o("VPCard");return l(),t("div",null,[d,s(i,r(n({title:"JWT 官网",desc:"点击跳转官网查看详细内容",logo:"/assets/images/study/backend/java/spring-boot/spring-security/jwt.svg",link:"https://jwt.io/",color:"rgba(173, 216, 590, 0.15)"})),null,16)])}const g=e(c,[["render",p],["__file","spring-security-jwt.html.vue"]]);export{g as default};
