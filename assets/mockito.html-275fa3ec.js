const e=JSON.parse('{"key":"v-5f305ada","path":"/work-task/development/mockito.html","title":"代码覆盖率 Mockito","lang":"en-US","frontmatter":{"category":"工作任务","tag":["Spring Boot","Java","Mockito"],"description":"代码覆盖率 Mockito 引言 刚开始工作的时候谁写测试类啊，还单元测试呢，测试我都不测试。后来到了正式一些的公司之后，你测试覆盖率不过都不能上线，所以 JaCoCo 这个开源的Java代码覆盖率工具就发挥作用了，它可以衡量测试套件对代码的覆盖程度、帮助开发团队分析测试覆盖率，并且了解哪些代码已经被测试覆盖，以及哪些代码尚未被测试覆盖。虽然 jaCoCo 很强，但是你的测试工具类得保证你的代码都可以覆盖的到，于是 Mockito 又出现了，相对于 Junit 它提供了简洁的API，使得在单元测试中创建模拟对象、定义模拟对象的行为以及验证方法的调用变得非常容易。","head":[["meta",{"property":"og:url","content":"https://github.com/songbaicheng/songbaicheng.github.io/work-task/development/mockito.html"}],["meta",{"property":"og:site_name","content":"宋柏成的技术博客"}],["meta",{"property":"og:title","content":"代码覆盖率 Mockito"}],["meta",{"property":"og:description","content":"代码覆盖率 Mockito 引言 刚开始工作的时候谁写测试类啊，还单元测试呢，测试我都不测试。后来到了正式一些的公司之后，你测试覆盖率不过都不能上线，所以 JaCoCo 这个开源的Java代码覆盖率工具就发挥作用了，它可以衡量测试套件对代码的覆盖程度、帮助开发团队分析测试覆盖率，并且了解哪些代码已经被测试覆盖，以及哪些代码尚未被测试覆盖。虽然 jaCoCo 很强，但是你的测试工具类得保证你的代码都可以覆盖的到，于是 Mockito 又出现了，相对于 Junit 它提供了简洁的API，使得在单元测试中创建模拟对象、定义模拟对象的行为以及验证方法的调用变得非常容易。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-06-27T04:45:47.000Z"}],["meta",{"property":"article:author","content":"songbaicheng"}],["meta",{"property":"article:tag","content":"Spring Boot"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Mockito"}],["meta",{"property":"article:modified_time","content":"2023-06-27T04:45:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"代码覆盖率 Mockito\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-27T04:45:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"songbaicheng\\",\\"url\\":\\"https://github.com/songbaicheng\\",\\"email\\":\\"songbaicheng16@163.com\\"}]}"]]},"headers":[{"level":2,"title":"引言","slug":"引言","link":"#引言","children":[]},{"level":2,"title":"快速开始","slug":"快速开始","link":"#快速开始","children":[{"level":3,"title":"导入依赖","slug":"导入依赖","link":"#导入依赖","children":[]},{"level":3,"title":"测试代码","slug":"测试代码","link":"#测试代码","children":[]}]},{"level":2,"title":"常用方法","slug":"常用方法","link":"#常用方法","children":[{"level":3,"title":"mock(Class<T> classToMock)","slug":"mock-class-t-classtomock","link":"#mock-class-t-classtomock","children":[]},{"level":3,"title":"when(mock.method()).thenReturn(value)","slug":"when-mock-method-thenreturn-value","link":"#when-mock-method-thenreturn-value","children":[]},{"level":3,"title":"verify(mock).method()","slug":"verify-mock-method","link":"#verify-mock-method","children":[]},{"level":3,"title":"verify(mock, times(n)).method()","slug":"verify-mock-times-n-method","link":"#verify-mock-times-n-method","children":[]},{"level":3,"title":"verify(mock, atLeast(n)).method()","slug":"verify-mock-atleast-n-method","link":"#verify-mock-atleast-n-method","children":[]},{"level":3,"title":"verify(mock, never()).method()","slug":"verify-mock-never-method","link":"#verify-mock-never-method","children":[]},{"level":3,"title":"verifyNoMoreInteractions(mock)","slug":"verifynomoreinteractions-mock","link":"#verifynomoreinteractions-mock","children":[]},{"level":3,"title":"doThrow(exception).when(mock).method()","slug":"dothrow-exception-when-mock-method","link":"#dothrow-exception-when-mock-method","children":[]},{"level":3,"title":"doAnswer(answer).when(mock).method()","slug":"doanswer-answer-when-mock-method","link":"#doanswer-answer-when-mock-method","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1687794236000,"updatedTime":1687841147000,"contributors":[{"name":"songbaicheng","email":"2524218694@qq.com","commits":2}]},"readingTime":{"minutes":3.94,"words":1181},"filePathRelative":"work-task/development/mockito.md","localizedDate":"June 26, 2023","excerpt":"<h1> 代码覆盖率 Mockito</h1>\\n<h2> 引言</h2>\\n<p>刚开始工作的时候谁写测试类啊，还单元测试呢，测试我都不测试。后来到了正式一些的公司之后，你测试覆盖率不过都不能上线，所以 JaCoCo 这个开源的Java代码覆盖率工具就发挥作用了，它可以衡量测试套件对代码的覆盖程度、帮助开发团队分析测试覆盖率，并且了解哪些代码已经被测试覆盖，以及哪些代码尚未被测试覆盖。虽然 jaCoCo 很强，但是你的测试工具类得保证你的代码都可以覆盖的到，于是 Mockito 又出现了，相对于 Junit 它提供了简洁的API，使得在单元测试中创建模拟对象、定义模拟对象的行为以及验证方法的调用变得非常容易。</p>","autoDesc":true}');export{e as data};
