import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as p,c as l,a as e,w as r,b as n,d as a,e as i}from"./app-d4dc7d3f.js";const u={},d=n("h1",{id:"排序",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#排序","aria-hidden":"true"},"#"),a(" 排序")],-1),k=i('<h2 id="排序的概念" tabindex="-1"><a class="header-anchor" href="#排序的概念" aria-hidden="true">#</a> 排序的概念</h2><p>排序就是重新排列表中的元素，使表中的元素满足按关键字有序的过程。在排序的过程中，根据数据元素是否完全在内存中，可将排序排序算法分为两类，内部排序：是指在排序期间元素全部存放在内存中的排序；外部排序：是指在排序期间元素无法全部同时存放在内存中，必须在排序过程中根据要求不断的在内外存之间移动的排序。</p><p>每种排序算法都有各自的优缺点，适合在不同的环境下使用，就其全面性能而言，很难提出一种被认为是最好的算法。</p><h2 id="插入排序" tabindex="-1"><a class="header-anchor" href="#插入排序" aria-hidden="true">#</a> 插入排序</h2><p>插入排序是一种简单直观的插入排序，其基本思想是每次将一个带排序的记录按照其关键字大小插入到前面已排好序的子序列，直到全部记录插入完成。</p><h3 id="直接插入排序" tabindex="-1"><a class="header-anchor" href="#直接插入排序" aria-hidden="true">#</a> 直接插入排序</h3><p>最简单直观的直接插入排序就是假设从第一位开始已经排好顺序，向后的比较过程中如果出现反序的数字遍向前移动，相对的比较后的元素也逐步往后移动为新元素提供插入空间。</p><p>直接插入排序在空间上使用了常数个辅助单元，所以空间复杂度为 O(1)，而时间上需要逐个对比元素进行操作和移动元素，所以平均下来复杂度为 O(n<sup>2</sup>)。</p><p>因为插入元素都是从后面顺序向前进行，所以不会出现相对位置的移动，所以直接插入排序是一个稳定的排序方法，适用于顺序存储或者链式存储的线性表。</p>',9),m=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"void"),a(),n("span",{class:"token function"},"insertSort"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"E"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),a(" arr"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token keyword"},"for"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),a(" i "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),a(" i "),n("span",{class:"token operator"},"<"),a(" arr"),n("span",{class:"token punctuation"},"."),a("length"),n("span",{class:"token punctuation"},";"),a(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`

        `),n("span",{class:"token class-name"},"E"),a(" tempElement "),n("span",{class:"token operator"},"="),a(" arr"),n("span",{class:"token punctuation"},"["),a("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),a(`
        `),n("span",{class:"token keyword"},"int"),a(" j "),n("span",{class:"token operator"},"="),a(" i "),n("span",{class:"token operator"},"-"),a(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),a(`

        `),n("span",{class:"token keyword"},"while"),a(),n("span",{class:"token punctuation"},"("),a("j "),n("span",{class:"token operator"},">="),a(),n("span",{class:"token number"},"0"),a(),n("span",{class:"token operator"},"&&"),a(" tempElement"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"compareTo"),n("span",{class:"token punctuation"},"("),a("arr"),n("span",{class:"token punctuation"},"["),a("j"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token operator"},"<"),a(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
            arr`),n("span",{class:"token punctuation"},"["),a("j "),n("span",{class:"token operator"},"+"),a(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token operator"},"="),a(" arr"),n("span",{class:"token punctuation"},"["),a("j"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),a(`
            j`),n("span",{class:"token operator"},"--"),n("span",{class:"token punctuation"},";"),a(`
        `),n("span",{class:"token punctuation"},"}"),a(`

        arr`),n("span",{class:"token punctuation"},"["),a("j "),n("span",{class:"token operator"},"+"),a(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token operator"},"="),a(" tempElement"),n("span",{class:"token punctuation"},";"),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1);function b(h,v){const t=s("Mermaid"),o=s("CodeDemo");return p(),l("div",null,[d,e(t,{id:"mermaid-3",code:"eJzLzcxLyU0s4FJQKMrPL9F41jfp6a5+TSAXBJ62tb5sXgERgwqBwLP+SU9bl2IIg8Dz2Vue9S3Fo+BZ14ynvV14FDzd0fN0wxQMqSe7ljzrXYRdR9ukZ5sXYpfav/plw3wMqZcNnc+6V2L3wLqGp71T8Sh4uqANQ/zp3klPd27DFJ6/69nUDSjCT5dMwxaiT5fMerF9PYoxAJA1rJI="}),k,e(o,{id:"code-demo-31",type:"normal",title:"Servlet%20demo",code:"eJxVjkEOgjAURK8yYWEgBAJbEXecQHfIArFKG2hJrbgg3N1fRK2TJk3738z8yRP1WHtbb3icO95gVPwCLu9Mm4PSxi/KCrXWAaaTBOmqNHwuDThypBldOzuPOyZvpqV3GC7sm7YqYFg/FB3rGdlyS5e8yn6ATRM04Igo0bU+W94x+AL7HAk2GzcpblQ/1JodlW8TRRXQJsl3z4+WGUKk1Vot3GorEUXOz+z2/5md7pUnlo43vwA6+Vu1"},{default:r(()=>[m]),_:1})])}const w=c(u,[["render",b],["__file","sort.html.vue"]]);export{w as default};
