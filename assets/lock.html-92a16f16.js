import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as d,o,c,d as t,e as s,a as e,b as i}from"./app-e47d16ae.js";const n={},h=s('<h1 id="锁" tabindex="-1"><a class="header-anchor" href="#锁" aria-hidden="true">#</a> 锁</h1><h2 id="锁的概念" tabindex="-1"><a class="header-anchor" href="#锁的概念" aria-hidden="true">#</a> 锁的概念</h2><p>锁是计算机协调多个进程或线程并发访问某一资源的机制，它主要用于同步并发访问共享资源的多个线程或进程，以防止数据不一致或竞争条件的发生，锁的使用场景有以下几种：</p><ol><li>多线程编程：在多线程环境中，多个线程可能同时访问和修改共享数据。使用锁可以确保在同一时间只有一个线程可以访问和修改数据，从而避免数据不一致和竞争条件。</li><li>并发编程：在并发编程中，多个进程可能同时访问共享文件、数据库连接等资源。使用锁可以确保同一时间只有一个进程可以访问资源，防止数据损坏或不一致。</li><li>分布式系统：在分布式系统中，多个节点可能同时访问和修改共享资源。使用分布式锁可以确保同一时间只有一个节点可以访问和修改资源，实现数据的最终一致性。</li></ol><h2 id="锁的类型" tabindex="-1"><a class="header-anchor" href="#锁的类型" aria-hidden="true">#</a> 锁的类型</h2>',5),l=e("h3",{id:"共享锁-shared-lock",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#共享锁-shared-lock","aria-hidden":"true"},"#"),i(" 共享锁（Shared Lock）")],-1),_=e("p",null,"共享锁又称为读锁，多个线程可以同时读取同一个资源，但不允许修改。",-1);function m(f,p){const a=d("Mermaid");return o(),c("div",null,[h,t(a,{id:"mermaid-29",code:"eJzLzcxLyU0s4FJQKMrPL9HQeDml8fmslucbdz+d162pCRQGgaetG5/sWg2UgvKf9U16snsaEr9p04vlTQj+k50TUPgvFvYgc1aAOAB89TQD"}),l,_])}const k=r(n,[["render",m],["__file","lock.html.vue"]]);export{k as default};
