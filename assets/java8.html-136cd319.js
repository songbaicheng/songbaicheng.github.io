const e=JSON.parse(`{"key":"v-2d435077","path":"/study/backend/java/basic/java8.html","title":"Java 8 新特性","lang":"zh-CN","frontmatter":{"star":true,"category":"Java 基础","tag":["Java 8 新特性","Optional"],"description":"Java 8 新特性 Interface Java 8 中的接口可以包含默认方法（default）和静态方法（static）,default 修饰的方法，是普通实例方法，可以用this调用，可以被子类继承、重写，而 static 修饰的方法，使用上和一般类静态方法一样。但它不能被子类继承，只能用 Interface 调用。 public interface InterfaceNew { static void sm() { System.out.println(\\"interface提供的方式实现\\"); } static void sm2() { System.out.println(\\"interface提供的方式实现\\"); } default void def() { System.out.println(\\"interface default方法\\"); } default void def2() { System.out.println(\\"interface default2方法\\"); } //须要实现类重写 void f(); } public interface InterfaceNew1 { default void def() { System.out.println(\\"InterfaceNew1 default方法\\"); } }","head":[["meta",{"property":"og:url","content":"https://github.com/songbaicheng/songbaicheng.github.io/study/backend/java/basic/java8.html"}],["meta",{"property":"og:site_name","content":"Baicheng's Blog"}],["meta",{"property":"og:title","content":"Java 8 新特性"}],["meta",{"property":"og:description","content":"Java 8 新特性 Interface Java 8 中的接口可以包含默认方法（default）和静态方法（static）,default 修饰的方法，是普通实例方法，可以用this调用，可以被子类继承、重写，而 static 修饰的方法，使用上和一般类静态方法一样。但它不能被子类继承，只能用 Interface 调用。 public interface InterfaceNew { static void sm() { System.out.println(\\"interface提供的方式实现\\"); } static void sm2() { System.out.println(\\"interface提供的方式实现\\"); } default void def() { System.out.println(\\"interface default方法\\"); } default void def2() { System.out.println(\\"interface default2方法\\"); } //须要实现类重写 void f(); } public interface InterfaceNew1 { default void def() { System.out.println(\\"InterfaceNew1 default方法\\"); } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-02T15:33:45.000Z"}],["meta",{"property":"article:author","content":"songbaicheng"}],["meta",{"property":"article:tag","content":"Java 8 新特性"}],["meta",{"property":"article:tag","content":"Optional"}],["meta",{"property":"article:modified_time","content":"2024-06-02T15:33:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 8 新特性\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-02T15:33:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"songbaicheng\\",\\"url\\":\\"https://github.com/songbaicheng\\",\\"email\\":\\"songbaicheng16@163.com\\"}]}"]]},"headers":[{"level":2,"title":"Interface","slug":"interface","link":"#interface","children":[]},{"level":2,"title":"Optional","slug":"optional","link":"#optional","children":[{"level":3,"title":"创建一个 Optional","slug":"创建一个-optional","link":"#创建一个-optional","children":[]},{"level":3,"title":"判断一个 Optional 是否为空","slug":"判断一个-optional-是否为空","link":"#判断一个-optional-是否为空","children":[]},{"level":3,"title":"获取一个 Optional 的值","slug":"获取一个-optional-的值","link":"#获取一个-optional-的值","children":[]},{"level":3,"title":"反例","slug":"反例","link":"#反例","children":[]},{"level":3,"title":"正例","slug":"正例","link":"#正例","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"createdTime":1693407689000,"updatedTime":1717342425000,"contributors":[{"name":"songbaicheng","email":"2524218694@qq.com","commits":2},{"name":"songbaicheng","email":"songbaicheng16@163.com","commits":1}]},"readingTime":{"minutes":3.26,"words":979},"filePathRelative":"study/backend/java/basic/java8.md","localizedDate":"2023年8月30日","excerpt":"<h1> Java 8 新特性</h1>\\n<h2> Interface</h2>\\n<p>Java 8 中的接口可以包含默认方法（default）和静态方法（static）,default 修饰的方法，是普通实例方法，可以用this调用，可以被子类继承、重写，而 static 修饰的方法，使用上和一般类静态方法一样。但它不能被子类继承，只能用 Interface 调用。</p>\\n<div class=\\"language-Java line-numbers-mode\\" data-ext=\\"Java\\"><pre class=\\"language-Java\\"><code>public interface InterfaceNew {\\n    static void sm() {\\n        System.out.println(\\"interface提供的方式实现\\");\\n    }\\n    static void sm2() {\\n        System.out.println(\\"interface提供的方式实现\\");\\n    }\\n\\n    default void def() {\\n        System.out.println(\\"interface default方法\\");\\n    }\\n    default void def2() {\\n        System.out.println(\\"interface default2方法\\");\\n    }\\n    //须要实现类重写\\n    void f();\\n}\\n\\npublic interface InterfaceNew1 {\\n    default void def() {\\n        System.out.println(\\"InterfaceNew1 default方法\\");\\n    }\\n}\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{e as data};
