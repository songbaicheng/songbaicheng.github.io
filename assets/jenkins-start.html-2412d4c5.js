const n=JSON.parse(`{"key":"v-5eb35e22","path":"/study/maintenance/jenkins/jenkins-start.html","title":"初始 Jenkins","lang":"zh-CN","frontmatter":{"star":true,"category":"运维","tag":["Jenkins"],"description":"初始 Jenkins 快速搭建 个人理解主节点的 Jenkins 因为不推荐参与构建任务，再加性能损耗小、系统调用权限更直接、复杂度降低等优点，所以应该是安装在宿主机上的，但是目前主流的方案都因为隔离性、可移植性、易于管理和更新的原因都选择容器部署，那我们也就选择容器的方式进行搭建。 便于管理和配置复用，我们这里采用 Docker Compose 的容器编排方式创建 Jenkins 容器。我们在工作目录中创建下列 Dockerfile 和 Docker Compose。 # 选择自己的容器镜像 FROM jenkins/jenkins # 设置环境变量，也可以省略，因为不推荐使用自带的 JDK ENV JAVA_OPTS=\\"-Xms512m -Xmx1024m\\" # 安装必要的插件，当然可以选择启动容器后手动安装 COPY plugins.txt /usr/share/jenkins/ref/plugins.txt RUN /usr/local/bin/install-plugins.sh $(cat /usr/share/jenkins/ref/plugins.txt) # 用户和权限配置（如有必要，根据实际需求调整） USER root RUN chown -R jenkins:jenkins /var/jenkins_home/ # 切换容器登录账户 USER jenkins","head":[["meta",{"property":"og:url","content":"https://github.com/songbaicheng/songbaicheng.github.io/study/maintenance/jenkins/jenkins-start.html"}],["meta",{"property":"og:site_name","content":"Baicheng's Blog"}],["meta",{"property":"og:title","content":"初始 Jenkins"}],["meta",{"property":"og:description","content":"初始 Jenkins 快速搭建 个人理解主节点的 Jenkins 因为不推荐参与构建任务，再加性能损耗小、系统调用权限更直接、复杂度降低等优点，所以应该是安装在宿主机上的，但是目前主流的方案都因为隔离性、可移植性、易于管理和更新的原因都选择容器部署，那我们也就选择容器的方式进行搭建。 便于管理和配置复用，我们这里采用 Docker Compose 的容器编排方式创建 Jenkins 容器。我们在工作目录中创建下列 Dockerfile 和 Docker Compose。 # 选择自己的容器镜像 FROM jenkins/jenkins # 设置环境变量，也可以省略，因为不推荐使用自带的 JDK ENV JAVA_OPTS=\\"-Xms512m -Xmx1024m\\" # 安装必要的插件，当然可以选择启动容器后手动安装 COPY plugins.txt /usr/share/jenkins/ref/plugins.txt RUN /usr/local/bin/install-plugins.sh $(cat /usr/share/jenkins/ref/plugins.txt) # 用户和权限配置（如有必要，根据实际需求调整） USER root RUN chown -R jenkins:jenkins /var/jenkins_home/ # 切换容器登录账户 USER jenkins"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-21T13:49:05.000Z"}],["meta",{"property":"article:author","content":"songbaicheng"}],["meta",{"property":"article:tag","content":"Jenkins"}],["meta",{"property":"article:modified_time","content":"2024-04-21T13:49:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"初始 Jenkins\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-21T13:49:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"songbaicheng\\",\\"url\\":\\"https://github.com/songbaicheng\\",\\"email\\":\\"songbaicheng16@163.com\\"}]}"]]},"headers":[{"level":2,"title":"快速搭建","slug":"快速搭建","link":"#快速搭建","children":[]},{"level":2,"title":"基础配置","slug":"基础配置","link":"#基础配置","children":[]}],"git":{"createdTime":1713451598000,"updatedTime":1713707345000,"contributors":[{"name":"songbaicheng","email":"songbaicheng16@163.com","commits":2}]},"readingTime":{"minutes":1.62,"words":487},"filePathRelative":"study/maintenance/jenkins/jenkins-start.md","localizedDate":"2024年4月18日","excerpt":"<h1> 初始 Jenkins</h1>\\n<h2> 快速搭建</h2>\\n<p>个人理解主节点的 Jenkins 因为不推荐参与构建任务，再加性能损耗小、系统调用权限更直接、复杂度降低等优点，所以应该是安装在宿主机上的，但是目前主流的方案都因为隔离性、可移植性、易于管理和更新的原因都选择容器部署，那我们也就选择容器的方式进行搭建。</p>\\n<p>便于管理和配置复用，我们这里采用 Docker Compose 的容器编排方式创建 Jenkins 容器。我们在工作目录中创建下列 Dockerfile 和 Docker Compose。</p>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre class=\\"language-bash\\"><code>   <span class=\\"token comment\\"># 选择自己的容器镜像</span>\\nFROM jenkins/jenkins\\n\\n<span class=\\"token comment\\"># 设置环境变量，也可以省略，因为不推荐使用自带的 JDK</span>\\nENV <span class=\\"token assign-left variable\\">JAVA_OPTS</span><span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"-Xms512m -Xmx1024m\\"</span>\\n\\n<span class=\\"token comment\\"># 安装必要的插件，当然可以选择启动容器后手动安装</span>\\nCOPY plugins.txt /usr/share/jenkins/ref/plugins.txt\\nRUN /usr/local/bin/install-plugins.sh <span class=\\"token variable\\"><span class=\\"token variable\\">$(</span><span class=\\"token function\\">cat</span> /usr/share/jenkins/ref/plugins.txt<span class=\\"token variable\\">)</span></span>\\n\\n<span class=\\"token comment\\"># 用户和权限配置（如有必要，根据实际需求调整）</span>\\n<span class=\\"token environment constant\\">USER</span> root\\nRUN <span class=\\"token function\\">chown</span> <span class=\\"token parameter variable\\">-R</span> jenkins:jenkins /var/jenkins_home/\\n\\n<span class=\\"token comment\\"># 切换容器登录账户</span>\\n<span class=\\"token environment constant\\">USER</span> jenkins\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
