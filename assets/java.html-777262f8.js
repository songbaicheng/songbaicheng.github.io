const e=JSON.parse(`{"key":"v-2c8128ac","path":"/work-task/standard/java.html","title":"Java 开发规范","lang":"zh-CN","frontmatter":{"category":"开发规范","tag":["Java"],"description":"Java 开发规范 好的代码就是注释。 其实开发规范这个事情在协作的时候是个非常让人高血压的事情，还记得当时在第一家公司工作的时候，领导是一个对代码规范十分苛刻的领导，几乎只要有时间他就看我们写的代码，然后把个别个性的代码告诉你让你改，所以当时组里十几个人代码风格出奇的相同，而这样的带来的好处别人写了什么一目了然，而且形似的地方可以直接简单改改就用，感觉自己的“代码洁癖”应该就是在当时产生的。 要说 Java 届的统一开发格式，中国开发者最先想到的应该是阿里的 《Java 开发手册》，从2017年9月25日手册正式发布，至今为止已更迭了四个版本,分别是2017(终极版)、2018(详尽版)、2019(华山版)、2020(泰山版)，感觉身边的 Java 程序员都是阅读过的，相比书而言阿里的代码规范插件更是收到了所有人的追捧，也是每个人 IDEA 上必装的插件之一，所以只要在规范插件的帮助下，大家的代码应该不会出现风格差别很大的情况。","head":[["meta",{"property":"og:url","content":"https://github.com/songbaicheng/songbaicheng.github.io/work-task/standard/java.html"}],["meta",{"property":"og:site_name","content":"Baicheng's Blog"}],["meta",{"property":"og:title","content":"Java 开发规范"}],["meta",{"property":"og:description","content":"Java 开发规范 好的代码就是注释。 其实开发规范这个事情在协作的时候是个非常让人高血压的事情，还记得当时在第一家公司工作的时候，领导是一个对代码规范十分苛刻的领导，几乎只要有时间他就看我们写的代码，然后把个别个性的代码告诉你让你改，所以当时组里十几个人代码风格出奇的相同，而这样的带来的好处别人写了什么一目了然，而且形似的地方可以直接简单改改就用，感觉自己的“代码洁癖”应该就是在当时产生的。 要说 Java 届的统一开发格式，中国开发者最先想到的应该是阿里的 《Java 开发手册》，从2017年9月25日手册正式发布，至今为止已更迭了四个版本,分别是2017(终极版)、2018(详尽版)、2019(华山版)、2020(泰山版)，感觉身边的 Java 程序员都是阅读过的，相比书而言阿里的代码规范插件更是收到了所有人的追捧，也是每个人 IDEA 上必装的插件之一，所以只要在规范插件的帮助下，大家的代码应该不会出现风格差别很大的情况。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-23T14:58:28.000Z"}],["meta",{"property":"article:author","content":"songbaicheng"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:modified_time","content":"2024-06-23T14:58:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 开发规范\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-06-23T14:58:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"songbaicheng\\",\\"url\\":\\"https://github.com/songbaicheng\\",\\"email\\":\\"songbaicheng16@163.com\\"}]}"]]},"headers":[{"level":2,"title":"好的代码就是注释。","slug":"好的代码就是注释。","link":"#好的代码就是注释。","children":[]},{"level":2,"title":"代码规范与技巧","slug":"代码规范与技巧","link":"#代码规范与技巧","children":[{"level":3,"title":"1. 规范命名","slug":"_1-规范命名","link":"#_1-规范命名","children":[]},{"level":3,"title":"2. 方法别太长","slug":"_2-方法别太长","link":"#_2-方法别太长","children":[]},{"level":3,"title":"3. 多用 return","slug":"_3-多用-return","link":"#_3-多用-return","children":[]},{"level":3,"title":"4. if 条件表达式不要太复杂","slug":"_4-if-条件表达式不要太复杂","link":"#_4-if-条件表达式不要太复杂","children":[]},{"level":3,"title":"5. 优雅地参数校验","slug":"_5-优雅地参数校验","link":"#_5-优雅地参数校验","children":[]},{"level":3,"title":"6. 统一返回体结构","slug":"_6-统一返回体结构","link":"#_6-统一返回体结构","children":[]},{"level":3,"title":"7. 统一异常处理","slug":"_7-统一异常处理","link":"#_7-统一异常处理","children":[]},{"level":3,"title":"8. 尽量不传递 null","slug":"_8-尽量不传递-null","link":"#_8-尽量不传递-null","children":[]},{"level":3,"title":"9. 类和方法单一职责","slug":"_9-类和方法单一职责","link":"#_9-类和方法单一职责","children":[]},{"level":3,"title":"10. 尽量使用聚合/组合代替继承","slug":"_10-尽量使用聚合-组合代替继承","link":"#_10-尽量使用聚合-组合代替继承","children":[]},{"level":3,"title":"11. 使用线程池代替手动创建线程","slug":"_11-使用线程池代替手动创建线程","link":"#_11-使用线程池代替手动创建线程","children":[]},{"level":3,"title":"12. 减小锁的范围","slug":"_12-减小锁的范围","link":"#_12-减小锁的范围","children":[]},{"level":3,"title":"13. 有类型区分时定义好枚举","slug":"_13-有类型区分时定义好枚举","link":"#_13-有类型区分时定义好枚举","children":[]},{"level":3,"title":"14. 使用 StringBuilder 进行字符串拼接","slug":"_14-使用-stringbuilder-进行字符串拼接","link":"#_14-使用-stringbuilder-进行字符串拼接","children":[]},{"level":3,"title":"15. 不循环调用数据库","slug":"_15-不循环调用数据库","link":"#_15-不循环调用数据库","children":[]}]}],"git":{"createdTime":1694769729000,"updatedTime":1719154708000,"contributors":[{"name":"songbaicheng","email":"2524218694@qq.com","commits":2},{"name":"songbaicheng","email":"songbaicheng16@163.com","commits":1}]},"readingTime":{"minutes":7.21,"words":2163},"filePathRelative":"work-task/standard/java.md","localizedDate":"2023年9月15日","excerpt":"<h1> Java 开发规范</h1>\\n<h2> 好的代码就是注释。</h2>\\n<p>其实开发规范这个事情在协作的时候是个非常让人高血压的事情，还记得当时在第一家公司工作的时候，领导是一个对代码规范十分苛刻的领导，几乎只要有时间他就看我们写的代码，然后把个别个性的代码告诉你让你改，所以当时组里十几个人代码风格出奇的相同，而这样的带来的好处别人写了什么一目了然，而且形似的地方可以直接简单改改就用，感觉自己的“代码洁癖”应该就是在当时产生的。</p>\\n<p>要说 Java 届的统一开发格式，中国开发者最先想到的应该是阿里的 <strong><em>《Java 开发手册》</em></strong>，从2017年9月25日手册正式发布，至今为止已更迭了四个版本,分别是2017(终极版)、2018(详尽版)、2019(华山版)、2020(泰山版)，感觉身边的 Java 程序员都是阅读过的，相比书而言阿里的代码规范插件更是收到了所有人的追捧，也是每个人 IDEA 上必装的插件之一，所以只要在规范插件的帮助下，大家的代码应该不会出现风格差别很大的情况。</p>","autoDesc":true}`);export{e as data};
