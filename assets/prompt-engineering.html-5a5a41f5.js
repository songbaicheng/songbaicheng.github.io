const e=JSON.parse(`{"key":"v-27a68dfc","path":"/ai/application/prompt-engineering.html","title":"Prompt Engineering","lang":"zh-CN","frontmatter":{"category":"AI","tag":["提示工程","指令工程"],"description":"Prompt Engineering 随着 ChatGPT 等 LLM（大语言模型）的出现，自然语言处理的范式正在由 Pretrain-Finetune（预训练-微调）向提示工程演变。 对于具有较强自然语言理解、生成能力，能够实现多样化任务处理的 LLM 来说，一个合理的 Prompt 设计极大地决定了其能力的上限与下限。 Prompt Engineering，即是针对特定任务构造能充分发挥大模型能力的 Prompt 的技巧。 要充分、高效地使用 LLM，提示工程是必不可少的技能。 学习提示工程，你要明白为什么有的指令有效有的指令无效、怎么提升指令有效的概率、那些问题用提升工程更有效、那些用传统编程更快、能完成与业务系统的对接。","head":[["meta",{"property":"og:url","content":"https://github.com/songbaicheng/songbaicheng.github.io/ai/application/prompt-engineering.html"}],["meta",{"property":"og:site_name","content":"Baicheng's Blog"}],["meta",{"property":"og:title","content":"Prompt Engineering"}],["meta",{"property":"og:description","content":"Prompt Engineering 随着 ChatGPT 等 LLM（大语言模型）的出现，自然语言处理的范式正在由 Pretrain-Finetune（预训练-微调）向提示工程演变。 对于具有较强自然语言理解、生成能力，能够实现多样化任务处理的 LLM 来说，一个合理的 Prompt 设计极大地决定了其能力的上限与下限。 Prompt Engineering，即是针对特定任务构造能充分发挥大模型能力的 Prompt 的技巧。 要充分、高效地使用 LLM，提示工程是必不可少的技能。 学习提示工程，你要明白为什么有的指令有效有的指令无效、怎么提升指令有效的概率、那些问题用提升工程更有效、那些用传统编程更快、能完成与业务系统的对接。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-19T08:06:33.000Z"}],["meta",{"property":"article:author","content":"songbaicheng"}],["meta",{"property":"article:tag","content":"提示工程"}],["meta",{"property":"article:tag","content":"指令工程"}],["meta",{"property":"article:modified_time","content":"2025-02-19T08:06:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Prompt Engineering\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-19T08:06:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"songbaicheng\\",\\"url\\":\\"https://github.com/songbaicheng\\",\\"email\\":\\"songbaicheng16@163.com\\"}]}"]]},"headers":[{"level":2,"title":"Prompt 提示原则","slug":"prompt-提示原则","link":"#prompt-提示原则","children":[{"level":3,"title":"1. 编写清晰、具体的指令","slug":"_1-编写清晰、具体的指令","link":"#_1-编写清晰、具体的指令","children":[]},{"level":3,"title":"2. 给模型时间去思考","slug":"_2-给模型时间去思考","link":"#_2-给模型时间去思考","children":[]},{"level":3,"title":"3. 局限性","slug":"_3-局限性","link":"#_3-局限性","children":[]},{"level":3,"title":"4. 英文原版 Prompt","slug":"_4-英文原版-prompt","link":"#_4-英文原版-prompt","children":[]}]},{"level":2,"title":"防止 Prompt 漏洞","slug":"防止-prompt-漏洞","link":"#防止-prompt-漏洞","children":[{"level":3,"title":"注入分类器","slug":"注入分类器","link":"#注入分类器","children":[]},{"level":3,"title":"输入防御","slug":"输入防御","link":"#输入防御","children":[]}]},{"level":2,"title":"具体应用","slug":"具体应用","link":"#具体应用","children":[{"level":3,"title":"","slug":"","link":"#","children":[]}]}],"git":{"createdTime":1739543498000,"updatedTime":1739952393000,"contributors":[{"name":"songbaicheng","email":"songbaicheng@sdpjw.com","commits":2}]},"readingTime":{"minutes":3,"words":900},"filePathRelative":"ai/application/prompt-engineering.md","localizedDate":"2025年2月14日","excerpt":"<h1> Prompt Engineering</h1>\\n<p>随着 ChatGPT 等 LLM（大语言模型）的出现，自然语言处理的范式正在由 Pretrain-Finetune（预训练-微调）向提示工程演变。</p>\\n<p>对于具有较强自然语言理解、生成能力，能够实现多样化任务处理的 LLM 来说，一个合理的 Prompt 设计极大地决定了其能力的上限与下限。</p>\\n<p>Prompt Engineering，即是针对特定任务构造能充分发挥大模型能力的 Prompt 的技巧。 要充分、高效地使用 LLM，提示工程是必不可少的技能。</p>\\n<p>学习提示工程，你要明白为什么有的指令有效有的指令无效、怎么提升指令有效的概率、那些问题用提升工程更有效、那些用传统编程更快、能完成与业务系统的对接。</p>","autoDesc":true}`);export{e as data};
