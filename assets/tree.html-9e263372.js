import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as u,c as r,a as n,b as s,d as a,w as t,e as o}from"./app-b456845c.js";const k="/assets/images/study/computer-basis/ads/data-structure/tree/tree.jpg",d="/assets/images/study/computer-basis/ads/data-structure/tree/full-tree-and-compete-tree.jpg",m="/assets/images/study/computer-basis/ads/data-structure/tree/bitree-order.jpg",v="/assets/images/study/computer-basis/ads/data-structure/tree/parental-representation.jpg",b="/assets/images/study/computer-basis/ads/data-structure/tree/child-representation.jpg",h="/assets/images/study/computer-basis/ads/data-structure/tree/child-brother-representation.jpg",g={},f=n("h1",{id:"树和二叉树",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#树和二叉树","aria-hidden":"true"},"#"),s(" 树和二叉树")],-1),y=o('<h2 id="树的基本概念" tabindex="-1"><a class="header-anchor" href="#树的基本概念" aria-hidden="true">#</a> 树的基本概念</h2><p>树是 n(n &gt;= 0) 个结点的有限集。当 n = 0 的时候，称为<strong>空树</strong>，在任何一个非空树中应该满足：</p><ol><li>有且只有一个特定的称为根的结点。</li><li>当 n &gt; 1 时，其余结点可以分为 m(m &gt; 0) 个互不相交的有限集 T1,T2,T3,……,Tm，其中每个结合本身又是一棵树，并成为根的子树。</li></ol><p>显然，树的定义是递归的，即在树的定义中又用到了其自身，树作为一种逻辑结构，同时也是一种分层结构，具有两个特点</p><ol><li>树的根结点没有前驱，根结点外的所有结点有且只有一个前驱。</li><li>树中的所有所有结点都可以有零个或多个前驱。</li></ol><p>因为树中的某个节点（除根结点外）最多只和上一层的一个结点有直接关系，根结点没有直接上层结点，所有n个结点的树有 n - 1 条边，而且每个结点与其下一层的零个或多个结点（即子女结点）都有直接关系。</p><h3 id="基本术语" tabindex="-1"><a class="header-anchor" href="#基本术语" aria-hidden="true">#</a> 基本术语</h3><figure><img src="'+k+'" alt="树的树形表示" tabindex="0" loading="lazy"><figcaption>树的树形表示</figcaption></figure><ul><li>首先观察结点K，根A到K的唯一路径到的任意点，称为结点K的祖先，即A、B、E都是K的祖先。而E是路径上最接近K的祖先，所以称E为K的双亲，而K是E的孩子。</li><li>有相同双亲结点称为兄弟，如K和L都有共同的双亲E，即K和L为兄弟结点。</li><li>树中一个结点的孩子总数称为该结点的度，树中结点最大的度称为树的度，如结点B的度为2，D的度为3，树的度为3.</li><li>度大于0的结点称为分支结点（又称非终端结点），度为0的结点为叶子结点（又称终端结点）。</li><li>结点的层次从根结点开始，根结点为第一层，它的子结点为第二层，以此类推。双亲在同一层的结点互为堂兄弟，如G和E、F、H、I、J互为堂兄弟。</li><li>结点的深度是从根结点开始自顶向下逐层累加，结点的高度从叶子结点开始自底向上逐层累加。树的高度或深度是树中结点的最大深度。</li><li>有序树和无序树。树中的结点从左到右是有次序的，不能互换被称为有序树。否则称为无序树。</li><li>路径和路径长度。树中的两个结点之间的路径是由这两个结点之间所经过的的结点序列构成的，而路径长度是路径上所经过的边的个数。</li><li>树的分支是有向的，从双亲结点指向子结点。</li><li>森林。森林是m（m&gt;=0）颗互不相交的树的集合。森里只要把所有树的根结点去除就成了森林，相反，只要给m颗树独立的树添加一个根结点，森林就成了树。</li></ul><h3 id="基本性质" tabindex="-1"><a class="header-anchor" href="#基本性质" aria-hidden="true">#</a> 基本性质</h3><ol><li>树中的结点数等于所有结点的度之和加一。</li><li>度为m的树第i层上至多有m<sup>i-1</sup>个结点（i&gt;=1）。</li><li>高度为h的m叉树至多有 (m<sup>h</sup>-1)/(m-1)个结点。</li><li>具有n个结点的m叉树的最小高度为⌈log<sub>m</sub>(n(m-1)+1)⌉。</li></ol><h2 id="二叉树" tabindex="-1"><a class="header-anchor" href="#二叉树" aria-hidden="true">#</a> 二叉树</h2><p>二叉树是一种特殊的树形结构，其特点就是每个结点至多只有两颗子树，即不存在度大于2的结点，而且二叉树是有序树，左右结点次序不能随意颠倒。二叉树的递归定义是或为空二叉树，或为一个根结点和两个互不相交的被称为根的左子树和右子树组成，左子树和右子树分别又是一颗二叉树。</p><p>二叉树是特殊的度为二的有序树，度为2的有序树至少有三个结点，而二叉树可以为空。度为二的有序树左右次序是对于另一个孩子而言的，若某个节点只有一个孩子，则这个孩子就无需区分其左右次序，而二叉树无论孩子个数是否为2，均需要确定其左右次序。</p><h3 id="几种特殊的二叉树" tabindex="-1"><a class="header-anchor" href="#几种特殊的二叉树" aria-hidden="true">#</a> 几种特殊的二叉树</h3><figure><img src="'+d+`" alt="完全二叉树和满二叉树" tabindex="0" loading="lazy"><figcaption>完全二叉树和满二叉树</figcaption></figure><ul><li>完全二叉树：高度为h，有n个结点的二叉树，当且仅当每个结点都与高度为h的满二叉树中编号为1～n的结点一一对应称为完全二叉树。 <ul><li>若 i &lt;= ⌊n/2⌋，则i为分支结点，否则为叶子结点。</li><li>叶子结点只可能在层数最大的两层出现，并且最大层出现的叶子结点应该依次排列在该层的最左边的位置。</li><li>若有度为1的结点，则只可能有一个，且该结点，且该结点只有左孩子。</li><li>按照层序编号后，一旦出现结点为叶子结点或者只有左孩子，则编号大于i的结点均为叶子结点。</li><li>若n为奇数，则每个分支结点都有左右孩子，若n为偶数，则编号n/2的结点只有左孩子。</li></ul></li><li>满二叉树：一个高度为h，且含有2<sup>h</sup>-1个结点的二叉树称为满二叉树，即每层都是最多的结点。按照层序排序后，对于编号为i的结点，若有双亲则双亲为⌊i/2⌋，若有左孩子，则左孩子为 2i，若有右孩子，有孩子为 2i+1。</li><li>二叉排序树：左子树上所有的结点的关键字均小于更结点的关键字；右子树上的所有结点句大于根结点的关键字，左右子树分别又各是一颗二叉排序树。</li><li>平衡二叉树：树上任意一个结点的左子树和右子树的深度之差不超过1。</li></ul><h3 id="二叉树的性质" tabindex="-1"><a class="header-anchor" href="#二叉树的性质" aria-hidden="true">#</a> 二叉树的性质</h3><ol><li>非空二叉树的叶子结点数等于度为2的结点树加一，即 n<sub>0</sub>=n<sub>2</sub> + 1。</li><li>非空二叉树上第k层上至多有 2<sub>k-1</sub> 个结点。</li><li>高度为h的二叉树至多有 2<sup>k</sup>-1 个结点，h &gt;= 1.</li><li>结点所在的深度为 ⌊log<sub>2</sub>n⌋ + 1。</li><li>具有n个（n&gt;0）结点的完全二叉树的高度为 ⌈log<sub>2</sub>(n + 1)⌉ 或 ⌊log<sub>2</sub>n⌋ + 1。</li></ol><h3 id="二叉树的存储" tabindex="-1"><a class="header-anchor" href="#二叉树的存储" aria-hidden="true">#</a> 二叉树的存储</h3><h4 id="顺序存储" tabindex="-1"><a class="header-anchor" href="#顺序存储" aria-hidden="true">#</a> 顺序存储</h4><p>二叉树的顺序存储是指用一组地址连续的存储单元依次自上而下、自左至右完全存储二叉树的所有结点元素。根据二叉树的性质，<strong>完全二叉树</strong>和<strong>满二叉树</strong>采用顺序结构比较合适，树中结点的序号可以唯一的反应结点之间的逻辑结构，这样既能最大可能的节省存储空间，又能利用数组元素的下标确定结点的位置以及结点的关系。如果是一般的二叉树为了让数组下标反应二叉树中结点之间的逻辑关系，只能添加一些并不存在空结点，让其每个结点与完全二叉树的结点相对照，如果最坏的情况高度为h且之后h个结点的单枝树却要占据 2<sup>h</sup> - 1 个单元。</p><p>需要注意的是，顺序存储需要从数组下标1开始存储树中的结点，否则一些性质则无法满足。</p><h4 id="链式存储" tabindex="-1"><a class="header-anchor" href="#链式存储" aria-hidden="true">#</a> 链式存储</h4><p>由于顺序存储的空间利用率较低，因此二叉树一般都是采用链式存储，在二叉树中结点通常包含数据域和指针域，二叉链表就必须包含数据域 data、左指针域 lchild 和右指针域 rchild。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Setter</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@description</span> 二叉树的链式存储
 */</span>
<span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@Setter</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BiTree</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 数据域
     */</span>
    <span class="token class-name">E</span> data<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 左孩子指针
     */</span>
    <span class="token class-name">BiTree</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> leftChild<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 右孩子指针
     */</span>
    <span class="token class-name">BiTree</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> rightChild<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 初始化方法
     * <span class="token keyword">@param</span> <span class="token parameter">data</span> 数据域
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">BiTree</span><span class="token punctuation">(</span><span class="token class-name">E</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二叉树的遍历" tabindex="-1"><a class="header-anchor" href="#二叉树的遍历" aria-hidden="true">#</a> 二叉树的遍历</h3><p>二叉树中的遍历是指按某条搜索路径访问树中的每个结点，使得每个结点均被访问一次，而且仅被访问一次，而且仅被访问一次。由于二叉树是一种非线性结构，每个结点都可以能有两个子树，因而需要寻找一种规律以便使二叉树的结点能排列在一个线性队列上，方便遍历。我们根据二叉树的定义，遍历一颗二叉树要决定对根和左右结点的访问顺序，常见的遍历次序是先序、中序和后序三种，其中的序是指根结点在何时被访问。</p><figure><img src="`+m+'" alt="二叉树的三种遍历顺序" tabindex="0" loading="lazy"><figcaption>二叉树的三种遍历顺序</figcaption></figure>',29),w=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"package"),s(),n("span",{class:"token namespace"},[s("com"),n("span",{class:"token punctuation"},"."),s("sbc"),n("span",{class:"token punctuation"},"."),s("structure"),n("span",{class:"token punctuation"},"."),s("tree")]),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("org"),n("span",{class:"token punctuation"},"."),s("junit"),n("span",{class:"token punctuation"},"."),s("jupiter"),n("span",{class:"token punctuation"},"."),s("api"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"BeforeEach")]),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token import"},[n("span",{class:"token namespace"},[s("org"),n("span",{class:"token punctuation"},"."),s("junit"),n("span",{class:"token punctuation"},"."),s("jupiter"),n("span",{class:"token punctuation"},"."),s("api"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token class-name"},"Test")]),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token doc-comment comment"},[s(`/**
 * `),n("span",{class:"token keyword"},"@author"),s(` songbaicheng
 * `),n("span",{class:"token keyword"},"@description"),s(` 二叉树遍历类测试
 * `),n("span",{class:"token keyword"},"@date"),s(` 2023/8/15 20:14
 */`)]),s(`
`),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"BiTreeTest"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token class-name"},"BiTree"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Integer"),n("span",{class:"token punctuation"},">")]),s(" root "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"BiTree"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token annotation punctuation"},"@BeforeEach"),s(`
    `),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"setUp"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`

        `),n("span",{class:"token comment"},"// 初始化二叉树"),s(`
        `),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token class-name"},"BiTree"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Integer"),n("span",{class:"token punctuation"},">")]),s(" l7 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"BiTree"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"7"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token class-name"},"BiTree"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Integer"),n("span",{class:"token punctuation"},">")]),s(" r3 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"BiTree"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token class-name"},"BiTree"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Integer"),n("span",{class:"token punctuation"},">")]),s(" l4 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"BiTree"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token class-name"},"BiTree"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Integer"),n("span",{class:"token punctuation"},">")]),s(" l9 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"BiTree"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"9"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token class-name"},"BiTree"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Integer"),n("span",{class:"token punctuation"},">")]),s(" r6 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"BiTree"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"6"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token class-name"},"BiTree"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Integer"),n("span",{class:"token punctuation"},">")]),s(" l8 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"BiTree"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"8"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        l4`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setRightChild"),n("span",{class:"token punctuation"},"("),s("l8"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        l7`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setLeftChild"),n("span",{class:"token punctuation"},"("),s("l4"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        l7`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setRightChild"),n("span",{class:"token punctuation"},"("),s("l9"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        r3`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setLeftChild"),n("span",{class:"token punctuation"},"("),s("r6"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        root`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setLeftChild"),n("span",{class:"token punctuation"},"("),s("l7"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        root`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setRightChild"),n("span",{class:"token punctuation"},"("),s("r3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token doc-comment comment"},`/**
     * 前序遍历：
     * 1,7,4,8,9,3,6,
     * 中序遍历：
     * 4,8,7,9,1,6,3,
     * 后序遍历
     * 8,4,9,7,6,3,1,
     */`),s(`
    `),n("span",{class:"token annotation punctuation"},"@Test"),s(`
    `),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"test"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"前序遍历："'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token function"},"preOrder"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"\\n中序遍历："'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token function"},"inOrder"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"\\n后序遍历"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token function"},"postOrder"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token doc-comment comment"},[s(`/**
     * 前序遍历
     * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token parameter"},"tree"),s(` 遍历二叉树
     */`)]),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"preOrder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"BiTree"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Integer"),n("span",{class:"token punctuation"},">")]),s(" tree"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("tree "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),s("tree"),n("span",{class:"token punctuation"},"."),s("data "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token string"},'","'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token function"},"preOrder"),n("span",{class:"token punctuation"},"("),s("tree"),n("span",{class:"token punctuation"},"."),s("leftChild"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token function"},"preOrder"),n("span",{class:"token punctuation"},"("),s("tree"),n("span",{class:"token punctuation"},"."),s("rightChild"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token doc-comment comment"},[s(`/**
     * 中序遍历
     * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token parameter"},"tree"),s(` 遍历二叉树
     */`)]),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"inOrder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"BiTree"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Integer"),n("span",{class:"token punctuation"},">")]),s(" tree"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("tree "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token function"},"inOrder"),n("span",{class:"token punctuation"},"("),s("tree"),n("span",{class:"token punctuation"},"."),s("leftChild"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),s("tree"),n("span",{class:"token punctuation"},"."),s("data "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token string"},'","'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token function"},"inOrder"),n("span",{class:"token punctuation"},"("),s("tree"),n("span",{class:"token punctuation"},"."),s("rightChild"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token doc-comment comment"},[s(`/**
     * 后序遍历
     * `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token parameter"},"tree"),s(` 遍历二叉树
     */`)]),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"postOrder"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"BiTree"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Integer"),n("span",{class:"token punctuation"},">")]),s(" tree"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("tree "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token function"},"postOrder"),n("span",{class:"token punctuation"},"("),s("tree"),n("span",{class:"token punctuation"},"."),s("leftChild"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token function"},"postOrder"),n("span",{class:"token punctuation"},"("),s("tree"),n("span",{class:"token punctuation"},"."),s("rightChild"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),s("tree"),n("span",{class:"token punctuation"},"."),s("data "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token string"},'","'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),E=n("p",null,[s("递归的巧妙确实让我们省略了很多代码，可是在我们享受这种便利的时候，同样也徒增了很多次计算的消耗，每次扫描叶子结点的时候总会将其父母结点重新计算一次，在一些特殊情况中非常浪费性能，尤其是递归中经典的"),n("strong",null,"斐波那契数列"),s("中，如果追求更高的时间复杂度，我们会采取非递归的方式新增一个标记记录每一次计算出的值来减少多次计算的消耗，所以这里也借助栈来实现二叉树的中序遍历：")],-1),B=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
* 非递归中序遍历
*
* `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token parameter"},"tree"),s(` 遍历二叉树
*/`)]),s(`
`),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"inOrderByStack"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"BiTree"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Integer"),n("span",{class:"token punctuation"},">")]),s(" tree"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token class-name"},"LinkedStack"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"BiTree"),n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Integer"),n("span",{class:"token punctuation"},">"),n("span",{class:"token punctuation"},">")]),s(" stack "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"LinkedStack"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token class-name"},"BiTree"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Integer"),n("span",{class:"token punctuation"},">")]),s(" root "),n("span",{class:"token operator"},"="),s(" tree"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("root "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token operator"},"||"),s(),n("span",{class:"token operator"},"!"),s("stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"empty"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("root "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token comment"},"// 一路向左"),s(`
            stack`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            root `),n("span",{class:"token operator"},"="),s(" root"),n("span",{class:"token punctuation"},"."),s("leftChild"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token comment"},"// 出栈并开始转向出栈的右子树"),s(`
            root `),n("span",{class:"token operator"},"="),s(" stack"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            `),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),s("root"),n("span",{class:"token punctuation"},"."),s("data "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token string"},'","'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            root `),n("span",{class:"token operator"},"="),s(" root"),n("span",{class:"token punctuation"},"."),s("rightChild"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=o('<h3 id="由遍历序列构造二叉树" tabindex="-1"><a class="header-anchor" href="#由遍历序列构造二叉树" aria-hidden="true">#</a> 由遍历序列构造二叉树</h3><p>我们先由二叉树的先序序列和中序序列来唯一确定一颗二叉树，在先序遍历序列中，第一个结点一定是二叉树的根结点，而在中序遍历中，根结点一定在讲中序序列分割为两个子序列，根据这两个子序列在先序序列中根据同样的规律找到左右子树的根结点，依次递归下去就能唯一确定这颗二叉树，同理，二叉树的后序序例和中序序列也可以诶唯一确定二叉树、层序遍历和中序序列也可以唯一确定二叉树，但是先序序列和后续序列不能确定。</p><h2 id="线索二叉树" tabindex="-1"><a class="header-anchor" href="#线索二叉树" aria-hidden="true">#</a> 线索二叉树</h2><p>遍历二叉树是以一定的规则将二叉树中的结点排列成一个线性序列，只能体现一种父子关系，不能直接得到结点在遍历中的前驱和后继。如果我们把二叉树中的空指针结点存放指向其前驱或者后继的指针，可以像遍历单链表那样方便的遍历二叉树，加快了查找结点前驱和后继的速度，这也就是二叉排序树，规定每个结点若无左子树，令lchild指向其前驱结点，若无右子树，令rchild指向其后继结点，并且需要增加两个标识域标识指针域，以指向左右孩子或者前驱后继，标识为0则表示为左右孩子，如果是1则代表是前驱或者后继。</p><h2 id="树、森林" tabindex="-1"><a class="header-anchor" href="#树、森林" aria-hidden="true">#</a> 树、森林</h2><h3 id="树的存储结构" tabindex="-1"><a class="header-anchor" href="#树的存储结构" aria-hidden="true">#</a> 树的存储结构</h3><p>树的存储结构有很多，即可采用顺序存储结构，又可采用链式存储结构，但无论采用何种存储方式，都要求能唯一的反应树中各个节点之间的逻辑关系，下面是三种常见的存储结构。</p><h4 id="双亲表示法" tabindex="-1"><a class="header-anchor" href="#双亲表示法" aria-hidden="true">#</a> 双亲表示法</h4><p>采用一组连续空间来存储每个结点，同时在每个结点中增设一个伪指针，指示双亲结点在数组中的位置，根结点下标为0，其尾指针域为-1.</p><figure><img src="'+v+'" alt="双亲表示法" tabindex="0" loading="lazy"><figcaption>双亲表示法</figcaption></figure><h4 id="孩子表示法" tabindex="-1"><a class="header-anchor" href="#孩子表示法" aria-hidden="true">#</a> 孩子表示法</h4><p>将每个结点的孩子结点都用单链表链接起来形成一个线性结构，此时 n 个结点就有 n 个孩子链表（叶子结点的孩子链表为空表）。</p><figure><img src="'+b+'" alt="孩子表示法" tabindex="0" loading="lazy"><figcaption>孩子表示法</figcaption></figure><h4 id="孩子兄弟表示法" tabindex="-1"><a class="header-anchor" href="#孩子兄弟表示法" aria-hidden="true">#</a> 孩子兄弟表示法</h4><p>即以二叉链表作为树的存储结构，使每个结点包括三部分内容：结点值、指向结点第一个孩子结点的指针，以及指向结点在一个兄弟结点的指针。</p><figure><img src="'+h+'" alt="孩子兄弟表示法" tabindex="0" loading="lazy"><figcaption>孩子兄弟表示法</figcaption></figure><h2 id="树、森林与二叉树的转换" tabindex="-1"><a class="header-anchor" href="#树、森林与二叉树的转换" aria-hidden="true">#</a> 树、森林与二叉树的转换</h2><p>树转换为二叉树的规则：每个结点左指针指向它的第一个孩子，右指针指向它在树中的相临右兄弟，这个规矩也叫左孩子右兄弟，其规则也正如上面的孩子兄弟表示法图所示。</p><p>森林转换成二叉树的规则：把下一棵树转化为上一棵树的右兄弟，其他和树转化二叉树的规则相同。</p><h2 id="树和森林的遍历" tabindex="-1"><a class="header-anchor" href="#树和森林的遍历" aria-hidden="true">#</a> 树和森林的遍历</h2><p>树的遍历是指用某种方式访问树的每个结点，且仅访问一次，主要有先根遍历和后根遍历两种方式：</p><ul><li>先根遍历：先访问根结点，再依次遍历根结点的每棵子树，遍历子树时仍遵循先根后子树的规则。</li><li>后根遍历：先依次遍历根结点的每棵子树，再访问根结点，遍历子树时仍遵循先子树后根的规则。</li></ul><p>森林的两种遍历方式：</p><ul><li>先序遍历森林 <ol><li>访问森心的第一棵树的根结点</li><li>先序遍历第一棵树中根结点的子树森林。</li><li>先序遍历除去第一棵树之后剩余树构成的森林。</li></ol></li><li>中序遍历森林 <ol><li>中序遍历森里中第一棵子树的根结点的子树森林。</li><li>访问第一棵树的根结点。</li><li>中序遍历去除第一棵树之后剩余树构成的森林。</li></ol></li></ul>',24);function T(I,C){const l=e("RouterLink"),i=e("Mermaid"),c=e("CodeDemo");return u(),r("div",null,[f,n("blockquote",null,[n("p",null,[s("所有的测试代码都在博客"),a(l,{to:"/"},{default:t(()=>[s("首页")]),_:1}),s("中的 java-study-demo 中找到。")])]),a(i,{id:"mermaid-8",code:"eJzLzcxLyU0s4FJQKMrPL9F4tmDi072Lnu+e/GxeiyZQEASe7Op52t8JlIHyQeDZsqan+7ciCYDA03WznuzsRBdcO+Np0wqIicgGTO59sncOmtonOzqfL+992dj7tK8NTer5rv3PtyzC5pSnu6Y8n7IC3dad257NX/pyNroxTyd3PF2y+tnsPQgzQF6e1PNs8bpn86bTwYd9cD88n9XyYu+aZ72L0NRg+J+ADwG36qiI"}),y,a(c,{id:"code-demo-250",type:"normal",title:"Java%20%E5%88%A9%E7%94%A8%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%89%E7%A7%8D%E9%81%8D%E5%8E%86",code:"eJylVM9v0zAU/ldMTlmJErKUtR0wVUMckJCQYNxy8VI39UjtyHGK0LQDF8S0X3CAAxISN04IcUBCgz9nGXDiX8BOiBOH0rWrD1Hr973v+X3vs3eNHTiBxroRw+AxDBEI6NhOtgM74SwNeMqQzRlCN3ziEzyOKeOAstDeSQnm4htjjpgNY2xvoiFl6A4MRgI7E7mFEp7zOa2WT0AL9GHKR5SBhJJwG+JghEhYBAYoCRiOOaYEnJ0eZif75+9f/Xp2lB0///H52/mXg5+fXv9FQo7A6rVVz+k67nXxa91ty4jjkyCCSQI28ZboQ9YGu7I4EKvYu3mXcBQitgEYpRzcAgQ9KUMbpruSn1XC+1WPxcaE4gFIEH8UmysVq1yOA7IX77IPB9nhG3XwKjzEBEb/lI86zeIdWXx2EvOaSd7FSVG7mdSeI6nXTOrNcby1ZtLaHJW6zaRuNQW5orYtZH+AwxG/PcLRwIxygAp3ZPgeGpZRrbsiWk/W+mCensy0A0uLNMi1IZXxGj1TA9kreyicL1cLZPtH2elJYerf39+qfdfqWG2ra/Usz1qz1PbZ149T4RLaEWBXgL0Knr08VnC12RXEPYGWSFdhxVXJXS7vSM3fXPwt7F32+PBpwtHYpim3Y4YJj4jpG802jLoqMUP32QAxU8pTD0yl8n3S7FJjw2QxMk0D/Vw04XNzzT1FtdmPIYNjIB9QUISab0EpuqgxkS9YrrhSq3kvJJE2CTwEZs5+RdyXNIq04LQ2crQtHksIrgLfsHQ5tFHlyKi0+WwYU26v44RQ/9WrPuBl9Sr9sLxcJdPs3hcXVeNdXKypl/iy5lKWX16uiusCs+i46QIsrmxdMvEx9v4AReXlbw=="},{default:t(()=>[w]),_:1}),E,a(c,{id:"code-demo-256",type:"normal",title:"%E9%9D%9E%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86",code:"eJx9UU9LAkEc/So/97Ra7N7LJOwUBB3suJehHXVynV12R0VUMIj+0B//HIPCU12SDkGa5LdxTL9FM7MarUmPhVnmvd97b2Zq2gkqI21LMxMJiyZg/vA4b3b5uDsZ9vmoNT+95XfngpDcrod8VATmYwwhMRnd8NbVtNcRtGlRzydlxDCUXWIDoYe+jf10NcPQcUFPkyMxl9ynDOewn1IucahZ1KIgkCUUOXBAaAHbaiC5MpCCQG7DDlBciQhTenw7NFnN8F2XiQEZJRShppInDgZdUTFhVnIcqNchptwNXPRYVY+rYlItQbJReYSUME2YDJuzwStvd/jgKUqGvl4pyCuTZdUlFhXlYjg4y/ZEPfuXpgHYCfCaRH4xmvYu+cc7/2zy5+vZ+EWmq82v+zPeeuP9tnqYNWmLTq73c3NLZKoBw0XDLTFDPCZlqrNhI4ZgAyxt09L+O4BPcvm/Jwh/xSI+rfEN4r3caA=="},{default:t(()=>[B]),_:1}),x])}const A=p(g,[["render",T],["__file","tree.html.vue"]]);export{A as default};
