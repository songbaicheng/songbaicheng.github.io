const e=JSON.parse('{"key":"v-885f3b64","path":"/study/backend/java/spring/spring-security-jwt.html","title":"Spring Security + JWT","lang":"zh-CN","frontmatter":{"star":true,"category":"Spring Boot","tag":["Spring Security","JWT"],"description":"Spring Security + JWT 前言 说到 JWT（JSON Web Token），我们首先要知道 Token 是什么，想要知道 Token 是什么，我们就得先谈一下早期 Session 登录的时代，下面是之前 Session 登录的大致流程。 然而，随着应用程序的复杂性和扩展性的增加，分布式系统和跨服务的场景变得更加常见。在这种情况下，使用基于 Session 会话的登录可能会面临一些挑战，例如会话状态的同步和跨服务的会话管理。而且如果 Cookie 如果被截获，用户就会很容易受到跨站请求伪造（CSRF）的攻击。于是令牌（Token）应运而生，Token 承载了用户身份信息和其他必要的声明，无需在服务器端存储会话信息，使其具备了无状态性（stateless）的特性。这样可以减轻服务器的负担，并且适用于分布式环境和跨服务的场景。基于这种特性 Token 的登录过程如下所示。","head":[["meta",{"property":"og:url","content":"https://github.com/songbaicheng/songbaicheng.github.io/study/backend/java/spring/spring-security-jwt.html"}],["meta",{"property":"og:site_name","content":"宋柏成的博客"}],["meta",{"property":"og:title","content":"Spring Security + JWT"}],["meta",{"property":"og:description","content":"Spring Security + JWT 前言 说到 JWT（JSON Web Token），我们首先要知道 Token 是什么，想要知道 Token 是什么，我们就得先谈一下早期 Session 登录的时代，下面是之前 Session 登录的大致流程。 然而，随着应用程序的复杂性和扩展性的增加，分布式系统和跨服务的场景变得更加常见。在这种情况下，使用基于 Session 会话的登录可能会面临一些挑战，例如会话状态的同步和跨服务的会话管理。而且如果 Cookie 如果被截获，用户就会很容易受到跨站请求伪造（CSRF）的攻击。于是令牌（Token）应运而生，Token 承载了用户身份信息和其他必要的声明，无需在服务器端存储会话信息，使其具备了无状态性（stateless）的特性。这样可以减轻服务器的负担，并且适用于分布式环境和跨服务的场景。基于这种特性 Token 的登录过程如下所示。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-02T09:13:34.000Z"}],["meta",{"property":"article:author","content":"songbaicheng"}],["meta",{"property":"article:tag","content":"Spring Security"}],["meta",{"property":"article:tag","content":"JWT"}],["meta",{"property":"article:modified_time","content":"2023-07-02T09:13:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Security + JWT\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-02T09:13:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"songbaicheng\\",\\"url\\":\\"https://github.com/songbaicheng\\",\\"email\\":\\"songbaicheng16@163.com\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"快速开始","slug":"快速开始","link":"#快速开始","children":[{"level":3,"title":"引入依赖","slug":"引入依赖","link":"#引入依赖","children":[]},{"level":3,"title":"系统参数配置和读取","slug":"系统参数配置和读取","link":"#系统参数配置和读取","children":[]},{"level":3,"title":"工具类方法","slug":"工具类方法","link":"#工具类方法","children":[]},{"level":3,"title":"请求获取 Token","slug":"请求获取-token","link":"#请求获取-token","children":[]},{"level":3,"title":"Token 解码","slug":"token-解码","link":"#token-解码","children":[]}]},{"level":2,"title":"走进 JWT","slug":"走进-jwt","link":"#走进-jwt","children":[{"level":3,"title":"头部（Header）","slug":"头部-header","link":"#头部-header","children":[]},{"level":3,"title":"载荷（Payload）","slug":"载荷-payload","link":"#载荷-payload","children":[]},{"level":3,"title":"签名（Signature）","slug":"签名-signature","link":"#签名-signature","children":[]},{"level":3,"title":"搭配 Spring Security","slug":"搭配-spring-security","link":"#搭配-spring-security","children":[]}]}],"git":{"createdTime":1688180572000,"updatedTime":1688289214000,"contributors":[{"name":"songbaicheng","email":"2524218694@qq.com","commits":2}]},"readingTime":{"minutes":6.72,"words":2015},"filePathRelative":"study/backend/java/spring/spring-security-jwt.md","localizedDate":"2023年7月1日","excerpt":"<h1> Spring Security + JWT</h1>\\n<h2> 前言</h2>\\n<p>说到 JWT（JSON Web Token），我们首先要知道 Token 是什么，想要知道 Token 是什么，我们就得先谈一下早期 Session 登录的时代，下面是之前 Session 登录的大致流程。</p>\\n<p>然而，随着应用程序的复杂性和扩展性的增加，分布式系统和跨服务的场景变得更加常见。在这种情况下，使用基于 Session 会话的登录可能会面临一些挑战，例如会话状态的同步和跨服务的会话管理。而且如果 Cookie 如果被截获，用户就会很容易受到跨站请求伪造（CSRF）的攻击。于是令牌（Token）应运而生，Token 承载了用户身份信息和其他必要的声明，无需在服务器端存储会话信息，使其具备了无状态性（stateless）的特性。这样可以减轻服务器的负担，并且适用于分布式环境和跨服务的场景。基于这种特性 Token 的登录过程如下所示。</p>","autoDesc":true}');export{e as data};
