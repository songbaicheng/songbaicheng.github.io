import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as t,c as p,e as o,n as c,g as u,b as n,d as i,a as l}from"./app-3c9963c4.js";const r={},k=n("h1",{id:"hugging-face",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#hugging-face","aria-hidden":"true"},"#"),i(" Hugging Face")],-1),d=n("p",null,"学习 NLP 最优先级要学习的就是 Hugging Face，它提供了可以轻松地下载并且训练先进的预训练模型的 API 和工具。",-1),m=n("p",null,"我们要学习 Transformers 的模型、任务和设计理念，还有就是配置（configuration）、模型（model）、分词器（tokenizer）和流水线（pipeline）这几个最重要的类。",-1),b=l(`<h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h2><p>在开始之前，确保你已经安装了所有必要的库：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> transformers datasets evaluate accelerate
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你还需要安装喜欢的机器学习框架：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> torch
// 或者
pip <span class="token function">install</span> tensorflow
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="预处理数据" tabindex="-1"><a class="header-anchor" href="#预处理数据" aria-hidden="true">#</a> 预处理数据</h2><h3 id="自然语言处理" tabindex="-1"><a class="header-anchor" href="#自然语言处理" aria-hidden="true">#</a> 自然语言处理</h3><p>处理文本数据的主要工具是 Tokenizer。Tokenizer根据一组规则将文本拆分为tokens。然后将这些tokens转换为数字，然后转换为张量，成为模型的输入。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoTokenizer

tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">&quot;google-bert/bert-base-cased&quot;</span><span class="token punctuation">)</span>

encoded_input <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span><span class="token string">&quot;Do not meddle in the affairs of wizards, for they are subtle and quick to anger.&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>encoded_input<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们一起来看一下输出的结果：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>&#39;input_ids&#39;<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">2091</span><span class="token punctuation">,</span> <span class="token number">1136</span><span class="token punctuation">,</span> <span class="token number">1143</span><span class="token punctuation">,</span> <span class="token number">13002</span><span class="token punctuation">,</span> <span class="token number">1107</span><span class="token punctuation">,</span> <span class="token number">1103</span><span class="token punctuation">,</span> <span class="token number">5707</span><span class="token punctuation">,</span> <span class="token number">1104</span><span class="token punctuation">,</span> <span class="token number">16678</span><span class="token punctuation">,</span> <span class="token number">1116</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">1111</span><span class="token punctuation">,</span> <span class="token number">1152</span><span class="token punctuation">,</span> <span class="token number">1132</span><span class="token punctuation">,</span> <span class="token number">11515</span><span class="token punctuation">,</span> <span class="token number">1105</span><span class="token punctuation">,</span> <span class="token number">3613</span><span class="token punctuation">,</span> <span class="token number">1106</span><span class="token punctuation">,</span> <span class="token number">4470</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  &#39;token_type_ids&#39;<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  &#39;attention_mask&#39;<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 input_ids 是与句子中每个token对应的索引。attention_mask 指示是否应该关注一个token。token_type_ids 在存在多个序列时标识一个token属于哪个序列。</p><p>同样的我们可以解码返回你的输入。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>tokenizer<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>encoded_input<span class="token punctuation">[</span><span class="token string">&#39;input_ids&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果是多个句子一样通过上述方法进行处理，并且可以增加 padding 和 truncation 参数进行填充与截断，最后，tokenizer可以返回实际输入到模型的张量。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>batch_sentences <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">&quot;But what about second breakfast?&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;Don&#39;t think he knows about second breakfast, Pip.&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;What about elevensies?&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
encoded_inputs <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>batch_sentences<span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> truncation<span class="token operator">=</span><span class="token boolean">True</span>， return_tensors<span class="token operator">=</span><span class="token string">&quot;pt&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>encoded_inputs<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="音频" tabindex="-1"><a class="header-anchor" href="#音频" aria-hidden="true">#</a> 音频</h3><p>对于音频任务，您需要feature extractor来准备您的数据集以供模型使用。feature extractor旨在从原始音频数据中提取特征，并将它们转换为张量。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> datasets <span class="token keyword">import</span> load_dataset<span class="token punctuation">,</span> Audio
<span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoFeatureExtractor

feature_extractor <span class="token operator">=</span> AutoFeatureExtractor<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span><span class="token string">&quot;facebook/wav2vec2-base&quot;</span><span class="token punctuation">)</span>
dataset <span class="token operator">=</span> load_dataset<span class="token punctuation">(</span><span class="token string">&quot;PolyAI/minds14&quot;</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&quot;en-US&quot;</span><span class="token punctuation">,</span> split<span class="token operator">=</span><span class="token string">&quot;train&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">preprocess_function</span><span class="token punctuation">(</span>examples<span class="token punctuation">)</span><span class="token punctuation">:</span>
    audio_arrays <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token string">&quot;array&quot;</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> examples<span class="token punctuation">[</span><span class="token string">&quot;audio&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    inputs <span class="token operator">=</span> feature_extractor<span class="token punctuation">(</span>
        audio_arrays<span class="token punctuation">,</span>
        sampling_rate<span class="token operator">=</span><span class="token number">16000</span><span class="token punctuation">,</span>
        padding<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
        max_length<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">,</span>
        truncation<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">return</span> inputs

processed_dataset <span class="token operator">=</span> preprocess_function<span class="token punctuation">(</span>dataset<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在样本长度是相同的，并且与指定的最大长度匹配。您现在可以将经过处理的数据集传递给模型了！</p><h3 id="计算机视觉" tabindex="-1"><a class="header-anchor" href="#计算机视觉" aria-hidden="true">#</a> 计算机视觉</h3><p>图像预处理包括多个步骤将图像转换为模型期望输入的格式。这些步骤包括但不限于调整大小、标准化、颜色通道校正以及将图像转换为张量。</p><h3 id="多模态" tabindex="-1"><a class="header-anchor" href="#多模态" aria-hidden="true">#</a> 多模态</h3><p>对于文本，使用分词器(Tokenizer)将文本转换为一系列标记(tokens)，并创建tokens的数字表示，将它们组合成张量。<br> 对于语音和音频，使用特征提取器(Feature extractor)从音频波形中提取顺序特征并将其转换为张量。<br> 图像输入使用图像处理器(ImageProcessor)将图像转换为张量。<br> 多模态输入，使用处理器(Processor)结合了Tokenizer和ImageProcessor或Processor。</p><h2 id="微调预训练模型" tabindex="-1"><a class="header-anchor" href="#微调预训练模型" aria-hidden="true">#</a> 微调预训练模型</h2><p>使用预训练模型有许多显著的好处。它降低了计算成本，减少了碳排放，同时允许您使用最先进的模型，而无需从头开始训练一个。<br> Transformers 提供了涉及各种任务的成千上万的预训练模型。当您使用预训练模型时，您需要在与任务相关的数据集上训练该模型。这种操作被称为微调。</p>`,26);function v(h,g){const s=e("VPCard");return t(),p("div",null,[k,d,m,o(s,c(u({title:"Hugging Face 官网",desc:"点击跳转 Hugging Face 查看详细内容",logo:"/assets/images/ai/llm/hugging-face/huggingface_logo.svg",link:"https://huggingface.co/",color:"rgba(173, 216, 590, 0.15)"})),null,16),b])}const x=a(r,[["render",v],["__file","hugging-face.html.vue"]]);export{x as default};
