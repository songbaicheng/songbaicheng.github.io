import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o as i,c as u,d as e,n as p,g as r,w as d,a as n,b as s,e as t}from"./app-3b48ce34.js";const k="/assets/images/resource/open-source-project/rule-engine/liteflow-demo.png",m={},h=n("h1",{id:"liteflow",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#liteflow","aria-hidden":"true"},"#"),s(" LiteFlow")],-1),b=t('<h2 id="规则引擎的定义" tabindex="-1"><a class="header-anchor" href="#规则引擎的定义" aria-hidden="true">#</a> 规则引擎的定义</h2><p>很多人容易把规则引擎和流程引擎的概念混在一起，这里我们先将规则引擎和流程引擎区分开：</p><ul><li><strong>规则引擎</strong>：通常是嵌入在应用程序组件中的，实现了将业务决策从应用程序代码中分离出来，并使用预定义的语义模块编写业务决策。接受数据输入，解释业务规则，并根据业务规则做出业务决策。</li><li><strong>流程引擎</strong>：实现了将多个业务参与者之间按照某种预定义的规则进行流转，通常需要涉及到角色与流程的交互。</li></ul><h2 id="liteflow-适用于哪些场景" tabindex="-1"><a class="header-anchor" href="#liteflow-适用于哪些场景" aria-hidden="true">#</a> LiteFlow 适用于哪些场景</h2><p>LiteFlow适用于拥有复杂逻辑的业务，比如说价格引擎，下单流程等，这些业务往往都拥有很多步骤，这些步骤完全可以按照业务粒度拆分成一个个独立的组件，进行装配复用变更。使用LiteFlow，你会得到一个灵活度高，扩展性很强的系统。因为组件之间相互独立，也可以避免改一处而动全身的这样的风险。</p><h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h2>',6),v=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Component"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"a"'),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"ACmp"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},"NodeComponent"),s(),n("span",{class:"token punctuation"},"{"),s(`

	`),n("span",{class:"token annotation punctuation"},"@Override"),s(`
	`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"process"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token comment"},"//do your business"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=n("p",null,"以此类推再分别定义b,c组件：",-1),f=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Component"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"b"'),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"BCmp"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},"NodeComponent"),s(),n("span",{class:"token punctuation"},"{"),s(`

	`),n("span",{class:"token annotation punctuation"},"@Override"),s(`
	`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"process"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token comment"},"//do your business"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token annotation punctuation"},"@Component"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"c"'),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"CCmp"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},"NodeComponent"),s(),n("span",{class:"token punctuation"},"{"),s(`

	`),n("span",{class:"token annotation punctuation"},"@Override"),s(`
	`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"process"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token comment"},"//do your business"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=n("p",null,"在你的SpringBoot的application.properties或者application.yml里添加配置",-1),w=n("div",{class:"language-yaml line-numbers-mode","data-ext":"yml"},[n("pre",{class:"language-yaml"},[n("code",null,[n("span",{class:"token key atrule"},"liteflow"),n("span",{class:"token punctuation"},":"),s(`
  `),n("span",{class:"token key atrule"},"rule-source"),n("span",{class:"token punctuation"},":"),s(` config/flow.el.yml
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=n("p",null,"然后在config/flow.el.yml里添加配置：",-1),x=n("div",{class:"language-yaml line-numbers-mode","data-ext":"yml"},[n("pre",{class:"language-yaml"},[n("code",null,[n("span",{class:"token key atrule"},"flow"),n("span",{class:"token punctuation"},":"),s(`
  `),n("span",{class:"token key atrule"},"nodes"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token key atrule"},"node"),n("span",{class:"token punctuation"},":"),s(`
      `),n("span",{class:"token punctuation"},"-"),s(),n("span",{class:"token key atrule"},"id"),n("span",{class:"token punctuation"},":"),s(` a
        `),n("span",{class:"token key atrule"},"class"),n("span",{class:"token punctuation"},":"),s(` com.sbc.liteflow.component.ACmp
      `),n("span",{class:"token punctuation"},"-"),s(),n("span",{class:"token key atrule"},"id"),n("span",{class:"token punctuation"},":"),s(` b
        `),n("span",{class:"token key atrule"},"class"),n("span",{class:"token punctuation"},":"),s(` com.sbc.liteflow.component.BCmp
      `),n("span",{class:"token punctuation"},"-"),s(),n("span",{class:"token key atrule"},"id"),n("span",{class:"token punctuation"},":"),s(` c
        `),n("span",{class:"token key atrule"},"class"),n("span",{class:"token punctuation"},":"),s(` com.sbc.liteflow.component.CCmp
      `),n("span",{class:"token punctuation"},"-"),s(),n("span",{class:"token key atrule"},"id"),n("span",{class:"token punctuation"},":"),s(` d
        `),n("span",{class:"token key atrule"},"class"),n("span",{class:"token punctuation"},":"),s(` com.sbc.liteflow.component.DCmp
  `),n("span",{class:"token key atrule"},"chain"),n("span",{class:"token punctuation"},":"),s(`
    `),n("span",{class:"token punctuation"},"-"),s(),n("span",{class:"token key atrule"},"name"),n("span",{class:"token punctuation"},":"),s(" test"),n("span",{class:"token punctuation"},"-"),s(`chain
      `),n("span",{class:"token key atrule"},"value"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token string"},'"THEN(a, b, WHEN(c, d))"'),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),C=t('<figure><img src="'+k+`" alt="LiteFlow Demo 运行结果" tabindex="0" loading="lazy"><figcaption>LiteFlow Demo 运行结果</figcaption></figure><h2 id="规则" tabindex="-1"><a class="header-anchor" href="#规则" aria-hidden="true">#</a> 规则</h2><h3 id="工程内指定多个路径" tabindex="-1"><a class="header-anchor" href="#工程内指定多个路径" aria-hidden="true">#</a> 工程内指定多个路径</h3><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">liteflow</span><span class="token punctuation">:</span>
  // 规则文件之间可以用<span class="token punctuation">,</span>或者;隔开：
  <span class="token key atrule">rule-source</span><span class="token punctuation">:</span> classpath<span class="token important">*:config/flow.el.yml</span><span class="token punctuation">,</span>classpath<span class="token important">*:config/flow2.el.yml</span>
  // Spring EL表达式进行模糊匹配，加载多个配置文件：
  <span class="token key atrule">rule-source</span><span class="token punctuation">:</span> config/<span class="token important">**/*.el.xml</span>
  // 绝对路径指定多个路径
  <span class="token key atrule">rule-source</span><span class="token punctuation">:</span> /data/lf/flow1.el.xml<span class="token punctuation">,</span>/data/lf/flow2.el.xml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="规则配置源" tabindex="-1"><a class="header-anchor" href="#规则配置源" aria-hidden="true">#</a> 规则配置源</h3><p>支持本地、ZK、SQL、Redis、Nacos、Etcd、Apollo等多种规则配置源，默认使用本地文件。</p><h2 id="组件类型" tabindex="-1"><a class="header-anchor" href="#组件类型" aria-hidden="true">#</a> 组件类型</h2><h3 id="普通组件" tabindex="-1"><a class="header-anchor" href="#普通组件" aria-hidden="true">#</a> 普通组件</h3><h3 id="选择组件" tabindex="-1"><a class="header-anchor" href="#选择组件" aria-hidden="true">#</a> 选择组件</h3><h3 id="布尔组件" tabindex="-1"><a class="header-anchor" href="#布尔组件" aria-hidden="true">#</a> 布尔组件</h3><h2 id="性能" tabindex="-1"><a class="header-anchor" href="#性能" aria-hidden="true">#</a> 性能</h2><p>LiteFlow 绝大部分工作都是在启动时完成，包括解析规则，注册组件，组装元信息。而执行链路时几乎对系统没有额外的消耗。</p><p>实际表现中，LiteFlow 执行效率很高，在公司级核心业务上面，50多个业务组件组成的链路，在实际压测中单点达到了 1500 的 TPS（每秒处理事务数），集群达到了 1W 以上的 TPS，也经历过双11，明星顶流带货等大流量的考验。</p><p>虽然 LiteFlow 框架本身性能很好，但是整体执行效率却依赖实际业务组件的快慢，如果你的组件有大量的循环数据库请求IO，或者有 bad sql，又或者有大量的 rpc 同步调用，那实际 TPS 也不会很高。</p>`,14);function F(L,O){const l=a("VPCard"),o=a("CodeDemo");return i(),u("div",null,[h,e(l,p(r({title:"LiteFlow 官网",desc:"点击跳转官网查看详细内容",logo:"/assets/images/resource/open-source-project/rule-engine/lite-flow.png",link:"https://liteflow.cc",color:"rgba(173, 216, 590, 0.15)"})),null,16),b,e(o,{id:"code-demo-31",type:"normal",title:"demo",code:"eJy9kT1PwzAQhv/KyVMiJemeqRCQmMqCxOLFH4cwss9R7ASqqv8dO0mRIqYslT3c13N+fXdhX2ISrGXHzrveE1IsOJOclZz6UVqjQFkRAjx2rgf8iUg6wMlr/KuHC6d04vF1wmEwGrOzspM3GvrBKwyhKOfKyOPhoD2c/TiAHIOhlMvxK6d0NzrUfx3dnXSwip2Fs2kyH9Z/t5wAKL0WZmuxVxOgBqNbEDcXFqktKO+aIFVjTcTcpUmBRWvzkL6xxeUePG9ji6s9eB7iFtd78KcVV5/C0DqFGkg4bCFiiPWcuHWchB1TgrO3l+dTISqQFbxnU1Wgy5KzvDZ2/QXLjdhs"},{default:d(()=>[v,y,f,g,w,_,x]),_:1}),C])}const T=c(m,[["render",F],["__file","rule-engine.html.vue"]]);export{T as default};
