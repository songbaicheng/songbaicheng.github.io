import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as l,c as o,d as r,n as t,g as n,e as d}from"./app-9c84980f.js";const s={},c=d('<h1 id="微服务之路" tabindex="-1"><a class="header-anchor" href="#微服务之路" aria-hidden="true">#</a> 微服务之路</h1><h2 id="碎谈" tabindex="-1"><a class="header-anchor" href="#碎谈" aria-hidden="true">#</a> 碎谈</h2><p>还记得上大学的时候学 JavaWeb，当时连个 Tomcat 都起不来，什么8080，什么 JavaBean ，什么 Servlet ，完全就是一知半解，一塌糊涂，可是当你毕业开始找工作的时候，你要是没有个 Spring Boot 的项目经验，怎么找工作呀，根本找不到。当我第二份工作的时候，你要是不会 Spring Cloud ，根本找不到满意的工作，就在这短短两三年的时间里，技术更新愈发频繁，这也充分印证了那句话：程序员是要不断学习的。</p><p>基础不牢，地动山摇。大家嘴上说着大学里的课程已经完全和社会脱节，是啊，计算机四大天书：《计算机网络》、《计算机组成原理》、《计算机操作系统》、《数据结构》，如果你是本科毕业就开始找工作，除了《数据结构》开发中还用得到，其他的根本见不着它们的影子，可是随着自己的进步和发展，你会慢慢发现，如果你不知道它们，你也能做，如果你会它们，你会做的更好。虽然感觉行业的趋势下，蜂拥而至的新人都直接选择加入使用框架的队伍来瓜分互联网的红利，可是现在浪潮退去，一片红海，希望大家能在学习新技术的同时夯实基础，稳重求进。</p><p>but 作为新时代的青年，就该有拥抱新技术的激情，面对该过时、该淘汰的技术，就是 low ，别和我谈什么 MVC 、SSH、SSM 了，任何被时代所遗弃的技术必有其弊端，现在让我做项目，我就要上微服务，什么不要为了用技术而用技术，我自己学习我可不管什么该不该、值不值，我喜欢、我乐意就够了，冲！</p><h2 id="如何学习微服务" tabindex="-1"><a class="header-anchor" href="#如何学习微服务" aria-hidden="true">#</a> 如何学习微服务</h2><p>言归正传，在我第一次快速通关微服务的时候，没有一个完整的体系，导致后来我真正开始想加入微服务的时候剪不断理还乱，所以这一次我选择的是号称微服务一站式解决方案的 Spring Cloud Alibaba 。罗列一下 Spring Cloud 大致的技术栈：</p><ul><li>服务注册与发现</li><li>服务调用</li><li>服务熔断器</li><li>负载均衡</li><li>服务接口调用</li><li>消息队列</li><li>服务路由</li><li>服务监控</li><li>全链路由追踪</li><li>服务部署</li><li>消息驱动数据流</li><li>事件消息总线</li></ul><p>而目前的组件框架会同时兼顾以上多个功能并且基本已经涵盖到了，详情在下面的 GitHub 仓库中可以看到，我们接下来就跟着组件一步一步完成就可以了。唯一要注意的就是组件版本对应的问题，因为框架过于繁杂，<strong>如果自行组建确实会出现版本兼容一致性的问题，所以 GitHub 里也给出了官方推荐的组件配合建议，请开始之前参考选择</strong>。</p>',9);function p(h,u){const i=e("VPCard");return l(),o("div",null,[c,r(i,t(n({title:"Spring Cloud Alibaba GitHub托管网址",desc:"点击跳转GitHub查看详细内容",logo:"/assets/common-icon/mona-loading-default-static.svg",link:"https://github.com/alibaba/spring-cloud-alibaba",color:"rgba(173, 216, 590, 0.15)"})),null,16)])}const _=a(s,[["render",p],["__file","index.html.vue"]]);export{_ as default};
