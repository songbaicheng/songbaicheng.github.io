import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as n,c as s,b as e,d as o,a as h,e as t}from"./app-d9e16b86.js";const d="/assets/images/resource/books/pro-git.png",c="/assets/images/resource/books/head-first-design-patterns.png",l={},g=t('<h1 id="其他技能" tabindex="-1"><a class="header-anchor" href="#其他技能" aria-hidden="true">#</a> 其他技能</h1><h2 id="版本控制" tabindex="-1"><a class="header-anchor" href="#版本控制" aria-hidden="true">#</a> 版本控制</h2><p>提到版本控制（Version control），自从 Git 横空出世之后，Subversion 就开始逐渐退出神坛，相对于 Subversion 这种集中式的版本控制系统，分布式风格的 Git 更适合多人协作开发使用，虽然 Subversion 和我们平时使用本地文件的习惯非常相近，容易上手，但是面对更多人同时开发的场景来说，Git 拥有更多样的协作流程将更有利于我们管理项目。</p><h3 id="《pro-git》" tabindex="-1"><a class="header-anchor" href="#《pro-git》" aria-hidden="true">#</a> 《<em>Pro Git</em>》</h3><figure><img src="'+d+'" alt="pro git" width="350" height="500" tabindex="0" loading="lazy"><figcaption>pro git</figcaption></figure><p>这本书的作者是 Git 在 GitHub 公司的最早的托管者之一编写的，当我了解到这本书的时候就已经是第二版了。这本书涵盖了 Git 的基础用法、分支特性、搭建和配置 Git 服务器、分布式工作流程、GitHub 的使用方法、Git 工具、Git 内部原理等各个方面内容，最后还附带了 Git 命令参考。零基础的初学者可以通过前 3 章的学习就已经可以应付日常的开发场景了，后几章能够满足中高阶用户深入了解的需求。书中提供了大量的应用案例，不同开发工作模式有不同的用法，配合插图演示版本变化的状态，十分易于理解。</p><p>如果你觉得文字和图片还不够直观，下面的链接是一个 Git 学习网站： Learning Git Branching ，这里你可以通过闯关的形式学习一些 Git 的基础命令，并且每个命令的执行还会有实时的动图演示，简直不要太友好，就算你已经是 Git 的老手，也可以在这里复习和加深一些命令的理解。</p>',7),p={href:"https://learngitbranching.js.org/?locale=zh_CN",target:"_blank",rel:"noopener noreferrer"},_=t('<h2 id="设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式" aria-hidden="true">#</a> 设计模式</h2><h3 id="《head-first-design-patterns》" tabindex="-1"><a class="header-anchor" href="#《head-first-design-patterns》" aria-hidden="true">#</a> 《<em>Head First Design Patterns</em>》</h3><figure><img src="'+c+'" alt="Head First Design Patterns" width="350" height="500" tabindex="0" loading="lazy"><figcaption>Head First Design Patterns</figcaption></figure><p>几乎每个经典系列书籍中都会有讲设计模式的书，像大话系列、图解系列还有 Head First 系列，这些书都是基于设计模式开山之作《<em>设计模式：可复用面向对象软件的基础</em>》中23中设计模式结合后来的实践和发展又重新总结出来的更完善生动的作品，内容上都是按照每一种设计模式作为一个章节并结合情景和图片进行讲解，我自己学习看的是第一版的《<em>Head First Design Patterns</em>》，上图中的是2022年发行的第二版，学习的时候一边阅读一边自己实现还是挺容易理解的，直到现在我看到某种设计模式还会想到当时书中的案例。</p><p>对我个人而言，我觉得学习设计模式更行之有效的方法是在阅读过后有初步的理解的情况下的亲身实践，它基于代码又高于代码，最好的学习方式就是在平时阅读和开发的时候，将健壮性和可扩展性设为己任，仔细理解每种模式所使用的场景才是真正的学习之道。</p>',5);function f(m,u){const i=r("ExternalLinkIcon");return n(),s("div",null,[g,e("blockquote",null,[e("p",null,[e("a",p,[o("https://learngitbranching.js.org/?locale=zh_CN"),h(i)])])]),_])}const x=a(l,[["render",f],["__file","other-skills.html.vue"]]);export{x as default};
