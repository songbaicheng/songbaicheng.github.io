import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as p,a as r}from"./app-1271f487.js";const n="/assets/images/study/frontend/readme/ts-or-js.png",t={},c=r('<h1 id="聊聊前端" tabindex="-1"><a class="header-anchor" href="#聊聊前端" aria-hidden="true">#</a> 聊聊前端</h1><h2 id="碎谈" tabindex="-1"><a class="header-anchor" href="#碎谈" aria-hidden="true">#</a> 碎谈</h2><p>在选择走后端这条路的时候，前辈们都说后端不仅仅需要掌握后端，前端、运维、设计和产品都需要涉猎，现在工作了之后才明白这种趋势在内卷的环境下越来越明显了，很多同学他们在公司的工作都是全栈的职责，有人说现在全栈并不是什么好的现象，只能说明你什么都不精通，但大多数时候这并不是你自己的选择。</p><p>学技术也是有鄙视链的，好像在早期后端是瞧不起前端的，觉得前端技术栈太窄了，甚至觉得前端不是程序员，但是到了这个前后端分离的时代，这种观点确实应该被改观了。如果不清楚一条数据如何从界面到服务器再到数据库的完整流程，那说不上是真的了解你的业务，所以程序员的工作就是保持学习，在有知识面广度的情况下向自己感兴趣的方向深耕才是正解。</p><h2 id="我与前端" tabindex="-1"><a class="header-anchor" href="#我与前端" aria-hidden="true">#</a> 我与前端</h2><p>首先说说前端最开始的接触的包管理器的问题，首先你需要选择一个喜欢的包管理器，这是学习前端的基石，常见的应该有 npm、cnpm、pnpm 和 Yarn，对于这几种包管理器我自己是没有感觉出来有太多的区别，毕竟现在毕竟热门框架的官网都会把常用的命令给列举出来。可以简单的聊聊它们，npm 是最早也是使用最为广泛的包管理工具，同时也是 Node.js 生态系统中的标准包管理工具，其拥有庞大的包仓库和活跃的社区支持，可以找到大量的开源包和资源，选它总没错，如果使用过程中因为网络问题导致包下载不能成功，可以使用淘宝团队改造的 cnpm，cnpm 将 npm 的包从国外的镜像源切换到国内的镜像源，解决了国内用户使用 npm 时速度慢的问题。然后说一下 Yarn，Yarn 是由 Facebook 创建的 JavaScript 包管理工具，旨在解决 npm 的一些性能和稳定性问题， 并且在性能上进行了优化，通过并行下载和缓存等机制加快了依赖项的安装速度，而且它还引入了锁文件（Yarn.lock），用于精确记录项目的依赖关系和版本号，以确保在不同环境中安装的包的一致性。同样的 pnpm 引入了一种称为“逻辑链接”的机制来解决 npm 和 Yarn 在依赖项管理上的一些问题，避免了每个项目都复制一份依赖项的情况，节省了磁盘空间，所以说如果你关注包的安装速度和依赖项管理的性能，可以考虑使用 Yarn 或 pnpm。</p><p>然后就需要提到前端一个跨时代的产物——Node.js，Node.js 的出现终于让 JavaScript 不再仅仅运行在浏览器，使其运行在服务器之上，这就为前端开发者带来了代码共享、构建工具、模块化开发、服务端渲染、实时通信等一系列的好处。</p><p>其次就是打包工具的选择了，因为自己主要是使用 Vue 开发，所以选择了灵活和性能并重的 Vite，而其底层也是使用了 Rollup，其他的打包工具还有像 webpack、Parcel、Browserify等等，目前肯定还是 webpack 是最流行的打包工具，但是在选型上还是要根据项目规模和个人偏好进行选择。</p><p>再之后就是前端基本功了，老生常谈的三剑客（HTML、CSS 和 JavaScript），虽然现在很多人会疑惑到底是学习 TypeScript 还是 JavaScript，这个问题其实在 TypeScript 官网上就有回答：</p><figure><img src="'+n+'" alt="学习 JavaScript 还是 TypeScript ?" tabindex="0" loading="lazy"><figcaption>学习 JavaScript 还是 TypeScript ?</figcaption></figure><p>有了语言的基础就可以开始框架的学习了，前端框架三大金刚：React、Vue.js 或 Angular，市面上现在使用率上感觉还是 Vue 更胜一筹，而且这今年国产化的浪潮翻涌，所以拥抱 Vue 确实是一个不错的选择。</p><p>如果以上都已经略有小成的哈，我感觉应该能够成为一名合格的前端工程师了，当然这些都是我自己的理解，隔行如隔山，对未知领域的知识充满好奇和尊敬，坚持实践和不断积累经验才是成为优秀开发人员的关键。</p>',12),i=[c];function o(s,d){return e(),p("div",null,i)}const l=a(t,[["render",o],["__file","index.html.vue"]]);export{l as default};
