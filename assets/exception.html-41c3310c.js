import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as t,c,d,a,b as i,e as n}from"./app-b3b9e12e.js";const h={},s=a("h1",{id:"java-异常",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#java-异常","aria-hidden":"true"},"#"),i(" Java 异常")],-1),p=n('<h2 id="java-异常简介" tabindex="-1"><a class="header-anchor" href="#java-异常简介" aria-hidden="true">#</a> Java 异常简介</h2><p>Java 异常是 Java 提供的一种识别及响应错误的一致性机制。Java 异常机制可以使程序中异常处理代码和正常业务代码分离，保证程序代码更加优雅，并提高程序健壮性。</p><h3 id="throwable" tabindex="-1"><a class="header-anchor" href="#throwable" aria-hidden="true">#</a> Throwable</h3><p>Throwable 是 Java 语言中所有错误与异常的超类，其中包含两个子类：Error（错误）和 Exception（异常），它们通常用于指示发生了异常情况。Throwable 包含了其线程创建时线程执行堆栈的快照，它提供了 printStackTrace() 等接口用于获取堆栈跟踪数据等信息。</p><h3 id="error" tabindex="-1"><a class="header-anchor" href="#error" aria-hidden="true">#</a> Error</h3><p>Error 类及其子类是程序中无法处理的错误，表示运行应用程序中出现了严重的错误。</p><p>特点：此类错误一般表示代码运行时 JVM 出现问题。通常有 Virtual MachineError（虚拟机运行错误）、NoClassDefFoundError（类定义错误）等。比如 OutOfMemoryError：内存不足错误；StackOverflowError：栈溢出错误。此类错误发生时，JVM 将终止线程。</p><p>这些错误是不受检异常，非代码性错误。因此，当此类错误发生时，应用程序不应该去处理此类错误。按照 Java 惯例，我们是不应该实现任何新的 Error 子类的！</p><h3 id="exception" tabindex="-1"><a class="header-anchor" href="#exception" aria-hidden="true">#</a> Exception</h3>',9);function l(f,_){const e=o("Mermaid");return t(),c("div",null,[s,d(e,{id:"mermaid-3",code:"eJzLzcxLyU0s4FJQKMrPL9HQ8EosS1R4uqfp6Y4dmppAURAIySjKL09MykmF8l2LivKLYOyK5NSCksz8PCj/af/0Z4sbIAZAhV7OnYdFlAsALfMtFA=="}),p])}const x=r(h,[["render",l],["__file","exception.html.vue"]]);export{x as default};
