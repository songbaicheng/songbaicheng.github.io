import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as i,e as r}from"./app-ee05d56f.js";const n={},d=r(`<h1 id="sql-百科" tabindex="-1"><a class="header-anchor" href="#sql-百科" aria-hidden="true">#</a> SQL 百科</h1><h2 id="sql-优化指南" tabindex="-1"><a class="header-anchor" href="#sql-优化指南" aria-hidden="true">#</a> SQL 优化指南</h2><h2 id="简单语句-sql-优化" tabindex="-1"><a class="header-anchor" href="#简单语句-sql-优化" aria-hidden="true">#</a> 简单语句 SQL 优化</h2><h3 id="_1-选择合适的数据类型及字符集" tabindex="-1"><a class="header-anchor" href="#_1-选择合适的数据类型及字符集" aria-hidden="true">#</a> 1. 选择合适的数据类型及字符集</h3><p>使用合适的数据类型可以减少存储空间和提高查询速度。这个可不能小看，数据量到达一个量级，这个就能看出明显差异。</p><ul><li>对于布尔值使用 TINYINT(1) 而不是 CHAR(1) 比如你有一个字段是表示业务状态或者是类型。</li><li>对于仅存储英文的表，使用 latin1 而不是 utf8mb4。</li></ul><h3 id="_2-避免使用select" tabindex="-1"><a class="header-anchor" href="#_2-避免使用select" aria-hidden="true">#</a> 2. 避免使用SELECT *</h3><p>仅选择必要的列，减少数据传输量。</p><h3 id="_3-合理使用join、避免子查询" tabindex="-1"><a class="header-anchor" href="#_3-合理使用join、避免子查询" aria-hidden="true">#</a> 3. 合理使用JOIN、避免子查询</h3><p>避免过多的 JOIN 操作，尽量减少数据集的大小。尽量使用 JOIN 或者 EXISTS 代替子查询。</p><h3 id="_4-使用union代替or" tabindex="-1"><a class="header-anchor" href="#_4-使用union代替or" aria-hidden="true">#</a> 4. 使用UNION代替OR</h3><p>使用UNION代替OR、优化ORDER BY和GROUP BY</p><h3 id="_5-优化-order-by-和-group-by" tabindex="-1"><a class="header-anchor" href="#_5-优化-order-by-和-group-by" aria-hidden="true">#</a> 5. 优化 ORDER BY 和 GROUP BY</h3><p>确保 ORDER BY 和 GROUP BY 的列上有索引。</p><h3 id="_6-避免使用-开头的like查询" tabindex="-1"><a class="header-anchor" href="#_6-避免使用-开头的like查询" aria-hidden="true">#</a> 6. 避免使用%开头的LIKE查询</h3><p>避免使用 % 开头的 LIKE 查询，因为不能使用索引。这个尤其重要，相信各位在各大平台网站上。很多搜索只有输入前面的字才能有结果，你输入中间的字，会查询不到，其实就是这个原理。</p><h3 id="_7-使用索引" tabindex="-1"><a class="header-anchor" href="#_7-使用索引" aria-hidden="true">#</a> 7. 使用索引</h3><p>使用批量插入、优化INSERT操作。</p><h2 id="正确使用索引" tabindex="-1"><a class="header-anchor" href="#正确使用索引" aria-hidden="true">#</a> 正确使用索引</h2><h3 id="_1-在常用查询条件和连接条件的列上建立索引" tabindex="-1"><a class="header-anchor" href="#_1-在常用查询条件和连接条件的列上建立索引" aria-hidden="true">#</a> 1. 在常用查询条件和连接条件的列上建立索引</h3><p>这块很清楚，反正只要发现查询较慢，优先检查where条件后面，有没有被创建索引。</p><h3 id="_2-遵循最左前缀原则" tabindex="-1"><a class="header-anchor" href="#_2-遵循最左前缀原则" aria-hidden="true">#</a> 2. 遵循最左前缀原则</h3><p>这个是针对复合索引时的要求，遵循最左前缀原则。</p><h3 id="_3-避免在索引列上进行计算" tabindex="-1"><a class="header-anchor" href="#_3-避免在索引列上进行计算" aria-hidden="true">#</a> 3. 避免在索引列上进行计算</h3><p>例子：避免 WHERE YEAR(date) = 2020，改用范围查询。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> orders <span class="token keyword">WHERE</span> <span class="token keyword">date</span> <span class="token operator">BETWEEN</span> <span class="token string">&#39;2024-06-01&#39;</span> <span class="token operator">AND</span> <span class="token string">&#39;2024-06-30&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-更新频繁的列慎用索引" tabindex="-1"><a class="header-anchor" href="#_4-更新频繁的列慎用索引" aria-hidden="true">#</a> 4. 更新频繁的列慎用索引</h3><p>对于更新频繁的列，索引会增加写操作的开销，需要慎重使用。</p><h2 id="dbms-配置优化" tabindex="-1"><a class="header-anchor" href="#dbms-配置优化" aria-hidden="true">#</a> DBMS 配置优化</h2><h3 id="调整innodb-buffer-pool-size" tabindex="-1"><a class="header-anchor" href="#调整innodb-buffer-pool-size" aria-hidden="true">#</a> 调整innodb_buffer_pool_size</h3><p>innodb_buffer_pool_size 是 InnoDB 存储引擎最重要的配置参数之一，用于指定 InnoDB 缓冲池的大小。缓冲池用于缓存数据页、索引页和 InnoDB 表的其它信息。合理设置这个参数对数据库性能有很大影响。</p><p>增大 InnoDB 缓冲池大小，提高缓存命中率。</p><p>SET GLOBAL innodb_buffer_pool_size = 2G;<br> 但是这里要注意 该值并不是越大越好。innodb_buffer_pool_size 应该设置要尽可能大，但要确保为操作系统和其他应用程序留出足够的内存。</p><p>一般建议在数据库专用服务器上设置为物理内存的 60% 到 80%。通过监控数据库性能和内存使用情况，可以进一步调整这个参数以优化数据库性能。</p><h3 id="调整query-cache-size" tabindex="-1"><a class="header-anchor" href="#调整query-cache-size" aria-hidden="true">#</a> 调整query_cache_size</h3><p>query_cache_size 是用于指定查询缓存的大小。查询缓存可以缓存 SELECT 查询的结果，避免重复执行相同的查询，从而提高性能。</p><p>然而，在 MySQL 8.0 及更高版本中，查询缓存已经被完全移除。如果你使用的是 MySQL 8.0 及以上版本，可以忽略 query_cache_size 参数。</p><h3 id="调整thread-cache-size" tabindex="-1"><a class="header-anchor" href="#调整thread-cache-size" aria-hidden="true">#</a> 调整thread_cache_size</h3><p>增大线程缓存大小，减少线程创建开销。</p><p>SET GLOBAL thread_cache_size = 100;</p><h3 id="调整table-open-cache" tabindex="-1"><a class="header-anchor" href="#调整table-open-cache" aria-hidden="true">#</a> 调整table_open_cache</h3><p>增大表缓存大小，减少表打开的开销。</p><p>SET GLOBAL table_open_cache = 4000;</p><h3 id="调整tmp-table-size和max-heap-table-size" tabindex="-1"><a class="header-anchor" href="#调整tmp-table-size和max-heap-table-size" aria-hidden="true">#</a> 调整tmp_table_size和max_heap_table_size</h3><p>增大临时表和堆表的最大大小，减少磁盘 I/O。</p><p>SET GLOBAL tmp_table_size = 64M;<br> SET GLOBAL max_heap_table_size = 64M;</p><h3 id="调整innodb-flush-log-at-trx-commit" tabindex="-1"><a class="header-anchor" href="#调整innodb-flush-log-at-trx-commit" aria-hidden="true">#</a> 调整innodb_flush_log_at_trx_commit</h3><p>根据需求调整日志刷新策略，权衡性能和数据安全性。</p><p>SET GLOBAL innodb_flush_log_at_trx_commit = 2;</p><h3 id="调整innodb-log-file-size" tabindex="-1"><a class="header-anchor" href="#调整innodb-log-file-size" aria-hidden="true">#</a> 调整innodb_log_file_size</h3><p>增大日志文件大小，减少日志文件切换的开销。</p><p>SET GLOBAL innodb_log_file_size = 256M;</p><h3 id="调整innodb-log-buffer-size" tabindex="-1"><a class="header-anchor" href="#调整innodb-log-buffer-size" aria-hidden="true">#</a> 调整innodb_log_buffer_size</h3><p>增大日志缓冲区大小，提高写入性能。</p><p>SET GLOBAL innodb_log_buffer_size = 16M;</p><h3 id="调整innodb-io-capacity" tabindex="-1"><a class="header-anchor" href="#调整innodb-io-capacity" aria-hidden="true">#</a> 调整innodb_io_capacity</h3><p>根据磁盘 I/O 性能调整 InnoDB I/O 容量。</p><p>SET GLOBAL innodb_io_capacity = 2000;</p><h3 id="调整max-connections" tabindex="-1"><a class="header-anchor" href="#调整max-connections" aria-hidden="true">#</a> 调整max_connections</h3><p>增大最大连接数，支持更多并发连接。</p><p>SET GLOBAL max_connections = 500;</p><h3 id="调整sort-buffer-size" tabindex="-1"><a class="header-anchor" href="#调整sort-buffer-size" aria-hidden="true">#</a> 调整sort_buffer_size</h3><p>增大排序缓冲区大小，提高排序操作的性能。</p><p>SET GLOBAL sort_buffer_size = 4M;</p><h3 id="调整read-buffer-size" tabindex="-1"><a class="header-anchor" href="#调整read-buffer-size" aria-hidden="true">#</a> 调整read_buffer_size</h3><p>增大读缓冲区大小，提高顺序扫描性能。</p><p>SET GLOBAL read_buffer_size = 2M;</p>`,67),h=[d];function s(o,t){return a(),i("div",null,h)}const l=e(n,[["render",s],["__file","sql.html.vue"]]);export{l as default};
