import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as t,c as r,a as o,n as d,g as n,e as h,b as e,d as i}from"./app-f65df1c9.js";const c={},u=h('<h1 id="redis" tabindex="-1"><a class="header-anchor" href="#redis" aria-hidden="true">#</a> Redis</h1><p>Redis (Remote Dictionary Server) 是一个开源的内存数据结构存储，用作数据库、缓存和消息代理。它支持多种数据结构，如字符串（strings）、哈希（hashes）、列表（lists）、集合（sets）以及有序集合（sorted sets），具有丰富的功能和高性能。</p><h2 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h2><ol><li>内存存储：所有数据都保存在内存中，读写速度非常快，非常适合需要快速响应的场景。</li><li>持久化：Redis支持将数据持久化到磁盘，可以通过快照（snapshot）和AOF（Append-Only File）两种方式进行。</li><li>高可用性和分布式：通过Redis Sentinel实现高可用，通过Redis Cluster实现数据分布和负载均衡。</li><li>丰富的数据类型：支持多种数据结构，便于解决复杂的数据存储和操作问题。</li><li>Lua脚本：支持Lua脚本，可以实现复杂的原子操作。</li><li>事务支持：支持事务，保证一系列操作的原子性。</li></ol><h2 id="场景" tabindex="-1"><a class="header-anchor" href="#场景" aria-hidden="true">#</a> 场景</h2><h3 id="抽象场景" tabindex="-1"><a class="header-anchor" href="#抽象场景" aria-hidden="true">#</a> 抽象场景</h3><ol><li>缓存（Caching）：</li></ol><ul><li>对需要频繁访问的数据进行缓存，如用户信息、商品信息等。</li><li>极大提高数据的读取速度，减轻数据库负载。</li></ul><ol start="2"><li>会话存储（Session Store）：</li></ol><ul><li>场景：在Web应用中，将用户会话信息存储在Redis中，如登录状态、购物车等。</li><li>好处：读取速度快，支持持久化，可以实现分布式会话管理。</li></ul><ol start="3"><li>实时数据分析（Real-time Analytics）：</li></ol><ul><li>场景：用于实时统计和分析，如网站的访问量统计、实时排名等。</li><li>好处：通过内存操作实现快速数据处理和统计。</li></ul><ol start="4"><li>消息队列（Message Queue）：</li></ol><ul><li>场景：利用Redis的列表（List）或发布/订阅（Pub/Sub）机制实现消息队列，进行异步任务处理。</li><li>好处：简单易用，适合中小规模的消息队列需求。</li></ul><ol start="5"><li>排行榜（Leaderboard）和计数器（Counting）：</li></ol><ul><li>场景：实现各种排行榜功能，如游戏排名、积分榜等。</li><li>好处：通过有序集合（sorted set）快速实现排名和分数统计。</li></ul><ol start="6"><li>分布式锁（Distributed Lock）：</li></ol><ul><li>场景：在分布式系统中实现锁机制，确保同一资源不会被多个进程同时修改。</li><li>好处：利用Redis的原子操作，实现简单有效的分布式锁。</li></ul><ol start="7"><li>地理信息存储和查询（Geospatial Information Storage and Query）：</li></ol><ul><li>场景：存储和查询地理位置数据，如定位服务、地图应用等。</li><li>好处：通过geo命令集快速实现地理位置的存储和半径查询。</li></ul><h3 id="实际场景" tabindex="-1"><a class="header-anchor" href="#实际场景" aria-hidden="true">#</a> 实际场景</h3><ol><li>阅读量/浏览量：配合 String 类型的 incr 原子增加操作，每次访问链接自动加一。</li></ol>',22),_=e("h2",{id:"缓存",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#缓存","aria-hidden":"true"},"#"),i(" 缓存")],-1),p=e("p",null,"目前系统的数据访问通常设计有有三种方式，第一种是简单的请求直接访问数据库，如果是在数据量和并发量很小的情况下，这种访问方式是可行的。但是当数据量很大，并发量很高时，这种访问方式就会导致数据库压力过大，从而影响系统的性能。",-1),f=e("p",null,"在这种情况之上就增加了缓存来缓解数据库的压力的第二种方式，请求进入先在缓存中查询数据信息，如果缓存中不存在再去访问数据库数据。这里的方案的实现也有两种：",-1),b=e("ol",null,[e("li",null,"数据结构实现的代码层面的缓存，无论是自定义 Map 存储要缓存的数据，还是使用 Guava 等第三方缓存框架，这种方案的缺点是只能单机使用，并且占用内存会严重些。"),e("li",null,"使用 Redis 作为缓存，天然支持分布式，并且灵活的使用数据结构可以达到优秀的效果，缺点是技术门槛和服务器成本较高。")],-1),m=e("p",null,"第三种方式是在缓存的基础上增加布隆过滤器降低无效数据的访问来防止缓存穿透，这种方案的缺点是布隆过滤器需要维护，并且布隆过滤器的误判率需要控制。",-1),R=e("h2",{id:"布隆过滤器",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#布隆过滤器","aria-hidden":"true"},"#"),i(" 布隆过滤器")],-1);function g(x,S){const l=s("VPCard");return t(),r("div",null,[u,o(l,d(n({title:"Redis 官网",desc:"点击跳转官网查看详细内容",logo:"/assets/images/study/persistence/redis/redis-cube.svg",link:"https://redis.io/",color:"rgba(173, 216, 590, 0.15)"})),null,16),_,p,f,b,m,R])}const V=a(c,[["render",g],["__file","Redis.html.vue"]]);export{V as default};
