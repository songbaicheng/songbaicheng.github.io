import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-d59e1d74.js";const e={},p=t(`<h1 id="spring-中遇到的问题" tabindex="-1"><a class="header-anchor" href="#spring-中遇到的问题" aria-hidden="true">#</a> Spring 中遇到的问题</h1><h2 id="yaml-资源文件读取问题" tabindex="-1"><a class="header-anchor" href="#yaml-资源文件读取问题" aria-hidden="true">#</a> yaml 资源文件读取问题</h2><p>在 spirng-boot-starter-parent 2.7.3 版本中，因为有一些数据想维护在 resources 下的 yaml 文件中，数据格式大致如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">rate-code</span><span class="token punctuation">:</span>
  <span class="token key atrule">list</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">&quot;CADCNY3M=CFHB&quot;</span>
      <span class="token key atrule">rateName</span><span class="token punctuation">:</span> <span class="token string">&quot;CADCNY&quot;</span> 
      <span class="token key atrule">tenor</span><span class="token punctuation">:</span> <span class="token string">&quot;3M&quot;</span>
      <span class="token key atrule">market</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span>
    <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> <span class="token string">&quot;CHF9MNFO=CFHB&quot;</span>
      <span class="token key atrule">rateName</span><span class="token punctuation">:</span> <span class="token string">&quot;USDCHF&quot;</span> 
      <span class="token key atrule">tenor</span><span class="token punctuation">:</span> <span class="token string">&quot;9M&quot;</span>
      <span class="token key atrule">market</span><span class="token punctuation">:</span> <span class="token string">&quot;NFO&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们用读取配置文件的方式，即 <code>@ConfigurationProperties(&quot;rate-code&quot;)</code> 搭配 <code>@PropertySource(value = {&quot;classpath:rate-code.yaml&quot;})</code> 来读取的时候发现并没有注册到容器中，后来搜索后发现，原来 Spirng Boot 只会读取 application.yaml，其他的 yaml 并不支持读取，而为了解决这个问题，Spring 支持自定义的读取方式，所以需要自己添加一些读取规则，于是增加了一下代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YamlPropertySourceFactory</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultPropertySourceFactory</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">PropertySource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">createPropertySource</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">EncodedResource</span> resource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>

    <span class="token class-name">Resource</span> newResource <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">getRsource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newResource<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PropertiesPropertySource</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newResource<span class="token punctuation">.</span><span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;.yaml&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> newResource<span class="token punctuation">.</span><span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;.yaml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PropertySource</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> sources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">YamlPropertySourceLoader</span><span class="token punctuation">(</span>newResource<span class="token punctuation">.</span><span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newResource<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> sources<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">createPropertySource</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> resourcce<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@Setter</span>
<span class="token annotation punctuation">@ToString</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">&quot;tare-code&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;clssspath:rate-code.yaml&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> factory <span class="token operator">=</span> <span class="token class-name">YamlPropertySourceFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RateCodeConfig</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RateCodeDto</span><span class="token punctuation">&gt;</span></span> rateCodeList<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),o=[p];function c(l,u){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","spring.html.vue"]]);export{k as default};
