const e=JSON.parse('{"key":"v-40a16d3d","path":"/study/backend/java/spring-cloud-alibaba/nacos.html","title":"Nacos","lang":"en-US","frontmatter":{"category":"微服务","tag":["Spring Cloud Alibaba","Java","nacos"],"description":"Nacos 浅聊微服务注册中心 提到微服务就不得不提到单体地狱的问题，所谓单体地狱就是整个应用程序作为一个单独的单元进行开发、部署和扩展。单体应用通常具有紧耦合的组件和共享数据库，随着应用规模的增长，单体应用会变得复杂且难以维护。为了解决这个问题，后来又出现了模块化拆分和服务化拆分的方案，这也就是微服务的前身了，后来随着模块间的自治独立和通讯方案的完善，就演变成了现在我们看到的微服务框架，在 DevOps 和自动化的浪潮下，微服务的架构风格更是如鱼得水。 在微服务架构风格的核心就是管理和维护服务实例，而实现其服务中心化的重要组件正是注册中心，它简化了服务发现、负载均衡、故障转移和容错等关键功能的实现，提高了微服务系统的弹性、可靠性和可扩展性。这里我们要谈的 Nacos 作为 Spring Cloud Alibaba 的重要组件对微服务的以上优点都有所涵盖，相对于已经发展成熟的 Eureka 而言，在综合性、灵活性上更上一筹，确也在稳定性和自我保护机制上有些不足，所以对于这两种最主流的注册中心来说，使用哪一种还是要根据项目的具体的大小和需求、团队技术栈和规模等因素决定。","head":[["meta",{"property":"og:url","content":"https://github.com/songbaicheng/songbaicheng.github.io/study/backend/java/spring-cloud-alibaba/nacos.html"}],["meta",{"property":"og:site_name","content":"宋柏成的技术博客"}],["meta",{"property":"og:title","content":"Nacos"}],["meta",{"property":"og:description","content":"Nacos 浅聊微服务注册中心 提到微服务就不得不提到单体地狱的问题，所谓单体地狱就是整个应用程序作为一个单独的单元进行开发、部署和扩展。单体应用通常具有紧耦合的组件和共享数据库，随着应用规模的增长，单体应用会变得复杂且难以维护。为了解决这个问题，后来又出现了模块化拆分和服务化拆分的方案，这也就是微服务的前身了，后来随着模块间的自治独立和通讯方案的完善，就演变成了现在我们看到的微服务框架，在 DevOps 和自动化的浪潮下，微服务的架构风格更是如鱼得水。 在微服务架构风格的核心就是管理和维护服务实例，而实现其服务中心化的重要组件正是注册中心，它简化了服务发现、负载均衡、故障转移和容错等关键功能的实现，提高了微服务系统的弹性、可靠性和可扩展性。这里我们要谈的 Nacos 作为 Spring Cloud Alibaba 的重要组件对微服务的以上优点都有所涵盖，相对于已经发展成熟的 Eureka 而言，在综合性、灵活性上更上一筹，确也在稳定性和自我保护机制上有些不足，所以对于这两种最主流的注册中心来说，使用哪一种还是要根据项目的具体的大小和需求、团队技术栈和规模等因素决定。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-06-11T07:06:00.000Z"}],["meta",{"property":"article:author","content":"songbaicheng"}],["meta",{"property":"article:tag","content":"Spring Cloud Alibaba"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"nacos"}],["meta",{"property":"article:modified_time","content":"2023-06-11T07:06:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Nacos\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-11T07:06:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"songbaicheng\\",\\"url\\":\\"https://github.com/songbaicheng\\",\\"email\\":\\"songbaicheng16@163.com\\"}]}"]]},"headers":[{"level":2,"title":"浅聊微服务注册中心","slug":"浅聊微服务注册中心","link":"#浅聊微服务注册中心","children":[]},{"level":2,"title":"官方文档地址","slug":"官方文档地址","link":"#官方文档地址","children":[]},{"level":2,"title":"快速开始","slug":"快速开始","link":"#快速开始","children":[{"level":3,"title":"Nacos服务端单机模式启动","slug":"nacos服务端单机模式启动","link":"#nacos服务端单机模式启动","children":[]},{"level":3,"title":"Nacos客户端启动后注册","slug":"nacos客户端启动后注册","link":"#nacos客户端启动后注册","children":[]},{"level":3,"title":"Nacos服务端集群模式启动","slug":"nacos服务端集群模式启动","link":"#nacos服务端集群模式启动","children":[]}]}],"git":{"createdTime":1685892544000,"updatedTime":1686467160000,"contributors":[{"name":"songbaicheng","email":"2524218694@qq.com","commits":6}]},"readingTime":{"minutes":5.71,"words":1713},"filePathRelative":"study/backend/java/spring-cloud-alibaba/nacos.md","localizedDate":"June 4, 2023","excerpt":"<h1> Nacos</h1>\\n<h2> 浅聊微服务注册中心</h2>\\n<p>提到微服务就不得不提到单体地狱的问题，所谓单体地狱就是整个应用程序作为一个单独的单元进行开发、部署和扩展。单体应用通常具有紧耦合的组件和共享数据库，随着应用规模的增长，单体应用会变得复杂且难以维护。为了解决这个问题，后来又出现了模块化拆分和服务化拆分的方案，这也就是微服务的前身了，后来随着模块间的自治独立和通讯方案的完善，就演变成了现在我们看到的微服务框架，在 DevOps 和自动化的浪潮下，微服务的架构风格更是如鱼得水。</p>\\n<p>在微服务架构风格的核心就是管理和维护服务实例，而实现其服务中心化的重要组件正是注册中心，它简化了服务发现、负载均衡、故障转移和容错等关键功能的实现，提高了微服务系统的弹性、可靠性和可扩展性。这里我们要谈的 Nacos 作为 Spring Cloud Alibaba 的重要组件对微服务的以上优点都有所涵盖，相对于已经发展成熟的 Eureka 而言，在综合性、灵活性上更上一筹，确也在稳定性和自我保护机制上有些不足，所以对于这两种最主流的注册中心来说，使用哪一种还是要根据项目的具体的大小和需求、团队技术栈和规模等因素决定。</p>","autoDesc":true}');export{e as data};
