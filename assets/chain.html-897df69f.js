const e=JSON.parse(`{"key":"v-0ffd9427","path":"/study/design-pattern/chain.html","title":"责任链模式","lang":"zh-CN","frontmatter":{"category":"设计模式","tag":["chain pattern","Java"],"description":"责任链模式 什么是责任链模式 责任链模式（Chain of Responsibility Pattern）它允许你构建一个对象链，每个对象都持有对下一个对象的引用，从而形成一条链。每个对象在收到请求后，可以选择处理请求或将请求传递给链中的下一个对象。 这种模式的核心思想是解耦发送者和接收者，让多个对象都有机会处理请求，而不需要显式指定接收者。请求会沿着链传递，直到有一个对象处理它为止。 角色 Handler（处理者）： 定义一个处理请求的接口，通常包含一个处理请求的方法，并持有对下一个处理者的引用。处理者可以决定是否处理请求，或者将请求传递给链中的下一个处理者。 ConcreteHandler（具体处理者）： 实现处理者接口，在收到请求时判断自己是否能够处理，如果可以处理则处理请求，否则将请求传递给链中的下一个处理者。 Client（客户端）： 创建责任链，并向链的第一个处理者发送请求。","head":[["meta",{"property":"og:url","content":"https://github.com/songbaicheng/songbaicheng.github.io/study/design-pattern/chain.html"}],["meta",{"property":"og:site_name","content":"Baicheng's Blog"}],["meta",{"property":"og:title","content":"责任链模式"}],["meta",{"property":"og:description","content":"责任链模式 什么是责任链模式 责任链模式（Chain of Responsibility Pattern）它允许你构建一个对象链，每个对象都持有对下一个对象的引用，从而形成一条链。每个对象在收到请求后，可以选择处理请求或将请求传递给链中的下一个对象。 这种模式的核心思想是解耦发送者和接收者，让多个对象都有机会处理请求，而不需要显式指定接收者。请求会沿着链传递，直到有一个对象处理它为止。 角色 Handler（处理者）： 定义一个处理请求的接口，通常包含一个处理请求的方法，并持有对下一个处理者的引用。处理者可以决定是否处理请求，或者将请求传递给链中的下一个处理者。 ConcreteHandler（具体处理者）： 实现处理者接口，在收到请求时判断自己是否能够处理，如果可以处理则处理请求，否则将请求传递给链中的下一个处理者。 Client（客户端）： 创建责任链，并向链的第一个处理者发送请求。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-30T03:46:16.000Z"}],["meta",{"property":"article:author","content":"songbaicheng"}],["meta",{"property":"article:tag","content":"chain pattern"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:modified_time","content":"2024-05-30T03:46:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"责任链模式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-30T03:46:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"songbaicheng\\",\\"url\\":\\"https://github.com/songbaicheng\\",\\"email\\":\\"songbaicheng16@163.com\\"}]}"]]},"headers":[{"level":2,"title":"什么是责任链模式","slug":"什么是责任链模式","link":"#什么是责任链模式","children":[{"level":3,"title":"角色","slug":"角色","link":"#角色","children":[]},{"level":3,"title":"优点","slug":"优点","link":"#优点","children":[]},{"level":3,"title":"缺点","slug":"缺点","link":"#缺点","children":[]},{"level":3,"title":"场景","slug":"场景","link":"#场景","children":[]}]},{"level":2,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[{"level":3,"title":"用责任链实现请求参数校验","slug":"用责任链实现请求参数校验","link":"#用责任链实现请求参数校验","children":[]}]}],"git":{"createdTime":1716799772000,"updatedTime":1717040776000,"contributors":[{"name":"songbaicheng","email":"songbaicheng16@163.com","commits":2}]},"readingTime":{"minutes":4.35,"words":1304},"filePathRelative":"study/design-pattern/chain.md","localizedDate":"2024年5月27日","excerpt":"<h1> 责任链模式</h1>\\n<h2> 什么是责任链模式</h2>\\n<p>责任链模式（Chain of Responsibility Pattern）它允许你构建一个对象链，每个对象都持有对下一个对象的引用，从而形成一条链。每个对象在收到请求后，可以选择处理请求或将请求传递给链中的下一个对象。<br>\\n这种模式的核心思想是解耦发送者和接收者，让多个对象都有机会处理请求，而不需要显式指定接收者。请求会沿着链传递，直到有一个对象处理它为止。</p>\\n<h3> 角色</h3>\\n<ul>\\n<li>Handler（处理者）： 定义一个处理请求的接口，通常包含一个处理请求的方法，并持有对下一个处理者的引用。处理者可以决定是否处理请求，或者将请求传递给链中的下一个处理者。</li>\\n<li>ConcreteHandler（具体处理者）： 实现处理者接口，在收到请求时判断自己是否能够处理，如果可以处理则处理请求，否则将请求传递给链中的下一个处理者。</li>\\n<li>Client（客户端）： 创建责任链，并向链的第一个处理者发送请求。</li>\\n</ul>","autoDesc":true}`);export{e as data};
