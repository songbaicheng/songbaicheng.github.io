const t=JSON.parse('{"key":"v-a7555dda","path":"/work-task/development/reflection.html","title":"反射","lang":"zh-CN","frontmatter":{"category":"工作任务","tag":["reflection","Java"],"description":"反射 聊聊反射 基本搜索 Java 学习路线，摆脱基础语法后迈入高级特性的第一步就是注解（Annotations）和反射（Reflection）。当时在学完内置注解、自定义注解、获取类信息、调用方法和访问字段之后，大概清楚这是个搭配起来简化开发的组合，但是这些场景一般都是在框架开发、动态代理、注解处理才会出现，而且使用反射还会还会在一定程度上降低性能，并且在编译时无法进行类型检查，可能会引发运行时异常。不过在一些特殊情况下合理利用反射可以为我们带来灵活性和扩展性。 使用反射我们必须知道的几个核心类和接口： Class 类：Class 类是反射的核心类，它提供了许多方法来获取关于类的信息，如类的名称、修饰符、父类、接口、构造函数、方法、字段等。 Constructor 类：Constructor 类表示类的构造函数，它可以用于创建对象实例。通过 Class 类的 getConstructors() 或 getConstructor() 方法可以获取构造函数对象。 Method 类：Method 类表示类的方法，它可以用于调用方法。通过 Class 类的 getMethods() 或 getMethod() 方法可以获取方法对象。 Field 类：Field 类表示类的字段，它可以用于访问和修改字段的值。通过 Class 类的 getFields() 或 getField() 方法可以获取字段对象。","head":[["meta",{"property":"og:url","content":"https://github.com/songbaicheng/songbaicheng.github.io/work-task/development/reflection.html"}],["meta",{"property":"og:site_name","content":"宋柏成的技术博客"}],["meta",{"property":"og:title","content":"反射"}],["meta",{"property":"og:description","content":"反射 聊聊反射 基本搜索 Java 学习路线，摆脱基础语法后迈入高级特性的第一步就是注解（Annotations）和反射（Reflection）。当时在学完内置注解、自定义注解、获取类信息、调用方法和访问字段之后，大概清楚这是个搭配起来简化开发的组合，但是这些场景一般都是在框架开发、动态代理、注解处理才会出现，而且使用反射还会还会在一定程度上降低性能，并且在编译时无法进行类型检查，可能会引发运行时异常。不过在一些特殊情况下合理利用反射可以为我们带来灵活性和扩展性。 使用反射我们必须知道的几个核心类和接口： Class 类：Class 类是反射的核心类，它提供了许多方法来获取关于类的信息，如类的名称、修饰符、父类、接口、构造函数、方法、字段等。 Constructor 类：Constructor 类表示类的构造函数，它可以用于创建对象实例。通过 Class 类的 getConstructors() 或 getConstructor() 方法可以获取构造函数对象。 Method 类：Method 类表示类的方法，它可以用于调用方法。通过 Class 类的 getMethods() 或 getMethod() 方法可以获取方法对象。 Field 类：Field 类表示类的字段，它可以用于访问和修改字段的值。通过 Class 类的 getFields() 或 getField() 方法可以获取字段对象。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-06T09:18:15.000Z"}],["meta",{"property":"article:author","content":"songbaicheng"}],["meta",{"property":"article:tag","content":"reflection"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:modified_time","content":"2023-06-06T09:18:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"反射\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-06-06T09:18:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"songbaicheng\\",\\"url\\":\\"https://github.com/songbaicheng\\",\\"email\\":\\"songbaicheng16@163.com\\"}]}"]]},"headers":[{"level":2,"title":"聊聊反射","slug":"聊聊反射","link":"#聊聊反射","children":[]},{"level":2,"title":"工作中使用反射的例子","slug":"工作中使用反射的例子","link":"#工作中使用反射的例子","children":[{"level":3,"title":"处理抽象对象的字段数据","slug":"处理抽象对象的字段数据","link":"#处理抽象对象的字段数据","children":[]}]}],"git":{"createdTime":1685602492000,"updatedTime":1686043095000,"contributors":[{"name":"songbaicheng","email":"2524218694@qq.com","commits":2}]},"readingTime":{"minutes":3.65,"words":1094},"filePathRelative":"work-task/development/reflection.md","localizedDate":"2023年6月1日","excerpt":"<h1> 反射</h1>\\n<h2> 聊聊反射</h2>\\n<p>基本搜索 Java 学习路线，摆脱基础语法后迈入高级特性的第一步就是注解（Annotations）和反射（Reflection）。当时在学完内置注解、自定义注解、获取类信息、调用方法和访问字段之后，大概清楚这是个搭配起来简化开发的组合，但是这些场景一般都是在框架开发、动态代理、注解处理才会出现，而且使用反射还会还会在一定程度上降低性能，并且在编译时无法进行类型检查，可能会引发运行时异常。不过在一些特殊情况下合理利用反射可以为我们带来灵活性和扩展性。</p>\\n<p>使用反射我们必须知道的几个核心类和接口：</p>\\n<ul>\\n<li>Class 类：Class 类是反射的核心类，它提供了许多方法来获取关于类的信息，如类的名称、修饰符、父类、接口、构造函数、方法、字段等。</li>\\n<li>Constructor 类：Constructor 类表示类的构造函数，它可以用于创建对象实例。通过 Class 类的 getConstructors() 或 getConstructor() 方法可以获取构造函数对象。</li>\\n<li>Method 类：Method 类表示类的方法，它可以用于调用方法。通过 Class 类的 getMethods() 或 getMethod() 方法可以获取方法对象。</li>\\n<li>Field 类：Field 类表示类的字段，它可以用于访问和修改字段的值。通过 Class 类的 getFields() 或 getField() 方法可以获取字段对象。</li>\\n</ul>","autoDesc":true}');export{t as data};
