const e=JSON.parse(`{"key":"v-a5dce1ee","path":"/study/computer-basis/ads/data-structure/stack-queue.html","title":"栈和队列的应用","lang":"zh-CN","frontmatter":{"star":true,"category":"数据结构","tag":["queue","stack"],"description":"栈和队列的应用 栈在括号匹配的应用 假设表达式中允许包含两种括号：圆括号和方括号，其嵌套的顺序任意，只需要成对匹配即位正确，否则为不正确。 算法思想如下： 初始设置一个空栈，顺序读入括号。 若是右括号，则和栈顶最紧迫的期待的括号消解，如果不能成对消除则不合法，退出程序。 若是左括号，则作为一个新的更紧迫的期待压入栈中。当算法结束时，栈为空，否则不合法。 栈在表达式求值的应用 表达式求值可以结合二叉树进行理解。其中中缀表达式不仅依赖算符的优先级，而且还要处理括号。后缀表达式的运算符在操作数后面，在后缀表达式中已经考虑了运算符的优先级，所以没有括号只有操作数和运算符。通过后缀表达式表示计算过程为：","head":[["meta",{"property":"og:url","content":"https://github.com/songbaicheng/songbaicheng.github.io/study/computer-basis/ads/data-structure/stack-queue.html"}],["meta",{"property":"og:site_name","content":"Baicheng's Blog"}],["meta",{"property":"og:title","content":"栈和队列的应用"}],["meta",{"property":"og:description","content":"栈和队列的应用 栈在括号匹配的应用 假设表达式中允许包含两种括号：圆括号和方括号，其嵌套的顺序任意，只需要成对匹配即位正确，否则为不正确。 算法思想如下： 初始设置一个空栈，顺序读入括号。 若是右括号，则和栈顶最紧迫的期待的括号消解，如果不能成对消除则不合法，退出程序。 若是左括号，则作为一个新的更紧迫的期待压入栈中。当算法结束时，栈为空，否则不合法。 栈在表达式求值的应用 表达式求值可以结合二叉树进行理解。其中中缀表达式不仅依赖算符的优先级，而且还要处理括号。后缀表达式的运算符在操作数后面，在后缀表达式中已经考虑了运算符的优先级，所以没有括号只有操作数和运算符。通过后缀表达式表示计算过程为："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-03T15:21:47.000Z"}],["meta",{"property":"article:author","content":"songbaicheng"}],["meta",{"property":"article:tag","content":"queue"}],["meta",{"property":"article:tag","content":"stack"}],["meta",{"property":"article:modified_time","content":"2023-08-03T15:21:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"栈和队列的应用\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-08-03T15:21:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"songbaicheng\\",\\"url\\":\\"https://github.com/songbaicheng\\",\\"email\\":\\"songbaicheng16@163.com\\"}]}"]]},"headers":[{"level":2,"title":"栈在括号匹配的应用","slug":"栈在括号匹配的应用","link":"#栈在括号匹配的应用","children":[]},{"level":2,"title":"栈在表达式求值的应用","slug":"栈在表达式求值的应用","link":"#栈在表达式求值的应用","children":[]},{"level":2,"title":"栈在递归中的应用","slug":"栈在递归中的应用","link":"#栈在递归中的应用","children":[]},{"level":2,"title":"队列在层次遍历中的应用","slug":"队列在层次遍历中的应用","link":"#队列在层次遍历中的应用","children":[]},{"level":2,"title":"队列在计算机系统中的应用","slug":"队列在计算机系统中的应用","link":"#队列在计算机系统中的应用","children":[]}],"git":{"createdTime":1690800825000,"updatedTime":1691076107000,"contributors":[{"name":"songbaicheng","email":"2524218694@qq.com","commits":3}]},"readingTime":{"minutes":3.72,"words":1117},"filePathRelative":"study/computer-basis/ads/data-structure/stack-queue.md","localizedDate":"2023年7月31日","excerpt":"<h1> 栈和队列的应用</h1>\\n<h2> 栈在括号匹配的应用</h2>\\n<p>假设表达式中允许包含两种括号：圆括号和方括号，其嵌套的顺序任意，只需要成对匹配即位正确，否则为不正确。</p>\\n<p>算法思想如下：</p>\\n<ol>\\n<li>初始设置一个空栈，顺序读入括号。</li>\\n<li>若是右括号，则和栈顶最紧迫的期待的括号消解，如果不能成对消除则不合法，退出程序。</li>\\n<li>若是左括号，则作为一个新的更紧迫的期待压入栈中。当算法结束时，栈为空，否则不合法。</li>\\n</ol>\\n<h2> 栈在表达式求值的应用</h2>\\n<p>表达式求值可以结合二叉树进行理解。其中中缀表达式不仅依赖算符的优先级，而且还要处理括号。后缀表达式的运算符在操作数后面，在后缀表达式中已经考虑了运算符的优先级，所以没有括号只有操作数和运算符。通过后缀表达式表示计算过程为：</p>","autoDesc":true}`);export{e as data};
