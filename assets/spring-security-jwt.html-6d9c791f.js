const e=JSON.parse('{"key":"v-885f3b64","path":"/study/backend/java/spring/spring-security-jwt.html","title":"Spring Security + JWT","lang":"zh-CN","frontmatter":{"star":true,"category":"Spring Boot","tag":["Spring Security","JWT"],"description":"Spring Security + JWT 前言 说到 JWT（JSON Web Token），我们首先要知道 Token 是什么，想要知道 Token 是什么，我们就得先谈一下早期 Session 登录的时代。 用户通过表单或其他方式提交用户名和密码。 服务器接收到登录请求，验证用户提供的用户名和密码是否有效。 如果验证通过，服务器会为该用户创建一个唯一的会话标识符（Session ID）。 服务器将该会话标识符存储在服务器端，通常保存在内存中或持久化到数据库中。 服务器将会话标识符发送回客户端，通常通过设置一个名为\\"JSESSIONID\\"的 Cookie。 客户端收到会话标识符后，将其保存在客户端的 Cookie 中。 客户端之后的每个请求都会自动附带会话标识符，通常通过 Cookie 或其他方式（如 URL 参数）。 服务器在接收到请求时，会根据会话标识符查找对应的会话信息。 如果会话有效并且用户已经登录，则服务器将请求视为已经通过身份验证。 如果会话无效或已过期，服务器可能要求用户重新进行身份验证或重定向到登录页面。","head":[["meta",{"property":"og:url","content":"https://github.com/songbaicheng/songbaicheng.github.io/study/backend/java/spring/spring-security-jwt.html"}],["meta",{"property":"og:site_name","content":"宋柏成的技术博客"}],["meta",{"property":"og:title","content":"Spring Security + JWT"}],["meta",{"property":"og:description","content":"Spring Security + JWT 前言 说到 JWT（JSON Web Token），我们首先要知道 Token 是什么，想要知道 Token 是什么，我们就得先谈一下早期 Session 登录的时代。 用户通过表单或其他方式提交用户名和密码。 服务器接收到登录请求，验证用户提供的用户名和密码是否有效。 如果验证通过，服务器会为该用户创建一个唯一的会话标识符（Session ID）。 服务器将该会话标识符存储在服务器端，通常保存在内存中或持久化到数据库中。 服务器将会话标识符发送回客户端，通常通过设置一个名为\\"JSESSIONID\\"的 Cookie。 客户端收到会话标识符后，将其保存在客户端的 Cookie 中。 客户端之后的每个请求都会自动附带会话标识符，通常通过 Cookie 或其他方式（如 URL 参数）。 服务器在接收到请求时，会根据会话标识符查找对应的会话信息。 如果会话有效并且用户已经登录，则服务器将请求视为已经通过身份验证。 如果会话无效或已过期，服务器可能要求用户重新进行身份验证或重定向到登录页面。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-01T03:02:52.000Z"}],["meta",{"property":"article:author","content":"songbaicheng"}],["meta",{"property":"article:tag","content":"Spring Security"}],["meta",{"property":"article:tag","content":"JWT"}],["meta",{"property":"article:modified_time","content":"2023-07-01T03:02:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Security + JWT\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-01T03:02:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"songbaicheng\\",\\"url\\":\\"https://github.com/songbaicheng\\",\\"email\\":\\"songbaicheng16@163.com\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]}],"git":{"createdTime":1688180572000,"updatedTime":1688180572000,"contributors":[{"name":"songbaicheng","email":"2524218694@qq.com","commits":1}]},"readingTime":{"minutes":3.31,"words":994},"filePathRelative":"study/backend/java/spring/spring-security-jwt.md","localizedDate":"2023年7月1日","excerpt":"<h1> Spring Security + JWT</h1>\\n<h2> 前言</h2>\\n<p>说到 JWT（JSON Web Token），我们首先要知道 Token 是什么，想要知道 Token 是什么，我们就得先谈一下早期 Session 登录的时代。</p>\\n<ol>\\n<li>用户通过表单或其他方式提交用户名和密码。</li>\\n<li>服务器接收到登录请求，验证用户提供的用户名和密码是否有效。</li>\\n<li>如果验证通过，服务器会为该用户创建一个唯一的会话标识符（Session ID）。</li>\\n<li>服务器将该会话标识符存储在服务器端，通常保存在内存中或持久化到数据库中。</li>\\n<li>服务器将会话标识符发送回客户端，通常通过设置一个名为\\"JSESSIONID\\"的 Cookie。</li>\\n<li>客户端收到会话标识符后，将其保存在客户端的 Cookie 中。</li>\\n<li>客户端之后的每个请求都会自动附带会话标识符，通常通过 Cookie 或其他方式（如 URL 参数）。</li>\\n<li>服务器在接收到请求时，会根据会话标识符查找对应的会话信息。</li>\\n<li>如果会话有效并且用户已经登录，则服务器将请求视为已经通过身份验证。</li>\\n<li>如果会话无效或已过期，服务器可能要求用户重新进行身份验证或重定向到登录页面。</li>\\n</ol>","autoDesc":true}');export{e as data};
