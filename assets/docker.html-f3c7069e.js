import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as h,c as l,a,n,g as c,b as e,d as r,e as t}from"./app-0eee747d.js";const u={},p=t('<h1 id="docker" tabindex="-1"><a class="header-anchor" href="#docker" aria-hidden="true">#</a> Docker</h1><p>在云计算的推动下，虚拟化技术是大势所趋，Docker 是作为运维工程师及后端开发人员都应该了解的技术，简化环境搭建、节省开支、持续交付、部署和部署。</p><p>学习后我们再也不用受各种安装环境时提示安装失败的折磨，并且在微服务的项目中我们所开发的项目也都已经部署在容器，这是我们面向云原生的怀抱、学习 k8s 之前必须要学会的知识点。</p><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><p>Docker 包括三个基本概念:</p><ul><li>镜像（Image）：相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</li><li>容器（Container）：镜像和容器的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li><li>仓库（Repository）：仓库可看成一个代码控制中心，用来保存镜像。</li></ul><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><h3 id="下载并安装" tabindex="-1"><a class="header-anchor" href="#下载并安装" aria-hidden="true">#</a> 下载并安装</h3><p>根据官方文档下载指定操作系统的安装包安装即可。</p>',9),m=e("h3",{id:"加速器",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#加速器","aria-hidden":"true"},"#"),r(" 加速器")],-1),b=e("p",null,"默认的统一镜像仓库是 DockerHub ，不过国内从 DockerHub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。Docker 官方和国内很多云服务商都提供了国内加速器服务，例如：",-1),k={href:"https://docker.mirrors.ustc.edu.cn/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://hub-mirror.c.163.com/",target:"_blank",rel:"noopener noreferrer"},f=e("li",null,"阿里云：https://<你的ID>.mirror.aliyuncs.com(需要登录个人阿里云控制台查看)",-1),g={href:"https://reg-mirror.qiniu.com",target:"_blank",rel:"noopener noreferrer"},v=t(`<h3 id="配置加速器" tabindex="-1"><a class="header-anchor" href="#配置加速器" aria-hidden="true">#</a> 配置加速器</h3><p>如果是可视化的界面在 Docker 的 Docker Engine 中的 <code>registry-mirrors</code> 中添加加速器地址即可；对于使用 systemd 的系统，请在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件）。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{&quot;registry-mirrors&quot;:[&quot;https://reg-mirror.qiniu.com/&quot;]}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="检查加速器是否生效" tabindex="-1"><a class="header-anchor" href="#检查加速器是否生效" aria-hidden="true">#</a> 检查加速器是否生效</h3><p>检查加速器是否生效配置加速器之后，如果拉取镜像仍然十分缓慢，请手动检查加速器配置是否生效，在命令行执行 <code>docker info</code>，如果从结果中看到了如下内容，说明配置成功。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">docker</span> info
Registry Mirrors:
    https://reg-mirror.qiniu.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h2><p>感觉所有编程技术的第一课都是 Hello World ，Docker 也不例外，这里我们拿一个输出 Hello World 的 Ubuntu 镜像来作为我们运行的第一个例子。</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>runoob@runoob:~$ docker run ubuntu:15.10 /bin/echo &quot;Hello World&quot;
Hello World
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其实学过 shell 脚本的人不难看出，其实这里的输出其实就是相当于 <code>echo &#39;Hello World&#39;</code>，而其他命令的作用就是帮我们运行一个 Ubuntu 镜像，使它变成一个可执行的容器然后来运行我们的命令，<code>docker run [container name]</code> 这个命令就是运行指定容器的命令，而这个命令也可以指定很多参数，比如；</p><p>-t: 在新容器内指定一个伪终端或终端。<br> -i: 允许你对容器内的标准输入 (STDIN) 进行交互。</p><p>一般我们使用这两个命令就是在第一次启动容器的时候直接进入到容器内部进行编辑，当然如果你第一次只是想运行出一个镜像并不想和产生的容器产生交互，就可以使用后台模式启动，即 <code>-d</code> 参数，使用 <code>-d</code> 参数运行后的容器会返回一串 container id，当然我们也可以用 <code>docker ps</code> 来查看正在运行的容器。</p><p>如果我们想要停止一些容器，就可以先用 <code>docker ps</code> 来查看启动容器的 id，然后用 <code>docker stop [container id]</code> 来停止容器，停止后的容器再使用 <code>docker ps</code> 已经查看不到了，当然并不是被删除了，你可以使用 <code>docker ps -a</code> 查看全部创建的容器。</p><h2 id="容器命令" tabindex="-1"><a class="header-anchor" href="#容器命令" aria-hidden="true">#</a> 容器命令</h2><h2 id="镜像分层" tabindex="-1"><a class="header-anchor" href="#镜像分层" aria-hidden="true">#</a> 镜像分层</h2><h2 id="私服库" tabindex="-1"><a class="header-anchor" href="#私服库" aria-hidden="true">#</a> 私服库</h2><h2 id="数据卷" tabindex="-1"><a class="header-anchor" href="#数据卷" aria-hidden="true">#</a> 数据卷</h2><h2 id="dockerfile" tabindex="-1"><a class="header-anchor" href="#dockerfile" aria-hidden="true">#</a> DockerFile</h2><p>虚悬镜像</p><h2 id="容器网络" tabindex="-1"><a class="header-anchor" href="#容器网络" aria-hidden="true">#</a> 容器网络</h2><h2 id="容器编排" tabindex="-1"><a class="header-anchor" href="#容器编排" aria-hidden="true">#</a> 容器编排</h2><h2 id="可视化工具" tabindex="-1"><a class="header-anchor" href="#可视化工具" aria-hidden="true">#</a> 可视化工具</h2>`,22),x=e("h2",{id:"cig-监控",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#cig-监控","aria-hidden":"true"},"#"),r(" CIG 监控")],-1);function D(q,y){const o=i("VPCard"),d=i("ExternalLinkIcon");return h(),l("div",null,[p,a(o,n(c({title:"Docker 官网",desc:"点击跳转官网查看详细内容",logo:"/assets/images/study/maintenance/docker/docker.png",link:"https://www.docker.com/",color:"rgba(173, 216, 590, 0.15)"})),null,16),m,b,e("ul",null,[e("li",null,[r("科大镜像："),e("a",k,[r("https://docker.mirrors.ustc.edu.cn/"),a(d)])]),e("li",null,[r("网易："),e("a",_,[r("https://hub-mirror.c.163.com/"),a(d)])]),f,e("li",null,[r("七牛云加速器："),e("a",g,[r("https://reg-mirror.qiniu.com"),a(d)])])]),v,a(o,n(c({title:"portainer 官网",desc:"点击跳转官网查看详细内容",logo:"/assets/images/study/maintenance/docker/portainer.svg",link:"https://www.portainer.io/",color:"rgba(173, 216, 590, 0.15)"})),null,16),x])}const I=s(u,[["render",D],["__file","docker.html.vue"]]);export{I as default};
